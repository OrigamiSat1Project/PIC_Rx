

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 23 18:03:24 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	intentry,global,class=CODE,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F887 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0013                     	;# 
   108  0014                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001D                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  0087                     	;# 
   126  0088                     	;# 
   127  0089                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  008F                     	;# 
   132  0090                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0093                     	;# 
   137  0093                     	;# 
   138  0094                     	;# 
   139  0095                     	;# 
   140  0096                     	;# 
   141  0097                     	;# 
   142  0098                     	;# 
   143  0099                     	;# 
   144  009A                     	;# 
   145  009B                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009E                     	;# 
   149  009F                     	;# 
   150  0105                     	;# 
   151  0107                     	;# 
   152  0108                     	;# 
   153  0109                     	;# 
   154  010C                     	;# 
   155  010C                     	;# 
   156  010D                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  0185                     	;# 
   160  0187                     	;# 
   161  0188                     	;# 
   162  0189                     	;# 
   163  018C                     	;# 
   164  018D                     	;# 
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  000E                     	;# 
   181  000F                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0013                     	;# 
   186  0014                     	;# 
   187  0015                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  001D                     	;# 
   198  001E                     	;# 
   199  001F                     	;# 
   200  0081                     	;# 
   201  0085                     	;# 
   202  0086                     	;# 
   203  0087                     	;# 
   204  0088                     	;# 
   205  0089                     	;# 
   206  008C                     	;# 
   207  008D                     	;# 
   208  008E                     	;# 
   209  008F                     	;# 
   210  0090                     	;# 
   211  0091                     	;# 
   212  0092                     	;# 
   213  0093                     	;# 
   214  0093                     	;# 
   215  0093                     	;# 
   216  0094                     	;# 
   217  0095                     	;# 
   218  0096                     	;# 
   219  0097                     	;# 
   220  0098                     	;# 
   221  0099                     	;# 
   222  009A                     	;# 
   223  009B                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  0105                     	;# 
   229  0107                     	;# 
   230  0108                     	;# 
   231  0109                     	;# 
   232  010C                     	;# 
   233  010C                     	;# 
   234  010D                     	;# 
   235  010E                     	;# 
   236  010F                     	;# 
   237  0185                     	;# 
   238  0187                     	;# 
   239  0188                     	;# 
   240  0189                     	;# 
   241  018C                     	;# 
   242  018D                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000D                     	;# 
   257  000E                     	;# 
   258  000E                     	;# 
   259  000F                     	;# 
   260  0010                     	;# 
   261  0011                     	;# 
   262  0012                     	;# 
   263  0013                     	;# 
   264  0014                     	;# 
   265  0015                     	;# 
   266  0015                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001B                     	;# 
   274  001C                     	;# 
   275  001D                     	;# 
   276  001E                     	;# 
   277  001F                     	;# 
   278  0081                     	;# 
   279  0085                     	;# 
   280  0086                     	;# 
   281  0087                     	;# 
   282  0088                     	;# 
   283  0089                     	;# 
   284  008C                     	;# 
   285  008D                     	;# 
   286  008E                     	;# 
   287  008F                     	;# 
   288  0090                     	;# 
   289  0091                     	;# 
   290  0092                     	;# 
   291  0093                     	;# 
   292  0093                     	;# 
   293  0093                     	;# 
   294  0094                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0098                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  009F                     	;# 
   306  0105                     	;# 
   307  0107                     	;# 
   308  0108                     	;# 
   309  0109                     	;# 
   310  010C                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  010F                     	;# 
   315  0185                     	;# 
   316  0187                     	;# 
   317  0188                     	;# 
   318  0189                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  0000                     	;# 
   322  0001                     	;# 
   323  0002                     	;# 
   324  0003                     	;# 
   325  0004                     	;# 
   326  0005                     	;# 
   327  0006                     	;# 
   328  0007                     	;# 
   329  0008                     	;# 
   330  0009                     	;# 
   331  000A                     	;# 
   332  000B                     	;# 
   333  000C                     	;# 
   334  000D                     	;# 
   335  000E                     	;# 
   336  000E                     	;# 
   337  000F                     	;# 
   338  0010                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0013                     	;# 
   342  0014                     	;# 
   343  0015                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0017                     	;# 
   347  0018                     	;# 
   348  0019                     	;# 
   349  001A                     	;# 
   350  001B                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  001D                     	;# 
   354  001E                     	;# 
   355  001F                     	;# 
   356  0081                     	;# 
   357  0085                     	;# 
   358  0086                     	;# 
   359  0087                     	;# 
   360  0088                     	;# 
   361  0089                     	;# 
   362  008C                     	;# 
   363  008D                     	;# 
   364  008E                     	;# 
   365  008F                     	;# 
   366  0090                     	;# 
   367  0091                     	;# 
   368  0092                     	;# 
   369  0093                     	;# 
   370  0093                     	;# 
   371  0093                     	;# 
   372  0094                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0098                     	;# 
   377  0099                     	;# 
   378  009A                     	;# 
   379  009B                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  0105                     	;# 
   385  0107                     	;# 
   386  0108                     	;# 
   387  0109                     	;# 
   388  010C                     	;# 
   389  010C                     	;# 
   390  010D                     	;# 
   391  010E                     	;# 
   392  010F                     	;# 
   393  0185                     	;# 
   394  0187                     	;# 
   395  0188                     	;# 
   396  0189                     	;# 
   397  018C                     	;# 
   398  018D                     	;# 
   399  0000                     	;# 
   400  0001                     	;# 
   401  0002                     	;# 
   402  0003                     	;# 
   403  0004                     	;# 
   404  0005                     	;# 
   405  0006                     	;# 
   406  0007                     	;# 
   407  0008                     	;# 
   408  0009                     	;# 
   409  000A                     	;# 
   410  000B                     	;# 
   411  000C                     	;# 
   412  000D                     	;# 
   413  000E                     	;# 
   414  000E                     	;# 
   415  000F                     	;# 
   416  0010                     	;# 
   417  0011                     	;# 
   418  0012                     	;# 
   419  0013                     	;# 
   420  0014                     	;# 
   421  0015                     	;# 
   422  0015                     	;# 
   423  0016                     	;# 
   424  0017                     	;# 
   425  0018                     	;# 
   426  0019                     	;# 
   427  001A                     	;# 
   428  001B                     	;# 
   429  001B                     	;# 
   430  001C                     	;# 
   431  001D                     	;# 
   432  001E                     	;# 
   433  001F                     	;# 
   434  0081                     	;# 
   435  0085                     	;# 
   436  0086                     	;# 
   437  0087                     	;# 
   438  0088                     	;# 
   439  0089                     	;# 
   440  008C                     	;# 
   441  008D                     	;# 
   442  008E                     	;# 
   443  008F                     	;# 
   444  0090                     	;# 
   445  0091                     	;# 
   446  0092                     	;# 
   447  0093                     	;# 
   448  0093                     	;# 
   449  0093                     	;# 
   450  0094                     	;# 
   451  0095                     	;# 
   452  0096                     	;# 
   453  0097                     	;# 
   454  0098                     	;# 
   455  0099                     	;# 
   456  009A                     	;# 
   457  009B                     	;# 
   458  009C                     	;# 
   459  009D                     	;# 
   460  009E                     	;# 
   461  009F                     	;# 
   462  0105                     	;# 
   463  0107                     	;# 
   464  0108                     	;# 
   465  0109                     	;# 
   466  010C                     	;# 
   467  010C                     	;# 
   468  010D                     	;# 
   469  010E                     	;# 
   470  010F                     	;# 
   471  0185                     	;# 
   472  0187                     	;# 
   473  0188                     	;# 
   474  0189                     	;# 
   475  018C                     	;# 
   476  018D                     	;# 
   477  0000                     	;# 
   478  0001                     	;# 
   479  0002                     	;# 
   480  0003                     	;# 
   481  0004                     	;# 
   482  0005                     	;# 
   483  0006                     	;# 
   484  0007                     	;# 
   485  0008                     	;# 
   486  0009                     	;# 
   487  000A                     	;# 
   488  000B                     	;# 
   489  000C                     	;# 
   490  000D                     	;# 
   491  000E                     	;# 
   492  000E                     	;# 
   493  000F                     	;# 
   494  0010                     	;# 
   495  0011                     	;# 
   496  0012                     	;# 
   497  0013                     	;# 
   498  0014                     	;# 
   499  0015                     	;# 
   500  0015                     	;# 
   501  0016                     	;# 
   502  0017                     	;# 
   503  0018                     	;# 
   504  0019                     	;# 
   505  001A                     	;# 
   506  001B                     	;# 
   507  001B                     	;# 
   508  001C                     	;# 
   509  001D                     	;# 
   510  001E                     	;# 
   511  001F                     	;# 
   512  0081                     	;# 
   513  0085                     	;# 
   514  0086                     	;# 
   515  0087                     	;# 
   516  0088                     	;# 
   517  0089                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  008F                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0093                     	;# 
   526  0093                     	;# 
   527  0093                     	;# 
   528  0094                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0098                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009C                     	;# 
   537  009D                     	;# 
   538  009E                     	;# 
   539  009F                     	;# 
   540  0105                     	;# 
   541  0107                     	;# 
   542  0108                     	;# 
   543  0109                     	;# 
   544  010C                     	;# 
   545  010C                     	;# 
   546  010D                     	;# 
   547  010E                     	;# 
   548  010F                     	;# 
   549  0185                     	;# 
   550  0187                     	;# 
   551  0188                     	;# 
   552  0189                     	;# 
   553  018C                     	;# 
   554  018D                     	;# 
   555  0000                     	;# 
   556  0001                     	;# 
   557  0002                     	;# 
   558  0003                     	;# 
   559  0004                     	;# 
   560  0005                     	;# 
   561  0006                     	;# 
   562  0007                     	;# 
   563  0008                     	;# 
   564  0009                     	;# 
   565  000A                     	;# 
   566  000B                     	;# 
   567  000C                     	;# 
   568  000D                     	;# 
   569  000E                     	;# 
   570  000E                     	;# 
   571  000F                     	;# 
   572  0010                     	;# 
   573  0011                     	;# 
   574  0012                     	;# 
   575  0013                     	;# 
   576  0014                     	;# 
   577  0015                     	;# 
   578  0015                     	;# 
   579  0016                     	;# 
   580  0017                     	;# 
   581  0018                     	;# 
   582  0019                     	;# 
   583  001A                     	;# 
   584  001B                     	;# 
   585  001B                     	;# 
   586  001C                     	;# 
   587  001D                     	;# 
   588  001E                     	;# 
   589  001F                     	;# 
   590  0081                     	;# 
   591  0085                     	;# 
   592  0086                     	;# 
   593  0087                     	;# 
   594  0088                     	;# 
   595  0089                     	;# 
   596  008C                     	;# 
   597  008D                     	;# 
   598  008E                     	;# 
   599  008F                     	;# 
   600  0090                     	;# 
   601  0091                     	;# 
   602  0092                     	;# 
   603  0093                     	;# 
   604  0093                     	;# 
   605  0093                     	;# 
   606  0094                     	;# 
   607  0095                     	;# 
   608  0096                     	;# 
   609  0097                     	;# 
   610  0098                     	;# 
   611  0099                     	;# 
   612  009A                     	;# 
   613  009B                     	;# 
   614  009C                     	;# 
   615  009D                     	;# 
   616  009E                     	;# 
   617  009F                     	;# 
   618  0105                     	;# 
   619  0107                     	;# 
   620  0108                     	;# 
   621  0109                     	;# 
   622  010C                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  0185                     	;# 
   628  0187                     	;# 
   629  0188                     	;# 
   630  0189                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0008                     	;# 
   642  0009                     	;# 
   643  000A                     	;# 
   644  000B                     	;# 
   645  000C                     	;# 
   646  000D                     	;# 
   647  000E                     	;# 
   648  000E                     	;# 
   649  000F                     	;# 
   650  0010                     	;# 
   651  0011                     	;# 
   652  0012                     	;# 
   653  0013                     	;# 
   654  0014                     	;# 
   655  0015                     	;# 
   656  0015                     	;# 
   657  0016                     	;# 
   658  0017                     	;# 
   659  0018                     	;# 
   660  0019                     	;# 
   661  001A                     	;# 
   662  001B                     	;# 
   663  001B                     	;# 
   664  001C                     	;# 
   665  001D                     	;# 
   666  001E                     	;# 
   667  001F                     	;# 
   668  0081                     	;# 
   669  0085                     	;# 
   670  0086                     	;# 
   671  0087                     	;# 
   672  0088                     	;# 
   673  0089                     	;# 
   674  008C                     	;# 
   675  008D                     	;# 
   676  008E                     	;# 
   677  008F                     	;# 
   678  0090                     	;# 
   679  0091                     	;# 
   680  0092                     	;# 
   681  0093                     	;# 
   682  0093                     	;# 
   683  0093                     	;# 
   684  0094                     	;# 
   685  0095                     	;# 
   686  0096                     	;# 
   687  0097                     	;# 
   688  0098                     	;# 
   689  0099                     	;# 
   690  009A                     	;# 
   691  009B                     	;# 
   692  009C                     	;# 
   693  009D                     	;# 
   694  009E                     	;# 
   695  009F                     	;# 
   696  0105                     	;# 
   697  0107                     	;# 
   698  0108                     	;# 
   699  0109                     	;# 
   700  010C                     	;# 
   701  010C                     	;# 
   702  010D                     	;# 
   703  010E                     	;# 
   704  010F                     	;# 
   705  0185                     	;# 
   706  0187                     	;# 
   707  0188                     	;# 
   708  0189                     	;# 
   709  018C                     	;# 
   710  018D                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  000E                     	;# 
   727  000F                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0014                     	;# 
   733  0015                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001D                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  0081                     	;# 
   747  0085                     	;# 
   748  0086                     	;# 
   749  0087                     	;# 
   750  0088                     	;# 
   751  0089                     	;# 
   752  008C                     	;# 
   753  008D                     	;# 
   754  008E                     	;# 
   755  008F                     	;# 
   756  0090                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0093                     	;# 
   760  0093                     	;# 
   761  0093                     	;# 
   762  0094                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0098                     	;# 
   767  0099                     	;# 
   768  009A                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  009F                     	;# 
   774  0105                     	;# 
   775  0107                     	;# 
   776  0108                     	;# 
   777  0109                     	;# 
   778  010C                     	;# 
   779  010C                     	;# 
   780  010D                     	;# 
   781  010E                     	;# 
   782  010F                     	;# 
   783  0185                     	;# 
   784  0187                     	;# 
   785  0188                     	;# 
   786  0189                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789                           
   790                           	psect	idataBANK1
   791  0886                     __pidataBANK1:	
   792                           
   793                           ;initializer for ResetFreq@F1708
   794  0886  3402               	retlw	2
   795  0887  3400               	retlw	0
   796  0888  3404               	retlw	4
   797  0889  3400               	retlw	0
   798  088A  3408               	retlw	8
   799  088B  3400               	retlw	0
   800  088C  3408               	retlw	8
   801  088D  3400               	retlw	0
   802  088E  3407               	retlw	7
   803  088F  3400               	retlw	0
   804                           
   805                           ;initializer for ResetFreq@F1706
   806  0890  3400               	retlw	0
   807  0891  3400               	retlw	0
   808  0892  3401               	retlw	1
   809  0893  3400               	retlw	0
   810  0894  3407               	retlw	7
   811  0895  3400               	retlw	0
   812  0896  3404               	retlw	4
   813  0897  3400               	retlw	0
   814  0898  3407               	retlw	7
   815  0899  3400               	retlw	0
   816                           
   817                           ;initializer for ResetFreq@F1704
   818  089A  3408               	retlw	8
   819  089B  3400               	retlw	0
   820  089C  3407               	retlw	7
   821  089D  3400               	retlw	0
   822  089E  3403               	retlw	3
   823  089F  3400               	retlw	0
   824  08A0  3400               	retlw	0
   825  08A1  3400               	retlw	0
   826  08A2  3400               	retlw	0
   827  08A3  3400               	retlw	0
   828                           
   829                           ;initializer for _FMRX_Nref
   830  08A4  3400               	retlw	0
   831  08A5  340A               	retlw	10
   832                           
   833                           ;initializer for _CWTX_Nref
   834  08A6  34A0               	retlw	160
   835  08A7  3400               	retlw	0
   836                           
   837                           ;initializer for _FMTX_Nref
   838  08A8  3400               	retlw	0
   839  08A9  340A               	retlw	10
   840                           
   841                           	psect	strings
   842  1000                     __pstrings:	
   843  1000                     stringtab:	
   844  1000                     __stringtab:	
   845  1000                     stringcode:	
   846                           ;	String table - string pointers are 1 byte each
   847                           
   848  1000                     stringdir:	
   849  1000  3010               	movlw	high stringdir
   850  1001  008A               	movwf	10
   851  1002  0804               	movf	4,w
   852  1003  0A84               	incf	4,f
   853  1004  0782               	addwf	2,f
   854  1005                     __stringbase:	
   855  1005  3400               	retlw	0
   856  1006                     __end_of__stringtab:	
   857  1006                     _commandSize:	
   858  1006  3420               	retlw	32
   859  1007  3400               	retlw	0
   860  1008                     __end_of_commandSize:	
   861  000E                     _TMR1	set	14
   862  0010                     _T1CONbits	set	16
   863  000C                     _PIR1bits	set	12
   864  000B                     _INTCONbits	set	11
   865  0005                     _PORTAbits	set	5
   866  0008                     _PORTDbits	set	8
   867  0009                     _PORTEbits	set	9
   868  0013                     _SSPBUF	set	19
   869  0014                     _SSPCON	set	20
   870  0003                     _STATUS	set	3
   871  0009                     _PORTE	set	9
   872  0008                     _PORTD	set	8
   873  0007                     _PORTC	set	7
   874  0006                     _PORTB	set	6
   875  0005                     _PORTA	set	5
   876  0019                     _TXREG	set	25
   877  001A                     _RCREG	set	26
   878  0029                     _RA1	set	41
   879  0034                     _RB4	set	52
   880  0032                     _RB2	set	50
   881  0035                     _RB5	set	53
   882  003D                     _RC5	set	61
   883  0064                     _TXIF	set	100
   884  00C1                     _OERR	set	193
   885  00C2                     _FERR	set	194
   886  00C6                     _RX9	set	198
   887  0065                     _RCIF	set	101
   888  00C5                     _SREN	set	197
   889  00C4                     _CREN	set	196
   890  00C7                     _SPEN	set	199
   891  008C                     _PIE1bits	set	140
   892  0081                     _OPTION_REGbits	set	129
   893  0094                     _SSPSTAT	set	148
   894  0093                     _SSPADD	set	147
   895  0091                     _SSPCON2	set	145
   896  0089                     _TRISE	set	137
   897  0088                     _TRISD	set	136
   898  0087                     _TRISC	set	135
   899  0086                     _TRISB	set	134
   900  0085                     _TRISA	set	133
   901  0099                     _SPBRG	set	153
   902  048C                     _ACKEN	set	1164
   903  048D                     _ACKDT	set	1165
   904  048B                     _RCEN	set	1163
   905  048A                     _PEN	set	1162
   906  0489                     _RSEN	set	1161
   907  0488                     _SEN	set	1160
   908  04C5                     _TXEN	set	1221
   909  04C6                     _TX9	set	1222
   910  0465                     _RCIE	set	1125
   911  0464                     _TXIE	set	1124
   912  04C4                     _SYNC	set	1220
   913  04C2                     _BRGH	set	1218
   914  0189                     _ANSELH	set	393
   915  0188                     _ANSEL	set	392
   916  1008                     STR_7:	
   917  1008  344A               	retlw	74	;'J'
   918  1009  3451               	retlw	81	;'Q'
   919  100A  3431               	retlw	49	;'1'
   920  100B  345A               	retlw	90	;'Z'
   921  100C  3448               	retlw	72	;'H'
   922  100D  3458               	retlw	88	;'X'
   923  100E  3400               	retlw	0
   924  100F                     STR_1:	
   925  100F  344A               	retlw	74	;'J'
   926  1010  3451               	retlw	81	;'Q'
   927  1011  3431               	retlw	49	;'1'
   928  1012  3459               	retlw	89	;'Y'
   929  1013  3443               	retlw	67	;'C'
   930  1014  345A               	retlw	90	;'Z'
   931  1015  3400               	retlw	0
   932  1008                     
   933                           ; #config settings
   934  0000                     
   935                           	psect	cinit
   936  0015                     start_initialization:	
   937  0015                     __initialization:	
   938                           
   939                           ; Initialize objects allocated to BANK1
   940  0015  1383               	bcf	3,7	;select IRP bank0
   941  0016  30EC               	movlw	low (__pdataBANK1+36)
   942  0017  00FD               	movwf	btemp+-1
   943  0018  3008               	movlw	high __pidataBANK1
   944  0019  00FE               	movwf	btemp
   945  001A  3086               	movlw	low __pidataBANK1
   946  001B  00FF               	movwf	btemp+1
   947  001C  30C8               	movlw	low __pdataBANK1
   948  001D  0084               	movwf	4
   949  001E  160A  118A  27F3  120A  118A  	fcall	init_ram0
   950                           
   951                           ; Clear objects allocated to BANK3
   952  0023  1783               	bsf	3,7	;select IRP bank2
   953  0024  3090               	movlw	low __pbssBANK3
   954  0025  0084               	movwf	4
   955  0026  30D2               	movlw	low (__pbssBANK3+66)
   956  0027  160A  118A  27E7   	fcall	clear_ram0
   957                           
   958                           ; Clear objects allocated to BANK1
   959  002A  1683               	bsf	3,5	;RP0=1, select bank1
   960  002B  1303               	bcf	3,6	;RP1=0, select bank1
   961  002C  01EC               	clrf	__pbssBANK1& (0+127)
   962  002D  01ED               	clrf	(__pbssBANK1+1)& (0+127)
   963  002E  01EE               	clrf	(__pbssBANK1+2)& (0+127)
   964  002F  01EF               	clrf	(__pbssBANK1+3)& (0+127)
   965                           
   966                           ; Clear objects allocated to BANK0
   967  0030  1283               	bcf	3,5	;RP0=0, select bank0
   968  0031  1303               	bcf	3,6	;RP1=0, select bank0
   969  0032  01EF               	clrf	__pbssBANK0& (0+127)
   970                           
   971                           ; Clear objects allocated to COMMON
   972  0033  01F0               	clrf	__pbssCOMMON& (0+127)
   973  0034  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   974  0035  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   975  0036  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   976  0037  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   977  0038  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   978  0039  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
   979  003A                     end_of_initialization:	
   980                           ;End of C runtime variable initialization code
   981                           
   982  003A                     __end_of__initialization:	
   983  003A  0183               	clrf	3
   984  003B  120A  158A  2ECF   	ljmp	_main	;jump to C main() function
   985                           
   986                           	psect	bssCOMMON
   987  0070                     __pbssCOMMON:	
   988  0070                     InterReceiver@intr_counter:	
   989  0070                     	ds	2
   990  0072                     _dPacketnum:	
   991  0072                     	ds	2
   992  0074                     _rcv_state:	
   993  0074                     	ds	2
   994  0076                     _dfcslo:	
   995  0076                     	ds	1
   996                           
   997                           	psect	bssBANK0
   998  006F                     __pbssBANK0:	
   999  006F                     _dfcshi:	
  1000  006F                     	ds	1
  1001                           
  1002                           	psect	bssBANK1
  1003  00EC                     __pbssBANK1:	
  1004  00EC                     InterReceiver@intr_counter_H:	
  1005  00EC                     	ds	2
  1006  00EE                     getbit@oldbit:	
  1007  00EE                     	ds	2
  1008                           
  1009                           	psect	dataBANK1
  1010  00C8                     __pdataBANK1:	
  1011  00C8                     ResetFreq@F1708:	
  1012  00C8                     	ds	10
  1013  00D2                     ResetFreq@F1706:	
  1014  00D2                     	ds	10
  1015  00DC                     ResetFreq@F1704:	
  1016  00DC                     	ds	10
  1017  00E6                     _FMRX_Nref:	
  1018  00E6                     	ds	2
  1019  00E8                     _CWTX_Nref:	
  1020  00E8                     	ds	2
  1021  00EA                     _FMTX_Nref:	
  1022  00EA                     	ds	2
  1023                           
  1024                           	psect	bssBANK3
  1025  0190                     __pbssBANK3:	
  1026  0190                     _dPacket:	
  1027  0190                     	ds	50
  1028  01C2                     _dData:	
  1029  01C2                     	ds	16
  1030                           
  1031                           	psect	inittext
  1032  17EF                     init_fetch0:	
  1033                           ;	Called with low address in FSR and high address in W
  1034                           
  1035  17EF  087E               	movf	126,w
  1036  17F0  008A               	movwf	10
  1037  17F1  087F               	movf	127,w
  1038  17F2  0082               	movwf	2
  1039  17F3                     init_ram0:	
  1040                           ;Called with:
  1041                           ;	high address of idata address in btemp 
  1042                           ;	low address of idata address in btemp+1 
  1043                           ;	low address of data in FSR
  1044                           ;	high address + 1 of data in btemp-1
  1045                           
  1046  17F3  27EF  160A  118A   	fcall	init_fetch0
  1047  17F6  0080               	movwf	0
  1048  17F7  0A84               	incf	4,f
  1049  17F8  0804               	movf	4,w
  1050  17F9  067D               	xorwf	125,w
  1051  17FA  1903               	btfsc	3,2
  1052  17FB  3400               	retlw	0
  1053  17FC  0AFF               	incf	127,f
  1054  17FD  1903               	btfsc	3,2
  1055  17FE  0AFE               	incf	126,f
  1056  17FF  2FF3               	goto	init_ram0
  1057                           
  1058                           	psect	clrtext
  1059  17E7                     clear_ram0:	
  1060                           ;	Called with FSR containing the base address, and
  1061                           ;	W with the last address+1
  1062                           
  1063  17E7  0064               	clrwdt	;clear the watchdog before getting into this loop
  1064  17E8                     clrloop0:	
  1065  17E8  0180               	clrf	0	;clear RAM location pointed to by FSR
  1066  17E9  0A84               	incf	4,f	;increment pointer
  1067  17EA  0604               	xorwf	4,w	;XOR with final address
  1068  17EB  1903               	btfsc	3,2	;have we reached the end yet?
  1069  17EC  3400               	retlw	0	;all done for this memory range, return
  1070  17ED  0604               	xorwf	4,w	;XOR again to restore value
  1071  17EE  2FE8               	goto	clrloop0	;do the next byte
  1072                           
  1073                           	psect	cstackBANK1
  1074  00A0                     __pcstackBANK1:	
  1075  00A0                     ??_ResetFreq:	
  1076                           
  1077                           ; 1 bytes @ 0x0
  1078  00A0                     	ds	4
  1079  00A4                     ResetFreq@FMTX_Nprg:	
  1080                           
  1081                           ; 10 bytes @ 0x4
  1082  00A4                     	ds	10
  1083  00AE                     ResetFreq@CWTX_Nprg:	
  1084                           
  1085                           ; 10 bytes @ 0xE
  1086  00AE                     	ds	10
  1087  00B8                     ResetFreq@FMRX_Nprg:	
  1088                           
  1089                           ; 10 bytes @ 0x18
  1090  00B8                     	ds	10
  1091  00C2                     ??_main:	
  1092                           
  1093                           ; 1 bytes @ 0x22
  1094  00C2                     	ds	3
  1095  00C5                     main@TXOBC_wad_header:	
  1096                           
  1097                           ; 1 bytes @ 0x25
  1098  00C5                     	ds	1
  1099  00C6                     main@NM_wad_header:	
  1100                           
  1101                           ; 1 bytes @ 0x26
  1102  00C6                     	ds	1
  1103  00C7                     main@dData:	
  1104                           
  1105                           ; 1 bytes @ 0x27
  1106  00C7                     	ds	1
  1107                           
  1108                           	psect	cstackCOMMON
  1109  0077                     __pcstackCOMMON:	
  1110  0077                     ?_ReceivePacket_data:	
  1111  0077                     ?_Init_WDT:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0077                     ?_ResetFreq:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0077                     ?_Reset_EPS:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0077                     ?__NOP:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0077                     ?_Init_SERIAL:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0077                     ?_putch:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0077                     ?_Init_MPU:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0077                     ?_waitFlag:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0077                     ?_getdata:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0077                     ?_main:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0077                     ?_I2C_Master_Wait:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0077                     ?_I2C_Master_Start:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0077                     ?_I2C_Master_Stop:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0077                     ?_InterReceiver:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153  0077                     ??_InterReceiver:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156                           
  1157                           ; 1 bytes @ 0x0
  1158  0077                     	ds	7
  1159                           
  1160                           	psect	cstackBANK0
  1161  0020                     __pcstackBANK0:	
  1162  0020                     ??_Init_WDT:	
  1163  0020                     ??_Reset_EPS:	
  1164                           ; 1 bytes @ 0x0
  1165                           
  1166  0020                     ??__NOP:	
  1167                           ; 1 bytes @ 0x0
  1168                           
  1169  0020                     ??_Init_SERIAL:	
  1170                           ; 1 bytes @ 0x0
  1171                           
  1172  0020                     ??_putch:	
  1173                           ; 1 bytes @ 0x0
  1174                           
  1175  0020                     ??_Init_MPU:	
  1176                           ; 1 bytes @ 0x0
  1177                           
  1178  0020                     ??_I2C_Master_Wait:	
  1179                           ; 1 bytes @ 0x0
  1180                           
  1181  0020                     ??_I2C_Master_Start:	
  1182                           ; 1 bytes @ 0x0
  1183                           
  1184  0020                     ??_I2C_Master_Stop:	
  1185                           ; 1 bytes @ 0x0
  1186                           
  1187  0020                     ?_I2C_Master_Write:	
  1188                           ; 1 bytes @ 0x0
  1189                           
  1190  0020                     ?_getbit:	
  1191                           ; 1 bytes @ 0x0
  1192                           
  1193  0020                     ?_fcscheck:	
  1194                           ; 2 bytes @ 0x0
  1195                           
  1196  0020                     ?___awdiv:	
  1197                           ; 2 bytes @ 0x0
  1198                           
  1199  0020                     ?___lldiv:	
  1200                           ; 2 bytes @ 0x0
  1201                           
  1202  0020                     putch@byte:	
  1203                           ; 4 bytes @ 0x0
  1204                           
  1205  0020                     I2C_Master_Write@d:	
  1206                           ; 1 bytes @ 0x0
  1207                           
  1208  0020                     __NOP@i:	
  1209                           ; 2 bytes @ 0x0
  1210                           
  1211  0020                     ___awdiv@divisor:	
  1212                           ; 2 bytes @ 0x0
  1213                           
  1214  0020                     ___lldiv@divisor:	
  1215                           ; 2 bytes @ 0x0
  1216                           
  1217                           
  1218                           ; 4 bytes @ 0x0
  1219  0020                     	ds	1
  1220  0021                     ?_NM_waddress:	
  1221  0021                     ?_TXOBC_waddress:	
  1222                           ; 1 bytes @ 0x1
  1223                           
  1224  0021                     NM_waddress@whigh_address:	
  1225                           ; 1 bytes @ 0x1
  1226                           
  1227  0021                     TXOBC_waddress@whigh_address:	
  1228                           ; 1 bytes @ 0x1
  1229                           
  1230                           
  1231                           ; 1 bytes @ 0x1
  1232  0021                     	ds	1
  1233  0022                     ?_EEPROM_Write:	
  1234  0022                     ??_getbit:	
  1235                           ; 1 bytes @ 0x2
  1236                           
  1237  0022                     ??_fcscheck:	
  1238                           ; 1 bytes @ 0x2
  1239                           
  1240  0022                     ??_I2C_Master_Write:	
  1241                           ; 1 bytes @ 0x2
  1242                           
  1243  0022                     ?_L_OUT:	
  1244                           ; 1 bytes @ 0x2
  1245                           
  1246  0022                     ?_H_OUT:	
  1247                           ; 1 bytes @ 0x2
  1248                           
  1249  0022                     ?_STBOUT:	
  1250                           ; 1 bytes @ 0x2
  1251                           
  1252  0022                     NM_waddress@wlow_address:	
  1253                           ; 1 bytes @ 0x2
  1254                           
  1255  0022                     TXOBC_waddress@wlow_address:	
  1256                           ; 1 bytes @ 0x2
  1257                           
  1258  0022                     EEPROM_Write@high_address:	
  1259                           ; 1 bytes @ 0x2
  1260                           
  1261  0022                     L_OUT@fmcwtxrx:	
  1262                           ; 1 bytes @ 0x2
  1263                           
  1264  0022                     H_OUT@fmcwtxrx:	
  1265                           ; 2 bytes @ 0x2
  1266                           
  1267  0022                     STBOUT@fmcwtxrx:	
  1268                           ; 2 bytes @ 0x2
  1269                           
  1270  0022                     ___awdiv@dividend:	
  1271                           ; 2 bytes @ 0x2
  1272                           
  1273                           
  1274                           ; 2 bytes @ 0x2
  1275  0022                     	ds	1
  1276  0023                     ??_NM_waddress:	
  1277  0023                     ??_TXOBC_waddress:	
  1278                           ; 1 bytes @ 0x3
  1279                           
  1280  0023                     NM_waddress@NM_wad_header:	
  1281                           ; 1 bytes @ 0x3
  1282                           
  1283  0023                     EEPROM_Write@low_address:	
  1284                           ; 1 bytes @ 0x3
  1285                           
  1286                           
  1287                           ; 1 bytes @ 0x3
  1288  0023                     	ds	1
  1289  0024                     ??_L_OUT:	
  1290  0024                     ??_H_OUT:	
  1291                           ; 1 bytes @ 0x4
  1292                           
  1293  0024                     ??_STBOUT:	
  1294                           ; 1 bytes @ 0x4
  1295                           
  1296  0024                     ?_OPINIT:	
  1297                           ; 1 bytes @ 0x4
  1298                           
  1299  0024                     ??___awdiv:	
  1300                           ; 1 bytes @ 0x4
  1301                           
  1302  0024                     fcscheck@bt:	
  1303                           ; 1 bytes @ 0x4
  1304                           
  1305  0024                     EEPROM_Write@data:	
  1306                           ; 1 bytes @ 0x4
  1307                           
  1308  0024                     getbit@i:	
  1309                           ; 1 bytes @ 0x4
  1310                           
  1311  0024                     OPINIT@fmcwtxrx:	
  1312                           ; 2 bytes @ 0x4
  1313                           
  1314  0024                     ___lldiv@dividend:	
  1315                           ; 2 bytes @ 0x4
  1316                           
  1317                           
  1318                           ; 4 bytes @ 0x4
  1319  0024                     	ds	1
  1320  0025                     ??_EEPROM_Write:	
  1321  0025                     TXOBC_waddress@TXOBC_wad_header:	
  1322                           ; 1 bytes @ 0x5
  1323                           
  1324  0025                     ___awdiv@counter:	
  1325                           ; 1 bytes @ 0x5
  1326                           
  1327  0025                     fcscheck@i:	
  1328                           ; 1 bytes @ 0x5
  1329                           
  1330                           
  1331                           ; 2 bytes @ 0x5
  1332  0025                     	ds	1
  1333  0026                     ??_waitFlag:	
  1334  0026                     ??_getdata:	
  1335                           ; 1 bytes @ 0x6
  1336                           
  1337  0026                     ??_OPINIT:	
  1338                           ; 1 bytes @ 0x6
  1339                           
  1340  0026                     ___awdiv@sign:	
  1341                           ; 1 bytes @ 0x6
  1342                           
  1343                           
  1344                           ; 1 bytes @ 0x6
  1345  0026                     	ds	1
  1346  0027                     fcscheck@i_132:	
  1347  0027                     ___awdiv@quotient:	
  1348                           ; 2 bytes @ 0x7
  1349                           
  1350                           
  1351                           ; 2 bytes @ 0x7
  1352  0027                     	ds	1
  1353  0028                     ??___lldiv:	
  1354  0028                     EEPROM_Write@EEPROM_address:	
  1355                           ; 1 bytes @ 0x8
  1356                           
  1357  0028                     getdata@bufstore_counter:	
  1358                           ; 1 bytes @ 0x8
  1359                           
  1360                           
  1361                           ; 2 bytes @ 0x8
  1362  0028                     	ds	1
  1363  0029                     ?_OUTFQ:	
  1364  0029                     ?_RFDOUT:	
  1365                           ; 1 bytes @ 0x9
  1366                           
  1367  0029                     fcscheck@byte:	
  1368                           ; 1 bytes @ 0x9
  1369                           
  1370  0029                     EEPROM_Write@Address:	
  1371                           ; 1 bytes @ 0x9
  1372                           
  1373  0029                     OUTFQ@fmcwtxrx:	
  1374                           ; 1 bytes @ 0x9
  1375                           
  1376  0029                     RFDOUT@fmcwtxrx:	
  1377                           ; 2 bytes @ 0x9
  1378                           
  1379  0029                     ___lldiv@quotient:	
  1380                           ; 2 bytes @ 0x9
  1381                           
  1382                           
  1383                           ; 4 bytes @ 0x9
  1384  0029                     	ds	1
  1385  002A                     waitFlag@i:	
  1386  002A                     getdata@dstuff:	
  1387                           ; 2 bytes @ 0xA
  1388                           
  1389                           
  1390                           ; 2 bytes @ 0xA
  1391  002A                     	ds	1
  1392  002B                     OUTFQ@Nprg:	
  1393  002B                     RFDOUT@Nref:	
  1394                           ; 2 bytes @ 0xB
  1395                           
  1396                           
  1397                           ; 2 bytes @ 0xB
  1398  002B                     	ds	1
  1399  002C                     waitFlag@j:	
  1400  002C                     getdata@dbitstatus:	
  1401                           ; 2 bytes @ 0xC
  1402                           
  1403                           
  1404                           ; 2 bytes @ 0xC
  1405  002C                     	ds	1
  1406  002D                     ??_OUTFQ:	
  1407  002D                     ??_RFDOUT:	
  1408                           ; 1 bytes @ 0xD
  1409                           
  1410  002D                     ___lldiv@counter:	
  1411                           ; 1 bytes @ 0xD
  1412                           
  1413                           
  1414                           ; 1 bytes @ 0xD
  1415  002D                     	ds	1
  1416  002E                     ?_Init_I2C_M:	
  1417  002E                     getdata@buf:	
  1418                           ; 1 bytes @ 0xE
  1419                           
  1420  002E                     waitFlag@j_101:	
  1421                           ; 1 bytes @ 0xE
  1422                           
  1423  002E                     Init_I2C_M@c:	
  1424                           ; 2 bytes @ 0xE
  1425                           
  1426                           
  1427                           ; 4 bytes @ 0xE
  1428  002E                     	ds	2
  1429  0030                     waitFlag@j_103:	
  1430  0030                     RFDOUT@Nref_b:	
  1431                           ; 2 bytes @ 0x10
  1432                           
  1433                           
  1434                           ; 24 bytes @ 0x10
  1435  0030                     	ds	2
  1436  0032                     ??_Init_I2C_M:	
  1437  0032                     waitFlag@j_105:	
  1438                           ; 1 bytes @ 0x12
  1439                           
  1440                           
  1441                           ; 2 bytes @ 0x12
  1442  0032                     	ds	2
  1443  0034                     waitFlag@j_107:	
  1444                           
  1445                           ; 2 bytes @ 0x14
  1446  0034                     	ds	2
  1447  0036                     waitFlag@j_109:	
  1448                           
  1449                           ; 2 bytes @ 0x16
  1450  0036                     	ds	2
  1451  0038                     waitFlag@j_110:	
  1452                           
  1453                           ; 2 bytes @ 0x18
  1454  0038                     	ds	2
  1455  003A                     waitFlag@j_112:	
  1456                           
  1457                           ; 2 bytes @ 0x1A
  1458  003A                     	ds	2
  1459  003C                     waitFlag@j_114:	
  1460                           
  1461                           ; 2 bytes @ 0x1C
  1462  003C                     	ds	1
  1463  003D                     OUTFQ@Nprg_b:	
  1464                           
  1465                           ; 34 bytes @ 0x1D
  1466  003D                     	ds	1
  1467  003E                     waitFlag@j_116:	
  1468                           
  1469                           ; 2 bytes @ 0x1E
  1470  003E                     	ds	2
  1471  0040                     waitFlag@j_118:	
  1472                           
  1473                           ; 2 bytes @ 0x20
  1474  0040                     	ds	2
  1475  0042                     waitFlag@j_120:	
  1476                           
  1477                           ; 2 bytes @ 0x22
  1478  0042                     	ds	2
  1479  0044                     waitFlag@flag_judge:	
  1480                           
  1481                           ; 2 bytes @ 0x24
  1482  0044                     	ds	2
  1483  0046                     waitFlag@buf:	
  1484                           
  1485                           ; 1 bytes @ 0x26
  1486  0046                     	ds	1
  1487  0047                     ??_ReceivePacket_data:	
  1488                           
  1489                           ; 1 bytes @ 0x27
  1490  0047                     	ds	1
  1491  0048                     RFDOUT@i_342:	
  1492                           
  1493                           ; 2 bytes @ 0x28
  1494  0048                     	ds	1
  1495  0049                     ReceivePacket_data@fcschecker:	
  1496                           
  1497                           ; 2 bytes @ 0x29
  1498  0049                     	ds	1
  1499  004A                     RFDOUT@i:	
  1500                           
  1501                           ; 2 bytes @ 0x2A
  1502  004A                     	ds	1
  1503  004B                     ReceivePacket_data@i:	
  1504                           
  1505                           ; 2 bytes @ 0x2B
  1506  004B                     	ds	1
  1507  004C                     RFDOUT@i_343:	
  1508                           
  1509                           ; 2 bytes @ 0x2C
  1510  004C                     	ds	19
  1511  005F                     OUTFQ@i_331:	
  1512                           
  1513                           ; 2 bytes @ 0x3F
  1514  005F                     	ds	2
  1515  0061                     OUTFQ@count:	
  1516                           
  1517                           ; 2 bytes @ 0x41
  1518  0061                     	ds	2
  1519  0063                     OUTFQ@i:	
  1520                           
  1521                           ; 2 bytes @ 0x43
  1522  0063                     	ds	2
  1523  0065                     OUTFQ@i_333:	
  1524                           
  1525                           ; 2 bytes @ 0x45
  1526  0065                     	ds	2
  1527  0067                     OUTFQ@j:	
  1528                           
  1529                           ; 2 bytes @ 0x47
  1530  0067                     	ds	2
  1531  0069                     ?_FMTX:	
  1532  0069                     ?_CWTX:	
  1533                           ; 1 bytes @ 0x49
  1534                           
  1535  0069                     ?_FMRX:	
  1536                           ; 1 bytes @ 0x49
  1537                           
  1538  0069                     FMTX@Nref:	
  1539                           ; 1 bytes @ 0x49
  1540                           
  1541  0069                     CWTX@Nref:	
  1542                           ; 2 bytes @ 0x49
  1543                           
  1544  0069                     FMRX@Nref:	
  1545                           ; 2 bytes @ 0x49
  1546                           
  1547                           
  1548                           ; 2 bytes @ 0x49
  1549  0069                     	ds	2
  1550  006B                     FMTX@Nprg:	
  1551  006B                     CWTX@Nprg:	
  1552                           ; 2 bytes @ 0x4B
  1553                           
  1554  006B                     FMRX@Nprg:	
  1555                           ; 2 bytes @ 0x4B
  1556                           
  1557                           
  1558                           ; 2 bytes @ 0x4B
  1559  006B                     	ds	2
  1560  006D                     ??_FMTX:	
  1561  006D                     ??_CWTX:	
  1562                           ; 1 bytes @ 0x4D
  1563                           
  1564  006D                     ??_FMRX:	
  1565                           ; 1 bytes @ 0x4D
  1566                           
  1567  006D                     FMTX@fmtx:	
  1568                           ; 1 bytes @ 0x4D
  1569                           
  1570  006D                     CWTX@cwtx:	
  1571                           ; 2 bytes @ 0x4D
  1572                           
  1573  006D                     FMRX@fmrx:	
  1574                           ; 2 bytes @ 0x4D
  1575                           
  1576                           
  1577                           ; 2 bytes @ 0x4D
  1578  006D                     	ds	2
  1579                           
  1580                           	psect	maintext
  1581  0ECF                     __pmaintext:	
  1582 ;;
  1583 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1584 ;;
  1585 ;; *************** function _main *****************
  1586 ;; Defined at:
  1587 ;;		line 39 in file "main.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;		None
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;  NM_wad_heade    1   38[BANK1 ] unsigned char 
  1592 ;;  dData           1   39[BANK1 ] PTR unsigned char 
  1593 ;;		 -> NULL(0), dData(16), 
  1594 ;;  TXOBC_wad_he    1   37[BANK1 ] unsigned char 
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  1    wreg      void 
  1597 ;; Registers used:
  1598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1599 ;; Tracked objects:
  1600 ;;		On entry : B00/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1604 ;;      Params:         0       0       0       0       0
  1605 ;;      Locals:         0       0       3       0       0
  1606 ;;      Temps:          0       0       3       0       0
  1607 ;;      Totals:         0       0       6       0       0
  1608 ;;Total ram usage:        6 bytes
  1609 ;; Hardware stack levels required when called:    6
  1610 ;; This function calls:
  1611 ;;		_EEPROM_Write
  1612 ;;		_Init_I2C_M
  1613 ;;		_Init_MPU
  1614 ;;		_Init_SERIAL
  1615 ;;		_Init_WDT
  1616 ;;		_NM_waddress
  1617 ;;		_ReceivePacket_data
  1618 ;;		_ResetFreq
  1619 ;;		_Reset_EPS
  1620 ;;		_TXOBC_waddress
  1621 ;; This function is called by:
  1622 ;;		Startup code after reset
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           
  1627                           ;psect for function _main
  1628  0ECF                     _main:	
  1629                           
  1630                           ;main.c: 44: _delay((unsigned long)((200)*(10000000/4000.0)));
  1631                           
  1632                           ;incstack = 0
  1633                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1634  0ECF  3003               	movlw	3
  1635  0ED0  1683               	bsf	3,5	;RP0=1, select bank1
  1636  0ED1  1303               	bcf	3,6	;RP1=0, select bank1
  1637  0ED2  00C4               	movwf	(??_main^(0+128)+2)
  1638  0ED3  308A               	movlw	138
  1639  0ED4  00C3               	movwf	(??_main^(0+128)+1)
  1640  0ED5  3055               	movlw	85
  1641  0ED6  00C2               	movwf	??_main^(0+128)
  1642  0ED7                     u3657:	
  1643  0ED7  0BC2               	decfsz	??_main^(0+128),f
  1644  0ED8  2ED7               	goto	u3657
  1645  0ED9  0BC3               	decfsz	(??_main^(0+128)+1),f
  1646  0EDA  2ED7               	goto	u3657
  1647  0EDB  0BC4               	decfsz	(??_main^(0+128)+2),f
  1648  0EDC  2ED7               	goto	u3657
  1649                           
  1650                           ;main.c: 46: Init_SERIAL();
  1651  0EDD  120A  158A  2050  120A  158A  	fcall	_Init_SERIAL
  1652                           
  1653                           ;main.c: 47: Init_MPU();
  1654  0EE2  120A  158A  2069  120A  158A  	fcall	_Init_MPU
  1655                           
  1656                           ;main.c: 48: Init_I2C_M(400000);
  1657  0EE7  3000               	movlw	0
  1658  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  1659  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  1660  0EEA  00B1               	movwf	Init_I2C_M@c+3
  1661  0EEB  3006               	movlw	6
  1662  0EEC  00B0               	movwf	Init_I2C_M@c+2
  1663  0EED  301A               	movlw	26
  1664  0EEE  00AF               	movwf	Init_I2C_M@c+1
  1665  0EEF  3080               	movlw	128
  1666  0EF0  00AE               	movwf	Init_I2C_M@c
  1667  0EF1  120A  158A  2158  120A  158A  	fcall	_Init_I2C_M
  1668                           
  1669                           ;main.c: 49: Init_WDT();
  1670  0EF6  120A  158A  2009  120A  158A  	fcall	_Init_WDT
  1671                           
  1672                           ;main.c: 55: RB2 = 1;
  1673  0EFB  1283               	bcf	3,5	;RP0=0, select bank0
  1674  0EFC  1303               	bcf	3,6	;RP1=0, select bank0
  1675  0EFD  1506               	bsf	6,2	;volatile
  1676                           
  1677                           ;main.c: 56: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1678  0EFE  300D               	movlw	13
  1679  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  1680  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  1681  0F01  00C4               	movwf	(??_main^(0+128)+2)
  1682  0F02  30AF               	movlw	175
  1683  0F03  00C3               	movwf	(??_main^(0+128)+1)
  1684  0F04  30B5               	movlw	181
  1685  0F05  00C2               	movwf	??_main^(0+128)
  1686  0F06                     u3667:	
  1687  0F06  0BC2               	decfsz	??_main^(0+128),f
  1688  0F07  2F06               	goto	u3667
  1689  0F08  0BC3               	decfsz	(??_main^(0+128)+1),f
  1690  0F09  2F06               	goto	u3667
  1691  0F0A  0BC4               	decfsz	(??_main^(0+128)+2),f
  1692  0F0B  2F06               	goto	u3667
  1693  0F0C  2F0D               	nop2
  1694                           
  1695                           ;main.c: 57: ResetFreq();
  1696  0F0D  120A  158A  24E9  120A  158A  	fcall	_ResetFreq
  1697                           
  1698                           ;main.c: 61: RB2 = 0;
  1699  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  1700  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  1701  0F14  1106               	bcf	6,2	;volatile
  1702  0F15                     l3737:	
  1703                           ;main.c: 64: while(1){
  1704                           
  1705                           
  1706                           ;main.c: 79: UBYTE *dData;
  1707                           ;main.c: 80: dData = ReceivePacket_data();
  1708  0F15  120A  158A  2418  120A  158A  	fcall	_ReceivePacket_data
  1709  0F1A  1683               	bsf	3,5	;RP0=1, select bank1
  1710  0F1B  1303               	bcf	3,6	;RP1=0, select bank1
  1711  0F1C  00C2               	movwf	??_main^(0+128)
  1712  0F1D  0842               	movf	??_main^(0+128),w
  1713  0F1E  00C7               	movwf	main@dData^(0+128)
  1714                           
  1715                           ;main.c: 81: RB2 = 1;
  1716  0F1F  1283               	bcf	3,5	;RP0=0, select bank0
  1717  0F20  1303               	bcf	3,6	;RP1=0, select bank0
  1718  0F21  1506               	bsf	6,2	;volatile
  1719                           
  1720                           ;main.c: 82: _delay((unsigned long)((500)*(10000000/4000.0)));
  1721  0F22  3007               	movlw	7
  1722  0F23  1683               	bsf	3,5	;RP0=1, select bank1
  1723  0F24  1303               	bcf	3,6	;RP1=0, select bank1
  1724  0F25  00C4               	movwf	(??_main^(0+128)+2)
  1725  0F26  3058               	movlw	88
  1726  0F27  00C3               	movwf	(??_main^(0+128)+1)
  1727  0F28  3059               	movlw	89
  1728  0F29  00C2               	movwf	??_main^(0+128)
  1729  0F2A                     u3677:	
  1730  0F2A  0BC2               	decfsz	??_main^(0+128),f
  1731  0F2B  2F2A               	goto	u3677
  1732  0F2C  0BC3               	decfsz	(??_main^(0+128)+1),f
  1733  0F2D  2F2A               	goto	u3677
  1734  0F2E  0BC4               	decfsz	(??_main^(0+128)+2),f
  1735  0F2F  2F2A               	goto	u3677
  1736                           
  1737                           ;main.c: 83: RB2 = 0;
  1738  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  1739  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  1740  0F32  1106               	bcf	6,2	;volatile
  1741                           
  1742                           ;main.c: 85: EEPROM_Write(0x50,0x00,0x00,dData);
  1743  0F33  01A2               	clrf	EEPROM_Write@high_address
  1744  0F34  01A3               	clrf	EEPROM_Write@low_address
  1745  0F35  1683               	bsf	3,5	;RP0=1, select bank1
  1746  0F36  1303               	bcf	3,6	;RP1=0, select bank1
  1747  0F37  0847               	movf	main@dData^(0+128),w
  1748  0F38  00C2               	movwf	??_main^(0+128)
  1749  0F39  0842               	movf	??_main^(0+128),w
  1750  0F3A  1283               	bcf	3,5	;RP0=0, select bank0
  1751  0F3B  1303               	bcf	3,6	;RP1=0, select bank0
  1752  0F3C  00A4               	movwf	EEPROM_Write@data
  1753  0F3D  3050               	movlw	80
  1754  0F3E  120A  158A  247D  120A  158A  	fcall	_EEPROM_Write
  1755                           
  1756                           ;main.c: 86: _delay((unsigned long)((100)*(10000000/4000.0)));
  1757  0F43  3002               	movlw	2
  1758  0F44  1683               	bsf	3,5	;RP0=1, select bank1
  1759  0F45  1303               	bcf	3,6	;RP1=0, select bank1
  1760  0F46  00C4               	movwf	(??_main^(0+128)+2)
  1761  0F47  3045               	movlw	69
  1762  0F48  00C3               	movwf	(??_main^(0+128)+1)
  1763  0F49  30A9               	movlw	169
  1764  0F4A  00C2               	movwf	??_main^(0+128)
  1765  0F4B                     u3687:	
  1766  0F4B  0BC2               	decfsz	??_main^(0+128),f
  1767  0F4C  2F4B               	goto	u3687
  1768  0F4D  0BC3               	decfsz	(??_main^(0+128)+1),f
  1769  0F4E  2F4B               	goto	u3687
  1770  0F4F  0BC4               	decfsz	(??_main^(0+128)+2),f
  1771  0F50  2F4B               	goto	u3687
  1772                           
  1773                           ;main.c: 90: UBYTE TXOBC_wad_header = 0x74;
  1774  0F51  3074               	movlw	116
  1775  0F52  1683               	bsf	3,5	;RP0=1, select bank1
  1776  0F53  1303               	bcf	3,6	;RP1=0, select bank1
  1777  0F54  00C2               	movwf	??_main^(0+128)
  1778  0F55  0842               	movf	??_main^(0+128),w
  1779  0F56  00C5               	movwf	main@TXOBC_wad_header^(0+128)
  1780                           
  1781                           ;main.c: 91: TXOBC_waddress(TXOBC_wad_header, 0x00, 0x00);
  1782  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  1783  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  1784  0F59  01A1               	clrf	TXOBC_waddress@whigh_address
  1785  0F5A  01A2               	clrf	TXOBC_waddress@wlow_address
  1786  0F5B  1683               	bsf	3,5	;RP0=1, select bank1
  1787  0F5C  1303               	bcf	3,6	;RP1=0, select bank1
  1788  0F5D  0845               	movf	main@TXOBC_wad_header^(0+128),w
  1789  0F5E  120A  158A  225A  120A  158A  	fcall	_TXOBC_waddress
  1790                           
  1791                           ;main.c: 104: if(dData[0]=='n'){
  1792  0F63  1683               	bsf	3,5	;RP0=1, select bank1
  1793  0F64  1303               	bcf	3,6	;RP1=0, select bank1
  1794  0F65  0847               	movf	main@dData^(0+128),w
  1795  0F66  0084               	movwf	4
  1796  0F67  306E               	movlw	110
  1797  0F68  1783               	bsf	3,7	;select IRP bank2
  1798  0F69  0600               	xorwf	0,w
  1799  0F6A  1D03               	btfss	3,2
  1800  0F6B  2F7D               	goto	l3757
  1801                           
  1802                           ;main.c: 106: UBYTE NM_wad_header = 0x72;
  1803  0F6C  3072               	movlw	114
  1804  0F6D  00C2               	movwf	??_main^(0+128)
  1805  0F6E  0842               	movf	??_main^(0+128),w
  1806  0F6F  00C6               	movwf	main@NM_wad_header^(0+128)
  1807                           
  1808                           ;main.c: 107: NM_waddress(NM_wad_header, 0x00, 0x00);
  1809  0F70  1283               	bcf	3,5	;RP0=0, select bank0
  1810  0F71  1303               	bcf	3,6	;RP1=0, select bank0
  1811  0F72  01A1               	clrf	NM_waddress@whigh_address
  1812  0F73  01A2               	clrf	NM_waddress@wlow_address
  1813  0F74  1683               	bsf	3,5	;RP0=1, select bank1
  1814  0F75  1303               	bcf	3,6	;RP1=0, select bank1
  1815  0F76  0846               	movf	main@NM_wad_header^(0+128),w
  1816  0F77  120A  158A  2020  120A  158A  	fcall	_NM_waddress
  1817                           
  1818                           ;main.c: 109: }else if(dData[0]=='p'){
  1819  0F7C  2FF1               	goto	l309
  1820  0F7D                     l3757:	
  1821  0F7D  1683               	bsf	3,5	;RP0=1, select bank1
  1822  0F7E  1303               	bcf	3,6	;RP1=0, select bank1
  1823  0F7F  0847               	movf	main@dData^(0+128),w
  1824  0F80  0084               	movwf	4
  1825  0F81  3070               	movlw	112
  1826  0F82  1783               	bsf	3,7	;select IRP bank2
  1827  0F83  0600               	xorwf	0,w
  1828  0F84  1D03               	btfss	3,2
  1829  0F85  2FDC               	goto	l310
  1830                           
  1831                           ;main.c: 114: if(dData[2] == 'r'){
  1832  0F86  0847               	movf	main@dData^(0+128),w
  1833  0F87  3E02               	addlw	2
  1834  0F88  0084               	movwf	4
  1835  0F89  3072               	movlw	114
  1836  0F8A  0600               	xorwf	0,w
  1837  0F8B  1903               	btfsc	3,2
  1838  0F8C  2FC4               	goto	l3775
  1839  0F8D  2FF1               	goto	l309
  1840  0F8E                     l3763:	
  1841                           ;main.c: 120: case 'E':
  1842                           
  1843                           ;main.c: 119: switch(dData[3]){
  1844                           
  1845                           
  1846                           ;main.c: 125: _delay((unsigned long)((5000)*(10000000/4000.0)));
  1847  0F8E  3040               	movlw	64
  1848  0F8F  1683               	bsf	3,5	;RP0=1, select bank1
  1849  0F90  1303               	bcf	3,6	;RP1=0, select bank1
  1850  0F91  00C4               	movwf	(??_main^(0+128)+2)
  1851  0F92  306A               	movlw	106
  1852  0F93  00C3               	movwf	(??_main^(0+128)+1)
  1853  0F94  3097               	movlw	151
  1854  0F95  00C2               	movwf	??_main^(0+128)
  1855  0F96                     u3697:	
  1856  0F96  0BC2               	decfsz	??_main^(0+128),f
  1857  0F97  2F96               	goto	u3697
  1858  0F98  0BC3               	decfsz	(??_main^(0+128)+1),f
  1859  0F99  2F96               	goto	u3697
  1860  0F9A  0BC4               	decfsz	(??_main^(0+128)+2),f
  1861  0F9B  2F96               	goto	u3697
  1862                           
  1863                           ;main.c: 126: Reset_EPS();
  1864  0F9C  120A  158A  2038  120A  158A  	fcall	_Reset_EPS
  1865                           
  1866                           ;main.c: 127: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1867  0FA1  300D               	movlw	13
  1868  0FA2  1683               	bsf	3,5	;RP0=1, select bank1
  1869  0FA3  1303               	bcf	3,6	;RP1=0, select bank1
  1870  0FA4  00C4               	movwf	(??_main^(0+128)+2)
  1871  0FA5  30AF               	movlw	175
  1872  0FA6  00C3               	movwf	(??_main^(0+128)+1)
  1873  0FA7  30B5               	movlw	181
  1874  0FA8  00C2               	movwf	??_main^(0+128)
  1875  0FA9                     u3707:	
  1876  0FA9  0BC2               	decfsz	??_main^(0+128),f
  1877  0FAA  2FA9               	goto	u3707
  1878  0FAB  0BC3               	decfsz	(??_main^(0+128)+1),f
  1879  0FAC  2FA9               	goto	u3707
  1880  0FAD  0BC4               	decfsz	(??_main^(0+128)+2),f
  1881  0FAE  2FA9               	goto	u3707
  1882  0FAF  2FB0               	nop2
  1883                           
  1884                           ;main.c: 137: ResetFreq();
  1885  0FB0  120A  158A  24E9  120A  158A  	fcall	_ResetFreq
  1886                           
  1887                           ;main.c: 138: _delay((unsigned long)((500)*(10000000/4000.0)));
  1888  0FB5  3007               	movlw	7
  1889  0FB6  1683               	bsf	3,5	;RP0=1, select bank1
  1890  0FB7  1303               	bcf	3,6	;RP1=0, select bank1
  1891  0FB8  00C4               	movwf	(??_main^(0+128)+2)
  1892  0FB9  3058               	movlw	88
  1893  0FBA  00C3               	movwf	(??_main^(0+128)+1)
  1894  0FBB  3059               	movlw	89
  1895  0FBC  00C2               	movwf	??_main^(0+128)
  1896  0FBD                     u3717:	
  1897  0FBD  0BC2               	decfsz	??_main^(0+128),f
  1898  0FBE  2FBD               	goto	u3717
  1899  0FBF  0BC3               	decfsz	(??_main^(0+128)+1),f
  1900  0FC0  2FBD               	goto	u3717
  1901  0FC1  0BC4               	decfsz	(??_main^(0+128)+2),f
  1902  0FC2  2FBD               	goto	u3717
  1903                           
  1904                           ;main.c: 155: }
  1905                           
  1906                           ;main.c: 154: break;
  1907                           
  1908                           ;main.c: 152: default:
  1909                           
  1910                           ;main.c: 151: break;
  1911                           
  1912                           ;main.c: 149: case 'T':
  1913                           
  1914                           ;main.c: 148: break;
  1915                           
  1916                           ;main.c: 146: case 'N':
  1917                           
  1918                           ;main.c: 145: break;
  1919                           
  1920                           ;main.c: 143: case '3':
  1921                           
  1922                           ;main.c: 142: break;
  1923                           
  1924                           ;main.c: 140: case 'I':
  1925                           
  1926                           ;main.c: 139: break;
  1927  0FC3  2FF1               	goto	l309
  1928  0FC4                     l3775:	
  1929  0FC4  1683               	bsf	3,5	;RP0=1, select bank1
  1930  0FC5  1303               	bcf	3,6	;RP1=0, select bank1
  1931  0FC6  0847               	movf	main@dData^(0+128),w
  1932  0FC7  3E03               	addlw	3
  1933  0FC8  0084               	movwf	4
  1934  0FC9  1783               	bsf	3,7	;select IRP bank2
  1935  0FCA  0800               	movf	0,w
  1936                           
  1937                           ; Switch size 1, requested type "space"
  1938                           ; Number of cases is 5, Range of values is 51 to 84
  1939                           ; switch strategies available:
  1940                           ; Name         Instructions Cycles
  1941                           ; simple_byte           16     9 (average)
  1942                           ; direct_byte          113    11 (fixed)
  1943                           ; jumptable            263     9 (fixed)
  1944                           ;	Chosen strategy is simple_byte
  1945  0FCB  3A33               	xorlw	51	; case 51
  1946  0FCC  1903               	skipnz
  1947  0FCD  2FF1               	goto	l309
  1948  0FCE  3A76               	xorlw	118	; case 69
  1949  0FCF  1903               	skipnz
  1950  0FD0  2F8E               	goto	l3763
  1951  0FD1  3A0C               	xorlw	12	; case 73
  1952  0FD2  1903               	skipnz
  1953  0FD3  2FF1               	goto	l309
  1954  0FD4  3A07               	xorlw	7	; case 78
  1955  0FD5  1903               	skipnz
  1956  0FD6  2FF1               	goto	l309
  1957  0FD7  3A1A               	xorlw	26	; case 84
  1958  0FD8  1903               	skipnz
  1959  0FD9  2FF1               	goto	l309
  1960  0FDA  2FF1               	goto	l309
  1961                           
  1962                           ;main.c: 159: }
  1963                           ;main.c: 160: }else{
  1964                           
  1965                           ;main.c: 157: }else if(dData[2] == 't'){
  1966  0FDB  2FF1               	goto	l309
  1967  0FDC                     l310:	
  1968                           
  1969                           ;main.c: 161: RB2 = 1;
  1970  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  1971  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  1972  0FDE  1506               	bsf	6,2	;volatile
  1973                           
  1974                           ;main.c: 162: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1975  0FDF  300D               	movlw	13
  1976  0FE0  1683               	bsf	3,5	;RP0=1, select bank1
  1977  0FE1  1303               	bcf	3,6	;RP1=0, select bank1
  1978  0FE2  00C4               	movwf	(??_main^(0+128)+2)
  1979  0FE3  30AF               	movlw	175
  1980  0FE4  00C3               	movwf	(??_main^(0+128)+1)
  1981  0FE5  30B5               	movlw	181
  1982  0FE6  00C2               	movwf	??_main^(0+128)
  1983  0FE7                     u3727:	
  1984  0FE7  0BC2               	decfsz	??_main^(0+128),f
  1985  0FE8  2FE7               	goto	u3727
  1986  0FE9  0BC3               	decfsz	(??_main^(0+128)+1),f
  1987  0FEA  2FE7               	goto	u3727
  1988  0FEB  0BC4               	decfsz	(??_main^(0+128)+2),f
  1989  0FEC  2FE7               	goto	u3727
  1990  0FED  2FEE               	nop2
  1991                           
  1992                           ;main.c: 163: RB2 = 0;
  1993  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  1994  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  1995  0FF0  1106               	bcf	6,2	;volatile
  1996  0FF1                     l309:	
  1997                           
  1998                           ;main.c: 164: }
  1999                           ;main.c: 208: _delay((unsigned long)((500)*(10000000/4000.0)));
  2000  0FF1  3007               	movlw	7
  2001  0FF2  1683               	bsf	3,5	;RP0=1, select bank1
  2002  0FF3  1303               	bcf	3,6	;RP1=0, select bank1
  2003  0FF4  00C4               	movwf	(??_main^(0+128)+2)
  2004  0FF5  3058               	movlw	88
  2005  0FF6  00C3               	movwf	(??_main^(0+128)+1)
  2006  0FF7  3059               	movlw	89
  2007  0FF8  00C2               	movwf	??_main^(0+128)
  2008  0FF9                     u3737:	
  2009  0FF9  0BC2               	decfsz	??_main^(0+128),f
  2010  0FFA  2FF9               	goto	u3737
  2011  0FFB  0BC3               	decfsz	(??_main^(0+128)+1),f
  2012  0FFC  2FF9               	goto	u3737
  2013  0FFD  0BC4               	decfsz	(??_main^(0+128)+2),f
  2014  0FFE  2FF9               	goto	u3737
  2015  0FFF  2F15               	goto	l3737
  2016  1000                     __end_of_main:	
  2017                           ;main.c: 209: }
  2018                           ;main.c: 210: return;
  2019                           
  2020                           
  2021                           	psect	text1
  2022  0A5A                     __ptext1:	
  2023 ;; *************** function _TXOBC_waddress *****************
  2024 ;; Defined at:
  2025 ;;		line 78 in file "UART.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  2028 ;;  whigh_addres    1    1[BANK0 ] unsigned char 
  2029 ;;  wlow_address    1    2[BANK0 ] unsigned char 
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;  TXOBC_wad_he    1    5[BANK0 ] unsigned char 
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, status,2, status,0, pclath, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2041 ;;      Params:         0       2       0       0       0
  2042 ;;      Locals:         0       1       0       0       0
  2043 ;;      Temps:          0       2       0       0       0
  2044 ;;      Totals:         0       5       0       0       0
  2045 ;;Total ram usage:        5 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    2
  2048 ;; This function calls:
  2049 ;;		_putch
  2050 ;; This function is called by:
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           
  2056                           ;psect for function _TXOBC_waddress
  2057  0A5A                     _TXOBC_waddress:	
  2058                           
  2059                           ;incstack = 0
  2060                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2061                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2062  0A5A  1283               	bcf	3,5	;RP0=0, select bank0
  2063  0A5B  1303               	bcf	3,6	;RP1=0, select bank0
  2064  0A5C  00A5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2065                           
  2066                           ;UART.c: 79: RC5 = 1;
  2067  0A5D  1687               	bsf	7,5	;volatile
  2068                           
  2069                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2070  0A5E  30A3               	movlw	163
  2071  0A5F  1283               	bcf	3,5	;RP0=0, select bank0
  2072  0A60  1303               	bcf	3,6	;RP1=0, select bank0
  2073  0A61  00A4               	movwf	??_TXOBC_waddress+1
  2074  0A62  3054               	movlw	84
  2075  0A63  00A3               	movwf	??_TXOBC_waddress
  2076  0A64                     u3747:	
  2077  0A64  0BA3               	decfsz	??_TXOBC_waddress,f
  2078  0A65  2A64               	goto	u3747
  2079  0A66  0BA4               	decfsz	??_TXOBC_waddress+1,f
  2080  0A67  2A64               	goto	u3747
  2081  0A68  0000               	nop
  2082                           
  2083                           ;UART.c: 81: putch(TXOBC_wad_header);
  2084  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  2085  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  2086  0A6B  0825               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2087  0A6C  160A  118A  27DF  120A  158A  	fcall	_putch
  2088                           
  2089                           ;UART.c: 82: _delay((unsigned long)((50)*(10000000/4000.0)));
  2090  0A71  30A3               	movlw	163
  2091  0A72  1283               	bcf	3,5	;RP0=0, select bank0
  2092  0A73  1303               	bcf	3,6	;RP1=0, select bank0
  2093  0A74  00A4               	movwf	??_TXOBC_waddress+1
  2094  0A75  3054               	movlw	84
  2095  0A76  00A3               	movwf	??_TXOBC_waddress
  2096  0A77                     u3757:	
  2097  0A77  0BA3               	decfsz	??_TXOBC_waddress,f
  2098  0A78  2A77               	goto	u3757
  2099  0A79  0BA4               	decfsz	??_TXOBC_waddress+1,f
  2100  0A7A  2A77               	goto	u3757
  2101  0A7B  0000               	nop
  2102                           
  2103                           ;UART.c: 83: putch(whigh_address);
  2104  0A7C  1283               	bcf	3,5	;RP0=0, select bank0
  2105  0A7D  1303               	bcf	3,6	;RP1=0, select bank0
  2106  0A7E  0821               	movf	TXOBC_waddress@whigh_address,w
  2107  0A7F  160A  118A  27DF  120A  158A  	fcall	_putch
  2108                           
  2109                           ;UART.c: 84: _delay((unsigned long)((50)*(10000000/4000.0)));
  2110  0A84  30A3               	movlw	163
  2111  0A85  1283               	bcf	3,5	;RP0=0, select bank0
  2112  0A86  1303               	bcf	3,6	;RP1=0, select bank0
  2113  0A87  00A4               	movwf	??_TXOBC_waddress+1
  2114  0A88  3054               	movlw	84
  2115  0A89  00A3               	movwf	??_TXOBC_waddress
  2116  0A8A                     u3767:	
  2117  0A8A  0BA3               	decfsz	??_TXOBC_waddress,f
  2118  0A8B  2A8A               	goto	u3767
  2119  0A8C  0BA4               	decfsz	??_TXOBC_waddress+1,f
  2120  0A8D  2A8A               	goto	u3767
  2121  0A8E  0000               	nop
  2122                           
  2123                           ;UART.c: 85: putch(wlow_address);
  2124  0A8F  1283               	bcf	3,5	;RP0=0, select bank0
  2125  0A90  1303               	bcf	3,6	;RP1=0, select bank0
  2126  0A91  0822               	movf	TXOBC_waddress@wlow_address,w
  2127  0A92  160A  118A  27DF  120A  158A  	fcall	_putch
  2128                           
  2129                           ;UART.c: 86: _delay((unsigned long)((50)*(10000000/4000.0)));
  2130  0A97  30A3               	movlw	163
  2131  0A98  1283               	bcf	3,5	;RP0=0, select bank0
  2132  0A99  1303               	bcf	3,6	;RP1=0, select bank0
  2133  0A9A  00A4               	movwf	??_TXOBC_waddress+1
  2134  0A9B  3054               	movlw	84
  2135  0A9C  00A3               	movwf	??_TXOBC_waddress
  2136  0A9D                     u3777:	
  2137  0A9D  0BA3               	decfsz	??_TXOBC_waddress,f
  2138  0A9E  2A9D               	goto	u3777
  2139  0A9F  0BA4               	decfsz	??_TXOBC_waddress+1,f
  2140  0AA0  2A9D               	goto	u3777
  2141  0AA1  0000               	nop
  2142                           
  2143                           ;UART.c: 87: RC5 = 0;
  2144  0AA2  1283               	bcf	3,5	;RP0=0, select bank0
  2145  0AA3  1303               	bcf	3,6	;RP1=0, select bank0
  2146  0AA4  1287               	bcf	7,5	;volatile
  2147  0AA5  0008               	return
  2148  0AA6                     __end_of_TXOBC_waddress:	
  2149                           
  2150                           	psect	text2
  2151  0838                     __ptext2:	
  2152 ;; *************** function _Reset_EPS *****************
  2153 ;; Defined at:
  2154 ;;		line 19 in file "EPS.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      void 
  2161 ;; Registers used:
  2162 ;;		wreg
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2168 ;;      Params:         0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0
  2170 ;;      Temps:          0       3       0       0       0
  2171 ;;      Totals:         0       3       0       0       0
  2172 ;;Total ram usage:        3 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    1
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_main
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           
  2183                           ;psect for function _Reset_EPS
  2184  0838                     _Reset_EPS:	
  2185                           
  2186                           ;EPS.c: 20: RB4 = 1;
  2187                           
  2188                           ;incstack = 0
  2189                           ; Regs used in _Reset_EPS: [wreg]
  2190  0838  1283               	bcf	3,5	;RP0=0, select bank0
  2191  0839  1303               	bcf	3,6	;RP1=0, select bank0
  2192  083A  1606               	bsf	6,4	;volatile
  2193                           
  2194                           ;EPS.c: 21: RA1 = 1;
  2195  083B  1485               	bsf	5,1	;volatile
  2196                           
  2197                           ;EPS.c: 22: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2198  083C  300D               	movlw	13
  2199  083D  1283               	bcf	3,5	;RP0=0, select bank0
  2200  083E  1303               	bcf	3,6	;RP1=0, select bank0
  2201  083F  00A2               	movwf	??_Reset_EPS+2
  2202  0840  30AF               	movlw	175
  2203  0841  00A1               	movwf	??_Reset_EPS+1
  2204  0842  30B5               	movlw	181
  2205  0843  00A0               	movwf	??_Reset_EPS
  2206  0844                     u3787:	
  2207  0844  0BA0               	decfsz	??_Reset_EPS,f
  2208  0845  2844               	goto	u3787
  2209  0846  0BA1               	decfsz	??_Reset_EPS+1,f
  2210  0847  2844               	goto	u3787
  2211  0848  0BA2               	decfsz	??_Reset_EPS+2,f
  2212  0849  2844               	goto	u3787
  2213  084A  284B               	nop2
  2214                           
  2215                           ;EPS.c: 23: RB4 = 0;
  2216  084B  1283               	bcf	3,5	;RP0=0, select bank0
  2217  084C  1303               	bcf	3,6	;RP1=0, select bank0
  2218  084D  1206               	bcf	6,4	;volatile
  2219                           
  2220                           ;EPS.c: 24: RA1 = 0;
  2221  084E  1085               	bcf	5,1	;volatile
  2222  084F  0008               	return
  2223  0850                     __end_of_Reset_EPS:	
  2224                           
  2225                           	psect	text3
  2226  0CE9                     __ptext3:	
  2227 ;; *************** function _ResetFreq *****************
  2228 ;; Defined at:
  2229 ;;		line 305 in file "FMCW.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;		None
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;  FMRX_Nprg      10   24[BANK1 ] int [5]
  2234 ;;  CWTX_Nprg      10   14[BANK1 ] int [5]
  2235 ;;  FMTX_Nprg      10    4[BANK1 ] int [5]
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2245 ;;      Params:         0       0       0       0       0
  2246 ;;      Locals:         0       0      30       0       0
  2247 ;;      Temps:          0       0       4       0       0
  2248 ;;      Totals:         0       0      34       0       0
  2249 ;;Total ram usage:       34 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    5
  2252 ;; This function calls:
  2253 ;;		_CWTX
  2254 ;;		_FMRX
  2255 ;;		_FMTX
  2256 ;; This function is called by:
  2257 ;;		_main
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           
  2262                           ;psect for function _ResetFreq
  2263  0CE9                     _ResetFreq:	
  2264                           
  2265                           ;FMCW.c: 306: int FMTX_Nprg[5] = {8,7,3,0,0};
  2266                           
  2267                           ;incstack = 0
  2268                           ; Regs used in _ResetFreq: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2269  0CE9  30A4               	movlw	ResetFreq@FMTX_Nprg& (0+255)
  2270  0CEA  0084               	movwf	4
  2271  0CEB  30DC               	movlw	low ResetFreq@F1704
  2272  0CEC  1683               	bsf	3,5	;RP0=1, select bank1
  2273  0CED  1303               	bcf	3,6	;RP1=0, select bank1
  2274  0CEE  00A0               	movwf	??_ResetFreq^(0+128)
  2275  0CEF  0804               	movf	4,w
  2276  0CF0  00A1               	movwf	(??_ResetFreq^(0+128)+1)
  2277  0CF1  300A               	movlw	10
  2278  0CF2  00A2               	movwf	(??_ResetFreq^(0+128)+2)
  2279  0CF3                     u3450:	
  2280  0CF3  0820               	movf	??_ResetFreq^(0+128),w
  2281  0CF4  0084               	movwf	4
  2282  0CF5  1383               	bcf	3,7	;select IRP bank1
  2283  0CF6  0800               	movf	0,w
  2284  0CF7  00A3               	movwf	(??_ResetFreq^(0+128)+3)
  2285  0CF8  0AA0               	incf	??_ResetFreq^(0+128),f
  2286  0CF9  0821               	movf	(??_ResetFreq^(0+128)+1),w
  2287  0CFA  0084               	movwf	4
  2288  0CFB  0823               	movf	(??_ResetFreq^(0+128)+3),w
  2289  0CFC  0080               	movwf	0
  2290  0CFD  0AA1               	incf	(??_ResetFreq^(0+128)+1),f
  2291  0CFE  0BA2               	decfsz	(??_ResetFreq^(0+128)+2),f
  2292  0CFF  2CF3               	goto	u3450
  2293                           
  2294                           ;FMCW.c: 307: int CWTX_Nprg[5] = {0,1,7,4,7};
  2295  0D00  30AE               	movlw	ResetFreq@CWTX_Nprg& (0+255)
  2296  0D01  0084               	movwf	4
  2297  0D02  30D2               	movlw	low ResetFreq@F1706
  2298  0D03  00A0               	movwf	??_ResetFreq^(0+128)
  2299  0D04  0804               	movf	4,w
  2300  0D05  00A1               	movwf	(??_ResetFreq^(0+128)+1)
  2301  0D06  300A               	movlw	10
  2302  0D07  00A2               	movwf	(??_ResetFreq^(0+128)+2)
  2303  0D08                     u3460:	
  2304  0D08  0820               	movf	??_ResetFreq^(0+128),w
  2305  0D09  0084               	movwf	4
  2306  0D0A  1383               	bcf	3,7	;select IRP bank1
  2307  0D0B  0800               	movf	0,w
  2308  0D0C  00A3               	movwf	(??_ResetFreq^(0+128)+3)
  2309  0D0D  0AA0               	incf	??_ResetFreq^(0+128),f
  2310  0D0E  0821               	movf	(??_ResetFreq^(0+128)+1),w
  2311  0D0F  0084               	movwf	4
  2312  0D10  0823               	movf	(??_ResetFreq^(0+128)+3),w
  2313  0D11  0080               	movwf	0
  2314  0D12  0AA1               	incf	(??_ResetFreq^(0+128)+1),f
  2315  0D13  0BA2               	decfsz	(??_ResetFreq^(0+128)+2),f
  2316  0D14  2D08               	goto	u3460
  2317                           
  2318                           ;FMCW.c: 308: int FMRX_Nprg[5] = {2,4,8,8,7};
  2319  0D15  30B8               	movlw	ResetFreq@FMRX_Nprg& (0+255)
  2320  0D16  0084               	movwf	4
  2321  0D17  30C8               	movlw	low ResetFreq@F1708
  2322  0D18  00A0               	movwf	??_ResetFreq^(0+128)
  2323  0D19  0804               	movf	4,w
  2324  0D1A  00A1               	movwf	(??_ResetFreq^(0+128)+1)
  2325  0D1B  300A               	movlw	10
  2326  0D1C  00A2               	movwf	(??_ResetFreq^(0+128)+2)
  2327  0D1D                     u3470:	
  2328  0D1D  0820               	movf	??_ResetFreq^(0+128),w
  2329  0D1E  0084               	movwf	4
  2330  0D1F  1383               	bcf	3,7	;select IRP bank1
  2331  0D20  0800               	movf	0,w
  2332  0D21  00A3               	movwf	(??_ResetFreq^(0+128)+3)
  2333  0D22  0AA0               	incf	??_ResetFreq^(0+128),f
  2334  0D23  0821               	movf	(??_ResetFreq^(0+128)+1),w
  2335  0D24  0084               	movwf	4
  2336  0D25  0823               	movf	(??_ResetFreq^(0+128)+3),w
  2337  0D26  0080               	movwf	0
  2338  0D27  0AA1               	incf	(??_ResetFreq^(0+128)+1),f
  2339  0D28  0BA2               	decfsz	(??_ResetFreq^(0+128)+2),f
  2340  0D29  2D1D               	goto	u3470
  2341                           
  2342                           ;FMCW.c: 310: FMTX(FMTX_Nref, FMTX_Nprg);
  2343  0D2A  086B               	movf	(_FMTX_Nref+1)^(0+128),w
  2344  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  2345  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  2346  0D2D  00EA               	movwf	FMTX@Nref+1
  2347  0D2E  1683               	bsf	3,5	;RP0=1, select bank1
  2348  0D2F  1303               	bcf	3,6	;RP1=0, select bank1
  2349  0D30  086A               	movf	_FMTX_Nref^(0+128),w
  2350  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  2351  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  2352  0D33  00E9               	movwf	FMTX@Nref
  2353  0D34  30A4               	movlw	(low (ResetFreq@FMTX_Nprg| 0))& (0+255)
  2354  0D35  00EB               	movwf	FMTX@Nprg
  2355  0D36  3000               	movlw	0
  2356  0D37  00EC               	movwf	FMTX@Nprg+1
  2357  0D38  120A  158A  212C  120A  158A  	fcall	_FMTX
  2358                           
  2359                           ;FMCW.c: 311: CWTX(CWTX_Nref, CWTX_Nprg);
  2360  0D3D  1683               	bsf	3,5	;RP0=1, select bank1
  2361  0D3E  1303               	bcf	3,6	;RP1=0, select bank1
  2362  0D3F  0869               	movf	(_CWTX_Nref+1)^(0+128),w
  2363  0D40  1283               	bcf	3,5	;RP0=0, select bank0
  2364  0D41  1303               	bcf	3,6	;RP1=0, select bank0
  2365  0D42  00EA               	movwf	CWTX@Nref+1
  2366  0D43  1683               	bsf	3,5	;RP0=1, select bank1
  2367  0D44  1303               	bcf	3,6	;RP1=0, select bank1
  2368  0D45  0868               	movf	_CWTX_Nref^(0+128),w
  2369  0D46  1283               	bcf	3,5	;RP0=0, select bank0
  2370  0D47  1303               	bcf	3,6	;RP1=0, select bank0
  2371  0D48  00E9               	movwf	CWTX@Nref
  2372  0D49  30AE               	movlw	(low (ResetFreq@CWTX_Nprg| 0))& (0+255)
  2373  0D4A  00EB               	movwf	CWTX@Nprg
  2374  0D4B  3000               	movlw	0
  2375  0D4C  00EC               	movwf	CWTX@Nprg+1
  2376  0D4D  120A  158A  20D4  120A  158A  	fcall	_CWTX
  2377                           
  2378                           ;FMCW.c: 312: FMRX(FMRX_Nref, FMRX_Nprg);
  2379  0D52  1683               	bsf	3,5	;RP0=1, select bank1
  2380  0D53  1303               	bcf	3,6	;RP1=0, select bank1
  2381  0D54  0867               	movf	(_FMRX_Nref+1)^(0+128),w
  2382  0D55  1283               	bcf	3,5	;RP0=0, select bank0
  2383  0D56  1303               	bcf	3,6	;RP1=0, select bank0
  2384  0D57  00EA               	movwf	FMRX@Nref+1
  2385  0D58  1683               	bsf	3,5	;RP0=1, select bank1
  2386  0D59  1303               	bcf	3,6	;RP1=0, select bank1
  2387  0D5A  0866               	movf	_FMRX_Nref^(0+128),w
  2388  0D5B  1283               	bcf	3,5	;RP0=0, select bank0
  2389  0D5C  1303               	bcf	3,6	;RP1=0, select bank0
  2390  0D5D  00E9               	movwf	FMRX@Nref
  2391  0D5E  30B8               	movlw	(low (ResetFreq@FMRX_Nprg| 0))& (0+255)
  2392  0D5F  00EB               	movwf	FMRX@Nprg
  2393  0D60  3000               	movlw	0
  2394  0D61  00EC               	movwf	FMRX@Nprg+1
  2395  0D62  120A  158A  2100   	fcall	_FMRX
  2396  0D65  0008               	return
  2397  0D66                     __end_of_ResetFreq:	
  2398                           
  2399                           	psect	text4
  2400  092C                     __ptext4:	
  2401 ;; *************** function _FMTX *****************
  2402 ;; Defined at:
  2403 ;;		line 270 in file "FMCW.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  Nref            2   73[BANK0 ] int 
  2406 ;;  Nprg            2   75[BANK0 ] PTR int 
  2407 ;;		 -> RAM(512), ResetFreq@FMTX_Nprg(10), 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  fmtx            2   77[BANK0 ] int 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      void 
  2412 ;; Registers used:
  2413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2419 ;;      Params:         0       4       0       0       0
  2420 ;;      Locals:         0       2       0       0       0
  2421 ;;      Temps:          0       0       0       0       0
  2422 ;;      Totals:         0       6       0       0       0
  2423 ;;Total ram usage:        6 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; Hardware stack levels required when called:    4
  2426 ;; This function calls:
  2427 ;;		_OPINIT
  2428 ;;		_OUTFQ
  2429 ;;		_RFDOUT
  2430 ;; This function is called by:
  2431 ;;		_ResetFreq
  2432 ;;		_SetPLL
  2433 ;; This function uses a non-reentrant model
  2434 ;;
  2435                           
  2436                           
  2437                           ;psect for function _FMTX
  2438  092C                     _FMTX:	
  2439                           
  2440                           ;FMCW.c: 271: int fmtx = 1;
  2441                           
  2442                           ;incstack = 0
  2443                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2444  092C  3001               	movlw	1
  2445  092D  1283               	bcf	3,5	;RP0=0, select bank0
  2446  092E  1303               	bcf	3,6	;RP1=0, select bank0
  2447  092F  00ED               	movwf	FMTX@fmtx
  2448  0930  3000               	movlw	0
  2449  0931  00EE               	movwf	FMTX@fmtx+1
  2450                           
  2451                           ;FMCW.c: 272: OPINIT(fmtx);
  2452  0932  086E               	movf	FMTX@fmtx+1,w
  2453  0933  00A5               	movwf	OPINIT@fmcwtxrx+1
  2454  0934  086D               	movf	FMTX@fmtx,w
  2455  0935  00A4               	movwf	OPINIT@fmcwtxrx
  2456  0936  120A  118A  274B  120A  158A  	fcall	_OPINIT
  2457                           
  2458                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  2459  093B  1283               	bcf	3,5	;RP0=0, select bank0
  2460  093C  1303               	bcf	3,6	;RP1=0, select bank0
  2461  093D  086E               	movf	FMTX@fmtx+1,w
  2462  093E  00AA               	movwf	RFDOUT@fmcwtxrx+1
  2463  093F  086D               	movf	FMTX@fmtx,w
  2464  0940  00A9               	movwf	RFDOUT@fmcwtxrx
  2465  0941  086A               	movf	FMTX@Nref+1,w
  2466  0942  00AC               	movwf	RFDOUT@Nref+1
  2467  0943  0869               	movf	FMTX@Nref,w
  2468  0944  00AB               	movwf	RFDOUT@Nref
  2469  0945  120A  158A  25E8  120A  158A  	fcall	_RFDOUT
  2470                           
  2471                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  2472  094A  1283               	bcf	3,5	;RP0=0, select bank0
  2473  094B  1303               	bcf	3,6	;RP1=0, select bank0
  2474  094C  086E               	movf	FMTX@fmtx+1,w
  2475  094D  00AA               	movwf	OUTFQ@fmcwtxrx+1
  2476  094E  086D               	movf	FMTX@fmtx,w
  2477  094F  00A9               	movwf	OUTFQ@fmcwtxrx
  2478  0950  086B               	movf	FMTX@Nprg,w
  2479  0951  00AB               	movwf	OUTFQ@Nprg
  2480  0952  086C               	movf	FMTX@Nprg+1,w
  2481  0953  00AC               	movwf	OUTFQ@Nprg+1
  2482  0954  120A  118A  24CA   	fcall	_OUTFQ
  2483  0957  0008               	return
  2484  0958                     __end_of_FMTX:	
  2485                           
  2486                           	psect	text5
  2487  0900                     __ptext5:	
  2488 ;; *************** function _FMRX *****************
  2489 ;; Defined at:
  2490 ;;		line 298 in file "FMCW.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  Nref            2   73[BANK0 ] int 
  2493 ;;  Nprg            2   75[BANK0 ] PTR int 
  2494 ;;		 -> RAM(512), ResetFreq@FMRX_Nprg(10), 
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;  fmrx            2   77[BANK0 ] int 
  2497 ;; Return value:  Size  Location     Type
  2498 ;;                  1    wreg      void 
  2499 ;; Registers used:
  2500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2501 ;; Tracked objects:
  2502 ;;		On entry : 0/0
  2503 ;;		On exit  : 0/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2506 ;;      Params:         0       4       0       0       0
  2507 ;;      Locals:         0       2       0       0       0
  2508 ;;      Temps:          0       0       0       0       0
  2509 ;;      Totals:         0       6       0       0       0
  2510 ;;Total ram usage:        6 bytes
  2511 ;; Hardware stack levels used:    1
  2512 ;; Hardware stack levels required when called:    4
  2513 ;; This function calls:
  2514 ;;		_OPINIT
  2515 ;;		_OUTFQ
  2516 ;;		_RFDOUT
  2517 ;; This function is called by:
  2518 ;;		_ResetFreq
  2519 ;;		_SetPLL
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           
  2524                           ;psect for function _FMRX
  2525  0900                     _FMRX:	
  2526                           
  2527                           ;FMCW.c: 299: int fmrx = 3;
  2528                           
  2529                           ;incstack = 0
  2530                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2531  0900  3003               	movlw	3
  2532  0901  1283               	bcf	3,5	;RP0=0, select bank0
  2533  0902  1303               	bcf	3,6	;RP1=0, select bank0
  2534  0903  00ED               	movwf	FMRX@fmrx
  2535  0904  3000               	movlw	0
  2536  0905  00EE               	movwf	FMRX@fmrx+1
  2537                           
  2538                           ;FMCW.c: 300: OPINIT(fmrx);
  2539  0906  086E               	movf	FMRX@fmrx+1,w
  2540  0907  00A5               	movwf	OPINIT@fmcwtxrx+1
  2541  0908  086D               	movf	FMRX@fmrx,w
  2542  0909  00A4               	movwf	OPINIT@fmcwtxrx
  2543  090A  120A  118A  274B  120A  158A  	fcall	_OPINIT
  2544                           
  2545                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  2546  090F  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0910  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0911  086E               	movf	FMRX@fmrx+1,w
  2549  0912  00AA               	movwf	RFDOUT@fmcwtxrx+1
  2550  0913  086D               	movf	FMRX@fmrx,w
  2551  0914  00A9               	movwf	RFDOUT@fmcwtxrx
  2552  0915  086A               	movf	FMRX@Nref+1,w
  2553  0916  00AC               	movwf	RFDOUT@Nref+1
  2554  0917  0869               	movf	FMRX@Nref,w
  2555  0918  00AB               	movwf	RFDOUT@Nref
  2556  0919  120A  158A  25E8  120A  158A  	fcall	_RFDOUT
  2557                           
  2558                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  2559  091E  1283               	bcf	3,5	;RP0=0, select bank0
  2560  091F  1303               	bcf	3,6	;RP1=0, select bank0
  2561  0920  086E               	movf	FMRX@fmrx+1,w
  2562  0921  00AA               	movwf	OUTFQ@fmcwtxrx+1
  2563  0922  086D               	movf	FMRX@fmrx,w
  2564  0923  00A9               	movwf	OUTFQ@fmcwtxrx
  2565  0924  086B               	movf	FMRX@Nprg,w
  2566  0925  00AB               	movwf	OUTFQ@Nprg
  2567  0926  086C               	movf	FMRX@Nprg+1,w
  2568  0927  00AC               	movwf	OUTFQ@Nprg+1
  2569  0928  120A  118A  24CA   	fcall	_OUTFQ
  2570  092B  0008               	return
  2571  092C                     __end_of_FMRX:	
  2572                           
  2573                           	psect	text6
  2574  08D4                     __ptext6:	
  2575 ;; *************** function _CWTX *****************
  2576 ;; Defined at:
  2577 ;;		line 284 in file "FMCW.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;  Nref            2   73[BANK0 ] int 
  2580 ;;  Nprg            2   75[BANK0 ] PTR int 
  2581 ;;		 -> RAM(512), ResetFreq@CWTX_Nprg(10), 
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;  cwtx            2   77[BANK0 ] int 
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  1    wreg      void 
  2586 ;; Registers used:
  2587 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2593 ;;      Params:         0       4       0       0       0
  2594 ;;      Locals:         0       2       0       0       0
  2595 ;;      Temps:          0       0       0       0       0
  2596 ;;      Totals:         0       6       0       0       0
  2597 ;;Total ram usage:        6 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; Hardware stack levels required when called:    4
  2600 ;; This function calls:
  2601 ;;		_OPINIT
  2602 ;;		_OUTFQ
  2603 ;;		_RFDOUT
  2604 ;; This function is called by:
  2605 ;;		_ResetFreq
  2606 ;;		_SetPLL
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           
  2611                           ;psect for function _CWTX
  2612  08D4                     _CWTX:	
  2613                           
  2614                           ;FMCW.c: 285: int cwtx = 2;
  2615                           
  2616                           ;incstack = 0
  2617                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2618  08D4  3002               	movlw	2
  2619  08D5  1283               	bcf	3,5	;RP0=0, select bank0
  2620  08D6  1303               	bcf	3,6	;RP1=0, select bank0
  2621  08D7  00ED               	movwf	CWTX@cwtx
  2622  08D8  3000               	movlw	0
  2623  08D9  00EE               	movwf	CWTX@cwtx+1
  2624                           
  2625                           ;FMCW.c: 286: OPINIT(cwtx);
  2626  08DA  086E               	movf	CWTX@cwtx+1,w
  2627  08DB  00A5               	movwf	OPINIT@fmcwtxrx+1
  2628  08DC  086D               	movf	CWTX@cwtx,w
  2629  08DD  00A4               	movwf	OPINIT@fmcwtxrx
  2630  08DE  120A  118A  274B  120A  158A  	fcall	_OPINIT
  2631                           
  2632                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  2633  08E3  1283               	bcf	3,5	;RP0=0, select bank0
  2634  08E4  1303               	bcf	3,6	;RP1=0, select bank0
  2635  08E5  086E               	movf	CWTX@cwtx+1,w
  2636  08E6  00AA               	movwf	RFDOUT@fmcwtxrx+1
  2637  08E7  086D               	movf	CWTX@cwtx,w
  2638  08E8  00A9               	movwf	RFDOUT@fmcwtxrx
  2639  08E9  086A               	movf	CWTX@Nref+1,w
  2640  08EA  00AC               	movwf	RFDOUT@Nref+1
  2641  08EB  0869               	movf	CWTX@Nref,w
  2642  08EC  00AB               	movwf	RFDOUT@Nref
  2643  08ED  120A  158A  25E8  120A  158A  	fcall	_RFDOUT
  2644                           
  2645                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  2646  08F2  1283               	bcf	3,5	;RP0=0, select bank0
  2647  08F3  1303               	bcf	3,6	;RP1=0, select bank0
  2648  08F4  086E               	movf	CWTX@cwtx+1,w
  2649  08F5  00AA               	movwf	OUTFQ@fmcwtxrx+1
  2650  08F6  086D               	movf	CWTX@cwtx,w
  2651  08F7  00A9               	movwf	OUTFQ@fmcwtxrx
  2652  08F8  086B               	movf	CWTX@Nprg,w
  2653  08F9  00AB               	movwf	OUTFQ@Nprg
  2654  08FA  086C               	movf	CWTX@Nprg+1,w
  2655  08FB  00AC               	movwf	OUTFQ@Nprg+1
  2656  08FC  120A  118A  24CA   	fcall	_OUTFQ
  2657  08FF  0008               	return
  2658  0900                     __end_of_CWTX:	
  2659                           
  2660                           	psect	text7
  2661  0DE8                     __ptext7:	
  2662 ;; *************** function _RFDOUT *****************
  2663 ;; Defined at:
  2664 ;;		line 200 in file "FMCW.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  fmcwtxrx        2    9[BANK0 ] int 
  2667 ;;  Nref            2   11[BANK0 ] int 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  i               2   44[BANK0 ] int 
  2670 ;;  i               2   40[BANK0 ] int 
  2671 ;;  i               2   42[BANK0 ] int 
  2672 ;;  Nref_b         24   16[BANK0 ] int [12]
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2682 ;;      Params:         0       4       0       0       0
  2683 ;;      Locals:         0      30       0       0       0
  2684 ;;      Temps:          0       3       0       0       0
  2685 ;;      Totals:         0      37       0       0       0
  2686 ;;Total ram usage:       37 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    3
  2689 ;; This function calls:
  2690 ;;		_H_OUT
  2691 ;;		_L_OUT
  2692 ;;		_STBOUT
  2693 ;;		___awdiv
  2694 ;; This function is called by:
  2695 ;;		_FMTX
  2696 ;;		_CWTX
  2697 ;;		_FMRX
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           
  2702                           ;psect for function _RFDOUT
  2703  0DE8                     _RFDOUT:	
  2704                           
  2705                           ;FMCW.c: 201: int Nref_b[12];
  2706                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  2707                           
  2708                           ;incstack = 0
  2709                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2710  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  2711  0DE9  1303               	bcf	3,6	;RP1=0, select bank0
  2712  0DEA  01CA               	clrf	RFDOUT@i
  2713  0DEB  01CB               	clrf	RFDOUT@i+1
  2714  0DEC  084B               	movf	RFDOUT@i+1,w
  2715  0DED  3A80               	xorlw	128
  2716  0DEE  00FF               	movwf	127
  2717  0DEF  3080               	movlw	128
  2718  0DF0  027F               	subwf	127,w
  2719  0DF1  1D03               	skipz
  2720  0DF2  2DF5               	goto	u3365
  2721  0DF3  300C               	movlw	12
  2722  0DF4  024A               	subwf	RFDOUT@i,w
  2723  0DF5                     u3365:	
  2724  0DF5  1803               	btfsc	3,0
  2725  0DF6  2E13               	goto	l3465
  2726  0DF7                     l3459:	
  2727                           
  2728                           ;FMCW.c: 204: Nref_b[i] = 0;
  2729  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  2731  0DF9  084A               	movf	RFDOUT@i,w
  2732  0DFA  00AD               	movwf	??_RFDOUT
  2733  0DFB  072D               	addwf	??_RFDOUT,w
  2734  0DFC  3E30               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  2735  0DFD  0084               	movwf	4
  2736  0DFE  1383               	bcf	3,7	;select IRP bank0
  2737  0DFF  0180               	clrf	0
  2738  0E00  0A84               	incf	4,f
  2739  0E01  0180               	clrf	0
  2740  0E02  3001               	movlw	1
  2741  0E03  07CA               	addwf	RFDOUT@i,f
  2742  0E04  1803               	skipnc
  2743  0E05  0ACB               	incf	RFDOUT@i+1,f
  2744  0E06  3000               	movlw	0
  2745  0E07  07CB               	addwf	RFDOUT@i+1,f
  2746  0E08  084B               	movf	RFDOUT@i+1,w
  2747  0E09  3A80               	xorlw	128
  2748  0E0A  00FF               	movwf	127
  2749  0E0B  3080               	movlw	128
  2750  0E0C  027F               	subwf	127,w
  2751  0E0D  1D03               	skipz
  2752  0E0E  2E11               	goto	u3375
  2753  0E0F  300C               	movlw	12
  2754  0E10  024A               	subwf	RFDOUT@i,w
  2755  0E11                     u3375:	
  2756  0E11  1C03               	skipc
  2757  0E12  2DF7               	goto	l3459
  2758  0E13                     l3465:	
  2759                           
  2760                           ;FMCW.c: 205: }
  2761                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  2762  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  2763  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  2764  0E15  01C8               	clrf	RFDOUT@i_342
  2765  0E16  01C9               	clrf	RFDOUT@i_342+1
  2766  0E17  082C               	movf	RFDOUT@Nref+1,w
  2767  0E18  3A80               	xorlw	128
  2768  0E19  00FF               	movwf	127
  2769  0E1A  3080               	movlw	128
  2770  0E1B  027F               	subwf	127,w
  2771  0E1C  1D03               	skipz
  2772  0E1D  2E20               	goto	u3385
  2773  0E1E  3001               	movlw	1
  2774  0E1F  022B               	subwf	RFDOUT@Nref,w
  2775  0E20                     u3385:	
  2776  0E20  1C03               	btfss	3,0
  2777  0E21  2E59               	goto	l3479
  2778  0E22                     l3471:	
  2779                           
  2780                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  2781  0E22  3001               	movlw	1
  2782  0E23  1283               	bcf	3,5	;RP0=0, select bank0
  2783  0E24  1303               	bcf	3,6	;RP1=0, select bank0
  2784  0E25  052B               	andwf	RFDOUT@Nref,w
  2785  0E26  00AD               	movwf	??_RFDOUT
  2786  0E27  3000               	movlw	0
  2787  0E28  052C               	andwf	RFDOUT@Nref+1,w
  2788  0E29  00AE               	movwf	??_RFDOUT+1
  2789  0E2A  0848               	movf	RFDOUT@i_342,w
  2790  0E2B  00AF               	movwf	??_RFDOUT+2
  2791  0E2C  072F               	addwf	??_RFDOUT+2,w
  2792  0E2D  3E30               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  2793  0E2E  0084               	movwf	4
  2794  0E2F  082D               	movf	??_RFDOUT,w
  2795  0E30  1383               	bcf	3,7	;select IRP bank0
  2796  0E31  0080               	movwf	0
  2797  0E32  0A84               	incf	4,f
  2798  0E33  082E               	movf	??_RFDOUT+1,w
  2799  0E34  0080               	movwf	0
  2800                           
  2801                           ;FMCW.c: 210: Nref = Nref / 2;
  2802  0E35  3002               	movlw	2
  2803  0E36  00A0               	movwf	___awdiv@divisor
  2804  0E37  3000               	movlw	0
  2805  0E38  00A1               	movwf	___awdiv@divisor+1
  2806  0E39  082C               	movf	RFDOUT@Nref+1,w
  2807  0E3A  00A3               	movwf	___awdiv@dividend+1
  2808  0E3B  082B               	movf	RFDOUT@Nref,w
  2809  0E3C  00A2               	movwf	___awdiv@dividend
  2810  0E3D  120A  158A  22FC  120A  158A  	fcall	___awdiv
  2811  0E42  1283               	bcf	3,5	;RP0=0, select bank0
  2812  0E43  1303               	bcf	3,6	;RP1=0, select bank0
  2813  0E44  0821               	movf	?___awdiv+1,w
  2814  0E45  00AC               	movwf	RFDOUT@Nref+1
  2815  0E46  0820               	movf	?___awdiv,w
  2816  0E47  00AB               	movwf	RFDOUT@Nref
  2817  0E48  3001               	movlw	1
  2818  0E49  07C8               	addwf	RFDOUT@i_342,f
  2819  0E4A  1803               	skipnc
  2820  0E4B  0AC9               	incf	RFDOUT@i_342+1,f
  2821  0E4C  3000               	movlw	0
  2822  0E4D  07C9               	addwf	RFDOUT@i_342+1,f
  2823  0E4E  082C               	movf	RFDOUT@Nref+1,w
  2824  0E4F  3A80               	xorlw	128
  2825  0E50  00FF               	movwf	127
  2826  0E51  3080               	movlw	128
  2827  0E52  027F               	subwf	127,w
  2828  0E53  1D03               	skipz
  2829  0E54  2E57               	goto	u3395
  2830  0E55  3001               	movlw	1
  2831  0E56  022B               	subwf	RFDOUT@Nref,w
  2832  0E57                     u3395:	
  2833  0E57  1803               	skipnc
  2834  0E58  2E22               	goto	l3471
  2835  0E59                     l3479:	
  2836                           
  2837                           ;FMCW.c: 211: }
  2838                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  2839  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  2840  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  2841  0E5B  01CC               	clrf	RFDOUT@i_343
  2842  0E5C  01CD               	clrf	RFDOUT@i_343+1
  2843  0E5D  084D               	movf	RFDOUT@i_343+1,w
  2844  0E5E  3A80               	xorlw	128
  2845  0E5F  00FF               	movwf	127
  2846  0E60  3080               	movlw	128
  2847  0E61  027F               	subwf	127,w
  2848  0E62  1D03               	skipz
  2849  0E63  2E66               	goto	u3405
  2850  0E64  300C               	movlw	12
  2851  0E65  024C               	subwf	RFDOUT@i_343,w
  2852  0E66                     u3405:	
  2853  0E66  1803               	btfsc	3,0
  2854  0E67  2EAF               	goto	l3497
  2855  0E68                     l3485:	
  2856                           
  2857                           ;FMCW.c: 215: {
  2858                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  2859  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  2860  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  2861  0E6A  084C               	movf	RFDOUT@i_343,w
  2862  0E6B  00AD               	movwf	??_RFDOUT
  2863  0E6C  072D               	addwf	??_RFDOUT,w
  2864  0E6D  3E30               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  2865  0E6E  0084               	movwf	4
  2866  0E6F  1383               	bcf	3,7	;select IRP bank0
  2867  0E70  0800               	movf	0,w
  2868  0E71  00AE               	movwf	??_RFDOUT+1
  2869  0E72  0A84               	incf	4,f
  2870  0E73  0800               	movf	0,w
  2871  0E74  00AF               	movwf	??_RFDOUT+2
  2872  0E75  082E               	movf	??_RFDOUT+1,w
  2873  0E76  042F               	iorwf	??_RFDOUT+2,w
  2874  0E77  1D03               	btfss	3,2
  2875  0E78  2E82               	goto	l3489
  2876                           
  2877                           ;FMCW.c: 217: {
  2878                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  2879  0E79  082A               	movf	RFDOUT@fmcwtxrx+1,w
  2880  0E7A  00A3               	movwf	L_OUT@fmcwtxrx+1
  2881  0E7B  0829               	movf	RFDOUT@fmcwtxrx,w
  2882  0E7C  00A2               	movwf	L_OUT@fmcwtxrx
  2883  0E7D  120A  158A  21D0  120A  158A  	fcall	_L_OUT
  2884  0E82                     l3489:	
  2885                           
  2886                           ;FMCW.c: 219: }
  2887                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  2888  0E82  1283               	bcf	3,5	;RP0=0, select bank0
  2889  0E83  1303               	bcf	3,6	;RP1=0, select bank0
  2890  0E84  084C               	movf	RFDOUT@i_343,w
  2891  0E85  00AD               	movwf	??_RFDOUT
  2892  0E86  072D               	addwf	??_RFDOUT,w
  2893  0E87  3E30               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  2894  0E88  0084               	movwf	4
  2895  0E89  1383               	bcf	3,7	;select IRP bank0
  2896  0E8A  0800               	movf	0,w
  2897  0E8B  00AE               	movwf	??_RFDOUT+1
  2898  0E8C  0A84               	incf	4,f
  2899  0E8D  0800               	movf	0,w
  2900  0E8E  00AF               	movwf	??_RFDOUT+2
  2901  0E8F  032E               	decf	??_RFDOUT+1,w
  2902  0E90  042F               	iorwf	??_RFDOUT+2,w
  2903  0E91  1D03               	btfss	3,2
  2904  0E92  2E9C               	goto	l3493
  2905                           
  2906                           ;FMCW.c: 221: {
  2907                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  2908  0E93  082A               	movf	RFDOUT@fmcwtxrx+1,w
  2909  0E94  00A3               	movwf	H_OUT@fmcwtxrx+1
  2910  0E95  0829               	movf	RFDOUT@fmcwtxrx,w
  2911  0E96  00A2               	movwf	H_OUT@fmcwtxrx
  2912  0E97  120A  158A  218E  120A  158A  	fcall	_H_OUT
  2913  0E9C                     l3493:	
  2914  0E9C  3001               	movlw	1
  2915  0E9D  1283               	bcf	3,5	;RP0=0, select bank0
  2916  0E9E  1303               	bcf	3,6	;RP1=0, select bank0
  2917  0E9F  07CC               	addwf	RFDOUT@i_343,f
  2918  0EA0  1803               	skipnc
  2919  0EA1  0ACD               	incf	RFDOUT@i_343+1,f
  2920  0EA2  3000               	movlw	0
  2921  0EA3  07CD               	addwf	RFDOUT@i_343+1,f
  2922  0EA4  084D               	movf	RFDOUT@i_343+1,w
  2923  0EA5  3A80               	xorlw	128
  2924  0EA6  00FF               	movwf	127
  2925  0EA7  3080               	movlw	128
  2926  0EA8  027F               	subwf	127,w
  2927  0EA9  1D03               	skipz
  2928  0EAA  2EAD               	goto	u3435
  2929  0EAB  300C               	movlw	12
  2930  0EAC  024C               	subwf	RFDOUT@i_343,w
  2931  0EAD                     u3435:	
  2932  0EAD  1C03               	skipc
  2933  0EAE  2E68               	goto	l3485
  2934  0EAF                     l3497:	
  2935                           
  2936                           ;FMCW.c: 223: }
  2937                           ;FMCW.c: 224: }
  2938                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  2939  0EAF  1283               	bcf	3,5	;RP0=0, select bank0
  2940  0EB0  1303               	bcf	3,6	;RP1=0, select bank0
  2941  0EB1  082A               	movf	RFDOUT@fmcwtxrx+1,w
  2942  0EB2  00A3               	movwf	H_OUT@fmcwtxrx+1
  2943  0EB3  0829               	movf	RFDOUT@fmcwtxrx,w
  2944  0EB4  00A2               	movwf	H_OUT@fmcwtxrx
  2945  0EB5  120A  158A  218E  120A  158A  	fcall	_H_OUT
  2946                           
  2947                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  2948  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  2949  0EBB  1303               	bcf	3,6	;RP1=0, select bank0
  2950  0EBC  082A               	movf	RFDOUT@fmcwtxrx+1,w
  2951  0EBD  00A3               	movwf	H_OUT@fmcwtxrx+1
  2952  0EBE  0829               	movf	RFDOUT@fmcwtxrx,w
  2953  0EBF  00A2               	movwf	H_OUT@fmcwtxrx
  2954  0EC0  120A  158A  218E  120A  158A  	fcall	_H_OUT
  2955                           
  2956                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  2957  0EC5  1283               	bcf	3,5	;RP0=0, select bank0
  2958  0EC6  1303               	bcf	3,6	;RP1=0, select bank0
  2959  0EC7  082A               	movf	RFDOUT@fmcwtxrx+1,w
  2960  0EC8  00A3               	movwf	STBOUT@fmcwtxrx+1
  2961  0EC9  0829               	movf	RFDOUT@fmcwtxrx,w
  2962  0ECA  00A2               	movwf	STBOUT@fmcwtxrx
  2963  0ECB  120A  158A  20AA   	fcall	_STBOUT
  2964  0ECE  0008               	return
  2965  0ECF                     __end_of_RFDOUT:	
  2966                           
  2967                           	psect	text8
  2968  04CA                     __ptext8:	
  2969 ;; *************** function _OUTFQ *****************
  2970 ;; Defined at:
  2971 ;;		line 136 in file "FMCW.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  fmcwtxrx        2    9[BANK0 ] int 
  2974 ;;  Nprg            2   11[BANK0 ] PTR int 
  2975 ;;		 -> RAM(512), ResetFreq@FMRX_Nprg(10), ResetFreq@CWTX_Nprg(10), ResetFreq@FMTX_Nprg(10), 
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;  j               2   71[BANK0 ] int 
  2978 ;;  i               2   69[BANK0 ] int 
  2979 ;;  i               2   63[BANK0 ] int 
  2980 ;;  i               2   67[BANK0 ] int 
  2981 ;;  Nprg_b         34   29[BANK0 ] int [17]
  2982 ;;  count           2   65[BANK0 ] int 
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2992 ;;      Params:         0       4       0       0       0
  2993 ;;      Locals:         0      44       0       0       0
  2994 ;;      Temps:          0      16       0       0       0
  2995 ;;      Totals:         0      64       0       0       0
  2996 ;;Total ram usage:       64 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    3
  2999 ;; This function calls:
  3000 ;;		_H_OUT
  3001 ;;		_L_OUT
  3002 ;;		_STBOUT
  3003 ;;		___awdiv
  3004 ;; This function is called by:
  3005 ;;		_FMTX
  3006 ;;		_CWTX
  3007 ;;		_FMRX
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           
  3012                           ;psect for function _OUTFQ
  3013  04CA                     _OUTFQ:	
  3014                           
  3015                           ;FMCW.c: 137: int count = 0;
  3016                           
  3017                           ;incstack = 0
  3018                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3019  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  3020  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  3021  04CC  01E1               	clrf	OUTFQ@count
  3022  04CD  01E2               	clrf	OUTFQ@count+1
  3023                           
  3024                           ;FMCW.c: 138: int Nprg_b[17];
  3025                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  3026  04CE  01E3               	clrf	OUTFQ@i
  3027  04CF  01E4               	clrf	OUTFQ@i+1
  3028  04D0  0864               	movf	OUTFQ@i+1,w
  3029  04D1  3A80               	xorlw	128
  3030  04D2  00FF               	movwf	127
  3031  04D3  3080               	movlw	128
  3032  04D4  027F               	subwf	127,w
  3033  04D5  1D03               	skipz
  3034  04D6  2CD9               	goto	u3225
  3035  04D7  3011               	movlw	17
  3036  04D8  0263               	subwf	OUTFQ@i,w
  3037  04D9                     u3225:	
  3038  04D9  1803               	btfsc	3,0
  3039  04DA  2CF7               	goto	l3387
  3040  04DB                     l3381:	
  3041                           
  3042                           ;FMCW.c: 141: Nprg_b[i] = 0;
  3043  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  3044  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  3045  04DD  0863               	movf	OUTFQ@i,w
  3046  04DE  00AD               	movwf	??_OUTFQ
  3047  04DF  072D               	addwf	??_OUTFQ,w
  3048  04E0  3E3D               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  3049  04E1  0084               	movwf	4
  3050  04E2  1383               	bcf	3,7	;select IRP bank0
  3051  04E3  0180               	clrf	0
  3052  04E4  0A84               	incf	4,f
  3053  04E5  0180               	clrf	0
  3054  04E6  3001               	movlw	1
  3055  04E7  07E3               	addwf	OUTFQ@i,f
  3056  04E8  1803               	skipnc
  3057  04E9  0AE4               	incf	OUTFQ@i+1,f
  3058  04EA  3000               	movlw	0
  3059  04EB  07E4               	addwf	OUTFQ@i+1,f
  3060  04EC  0864               	movf	OUTFQ@i+1,w
  3061  04ED  3A80               	xorlw	128
  3062  04EE  00FF               	movwf	127
  3063  04EF  3080               	movlw	128
  3064  04F0  027F               	subwf	127,w
  3065  04F1  1D03               	skipz
  3066  04F2  2CF5               	goto	u3235
  3067  04F3  3011               	movlw	17
  3068  04F4  0263               	subwf	OUTFQ@i,w
  3069  04F5                     u3235:	
  3070  04F5  1C03               	skipc
  3071  04F6  2CDB               	goto	l3381
  3072  04F7                     l3387:	
  3073                           
  3074                           ;FMCW.c: 142: }
  3075                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  3076  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  3077  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  3078  04F9  01DF               	clrf	OUTFQ@i_331
  3079  04FA  01E0               	clrf	OUTFQ@i_331+1
  3080  04FB  0860               	movf	OUTFQ@i_331+1,w
  3081  04FC  3A80               	xorlw	128
  3082  04FD  00FF               	movwf	127
  3083  04FE  3080               	movlw	128
  3084  04FF  027F               	subwf	127,w
  3085  0500  1D03               	skipz
  3086  0501  2D04               	goto	u3245
  3087  0502  3011               	movlw	17
  3088  0503  025F               	subwf	OUTFQ@i_331,w
  3089  0504                     u3245:	
  3090  0504  1803               	btfsc	3,0
  3091  0505  2ED5               	goto	l3433
  3092  0506                     l3393:	
  3093                           
  3094                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  3095  0506  1283               	bcf	3,5	;RP0=0, select bank0
  3096  0507  1303               	bcf	3,6	;RP1=0, select bank0
  3097  0508  01E7               	clrf	OUTFQ@j
  3098  0509  01E8               	clrf	OUTFQ@j+1
  3099  050A  0868               	movf	OUTFQ@j+1,w
  3100  050B  3A80               	xorlw	128
  3101  050C  00FF               	movwf	127
  3102  050D  3080               	movlw	128
  3103  050E  027F               	subwf	127,w
  3104  050F  1D03               	skipz
  3105  0510  2D13               	goto	u3255
  3106  0511  3005               	movlw	5
  3107  0512  0267               	subwf	OUTFQ@j,w
  3108  0513                     u3255:	
  3109  0513  1803               	btfsc	3,0
  3110  0514  2EC2               	goto	l3429
  3111  0515                     l3399:	
  3112                           
  3113                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  3114  0515  1283               	bcf	3,5	;RP0=0, select bank0
  3115  0516  1303               	bcf	3,6	;RP1=0, select bank0
  3116  0517  0868               	movf	OUTFQ@j+1,w
  3117  0518  00AE               	movwf	??_OUTFQ+1
  3118  0519  0867               	movf	OUTFQ@j,w
  3119  051A  00AD               	movwf	??_OUTFQ
  3120  051B  1003               	clrc
  3121  051C  0DAD               	rlf	??_OUTFQ,f
  3122  051D  0DAE               	rlf	??_OUTFQ+1,f
  3123  051E  082D               	movf	??_OUTFQ,w
  3124  051F  072B               	addwf	OUTFQ@Nprg,w
  3125  0520  00AF               	movwf	??_OUTFQ+2
  3126  0521  082E               	movf	??_OUTFQ+1,w
  3127  0522  1803               	skipnc
  3128  0523  0A2E               	incf	??_OUTFQ+1,w
  3129  0524  072C               	addwf	OUTFQ@Nprg+1,w
  3130  0525  00B0               	movwf	??_OUTFQ+3
  3131  0526  082F               	movf	??_OUTFQ+2,w
  3132  0527  0084               	movwf	4
  3133  0528  1783               	bsf	3,7
  3134  0529  1C30               	btfss	??_OUTFQ+3,0
  3135  052A  1383               	bcf	3,7
  3136  052B  0800               	movf	0,w
  3137  052C  00B1               	movwf	??_OUTFQ+4
  3138  052D  0A84               	incf	4,f
  3139  052E  0800               	movf	0,w
  3140  052F  00B2               	movwf	??_OUTFQ+5
  3141  0530  1831               	btfsc	??_OUTFQ+4,0
  3142  0531  2DBB               	goto	l3411
  3143                           
  3144                           ;FMCW.c: 148: if(j == 4){
  3145  0532  3004               	movlw	4
  3146  0533  0667               	xorwf	OUTFQ@j,w
  3147  0534  0468               	iorwf	OUTFQ@j+1,w
  3148  0535  1D03               	btfss	3,2
  3149  0536  2D7E               	goto	l3409
  3150                           
  3151                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  3152  0537  3002               	movlw	2
  3153  0538  00A0               	movwf	___awdiv@divisor
  3154  0539  3000               	movlw	0
  3155  053A  00A1               	movwf	___awdiv@divisor+1
  3156  053B  0868               	movf	OUTFQ@j+1,w
  3157  053C  00AE               	movwf	??_OUTFQ+1
  3158  053D  0867               	movf	OUTFQ@j,w
  3159  053E  00AD               	movwf	??_OUTFQ
  3160  053F  1003               	clrc
  3161  0540  0DAD               	rlf	??_OUTFQ,f
  3162  0541  0DAE               	rlf	??_OUTFQ+1,f
  3163  0542  082D               	movf	??_OUTFQ,w
  3164  0543  072B               	addwf	OUTFQ@Nprg,w
  3165  0544  00AF               	movwf	??_OUTFQ+2
  3166  0545  082E               	movf	??_OUTFQ+1,w
  3167  0546  1803               	skipnc
  3168  0547  0A2E               	incf	??_OUTFQ+1,w
  3169  0548  072C               	addwf	OUTFQ@Nprg+1,w
  3170  0549  00B0               	movwf	??_OUTFQ+3
  3171  054A  082F               	movf	??_OUTFQ+2,w
  3172  054B  0084               	movwf	4
  3173  054C  1783               	bsf	3,7
  3174  054D  1C30               	btfss	??_OUTFQ+3,0
  3175  054E  1383               	bcf	3,7
  3176  054F  0800               	movf	0,w
  3177  0550  00A2               	movwf	___awdiv@dividend
  3178  0551  0A84               	incf	4,f
  3179  0552  0800               	movf	0,w
  3180  0553  00A3               	movwf	___awdiv@dividend+1
  3181  0554  120A  158A  22FC  120A  118A  	fcall	___awdiv
  3182  0559  1283               	bcf	3,5	;RP0=0, select bank0
  3183  055A  1303               	bcf	3,6	;RP1=0, select bank0
  3184  055B  0868               	movf	OUTFQ@j+1,w
  3185  055C  00B2               	movwf	??_OUTFQ+5
  3186  055D  0867               	movf	OUTFQ@j,w
  3187  055E  00B1               	movwf	??_OUTFQ+4
  3188  055F  1003               	clrc
  3189  0560  0DB1               	rlf	??_OUTFQ+4,f
  3190  0561  0DB2               	rlf	??_OUTFQ+5,f
  3191  0562  0831               	movf	??_OUTFQ+4,w
  3192  0563  072B               	addwf	OUTFQ@Nprg,w
  3193  0564  00B3               	movwf	??_OUTFQ+6
  3194  0565  0832               	movf	??_OUTFQ+5,w
  3195  0566  1803               	skipnc
  3196  0567  0A32               	incf	??_OUTFQ+5,w
  3197  0568  072C               	addwf	OUTFQ@Nprg+1,w
  3198  0569  00B4               	movwf	??_OUTFQ+7
  3199  056A  0833               	movf	??_OUTFQ+6,w
  3200  056B  0084               	movwf	4
  3201  056C  1783               	bsf	3,7
  3202  056D  1C34               	btfss	??_OUTFQ+7,0
  3203  056E  1383               	bcf	3,7
  3204  056F  0820               	movf	?___awdiv,w
  3205  0570  0080               	movwf	0
  3206  0571  0A84               	incf	4,f
  3207  0572  0821               	movf	?___awdiv+1,w
  3208  0573  0080               	movwf	0
  3209                           
  3210                           ;FMCW.c: 150: Nprg_b[count] = 0;
  3211  0574  0861               	movf	OUTFQ@count,w
  3212  0575  00AD               	movwf	??_OUTFQ
  3213  0576  072D               	addwf	??_OUTFQ,w
  3214  0577  3E3D               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  3215  0578  0084               	movwf	4
  3216  0579  1383               	bcf	3,7	;select IRP bank0
  3217  057A  0180               	clrf	0
  3218  057B  0A84               	incf	4,f
  3219  057C  0180               	clrf	0
  3220  057D  2E23               	goto	l3419
  3221  057E                     l3409:	
  3222                           ;FMCW.c: 152: }
  3223                           
  3224                           ;FMCW.c: 151: count++;
  3225                           
  3226                           
  3227                           ;FMCW.c: 153: else{
  3228                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  3229  057E  3002               	movlw	2
  3230  057F  00A0               	movwf	___awdiv@divisor
  3231  0580  3000               	movlw	0
  3232  0581  00A1               	movwf	___awdiv@divisor+1
  3233  0582  0868               	movf	OUTFQ@j+1,w
  3234  0583  00AE               	movwf	??_OUTFQ+1
  3235  0584  0867               	movf	OUTFQ@j,w
  3236  0585  00AD               	movwf	??_OUTFQ
  3237  0586  1003               	clrc
  3238  0587  0DAD               	rlf	??_OUTFQ,f
  3239  0588  0DAE               	rlf	??_OUTFQ+1,f
  3240  0589  082D               	movf	??_OUTFQ,w
  3241  058A  072B               	addwf	OUTFQ@Nprg,w
  3242  058B  00AF               	movwf	??_OUTFQ+2
  3243  058C  082E               	movf	??_OUTFQ+1,w
  3244  058D  1803               	skipnc
  3245  058E  0A2E               	incf	??_OUTFQ+1,w
  3246  058F  072C               	addwf	OUTFQ@Nprg+1,w
  3247  0590  00B0               	movwf	??_OUTFQ+3
  3248  0591  082F               	movf	??_OUTFQ+2,w
  3249  0592  0084               	movwf	4
  3250  0593  1783               	bsf	3,7
  3251  0594  1C30               	btfss	??_OUTFQ+3,0
  3252  0595  1383               	bcf	3,7
  3253  0596  0800               	movf	0,w
  3254  0597  00A2               	movwf	___awdiv@dividend
  3255  0598  0A84               	incf	4,f
  3256  0599  0800               	movf	0,w
  3257  059A  00A3               	movwf	___awdiv@dividend+1
  3258  059B  120A  158A  22FC  120A  118A  	fcall	___awdiv
  3259  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  3260  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  3261  05A2  0868               	movf	OUTFQ@j+1,w
  3262  05A3  00B2               	movwf	??_OUTFQ+5
  3263  05A4  0867               	movf	OUTFQ@j,w
  3264  05A5  00B1               	movwf	??_OUTFQ+4
  3265  05A6  1003               	clrc
  3266  05A7  0DB1               	rlf	??_OUTFQ+4,f
  3267  05A8  0DB2               	rlf	??_OUTFQ+5,f
  3268  05A9  0831               	movf	??_OUTFQ+4,w
  3269  05AA  072B               	addwf	OUTFQ@Nprg,w
  3270  05AB  00B3               	movwf	??_OUTFQ+6
  3271  05AC  0832               	movf	??_OUTFQ+5,w
  3272  05AD  1803               	skipnc
  3273  05AE  0A32               	incf	??_OUTFQ+5,w
  3274  05AF  072C               	addwf	OUTFQ@Nprg+1,w
  3275  05B0  00B4               	movwf	??_OUTFQ+7
  3276  05B1  0833               	movf	??_OUTFQ+6,w
  3277  05B2  0084               	movwf	4
  3278  05B3  1783               	bsf	3,7
  3279  05B4  1C34               	btfss	??_OUTFQ+7,0
  3280  05B5  1383               	bcf	3,7
  3281  05B6  0820               	movf	?___awdiv,w
  3282  05B7  0080               	movwf	0
  3283  05B8  0A84               	incf	4,f
  3284  05B9  0821               	movf	?___awdiv+1,w
  3285  05BA  2EB0               	goto	L1
  3286  05BB                     l3411:	
  3287                           ;FMCW.c: 155: }
  3288                           ;FMCW.c: 156: }
  3289                           
  3290                           
  3291                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  3292  05BB  0868               	movf	OUTFQ@j+1,w
  3293  05BC  00AE               	movwf	??_OUTFQ+1
  3294  05BD  0867               	movf	OUTFQ@j,w
  3295  05BE  00AD               	movwf	??_OUTFQ
  3296  05BF  1003               	clrc
  3297  05C0  0DAD               	rlf	??_OUTFQ,f
  3298  05C1  0DAE               	rlf	??_OUTFQ+1,f
  3299  05C2  082D               	movf	??_OUTFQ,w
  3300  05C3  072B               	addwf	OUTFQ@Nprg,w
  3301  05C4  00AF               	movwf	??_OUTFQ+2
  3302  05C5  082E               	movf	??_OUTFQ+1,w
  3303  05C6  1803               	skipnc
  3304  05C7  0A2E               	incf	??_OUTFQ+1,w
  3305  05C8  072C               	addwf	OUTFQ@Nprg+1,w
  3306  05C9  00B0               	movwf	??_OUTFQ+3
  3307  05CA  082F               	movf	??_OUTFQ+2,w
  3308  05CB  0084               	movwf	4
  3309  05CC  1783               	bsf	3,7
  3310  05CD  1C30               	btfss	??_OUTFQ+3,0
  3311  05CE  1383               	bcf	3,7
  3312  05CF  0800               	movf	0,w
  3313  05D0  00B1               	movwf	??_OUTFQ+4
  3314  05D1  0A84               	incf	4,f
  3315  05D2  0800               	movf	0,w
  3316  05D3  00B2               	movwf	??_OUTFQ+5
  3317  05D4  1C31               	btfss	??_OUTFQ+4,0
  3318  05D5  2EB1               	goto	l3425
  3319                           
  3320                           ;FMCW.c: 158: if(j == 4){
  3321  05D6  3004               	movlw	4
  3322  05D7  0667               	xorwf	OUTFQ@j,w
  3323  05D8  0468               	iorwf	OUTFQ@j+1,w
  3324  05D9  1D03               	btfss	3,2
  3325  05DA  2E2A               	goto	l3421
  3326                           
  3327                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  3328  05DB  3002               	movlw	2
  3329  05DC  00A0               	movwf	___awdiv@divisor
  3330  05DD  3000               	movlw	0
  3331  05DE  00A1               	movwf	___awdiv@divisor+1
  3332  05DF  0868               	movf	OUTFQ@j+1,w
  3333  05E0  00AE               	movwf	??_OUTFQ+1
  3334  05E1  0867               	movf	OUTFQ@j,w
  3335  05E2  00AD               	movwf	??_OUTFQ
  3336  05E3  1003               	clrc
  3337  05E4  0DAD               	rlf	??_OUTFQ,f
  3338  05E5  0DAE               	rlf	??_OUTFQ+1,f
  3339  05E6  082D               	movf	??_OUTFQ,w
  3340  05E7  072B               	addwf	OUTFQ@Nprg,w
  3341  05E8  00AF               	movwf	??_OUTFQ+2
  3342  05E9  082E               	movf	??_OUTFQ+1,w
  3343  05EA  1803               	skipnc
  3344  05EB  0A2E               	incf	??_OUTFQ+1,w
  3345  05EC  072C               	addwf	OUTFQ@Nprg+1,w
  3346  05ED  00B0               	movwf	??_OUTFQ+3
  3347  05EE  082F               	movf	??_OUTFQ+2,w
  3348  05EF  0084               	movwf	4
  3349  05F0  1783               	bsf	3,7
  3350  05F1  1C30               	btfss	??_OUTFQ+3,0
  3351  05F2  1383               	bcf	3,7
  3352  05F3  0800               	movf	0,w
  3353  05F4  00A2               	movwf	___awdiv@dividend
  3354  05F5  0A84               	incf	4,f
  3355  05F6  0800               	movf	0,w
  3356  05F7  00A3               	movwf	___awdiv@dividend+1
  3357  05F8  120A  158A  22FC  120A  118A  	fcall	___awdiv
  3358  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  3359  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  3360  05FF  0868               	movf	OUTFQ@j+1,w
  3361  0600  00B2               	movwf	??_OUTFQ+5
  3362  0601  0867               	movf	OUTFQ@j,w
  3363  0602  00B1               	movwf	??_OUTFQ+4
  3364  0603  1003               	clrc
  3365  0604  0DB1               	rlf	??_OUTFQ+4,f
  3366  0605  0DB2               	rlf	??_OUTFQ+5,f
  3367  0606  0831               	movf	??_OUTFQ+4,w
  3368  0607  072B               	addwf	OUTFQ@Nprg,w
  3369  0608  00B3               	movwf	??_OUTFQ+6
  3370  0609  0832               	movf	??_OUTFQ+5,w
  3371  060A  1803               	skipnc
  3372  060B  0A32               	incf	??_OUTFQ+5,w
  3373  060C  072C               	addwf	OUTFQ@Nprg+1,w
  3374  060D  00B4               	movwf	??_OUTFQ+7
  3375  060E  0833               	movf	??_OUTFQ+6,w
  3376  060F  0084               	movwf	4
  3377  0610  1783               	bsf	3,7
  3378  0611  1C34               	btfss	??_OUTFQ+7,0
  3379  0612  1383               	bcf	3,7
  3380  0613  0820               	movf	?___awdiv,w
  3381  0614  0080               	movwf	0
  3382  0615  0A84               	incf	4,f
  3383  0616  0821               	movf	?___awdiv+1,w
  3384  0617  0080               	movwf	0
  3385                           
  3386                           ;FMCW.c: 160: Nprg_b[count] = 1;
  3387  0618  0861               	movf	OUTFQ@count,w
  3388  0619  00AD               	movwf	??_OUTFQ
  3389  061A  072D               	addwf	??_OUTFQ,w
  3390  061B  3E3D               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  3391  061C  0084               	movwf	4
  3392  061D  3001               	movlw	1
  3393  061E  1383               	bcf	3,7	;select IRP bank0
  3394  061F  0080               	movwf	0
  3395  0620  0A84               	incf	4,f
  3396  0621  3000               	movlw	0
  3397  0622  0080               	movwf	0
  3398  0623                     l3419:	
  3399                           
  3400                           ;FMCW.c: 161: count++;
  3401  0623  3001               	movlw	1
  3402  0624  07E1               	addwf	OUTFQ@count,f
  3403  0625  1803               	skipnc
  3404  0626  0AE2               	incf	OUTFQ@count+1,f
  3405  0627  3000               	movlw	0
  3406  0628  07E2               	addwf	OUTFQ@count+1,f
  3407                           
  3408                           ;FMCW.c: 162: }
  3409  0629  2EB1               	goto	l3425
  3410  062A                     l3421:	
  3411                           
  3412                           ;FMCW.c: 163: else{
  3413                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  3414  062A  3002               	movlw	2
  3415  062B  00A0               	movwf	___awdiv@divisor
  3416  062C  3000               	movlw	0
  3417  062D  00A1               	movwf	___awdiv@divisor+1
  3418  062E  0868               	movf	OUTFQ@j+1,w
  3419  062F  00AE               	movwf	??_OUTFQ+1
  3420  0630  0867               	movf	OUTFQ@j,w
  3421  0631  00AD               	movwf	??_OUTFQ
  3422  0632  1003               	clrc
  3423  0633  0DAD               	rlf	??_OUTFQ,f
  3424  0634  0DAE               	rlf	??_OUTFQ+1,f
  3425  0635  082D               	movf	??_OUTFQ,w
  3426  0636  072B               	addwf	OUTFQ@Nprg,w
  3427  0637  00AF               	movwf	??_OUTFQ+2
  3428  0638  082E               	movf	??_OUTFQ+1,w
  3429  0639  1803               	skipnc
  3430  063A  0A2E               	incf	??_OUTFQ+1,w
  3431  063B  072C               	addwf	OUTFQ@Nprg+1,w
  3432  063C  00B0               	movwf	??_OUTFQ+3
  3433  063D  082F               	movf	??_OUTFQ+2,w
  3434  063E  0084               	movwf	4
  3435  063F  1783               	bsf	3,7
  3436  0640  1C30               	btfss	??_OUTFQ+3,0
  3437  0641  1383               	bcf	3,7
  3438  0642  0800               	movf	0,w
  3439  0643  00A2               	movwf	___awdiv@dividend
  3440  0644  0A84               	incf	4,f
  3441  0645  0800               	movf	0,w
  3442  0646  00A3               	movwf	___awdiv@dividend+1
  3443  0647  120A  158A  22FC  120A  118A  	fcall	___awdiv
  3444  064C  1283               	bcf	3,5	;RP0=0, select bank0
  3445  064D  1303               	bcf	3,6	;RP1=0, select bank0
  3446  064E  0868               	movf	OUTFQ@j+1,w
  3447  064F  00B2               	movwf	??_OUTFQ+5
  3448  0650  0867               	movf	OUTFQ@j,w
  3449  0651  00B1               	movwf	??_OUTFQ+4
  3450  0652  1003               	clrc
  3451  0653  0DB1               	rlf	??_OUTFQ+4,f
  3452  0654  0DB2               	rlf	??_OUTFQ+5,f
  3453  0655  0831               	movf	??_OUTFQ+4,w
  3454  0656  072B               	addwf	OUTFQ@Nprg,w
  3455  0657  00B3               	movwf	??_OUTFQ+6
  3456  0658  0832               	movf	??_OUTFQ+5,w
  3457  0659  1803               	skipnc
  3458  065A  0A32               	incf	??_OUTFQ+5,w
  3459  065B  072C               	addwf	OUTFQ@Nprg+1,w
  3460  065C  00B4               	movwf	??_OUTFQ+7
  3461  065D  0833               	movf	??_OUTFQ+6,w
  3462  065E  0084               	movwf	4
  3463  065F  1783               	bsf	3,7
  3464  0660  1C34               	btfss	??_OUTFQ+7,0
  3465  0661  1383               	bcf	3,7
  3466  0662  0820               	movf	?___awdiv,w
  3467  0663  0080               	movwf	0
  3468  0664  0A84               	incf	4,f
  3469  0665  0821               	movf	?___awdiv+1,w
  3470  0666  0080               	movwf	0
  3471                           
  3472                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  3473  0667  0868               	movf	OUTFQ@j+1,w
  3474  0668  00AE               	movwf	??_OUTFQ+1
  3475  0669  0867               	movf	OUTFQ@j,w
  3476  066A  00AD               	movwf	??_OUTFQ
  3477  066B  1003               	clrc
  3478  066C  0DAD               	rlf	??_OUTFQ,f
  3479  066D  0DAE               	rlf	??_OUTFQ+1,f
  3480  066E  082D               	movf	??_OUTFQ,w
  3481  066F  3E02               	addlw	2
  3482  0670  00AF               	movwf	??_OUTFQ+2
  3483  0671  082E               	movf	??_OUTFQ+1,w
  3484  0672  1803               	skipnc
  3485  0673  3E01               	addlw	1
  3486  0674  3E00               	addlw	0
  3487  0675  00B0               	movwf	??_OUTFQ+3
  3488  0676  082F               	movf	??_OUTFQ+2,w
  3489  0677  072B               	addwf	OUTFQ@Nprg,w
  3490  0678  00B1               	movwf	??_OUTFQ+4
  3491  0679  0830               	movf	??_OUTFQ+3,w
  3492  067A  1803               	skipnc
  3493  067B  0A30               	incf	??_OUTFQ+3,w
  3494  067C  072C               	addwf	OUTFQ@Nprg+1,w
  3495  067D  00B2               	movwf	??_OUTFQ+5
  3496  067E  0831               	movf	??_OUTFQ+4,w
  3497  067F  0084               	movwf	4
  3498  0680  1783               	bsf	3,7
  3499  0681  1C32               	btfss	??_OUTFQ+5,0
  3500  0682  1383               	bcf	3,7
  3501  0683  0800               	movf	0,w
  3502  0684  00B3               	movwf	??_OUTFQ+6
  3503  0685  0A84               	incf	4,f
  3504  0686  0800               	movf	0,w
  3505  0687  00B4               	movwf	??_OUTFQ+7
  3506  0688  0833               	movf	??_OUTFQ+6,w
  3507  0689  3E0A               	addlw	10
  3508  068A  00B5               	movwf	??_OUTFQ+8
  3509  068B  0834               	movf	??_OUTFQ+7,w
  3510  068C  1803               	skipnc
  3511  068D  3E01               	addlw	1
  3512  068E  3E00               	addlw	0
  3513  068F  00B6               	movwf	??_OUTFQ+9
  3514  0690  0868               	movf	OUTFQ@j+1,w
  3515  0691  00B8               	movwf	??_OUTFQ+11
  3516  0692  0867               	movf	OUTFQ@j,w
  3517  0693  00B7               	movwf	??_OUTFQ+10
  3518  0694  1003               	clrc
  3519  0695  0DB7               	rlf	??_OUTFQ+10,f
  3520  0696  0DB8               	rlf	??_OUTFQ+11,f
  3521  0697  0837               	movf	??_OUTFQ+10,w
  3522  0698  3E02               	addlw	2
  3523  0699  00B9               	movwf	??_OUTFQ+12
  3524  069A  0838               	movf	??_OUTFQ+11,w
  3525  069B  1803               	skipnc
  3526  069C  3E01               	addlw	1
  3527  069D  3E00               	addlw	0
  3528  069E  00BA               	movwf	??_OUTFQ+13
  3529  069F  0839               	movf	??_OUTFQ+12,w
  3530  06A0  072B               	addwf	OUTFQ@Nprg,w
  3531  06A1  00BB               	movwf	??_OUTFQ+14
  3532  06A2  083A               	movf	??_OUTFQ+13,w
  3533  06A3  1803               	skipnc
  3534  06A4  0A3A               	incf	??_OUTFQ+13,w
  3535  06A5  072C               	addwf	OUTFQ@Nprg+1,w
  3536  06A6  00BC               	movwf	??_OUTFQ+15
  3537  06A7  083B               	movf	??_OUTFQ+14,w
  3538  06A8  0084               	movwf	4
  3539  06A9  1783               	bsf	3,7
  3540  06AA  1C3C               	btfss	??_OUTFQ+15,0
  3541  06AB  1383               	bcf	3,7
  3542  06AC  0835               	movf	??_OUTFQ+8,w
  3543  06AD  0080               	movwf	0
  3544  06AE  0A84               	incf	4,f
  3545  06AF  0836               	movf	??_OUTFQ+9,w
  3546  06B0                     L1:	
  3547  06B0  0080               	movwf	0
  3548  06B1                     l3425:	
  3549  06B1  3001               	movlw	1
  3550  06B2  07E7               	addwf	OUTFQ@j,f
  3551  06B3  1803               	skipnc
  3552  06B4  0AE8               	incf	OUTFQ@j+1,f
  3553  06B5  3000               	movlw	0
  3554  06B6  07E8               	addwf	OUTFQ@j+1,f
  3555  06B7  0868               	movf	OUTFQ@j+1,w
  3556  06B8  3A80               	xorlw	128
  3557  06B9  00FF               	movwf	127
  3558  06BA  3080               	movlw	128
  3559  06BB  027F               	subwf	127,w
  3560  06BC  1D03               	skipz
  3561  06BD  2EC0               	goto	u3305
  3562  06BE  3005               	movlw	5
  3563  06BF  0267               	subwf	OUTFQ@j,w
  3564  06C0                     u3305:	
  3565  06C0  1C03               	skipc
  3566  06C1  2D15               	goto	l3399
  3567  06C2                     l3429:	
  3568  06C2  3001               	movlw	1
  3569  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  3570  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  3571  06C5  07DF               	addwf	OUTFQ@i_331,f
  3572  06C6  1803               	skipnc
  3573  06C7  0AE0               	incf	OUTFQ@i_331+1,f
  3574  06C8  3000               	movlw	0
  3575  06C9  07E0               	addwf	OUTFQ@i_331+1,f
  3576  06CA  0860               	movf	OUTFQ@i_331+1,w
  3577  06CB  3A80               	xorlw	128
  3578  06CC  00FF               	movwf	127
  3579  06CD  3080               	movlw	128
  3580  06CE  027F               	subwf	127,w
  3581  06CF  1D03               	skipz
  3582  06D0  2ED3               	goto	u3315
  3583  06D1  3011               	movlw	17
  3584  06D2  025F               	subwf	OUTFQ@i_331,w
  3585  06D3                     u3315:	
  3586  06D3  1C03               	skipc
  3587  06D4  2D06               	goto	l3393
  3588  06D5                     l3433:	
  3589                           
  3590                           ;FMCW.c: 166: }
  3591                           ;FMCW.c: 167: }
  3592                           ;FMCW.c: 168: }
  3593                           ;FMCW.c: 169: }
  3594                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  3595  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  3596  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  3597  06D7  01E5               	clrf	OUTFQ@i_333
  3598  06D8  01E6               	clrf	OUTFQ@i_333+1
  3599  06D9  0866               	movf	OUTFQ@i_333+1,w
  3600  06DA  3A80               	xorlw	128
  3601  06DB  00FF               	movwf	127
  3602  06DC  3080               	movlw	128
  3603  06DD  027F               	subwf	127,w
  3604  06DE  1D03               	skipz
  3605  06DF  2EE2               	goto	u3325
  3606  06E0  3011               	movlw	17
  3607  06E1  0265               	subwf	OUTFQ@i_333,w
  3608  06E2                     u3325:	
  3609  06E2  1803               	btfsc	3,0
  3610  06E3  2F2B               	goto	l3451
  3611  06E4                     l3439:	
  3612                           
  3613                           ;FMCW.c: 173: {
  3614                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  3615  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  3616  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  3617  06E6  0865               	movf	OUTFQ@i_333,w
  3618  06E7  00AD               	movwf	??_OUTFQ
  3619  06E8  072D               	addwf	??_OUTFQ,w
  3620  06E9  3E3D               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  3621  06EA  0084               	movwf	4
  3622  06EB  1383               	bcf	3,7	;select IRP bank0
  3623  06EC  0800               	movf	0,w
  3624  06ED  00AE               	movwf	??_OUTFQ+1
  3625  06EE  0A84               	incf	4,f
  3626  06EF  0800               	movf	0,w
  3627  06F0  00AF               	movwf	??_OUTFQ+2
  3628  06F1  082E               	movf	??_OUTFQ+1,w
  3629  06F2  042F               	iorwf	??_OUTFQ+2,w
  3630  06F3  1D03               	btfss	3,2
  3631  06F4  2EFE               	goto	l3443
  3632                           
  3633                           ;FMCW.c: 175: {
  3634                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  3635  06F5  082A               	movf	OUTFQ@fmcwtxrx+1,w
  3636  06F6  00A3               	movwf	L_OUT@fmcwtxrx+1
  3637  06F7  0829               	movf	OUTFQ@fmcwtxrx,w
  3638  06F8  00A2               	movwf	L_OUT@fmcwtxrx
  3639  06F9  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  3640  06FE                     l3443:	
  3641                           
  3642                           ;FMCW.c: 177: }
  3643                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  3644  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  3645  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  3646  0700  0865               	movf	OUTFQ@i_333,w
  3647  0701  00AD               	movwf	??_OUTFQ
  3648  0702  072D               	addwf	??_OUTFQ,w
  3649  0703  3E3D               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  3650  0704  0084               	movwf	4
  3651  0705  1383               	bcf	3,7	;select IRP bank0
  3652  0706  0800               	movf	0,w
  3653  0707  00AE               	movwf	??_OUTFQ+1
  3654  0708  0A84               	incf	4,f
  3655  0709  0800               	movf	0,w
  3656  070A  00AF               	movwf	??_OUTFQ+2
  3657  070B  032E               	decf	??_OUTFQ+1,w
  3658  070C  042F               	iorwf	??_OUTFQ+2,w
  3659  070D  1D03               	btfss	3,2
  3660  070E  2F18               	goto	l3447
  3661                           
  3662                           ;FMCW.c: 179: {
  3663                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  3664  070F  082A               	movf	OUTFQ@fmcwtxrx+1,w
  3665  0710  00A3               	movwf	H_OUT@fmcwtxrx+1
  3666  0711  0829               	movf	OUTFQ@fmcwtxrx,w
  3667  0712  00A2               	movwf	H_OUT@fmcwtxrx
  3668  0713  120A  158A  218E  120A  118A  	fcall	_H_OUT
  3669  0718                     l3447:	
  3670  0718  3001               	movlw	1
  3671  0719  1283               	bcf	3,5	;RP0=0, select bank0
  3672  071A  1303               	bcf	3,6	;RP1=0, select bank0
  3673  071B  07E5               	addwf	OUTFQ@i_333,f
  3674  071C  1803               	skipnc
  3675  071D  0AE6               	incf	OUTFQ@i_333+1,f
  3676  071E  3000               	movlw	0
  3677  071F  07E6               	addwf	OUTFQ@i_333+1,f
  3678  0720  0866               	movf	OUTFQ@i_333+1,w
  3679  0721  3A80               	xorlw	128
  3680  0722  00FF               	movwf	127
  3681  0723  3080               	movlw	128
  3682  0724  027F               	subwf	127,w
  3683  0725  1D03               	skipz
  3684  0726  2F29               	goto	u3355
  3685  0727  3011               	movlw	17
  3686  0728  0265               	subwf	OUTFQ@i_333,w
  3687  0729                     u3355:	
  3688  0729  1C03               	skipc
  3689  072A  2EE4               	goto	l3439
  3690  072B                     l3451:	
  3691                           
  3692                           ;FMCW.c: 181: }
  3693                           ;FMCW.c: 182: }
  3694                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  3695  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3696  072C  1303               	bcf	3,6	;RP1=0, select bank0
  3697  072D  082A               	movf	OUTFQ@fmcwtxrx+1,w
  3698  072E  00A3               	movwf	H_OUT@fmcwtxrx+1
  3699  072F  0829               	movf	OUTFQ@fmcwtxrx,w
  3700  0730  00A2               	movwf	H_OUT@fmcwtxrx
  3701  0731  120A  158A  218E  120A  118A  	fcall	_H_OUT
  3702                           
  3703                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  3704  0736  1283               	bcf	3,5	;RP0=0, select bank0
  3705  0737  1303               	bcf	3,6	;RP1=0, select bank0
  3706  0738  082A               	movf	OUTFQ@fmcwtxrx+1,w
  3707  0739  00A3               	movwf	L_OUT@fmcwtxrx+1
  3708  073A  0829               	movf	OUTFQ@fmcwtxrx,w
  3709  073B  00A2               	movwf	L_OUT@fmcwtxrx
  3710  073C  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  3711                           
  3712                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  3713  0741  1283               	bcf	3,5	;RP0=0, select bank0
  3714  0742  1303               	bcf	3,6	;RP1=0, select bank0
  3715  0743  082A               	movf	OUTFQ@fmcwtxrx+1,w
  3716  0744  00A3               	movwf	STBOUT@fmcwtxrx+1
  3717  0745  0829               	movf	OUTFQ@fmcwtxrx,w
  3718  0746  00A2               	movwf	STBOUT@fmcwtxrx
  3719  0747  120A  158A  20AA   	fcall	_STBOUT
  3720  074A  0008               	return
  3721  074B                     __end_of_OUTFQ:	
  3722                           
  3723                           	psect	text9
  3724  0AFC                     __ptext9:	
  3725 ;; *************** function ___awdiv *****************
  3726 ;; Defined at:
  3727 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;  divisor         2    0[BANK0 ] int 
  3730 ;;  dividend        2    2[BANK0 ] int 
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;  quotient        2    7[BANK0 ] int 
  3733 ;;  sign            1    6[BANK0 ] unsigned char 
  3734 ;;  counter         1    5[BANK0 ] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  2    0[BANK0 ] int 
  3737 ;; Registers used:
  3738 ;;		wreg, status,2, status,0
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3744 ;;      Params:         0       4       0       0       0
  3745 ;;      Locals:         0       4       0       0       0
  3746 ;;      Temps:          0       1       0       0       0
  3747 ;;      Totals:         0       9       0       0       0
  3748 ;;Total ram usage:        9 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    1
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_OUTFQ
  3755 ;;		_RFDOUT
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           
  3760                           ;psect for function ___awdiv
  3761  0AFC                     ___awdiv:	
  3762                           
  3763                           ;incstack = 0
  3764                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3765  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  3766  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  3767  0AFE  01A6               	clrf	___awdiv@sign
  3768  0AFF  1FA1               	btfss	___awdiv@divisor+1,7
  3769  0B00  2B08               	goto	l2237
  3770  0B01  09A0               	comf	___awdiv@divisor,f
  3771  0B02  09A1               	comf	___awdiv@divisor+1,f
  3772  0B03  0AA0               	incf	___awdiv@divisor,f
  3773  0B04  1903               	skipnz
  3774  0B05  0AA1               	incf	___awdiv@divisor+1,f
  3775  0B06  01A6               	clrf	___awdiv@sign
  3776  0B07  0AA6               	incf	___awdiv@sign,f
  3777  0B08                     l2237:	
  3778  0B08  1FA3               	btfss	___awdiv@dividend+1,7
  3779  0B09  2B13               	goto	l2243
  3780  0B0A  09A2               	comf	___awdiv@dividend,f
  3781  0B0B  09A3               	comf	___awdiv@dividend+1,f
  3782  0B0C  0AA2               	incf	___awdiv@dividend,f
  3783  0B0D  1903               	skipnz
  3784  0B0E  0AA3               	incf	___awdiv@dividend+1,f
  3785  0B0F  3001               	movlw	1
  3786  0B10  00A4               	movwf	??___awdiv
  3787  0B11  0824               	movf	??___awdiv,w
  3788  0B12  06A6               	xorwf	___awdiv@sign,f
  3789  0B13                     l2243:	
  3790  0B13  01A7               	clrf	___awdiv@quotient
  3791  0B14  01A8               	clrf	___awdiv@quotient+1
  3792  0B15  0820               	movf	___awdiv@divisor,w
  3793  0B16  0421               	iorwf	___awdiv@divisor+1,w
  3794  0B17  1903               	btfsc	3,2
  3795  0B18  2B4A               	goto	l2265
  3796  0B19  01A5               	clrf	___awdiv@counter
  3797  0B1A  0AA5               	incf	___awdiv@counter,f
  3798  0B1B                     l2253:	
  3799  0B1B  1BA1               	btfsc	___awdiv@divisor+1,7
  3800  0B1C  2B29               	goto	l2255
  3801  0B1D  3001               	movlw	1
  3802  0B1E                     u1735:	
  3803  0B1E  1003               	clrc
  3804  0B1F  0DA0               	rlf	___awdiv@divisor,f
  3805  0B20  0DA1               	rlf	___awdiv@divisor+1,f
  3806  0B21  3EFF               	addlw	-1
  3807  0B22  1D03               	skipz
  3808  0B23  2B1E               	goto	u1735
  3809  0B24  3001               	movlw	1
  3810  0B25  00A4               	movwf	??___awdiv
  3811  0B26  0824               	movf	??___awdiv,w
  3812  0B27  07A5               	addwf	___awdiv@counter,f
  3813  0B28  2B1B               	goto	l2253
  3814  0B29                     l2255:	
  3815  0B29  3001               	movlw	1
  3816  0B2A                     u1755:	
  3817  0B2A  1003               	clrc
  3818  0B2B  0DA7               	rlf	___awdiv@quotient,f
  3819  0B2C  0DA8               	rlf	___awdiv@quotient+1,f
  3820  0B2D  3EFF               	addlw	-1
  3821  0B2E  1D03               	skipz
  3822  0B2F  2B2A               	goto	u1755
  3823  0B30  0821               	movf	___awdiv@divisor+1,w
  3824  0B31  0223               	subwf	___awdiv@dividend+1,w
  3825  0B32  1D03               	skipz
  3826  0B33  2B36               	goto	u1765
  3827  0B34  0820               	movf	___awdiv@divisor,w
  3828  0B35  0222               	subwf	___awdiv@dividend,w
  3829  0B36                     u1765:	
  3830  0B36  1C03               	skipc
  3831  0B37  2B3F               	goto	l2261
  3832  0B38  0820               	movf	___awdiv@divisor,w
  3833  0B39  02A2               	subwf	___awdiv@dividend,f
  3834  0B3A  0821               	movf	___awdiv@divisor+1,w
  3835  0B3B  1C03               	skipc
  3836  0B3C  03A3               	decf	___awdiv@dividend+1,f
  3837  0B3D  02A3               	subwf	___awdiv@dividend+1,f
  3838  0B3E  1427               	bsf	___awdiv@quotient,0
  3839  0B3F                     l2261:	
  3840  0B3F  3001               	movlw	1
  3841  0B40                     u1775:	
  3842  0B40  1003               	clrc
  3843  0B41  0CA1               	rrf	___awdiv@divisor+1,f
  3844  0B42  0CA0               	rrf	___awdiv@divisor,f
  3845  0B43  3EFF               	addlw	-1
  3846  0B44  1D03               	skipz
  3847  0B45  2B40               	goto	u1775
  3848  0B46  3001               	movlw	1
  3849  0B47  02A5               	subwf	___awdiv@counter,f
  3850  0B48  1D03               	btfss	3,2
  3851  0B49  2B29               	goto	l2255
  3852  0B4A                     l2265:	
  3853  0B4A  0826               	movf	___awdiv@sign,w
  3854  0B4B  1903               	btfsc	3,2
  3855  0B4C  2B52               	goto	l2269
  3856  0B4D  09A7               	comf	___awdiv@quotient,f
  3857  0B4E  09A8               	comf	___awdiv@quotient+1,f
  3858  0B4F  0AA7               	incf	___awdiv@quotient,f
  3859  0B50  1903               	skipnz
  3860  0B51  0AA8               	incf	___awdiv@quotient+1,f
  3861  0B52                     l2269:	
  3862  0B52  0828               	movf	___awdiv@quotient+1,w
  3863  0B53  00A1               	movwf	?___awdiv+1
  3864  0B54  0827               	movf	___awdiv@quotient,w
  3865  0B55  00A0               	movwf	?___awdiv
  3866  0B56  0008               	return
  3867  0B57                     __end_of___awdiv:	
  3868                           
  3869                           	psect	text10
  3870  074B                     __ptext10:	
  3871 ;; *************** function _OPINIT *****************
  3872 ;; Defined at:
  3873 ;;		line 241 in file "FMCW.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;  fmcwtxrx        2    4[BANK0 ] int 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;		None
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  1    wreg      void 
  3880 ;; Registers used:
  3881 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3887 ;;      Params:         0       2       0       0       0
  3888 ;;      Locals:         0       0       0       0       0
  3889 ;;      Temps:          0       0       0       0       0
  3890 ;;      Totals:         0       2       0       0       0
  3891 ;;Total ram usage:        2 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    3
  3894 ;; This function calls:
  3895 ;;		_H_OUT
  3896 ;;		_L_OUT
  3897 ;;		_STBOUT
  3898 ;; This function is called by:
  3899 ;;		_FMTX
  3900 ;;		_CWTX
  3901 ;;		_FMRX
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           
  3906                           ;psect for function _OPINIT
  3907  074B                     _OPINIT:	
  3908                           
  3909                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  3910                           
  3911                           ;incstack = 0
  3912                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3913  074B  1283               	bcf	3,5	;RP0=0, select bank0
  3914  074C  1303               	bcf	3,6	;RP1=0, select bank0
  3915  074D  0825               	movf	OPINIT@fmcwtxrx+1,w
  3916  074E  00A3               	movwf	L_OUT@fmcwtxrx+1
  3917  074F  0824               	movf	OPINIT@fmcwtxrx,w
  3918  0750  00A2               	movwf	L_OUT@fmcwtxrx
  3919  0751  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  3920                           
  3921                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  3922  0756  1283               	bcf	3,5	;RP0=0, select bank0
  3923  0757  1303               	bcf	3,6	;RP1=0, select bank0
  3924  0758  0825               	movf	OPINIT@fmcwtxrx+1,w
  3925  0759  00A3               	movwf	L_OUT@fmcwtxrx+1
  3926  075A  0824               	movf	OPINIT@fmcwtxrx,w
  3927  075B  00A2               	movwf	L_OUT@fmcwtxrx
  3928  075C  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  3929                           
  3930                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  3931  0761  1283               	bcf	3,5	;RP0=0, select bank0
  3932  0762  1303               	bcf	3,6	;RP1=0, select bank0
  3933  0763  0825               	movf	OPINIT@fmcwtxrx+1,w
  3934  0764  00A3               	movwf	L_OUT@fmcwtxrx+1
  3935  0765  0824               	movf	OPINIT@fmcwtxrx,w
  3936  0766  00A2               	movwf	L_OUT@fmcwtxrx
  3937  0767  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  3938                           
  3939                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  3940  076C  1283               	bcf	3,5	;RP0=0, select bank0
  3941  076D  1303               	bcf	3,6	;RP1=0, select bank0
  3942  076E  0825               	movf	OPINIT@fmcwtxrx+1,w
  3943  076F  00A3               	movwf	H_OUT@fmcwtxrx+1
  3944  0770  0824               	movf	OPINIT@fmcwtxrx,w
  3945  0771  00A2               	movwf	H_OUT@fmcwtxrx
  3946  0772  120A  158A  218E  120A  118A  	fcall	_H_OUT
  3947                           
  3948                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  3949  0777  1283               	bcf	3,5	;RP0=0, select bank0
  3950  0778  1303               	bcf	3,6	;RP1=0, select bank0
  3951  0779  0825               	movf	OPINIT@fmcwtxrx+1,w
  3952  077A  00A3               	movwf	H_OUT@fmcwtxrx+1
  3953  077B  0824               	movf	OPINIT@fmcwtxrx,w
  3954  077C  00A2               	movwf	H_OUT@fmcwtxrx
  3955  077D  120A  158A  218E  120A  118A  	fcall	_H_OUT
  3956                           
  3957                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  3958  0782  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0783  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0784  0825               	movf	OPINIT@fmcwtxrx+1,w
  3961  0785  00A3               	movwf	L_OUT@fmcwtxrx+1
  3962  0786  0824               	movf	OPINIT@fmcwtxrx,w
  3963  0787  00A2               	movwf	L_OUT@fmcwtxrx
  3964  0788  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  3965                           
  3966                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  3967  078D  1283               	bcf	3,5	;RP0=0, select bank0
  3968  078E  1303               	bcf	3,6	;RP1=0, select bank0
  3969  078F  0825               	movf	OPINIT@fmcwtxrx+1,w
  3970  0790  00A3               	movwf	L_OUT@fmcwtxrx+1
  3971  0791  0824               	movf	OPINIT@fmcwtxrx,w
  3972  0792  00A2               	movwf	L_OUT@fmcwtxrx
  3973  0793  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  3974                           
  3975                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  3976  0798  1283               	bcf	3,5	;RP0=0, select bank0
  3977  0799  1303               	bcf	3,6	;RP1=0, select bank0
  3978  079A  0825               	movf	OPINIT@fmcwtxrx+1,w
  3979  079B  00A3               	movwf	L_OUT@fmcwtxrx+1
  3980  079C  0824               	movf	OPINIT@fmcwtxrx,w
  3981  079D  00A2               	movwf	L_OUT@fmcwtxrx
  3982  079E  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  3983                           
  3984                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  3985  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  3986  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  3987  07A5  0825               	movf	OPINIT@fmcwtxrx+1,w
  3988  07A6  00A3               	movwf	L_OUT@fmcwtxrx+1
  3989  07A7  0824               	movf	OPINIT@fmcwtxrx,w
  3990  07A8  00A2               	movwf	L_OUT@fmcwtxrx
  3991  07A9  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  3992                           
  3993                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  3994  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  3995  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  3996  07B0  0825               	movf	OPINIT@fmcwtxrx+1,w
  3997  07B1  00A3               	movwf	L_OUT@fmcwtxrx+1
  3998  07B2  0824               	movf	OPINIT@fmcwtxrx,w
  3999  07B3  00A2               	movwf	L_OUT@fmcwtxrx
  4000  07B4  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  4001                           
  4002                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  4003  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  4004  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  4005  07BB  0825               	movf	OPINIT@fmcwtxrx+1,w
  4006  07BC  00A3               	movwf	H_OUT@fmcwtxrx+1
  4007  07BD  0824               	movf	OPINIT@fmcwtxrx,w
  4008  07BE  00A2               	movwf	H_OUT@fmcwtxrx
  4009  07BF  120A  158A  218E  120A  118A  	fcall	_H_OUT
  4010                           
  4011                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  4012  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  4013  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  4014  07C6  0825               	movf	OPINIT@fmcwtxrx+1,w
  4015  07C7  00A3               	movwf	L_OUT@fmcwtxrx+1
  4016  07C8  0824               	movf	OPINIT@fmcwtxrx,w
  4017  07C9  00A2               	movwf	L_OUT@fmcwtxrx
  4018  07CA  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  4019                           
  4020                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  4021  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  4022  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  4023  07D1  0825               	movf	OPINIT@fmcwtxrx+1,w
  4024  07D2  00A3               	movwf	L_OUT@fmcwtxrx+1
  4025  07D3  0824               	movf	OPINIT@fmcwtxrx,w
  4026  07D4  00A2               	movwf	L_OUT@fmcwtxrx
  4027  07D5  120A  158A  21D0  120A  118A  	fcall	_L_OUT
  4028                           
  4029                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  4030  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  4031  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  4032  07DC  0825               	movf	OPINIT@fmcwtxrx+1,w
  4033  07DD  00A3               	movwf	STBOUT@fmcwtxrx+1
  4034  07DE  0824               	movf	OPINIT@fmcwtxrx,w
  4035  07DF  00A2               	movwf	STBOUT@fmcwtxrx
  4036  07E0  120A  158A  20AA   	fcall	_STBOUT
  4037  07E3  0008               	return
  4038  07E4                     __end_of_OPINIT:	
  4039                           
  4040                           	psect	text11
  4041  08AA                     __ptext11:	
  4042 ;; *************** function _STBOUT *****************
  4043 ;; Defined at:
  4044 ;;		line 107 in file "FMCW.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;  fmcwtxrx        2    2[BANK0 ] int 
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;		None
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      void 
  4051 ;; Registers used:
  4052 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4058 ;;      Params:         0       2       0       0       0
  4059 ;;      Locals:         0       0       0       0       0
  4060 ;;      Temps:          0       0       0       0       0
  4061 ;;      Totals:         0       2       0       0       0
  4062 ;;Total ram usage:        2 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    2
  4065 ;; This function calls:
  4066 ;;		__NOP
  4067 ;; This function is called by:
  4068 ;;		_OUTFQ
  4069 ;;		_RFDOUT
  4070 ;;		_OPINIT
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           
  4075                           ;psect for function _STBOUT
  4076  08AA                     _STBOUT:	
  4077                           
  4078                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  4079                           
  4080                           ;incstack = 0
  4081                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4082  08AA  1283               	bcf	3,5	;RP0=0, select bank0
  4083  08AB  1303               	bcf	3,6	;RP1=0, select bank0
  4084  08AC  0322               	decf	STBOUT@fmcwtxrx,w
  4085  08AD  0423               	iorwf	STBOUT@fmcwtxrx+1,w
  4086  08AE  1D03               	btfss	3,2
  4087  08AF  28B9               	goto	l3355
  4088                           
  4089                           ;FMCW.c: 109: {
  4090                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  4091  08B0  1685               	bsf	5,5	;volatile
  4092                           
  4093                           ;FMCW.c: 111: _NOP();
  4094  08B1  120A  118A  27E4  120A  158A  	fcall	__NOP
  4095                           
  4096                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  4097  08B6  1283               	bcf	3,5	;RP0=0, select bank0
  4098  08B7  1303               	bcf	3,6	;RP1=0, select bank0
  4099  08B8  1285               	bcf	5,5	;volatile
  4100  08B9                     l3355:	
  4101                           
  4102                           ;FMCW.c: 113: }
  4103                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  4104  08B9  3002               	movlw	2
  4105  08BA  0622               	xorwf	STBOUT@fmcwtxrx,w
  4106  08BB  0423               	iorwf	STBOUT@fmcwtxrx+1,w
  4107  08BC  1D03               	btfss	3,2
  4108  08BD  28C7               	goto	l3363
  4109                           
  4110                           ;FMCW.c: 115: {
  4111                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  4112  08BE  1408               	bsf	8,0	;volatile
  4113                           
  4114                           ;FMCW.c: 117: _NOP();
  4115  08BF  120A  118A  27E4  120A  158A  	fcall	__NOP
  4116                           
  4117                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  4118  08C4  1283               	bcf	3,5	;RP0=0, select bank0
  4119  08C5  1303               	bcf	3,6	;RP1=0, select bank0
  4120  08C6  1008               	bcf	8,0	;volatile
  4121  08C7                     l3363:	
  4122                           
  4123                           ;FMCW.c: 119: }
  4124                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  4125  08C7  3003               	movlw	3
  4126  08C8  0622               	xorwf	STBOUT@fmcwtxrx,w
  4127  08C9  0423               	iorwf	STBOUT@fmcwtxrx+1,w
  4128  08CA  1D03               	btfss	3,2
  4129  08CB  0008               	return
  4130                           
  4131                           ;FMCW.c: 121: {
  4132                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  4133  08CC  1605               	bsf	5,4	;volatile
  4134                           
  4135                           ;FMCW.c: 123: _NOP();
  4136  08CD  120A  118A  27E4   	fcall	__NOP
  4137                           
  4138                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  4139  08D0  1283               	bcf	3,5	;RP0=0, select bank0
  4140  08D1  1303               	bcf	3,6	;RP1=0, select bank0
  4141  08D2  1205               	bcf	5,4	;volatile
  4142  08D3  0008               	return
  4143  08D4                     __end_of_STBOUT:	
  4144                           
  4145                           	psect	text12
  4146  09D0                     __ptext12:	
  4147 ;; *************** function _L_OUT *****************
  4148 ;; Defined at:
  4149 ;;		line 40 in file "FMCW.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  fmcwtxrx        2    2[BANK0 ] int 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      void 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4163 ;;      Params:         0       2       0       0       0
  4164 ;;      Locals:         0       0       0       0       0
  4165 ;;      Temps:          0       0       0       0       0
  4166 ;;      Totals:         0       2       0       0       0
  4167 ;;Total ram usage:        2 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    2
  4170 ;; This function calls:
  4171 ;;		__NOP
  4172 ;; This function is called by:
  4173 ;;		_OUTFQ
  4174 ;;		_RFDOUT
  4175 ;;		_OPINIT
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           
  4180                           ;psect for function _L_OUT
  4181  09D0                     _L_OUT:	
  4182                           
  4183                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  4184                           
  4185                           ;incstack = 0
  4186                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4187  09D0  1283               	bcf	3,5	;RP0=0, select bank0
  4188  09D1  1303               	bcf	3,6	;RP1=0, select bank0
  4189  09D2  0322               	decf	L_OUT@fmcwtxrx,w
  4190  09D3  0423               	iorwf	L_OUT@fmcwtxrx+1,w
  4191  09D4  1D03               	btfss	3,2
  4192  09D5  29E7               	goto	l3297
  4193                           
  4194                           ;FMCW.c: 42: {
  4195                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  4196  09D6  1009               	bcf	9,0	;volatile
  4197                           
  4198                           ;FMCW.c: 44: _NOP();
  4199  09D7  120A  118A  27E4  120A  158A  	fcall	__NOP
  4200                           
  4201                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  4202  09DC  1283               	bcf	3,5	;RP0=0, select bank0
  4203  09DD  1303               	bcf	3,6	;RP1=0, select bank0
  4204  09DE  1489               	bsf	9,1	;volatile
  4205                           
  4206                           ;FMCW.c: 46: _NOP();
  4207  09DF  120A  118A  27E4  120A  158A  	fcall	__NOP
  4208                           
  4209                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  4210  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  4211  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  4212  09E6  1089               	bcf	9,1	;volatile
  4213  09E7                     l3297:	
  4214                           
  4215                           ;FMCW.c: 48: }
  4216                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  4217  09E7  3002               	movlw	2
  4218  09E8  0622               	xorwf	L_OUT@fmcwtxrx,w
  4219  09E9  0423               	iorwf	L_OUT@fmcwtxrx+1,w
  4220  09EA  1D03               	btfss	3,2
  4221  09EB  29FD               	goto	l3307
  4222                           
  4223                           ;FMCW.c: 50: {
  4224                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  4225  09EC  1088               	bcf	8,1	;volatile
  4226                           
  4227                           ;FMCW.c: 52: _NOP();
  4228  09ED  120A  118A  27E4  120A  158A  	fcall	__NOP
  4229                           
  4230                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  4231  09F2  1283               	bcf	3,5	;RP0=0, select bank0
  4232  09F3  1303               	bcf	3,6	;RP1=0, select bank0
  4233  09F4  1508               	bsf	8,2	;volatile
  4234                           
  4235                           ;FMCW.c: 54: _NOP();
  4236  09F5  120A  118A  27E4  120A  158A  	fcall	__NOP
  4237                           
  4238                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  4239  09FA  1283               	bcf	3,5	;RP0=0, select bank0
  4240  09FB  1303               	bcf	3,6	;RP1=0, select bank0
  4241  09FC  1108               	bcf	8,2	;volatile
  4242  09FD                     l3307:	
  4243                           
  4244                           ;FMCW.c: 56: }
  4245                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  4246  09FD  3003               	movlw	3
  4247  09FE  0622               	xorwf	L_OUT@fmcwtxrx,w
  4248  09FF  0423               	iorwf	L_OUT@fmcwtxrx+1,w
  4249  0A00  1D03               	btfss	3,2
  4250  0A01  0008               	return
  4251                           
  4252                           ;FMCW.c: 58: {
  4253                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  4254  0A02  1185               	bcf	5,3	;volatile
  4255                           
  4256                           ;FMCW.c: 60: _NOP();
  4257  0A03  120A  118A  27E4  120A  158A  	fcall	__NOP
  4258                           
  4259                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  4260  0A08  1283               	bcf	3,5	;RP0=0, select bank0
  4261  0A09  1303               	bcf	3,6	;RP1=0, select bank0
  4262  0A0A  1505               	bsf	5,2	;volatile
  4263                           
  4264                           ;FMCW.c: 62: _NOP();
  4265  0A0B  120A  118A  27E4   	fcall	__NOP
  4266                           
  4267                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  4268  0A0E  1283               	bcf	3,5	;RP0=0, select bank0
  4269  0A0F  1303               	bcf	3,6	;RP1=0, select bank0
  4270  0A10  1105               	bcf	5,2	;volatile
  4271  0A11  0008               	return
  4272  0A12                     __end_of_L_OUT:	
  4273                           
  4274                           	psect	text13
  4275  098E                     __ptext13:	
  4276 ;; *************** function _H_OUT *****************
  4277 ;; Defined at:
  4278 ;;		line 74 in file "FMCW.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;  fmcwtxrx        2    2[BANK0 ] int 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4292 ;;      Params:         0       2       0       0       0
  4293 ;;      Locals:         0       0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0
  4295 ;;      Totals:         0       2       0       0       0
  4296 ;;Total ram usage:        2 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    2
  4299 ;; This function calls:
  4300 ;;		__NOP
  4301 ;; This function is called by:
  4302 ;;		_OUTFQ
  4303 ;;		_RFDOUT
  4304 ;;		_OPINIT
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           
  4309                           ;psect for function _H_OUT
  4310  098E                     _H_OUT:	
  4311                           
  4312                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  4313                           
  4314                           ;incstack = 0
  4315                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4316  098E  1283               	bcf	3,5	;RP0=0, select bank0
  4317  098F  1303               	bcf	3,6	;RP1=0, select bank0
  4318  0990  0322               	decf	H_OUT@fmcwtxrx,w
  4319  0991  0423               	iorwf	H_OUT@fmcwtxrx+1,w
  4320  0992  1D03               	btfss	3,2
  4321  0993  29A5               	goto	l3327
  4322                           
  4323                           ;FMCW.c: 76: {
  4324                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  4325  0994  1409               	bsf	9,0	;volatile
  4326                           
  4327                           ;FMCW.c: 78: _NOP();
  4328  0995  120A  118A  27E4  120A  158A  	fcall	__NOP
  4329                           
  4330                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  4331  099A  1283               	bcf	3,5	;RP0=0, select bank0
  4332  099B  1303               	bcf	3,6	;RP1=0, select bank0
  4333  099C  1489               	bsf	9,1	;volatile
  4334                           
  4335                           ;FMCW.c: 80: _NOP();
  4336  099D  120A  118A  27E4  120A  158A  	fcall	__NOP
  4337                           
  4338                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  4339  09A2  1283               	bcf	3,5	;RP0=0, select bank0
  4340  09A3  1303               	bcf	3,6	;RP1=0, select bank0
  4341  09A4  1089               	bcf	9,1	;volatile
  4342  09A5                     l3327:	
  4343                           
  4344                           ;FMCW.c: 82: }
  4345                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  4346  09A5  3002               	movlw	2
  4347  09A6  0622               	xorwf	H_OUT@fmcwtxrx,w
  4348  09A7  0423               	iorwf	H_OUT@fmcwtxrx+1,w
  4349  09A8  1D03               	btfss	3,2
  4350  09A9  29BB               	goto	l3337
  4351                           
  4352                           ;FMCW.c: 84: {
  4353                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  4354  09AA  1488               	bsf	8,1	;volatile
  4355                           
  4356                           ;FMCW.c: 86: _NOP();
  4357  09AB  120A  118A  27E4  120A  158A  	fcall	__NOP
  4358                           
  4359                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  4360  09B0  1283               	bcf	3,5	;RP0=0, select bank0
  4361  09B1  1303               	bcf	3,6	;RP1=0, select bank0
  4362  09B2  1508               	bsf	8,2	;volatile
  4363                           
  4364                           ;FMCW.c: 88: _NOP();
  4365  09B3  120A  118A  27E4  120A  158A  	fcall	__NOP
  4366                           
  4367                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  4368  09B8  1283               	bcf	3,5	;RP0=0, select bank0
  4369  09B9  1303               	bcf	3,6	;RP1=0, select bank0
  4370  09BA  1108               	bcf	8,2	;volatile
  4371  09BB                     l3337:	
  4372                           
  4373                           ;FMCW.c: 90: }
  4374                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  4375  09BB  3003               	movlw	3
  4376  09BC  0622               	xorwf	H_OUT@fmcwtxrx,w
  4377  09BD  0423               	iorwf	H_OUT@fmcwtxrx+1,w
  4378  09BE  1D03               	btfss	3,2
  4379  09BF  0008               	return
  4380                           
  4381                           ;FMCW.c: 92: {
  4382                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  4383  09C0  1585               	bsf	5,3	;volatile
  4384                           
  4385                           ;FMCW.c: 94: _NOP();
  4386  09C1  120A  118A  27E4  120A  158A  	fcall	__NOP
  4387                           
  4388                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  4389  09C6  1283               	bcf	3,5	;RP0=0, select bank0
  4390  09C7  1303               	bcf	3,6	;RP1=0, select bank0
  4391  09C8  1505               	bsf	5,2	;volatile
  4392                           
  4393                           ;FMCW.c: 96: _NOP();
  4394  09C9  120A  118A  27E4   	fcall	__NOP
  4395                           
  4396                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  4397  09CC  1283               	bcf	3,5	;RP0=0, select bank0
  4398  09CD  1303               	bcf	3,6	;RP1=0, select bank0
  4399  09CE  1105               	bcf	5,2	;volatile
  4400  09CF  0008               	return
  4401  09D0                     __end_of_H_OUT:	
  4402                           
  4403                           	psect	text14
  4404  07E4                     __ptext14:	
  4405 ;; *************** function __NOP *****************
  4406 ;; Defined at:
  4407 ;;		line 360 in file "FMCW.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;		None
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;  i               2    0[BANK0 ] int 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  1    wreg      void 
  4414 ;; Registers used:
  4415 ;;		wreg, status,2, btemp+1
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4421 ;;      Params:         0       0       0       0       0
  4422 ;;      Locals:         0       2       0       0       0
  4423 ;;      Temps:          0       0       0       0       0
  4424 ;;      Totals:         0       2       0       0       0
  4425 ;;Total ram usage:        2 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    1
  4428 ;; This function calls:
  4429 ;;		Nothing
  4430 ;; This function is called by:
  4431 ;;		_L_OUT
  4432 ;;		_H_OUT
  4433 ;;		_STBOUT
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           
  4438                           ;psect for function __NOP
  4439  07E4                     __NOP:	
  4440                           
  4441                           ;FMCW.c: 361: for(int i=0; i<5; i++){
  4442                           
  4443                           ;incstack = 0
  4444                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  4445  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  4446  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  4447  07E6  01A0               	clrf	__NOP@i
  4448  07E7  01A1               	clrf	__NOP@i+1
  4449  07E8                     L2:	
  4450  07E8  0821               	movf	__NOP@i+1,w
  4451  07E9  3A80               	xorlw	128
  4452  07EA  00FF               	movwf	127
  4453  07EB  3080               	movlw	128
  4454  07EC  027F               	subwf	127,w
  4455  07ED  1D03               	skipz
  4456  07EE  2FF1               	goto	u3095
  4457  07EF  3005               	movlw	5
  4458  07F0  0220               	subwf	__NOP@i,w
  4459  07F1                     u3095:	
  4460  07F1  1803               	btfsc	3,0
  4461  07F2  0008               	return
  4462                           
  4463                           ;FMCW.c: 362: __nop();
  4464  07F3  0000               	nop
  4465  07F4  3001               	movlw	1
  4466  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  4467  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  4468  07F7  07A0               	addwf	__NOP@i,f
  4469  07F8  1803               	skipnc
  4470  07F9  0AA1               	incf	__NOP@i+1,f
  4471  07FA  3000               	movlw	0
  4472  07FB  07A1               	addwf	__NOP@i+1,f
  4473  07FC  2FE8               	goto	L2
  4474  07FD                     __end_of__NOP:	
  4475                           
  4476                           	psect	text15
  4477  0C18                     __ptext15:	
  4478 ;; *************** function _ReceivePacket_data *****************
  4479 ;; Defined at:
  4480 ;;		line 359 in file "decode_AX25.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;		None
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  i               2   43[BANK0 ] unsigned int 
  4485 ;;  fcschecker      2   41[BANK0 ] unsigned int 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  1    wreg      PTR unsigned char 
  4488 ;; Registers used:
  4489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4495 ;;      Params:         0       0       0       0       0
  4496 ;;      Locals:         0       4       0       0       0
  4497 ;;      Temps:          0       2       0       0       0
  4498 ;;      Totals:         0       6       0       0       0
  4499 ;;Total ram usage:        6 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    3
  4502 ;; This function calls:
  4503 ;;		_fcscheck
  4504 ;;		_getdata
  4505 ;;		_waitFlag
  4506 ;; This function is called by:
  4507 ;;		_main
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           
  4512                           ;psect for function _ReceivePacket_data
  4513  0C18                     _ReceivePacket_data:	
  4514                           
  4515                           ;decode_AX25.c: 360: UINT fcschecker;
  4516                           ;decode_AX25.c: 363: waitFlag();
  4517                           
  4518                           ;incstack = 0
  4519                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4520  0C18  120A  118A  203E  120A  158A  	fcall	_waitFlag
  4521                           
  4522                           ;decode_AX25.c: 365: getdata();
  4523  0C1D  120A  158A  23B7  120A  158A  	fcall	_getdata
  4524                           
  4525                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  4526  0C22  120A  158A  2566  120A  158A  	fcall	_fcscheck
  4527  0C27  1283               	bcf	3,5	;RP0=0, select bank0
  4528  0C28  1303               	bcf	3,6	;RP1=0, select bank0
  4529  0C29  0821               	movf	?_fcscheck+1,w
  4530  0C2A  00CA               	movwf	ReceivePacket_data@fcschecker+1
  4531  0C2B  0820               	movf	?_fcscheck,w
  4532  0C2C  00C9               	movwf	ReceivePacket_data@fcschecker
  4533                           
  4534                           ;decode_AX25.c: 369: if(fcschecker == 1){
  4535  0C2D  0349               	decf	ReceivePacket_data@fcschecker,w
  4536  0C2E  044A               	iorwf	ReceivePacket_data@fcschecker+1,w
  4537  0C2F  1D03               	btfss	3,2
  4538  0C30  2C77               	goto	l3037
  4539                           
  4540                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  4541  0C31  01CB               	clrf	ReceivePacket_data@i
  4542  0C32  01CC               	clrf	ReceivePacket_data@i+1
  4543  0C33  3001               	movlw	low (_commandSize-__stringbase)
  4544  0C34  0084               	movwf	4
  4545  0C35  160A  118A  2000  120A  158A  	fcall	stringdir
  4546  0C3A  00C7               	movwf	??_ReceivePacket_data
  4547  0C3B  160A  118A  2000  120A  158A  	fcall	stringdir
  4548  0C40  00C8               	movwf	??_ReceivePacket_data+1
  4549  0C41  0848               	movf	??_ReceivePacket_data+1,w
  4550  0C42  024C               	subwf	ReceivePacket_data@i+1,w
  4551  0C43  1D03               	skipz
  4552  0C44  2C47               	goto	u2835
  4553  0C45  0847               	movf	??_ReceivePacket_data,w
  4554  0C46  024B               	subwf	ReceivePacket_data@i,w
  4555  0C47                     u2835:	
  4556  0C47  1803               	btfsc	3,0
  4557  0C48  2C71               	goto	l3029
  4558  0C49                     l3023:	
  4559                           
  4560                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  4561  0C49  084B               	movf	ReceivePacket_data@i,w
  4562  0C4A  3E14               	addlw	20
  4563  0C4B  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4564  0C4C  0084               	movwf	4
  4565  0C4D  1783               	bsf	3,7	;select IRP bank3
  4566  0C4E  0800               	movf	0,w
  4567  0C4F  00C7               	movwf	??_ReceivePacket_data
  4568  0C50  084B               	movf	ReceivePacket_data@i,w
  4569  0C51  3EC2               	addlw	(low (_dData| (0+256)))& (0+255)
  4570  0C52  0084               	movwf	4
  4571  0C53  0847               	movf	??_ReceivePacket_data,w
  4572  0C54  0080               	movwf	0
  4573  0C55  3001               	movlw	1
  4574  0C56  07CB               	addwf	ReceivePacket_data@i,f
  4575  0C57  1803               	skipnc
  4576  0C58  0ACC               	incf	ReceivePacket_data@i+1,f
  4577  0C59  3000               	movlw	0
  4578  0C5A  07CC               	addwf	ReceivePacket_data@i+1,f
  4579  0C5B  3001               	movlw	low (_commandSize-__stringbase)
  4580  0C5C  0084               	movwf	4
  4581  0C5D  160A  118A  2000  120A  158A  	fcall	stringdir
  4582  0C62  00C7               	movwf	??_ReceivePacket_data
  4583  0C63  160A  118A  2000  120A  158A  	fcall	stringdir
  4584  0C68  00C8               	movwf	??_ReceivePacket_data+1
  4585  0C69  0848               	movf	??_ReceivePacket_data+1,w
  4586  0C6A  024C               	subwf	ReceivePacket_data@i+1,w
  4587  0C6B  1D03               	skipz
  4588  0C6C  2C6F               	goto	u2845
  4589  0C6D  0847               	movf	??_ReceivePacket_data,w
  4590  0C6E  024B               	subwf	ReceivePacket_data@i,w
  4591  0C6F                     u2845:	
  4592  0C6F  1C03               	skipc
  4593  0C70  2C49               	goto	l3023
  4594  0C71                     l3029:	
  4595                           
  4596                           ;decode_AX25.c: 372: }
  4597                           ;decode_AX25.c: 373: dPacketnum = 0;
  4598  0C71  01F2               	clrf	_dPacketnum
  4599  0C72  01F3               	clrf	_dPacketnum+1
  4600                           
  4601                           ;decode_AX25.c: 374: rcv_state = 0;
  4602  0C73  01F4               	clrf	_rcv_state
  4603  0C74  01F5               	clrf	_rcv_state+1
  4604                           
  4605                           ;decode_AX25.c: 375: return dData;
  4606  0C75  30C2               	movlw	(low (_dData| (0+256)))& (0+255)
  4607                           
  4608                           ;decode_AX25.c: 376: }else{
  4609  0C76  0008               	return
  4610  0C77                     l3037:	
  4611                           
  4612                           ;decode_AX25.c: 377: dPacketnum = 0;
  4613  0C77  01F2               	clrf	_dPacketnum
  4614  0C78  01F3               	clrf	_dPacketnum+1
  4615                           
  4616                           ;decode_AX25.c: 378: rcv_state = 0;
  4617  0C79  01F4               	clrf	_rcv_state
  4618  0C7A  01F5               	clrf	_rcv_state+1
  4619                           
  4620                           ;decode_AX25.c: 379: return 0x00;
  4621  0C7B  3000               	movlw	0
  4622  0C7C  0008               	return
  4623  0C7D                     __end_of_ReceivePacket_data:	
  4624                           
  4625                           	psect	text16
  4626  003E                     __ptext16:	
  4627 ;; *************** function _waitFlag *****************
  4628 ;; Defined at:
  4629 ;;		line 54 in file "decode_AX25.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;		None
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  j               2   34[BANK0 ] unsigned int 
  4634 ;;  j               2   20[BANK0 ] unsigned int 
  4635 ;;  j               2   32[BANK0 ] unsigned int 
  4636 ;;  j               2   18[BANK0 ] unsigned int 
  4637 ;;  j               2   30[BANK0 ] unsigned int 
  4638 ;;  j               2   16[BANK0 ] unsigned int 
  4639 ;;  j               2   28[BANK0 ] unsigned int 
  4640 ;;  j               2   14[BANK0 ] unsigned int 
  4641 ;;  j               2   26[BANK0 ] unsigned int 
  4642 ;;  j               2   12[BANK0 ] unsigned int 
  4643 ;;  i               2   10[BANK0 ] unsigned int 
  4644 ;;  j               2   24[BANK0 ] unsigned int 
  4645 ;;  j               2   22[BANK0 ] unsigned int 
  4646 ;;  flag_judge      2   36[BANK0 ] unsigned int 
  4647 ;;  buf             1   38[BANK0 ] unsigned char 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4657 ;;      Params:         0       0       0       0       0
  4658 ;;      Locals:         0      29       0       0       0
  4659 ;;      Temps:          0       4       0       0       0
  4660 ;;      Totals:         0      33       0       0       0
  4661 ;;Total ram usage:       33 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    2
  4664 ;; This function calls:
  4665 ;;		_getbit
  4666 ;; This function is called by:
  4667 ;;		_ReceivePacket_data
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           
  4672                           ;psect for function _waitFlag
  4673  003E                     _waitFlag:	
  4674                           
  4675                           ;decode_AX25.c: 55: UINT flag_judge;
  4676                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  4677                           
  4678                           ;incstack = 0
  4679                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4680  003E  30FF               	movlw	255
  4681  003F  1283               	bcf	3,5	;RP0=0, select bank0
  4682  0040  1303               	bcf	3,6	;RP1=0, select bank0
  4683  0041  00A6               	movwf	??_waitFlag
  4684  0042  0826               	movf	??_waitFlag,w
  4685  0043  00C6               	movwf	waitFlag@buf
  4686  0044                     L8:	
  4687                           
  4688                           ;decode_AX25.c: 271: rcv_state = 0;
  4689  0044  01F4               	clrf	_rcv_state
  4690  0045  01F5               	clrf	_rcv_state+1
  4691  0046                     l2809:	
  4692  0046  3000               	movlw	0
  4693  0047  0275               	subwf	_rcv_state+1,w
  4694  0048  3002               	movlw	2
  4695  0049  1903               	skipnz
  4696  004A  0274               	subwf	_rcv_state,w
  4697  004B  1803               	btfsc	3,0
  4698  004C  0008               	return
  4699  004D                     l2443:	
  4700                           ;decode_AX25.c: 59: while(buf != 0x7e){
  4701                           
  4702                           ;decode_AX25.c: 58: while(rcv_state < 2){
  4703                           
  4704                           ;decode_AX25.c: 57: rcv_state = 0;
  4705                           
  4706  004D  307E               	movlw	126
  4707  004E  0646               	xorwf	waitFlag@buf,w
  4708  004F  1903               	btfsc	3,2
  4709  0050  289D               	goto	l2465
  4710                           
  4711                           ;decode_AX25.c: 60: flag_judge = getbit();
  4712  0051  120A  158A  22A6  120A  118A  	fcall	_getbit
  4713  0056  1283               	bcf	3,5	;RP0=0, select bank0
  4714  0057  1303               	bcf	3,6	;RP1=0, select bank0
  4715  0058  0821               	movf	?_getbit+1,w
  4716  0059  00C5               	movwf	waitFlag@flag_judge+1
  4717  005A  0820               	movf	?_getbit,w
  4718  005B  00C4               	movwf	waitFlag@flag_judge
  4719                           
  4720                           ;decode_AX25.c: 61: buf = buf << 1;
  4721  005C  0846               	movf	waitFlag@buf,w
  4722  005D  00A6               	movwf	??_waitFlag
  4723  005E  0726               	addwf	??_waitFlag,w
  4724  005F  00A7               	movwf	??_waitFlag+1
  4725  0060  0827               	movf	??_waitFlag+1,w
  4726  0061  00C6               	movwf	waitFlag@buf
  4727                           
  4728                           ;decode_AX25.c: 63: buf = buf | 0x00;
  4729  0062  0844               	movf	waitFlag@flag_judge,w
  4730  0063  0445               	iorwf	waitFlag@flag_judge+1,w
  4731  0064  1903               	btfsc	3,2
  4732  0065  284D               	goto	l2443
  4733                           
  4734                           ;decode_AX25.c: 65: buf = buf | 0x01;
  4735                           
  4736                           ;decode_AX25.c: 64: }else{
  4737  0066  0846               	movf	waitFlag@buf,w
  4738  0067  3801               	iorlw	1
  4739  0068  00A6               	movwf	??_waitFlag
  4740  0069  0826               	movf	??_waitFlag,w
  4741  006A  00C6               	movwf	waitFlag@buf
  4742  006B  284D               	goto	l2443
  4743  006C                     l2445:	
  4744                           ;decode_AX25.c: 66: }
  4745                           ;decode_AX25.c: 67: }
  4746                           ;decode_AX25.c: 71: while(buf == 0x7e){
  4747                           
  4748                           
  4749                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  4750  006C  01AA               	clrf	waitFlag@i
  4751  006D  01AB               	clrf	waitFlag@i+1
  4752  006E  3000               	movlw	0
  4753  006F  022B               	subwf	waitFlag@i+1,w
  4754  0070  3008               	movlw	8
  4755  0071  1903               	skipnz
  4756  0072  022A               	subwf	waitFlag@i,w
  4757  0073  1803               	btfsc	3,0
  4758  0074  289D               	goto	l2465
  4759  0075                     l2451:	
  4760                           
  4761                           ;decode_AX25.c: 73: flag_judge = getbit();
  4762  0075  120A  158A  22A6  120A  118A  	fcall	_getbit
  4763  007A  1283               	bcf	3,5	;RP0=0, select bank0
  4764  007B  1303               	bcf	3,6	;RP1=0, select bank0
  4765  007C  0821               	movf	?_getbit+1,w
  4766  007D  00C5               	movwf	waitFlag@flag_judge+1
  4767  007E  0820               	movf	?_getbit,w
  4768  007F  00C4               	movwf	waitFlag@flag_judge
  4769                           
  4770                           ;decode_AX25.c: 74: buf = buf >> 1;
  4771  0080  0846               	movf	waitFlag@buf,w
  4772  0081  00A6               	movwf	??_waitFlag
  4773  0082  1003               	clrc
  4774  0083  0C26               	rrf	??_waitFlag,w
  4775  0084  00A7               	movwf	??_waitFlag+1
  4776  0085  0827               	movf	??_waitFlag+1,w
  4777  0086  00C6               	movwf	waitFlag@buf
  4778                           
  4779                           ;decode_AX25.c: 76: buf = buf | 0x00;
  4780  0087  0844               	movf	waitFlag@flag_judge,w
  4781  0088  0445               	iorwf	waitFlag@flag_judge+1,w
  4782  0089  1903               	btfsc	3,2
  4783  008A  2890               	goto	l2461
  4784                           
  4785                           ;decode_AX25.c: 78: buf = buf | 0x80;
  4786                           
  4787                           ;decode_AX25.c: 77: }else{
  4788  008B  0846               	movf	waitFlag@buf,w
  4789  008C  3880               	iorlw	128
  4790  008D  00A6               	movwf	??_waitFlag
  4791  008E  0826               	movf	??_waitFlag,w
  4792  008F  00C6               	movwf	waitFlag@buf
  4793  0090                     l2461:	
  4794  0090  3001               	movlw	1
  4795  0091  07AA               	addwf	waitFlag@i,f
  4796  0092  1803               	skipnc
  4797  0093  0AAB               	incf	waitFlag@i+1,f
  4798  0094  3000               	movlw	0
  4799  0095  07AB               	addwf	waitFlag@i+1,f
  4800  0096  3000               	movlw	0
  4801  0097  022B               	subwf	waitFlag@i+1,w
  4802  0098  3008               	movlw	8
  4803  0099  1903               	skipnz
  4804  009A  022A               	subwf	waitFlag@i,w
  4805  009B  1C03               	skipc
  4806  009C  2875               	goto	l2451
  4807  009D                     l2465:	
  4808  009D  307E               	movlw	126
  4809  009E  0646               	xorwf	waitFlag@buf,w
  4810  009F  1903               	btfsc	3,2
  4811  00A0  286C               	goto	l2445
  4812                           
  4813                           ;decode_AX25.c: 79: }
  4814                           ;decode_AX25.c: 80: }
  4815                           ;decode_AX25.c: 81: }
  4816                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  4817  00A1  300A               	movlw	low (STR_1-__stringbase)
  4818  00A2  0084               	movwf	4
  4819  00A3  160A  118A  2000  120A  118A  	fcall	stringdir
  4820  00A8  00A6               	movwf	??_waitFlag
  4821  00A9  01A7               	clrf	??_waitFlag+1
  4822  00AA  1003               	clrc
  4823  00AB  0DA6               	rlf	??_waitFlag,f
  4824  00AC  0DA7               	rlf	??_waitFlag+1,f
  4825  00AD  0846               	movf	waitFlag@buf,w
  4826  00AE  00A8               	movwf	??_waitFlag+2
  4827  00AF  01A9               	clrf	??_waitFlag+3
  4828  00B0  0827               	movf	??_waitFlag+1,w
  4829  00B1  0629               	xorwf	??_waitFlag+3,w
  4830  00B2  1D03               	skipz
  4831  00B3  28B6               	goto	u2145
  4832  00B4  0826               	movf	??_waitFlag,w
  4833  00B5  0628               	xorwf	??_waitFlag+2,w
  4834  00B6                     u2145:	
  4835  00B6  1D03               	skipz
  4836  00B7  2A7B               	goto	l2615
  4837                           
  4838                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  4839  00B8  0846               	movf	waitFlag@buf,w
  4840  00B9  00A6               	movwf	??_waitFlag
  4841  00BA  0872               	movf	_dPacketnum,w
  4842  00BB  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4843  00BC  0084               	movwf	4
  4844  00BD  0826               	movf	??_waitFlag,w
  4845  00BE  1783               	bsf	3,7	;select IRP bank3
  4846  00BF  0080               	movwf	0
  4847                           
  4848                           ;decode_AX25.c: 84: dPacketnum ++;
  4849  00C0  3001               	movlw	1
  4850  00C1  07F2               	addwf	_dPacketnum,f
  4851  00C2  1803               	skipnc
  4852  00C3  0AF3               	incf	_dPacketnum+1,f
  4853  00C4  3000               	movlw	0
  4854  00C5  07F3               	addwf	_dPacketnum+1,f
  4855                           
  4856                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  4857  00C6  01AC               	clrf	waitFlag@j
  4858  00C7  01AD               	clrf	waitFlag@j+1
  4859  00C8  3000               	movlw	0
  4860  00C9  022D               	subwf	waitFlag@j+1,w
  4861  00CA  3008               	movlw	8
  4862  00CB  1903               	skipnz
  4863  00CC  022C               	subwf	waitFlag@j,w
  4864  00CD  1803               	btfsc	3,0
  4865  00CE  28F7               	goto	l2493
  4866  00CF                     l2479:	
  4867                           
  4868                           ;decode_AX25.c: 86: flag_judge = getbit();
  4869  00CF  120A  158A  22A6  120A  118A  	fcall	_getbit
  4870  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  4871  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  4872  00D6  0821               	movf	?_getbit+1,w
  4873  00D7  00C5               	movwf	waitFlag@flag_judge+1
  4874  00D8  0820               	movf	?_getbit,w
  4875  00D9  00C4               	movwf	waitFlag@flag_judge
  4876                           
  4877                           ;decode_AX25.c: 87: buf = buf >> 1;
  4878  00DA  0846               	movf	waitFlag@buf,w
  4879  00DB  00A6               	movwf	??_waitFlag
  4880  00DC  1003               	clrc
  4881  00DD  0C26               	rrf	??_waitFlag,w
  4882  00DE  00A7               	movwf	??_waitFlag+1
  4883  00DF  0827               	movf	??_waitFlag+1,w
  4884  00E0  00C6               	movwf	waitFlag@buf
  4885                           
  4886                           ;decode_AX25.c: 89: buf = buf | 0x00;
  4887  00E1  0844               	movf	waitFlag@flag_judge,w
  4888  00E2  0445               	iorwf	waitFlag@flag_judge+1,w
  4889  00E3  1903               	btfsc	3,2
  4890  00E4  28EA               	goto	l2489
  4891                           
  4892                           ;decode_AX25.c: 91: buf = buf | 0x80;
  4893                           
  4894                           ;decode_AX25.c: 90: }else{
  4895  00E5  0846               	movf	waitFlag@buf,w
  4896  00E6  3880               	iorlw	128
  4897  00E7  00A6               	movwf	??_waitFlag
  4898  00E8  0826               	movf	??_waitFlag,w
  4899  00E9  00C6               	movwf	waitFlag@buf
  4900  00EA                     l2489:	
  4901  00EA  3001               	movlw	1
  4902  00EB  07AC               	addwf	waitFlag@j,f
  4903  00EC  1803               	skipnc
  4904  00ED  0AAD               	incf	waitFlag@j+1,f
  4905  00EE  3000               	movlw	0
  4906  00EF  07AD               	addwf	waitFlag@j+1,f
  4907  00F0  3000               	movlw	0
  4908  00F1  022D               	subwf	waitFlag@j+1,w
  4909  00F2  3008               	movlw	8
  4910  00F3  1903               	skipnz
  4911  00F4  022C               	subwf	waitFlag@j,w
  4912  00F5  1C03               	skipc
  4913  00F6  28CF               	goto	l2479
  4914  00F7                     l2493:	
  4915                           
  4916                           ;decode_AX25.c: 92: }
  4917                           ;decode_AX25.c: 93: }
  4918                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  4919  00F7  300B               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  4920  00F8  0084               	movwf	4
  4921  00F9  160A  118A  2000  120A  118A  	fcall	stringdir
  4922  00FE  00A6               	movwf	??_waitFlag
  4923  00FF  01A7               	clrf	??_waitFlag+1
  4924  0100  1003               	clrc
  4925  0101  0DA6               	rlf	??_waitFlag,f
  4926  0102  0DA7               	rlf	??_waitFlag+1,f
  4927  0103  0846               	movf	waitFlag@buf,w
  4928  0104  00A8               	movwf	??_waitFlag+2
  4929  0105  01A9               	clrf	??_waitFlag+3
  4930  0106  0827               	movf	??_waitFlag+1,w
  4931  0107  0629               	xorwf	??_waitFlag+3,w
  4932  0108  1D03               	skipz
  4933  0109  290C               	goto	u2185
  4934  010A  0826               	movf	??_waitFlag,w
  4935  010B  0628               	xorwf	??_waitFlag+2,w
  4936  010C                     u2185:	
  4937  010C  1D03               	skipz
  4938  010D  2A7B               	goto	l2615
  4939                           
  4940                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  4941  010E  0846               	movf	waitFlag@buf,w
  4942  010F  00A6               	movwf	??_waitFlag
  4943  0110  0872               	movf	_dPacketnum,w
  4944  0111  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4945  0112  0084               	movwf	4
  4946  0113  0826               	movf	??_waitFlag,w
  4947  0114  1783               	bsf	3,7	;select IRP bank3
  4948  0115  0080               	movwf	0
  4949                           
  4950                           ;decode_AX25.c: 96: dPacketnum ++;
  4951  0116  3001               	movlw	1
  4952  0117  07F2               	addwf	_dPacketnum,f
  4953  0118  1803               	skipnc
  4954  0119  0AF3               	incf	_dPacketnum+1,f
  4955  011A  3000               	movlw	0
  4956  011B  07F3               	addwf	_dPacketnum+1,f
  4957                           
  4958                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  4959  011C  01AE               	clrf	waitFlag@j_101
  4960  011D  01AF               	clrf	waitFlag@j_101+1
  4961  011E  3000               	movlw	0
  4962  011F  022F               	subwf	waitFlag@j_101+1,w
  4963  0120  3008               	movlw	8
  4964  0121  1903               	skipnz
  4965  0122  022E               	subwf	waitFlag@j_101,w
  4966  0123  1803               	btfsc	3,0
  4967  0124  294D               	goto	l2519
  4968  0125                     l2505:	
  4969                           
  4970                           ;decode_AX25.c: 98: flag_judge = getbit();
  4971  0125  120A  158A  22A6  120A  118A  	fcall	_getbit
  4972  012A  1283               	bcf	3,5	;RP0=0, select bank0
  4973  012B  1303               	bcf	3,6	;RP1=0, select bank0
  4974  012C  0821               	movf	?_getbit+1,w
  4975  012D  00C5               	movwf	waitFlag@flag_judge+1
  4976  012E  0820               	movf	?_getbit,w
  4977  012F  00C4               	movwf	waitFlag@flag_judge
  4978                           
  4979                           ;decode_AX25.c: 99: buf = buf >> 1;
  4980  0130  0846               	movf	waitFlag@buf,w
  4981  0131  00A6               	movwf	??_waitFlag
  4982  0132  1003               	clrc
  4983  0133  0C26               	rrf	??_waitFlag,w
  4984  0134  00A7               	movwf	??_waitFlag+1
  4985  0135  0827               	movf	??_waitFlag+1,w
  4986  0136  00C6               	movwf	waitFlag@buf
  4987                           
  4988                           ;decode_AX25.c: 101: buf = buf | 0x00;
  4989  0137  0844               	movf	waitFlag@flag_judge,w
  4990  0138  0445               	iorwf	waitFlag@flag_judge+1,w
  4991  0139  1903               	btfsc	3,2
  4992  013A  2940               	goto	l2515
  4993                           
  4994                           ;decode_AX25.c: 103: buf = buf | 0x80;
  4995                           
  4996                           ;decode_AX25.c: 102: }else{
  4997  013B  0846               	movf	waitFlag@buf,w
  4998  013C  3880               	iorlw	128
  4999  013D  00A6               	movwf	??_waitFlag
  5000  013E  0826               	movf	??_waitFlag,w
  5001  013F  00C6               	movwf	waitFlag@buf
  5002  0140                     l2515:	
  5003  0140  3001               	movlw	1
  5004  0141  07AE               	addwf	waitFlag@j_101,f
  5005  0142  1803               	skipnc
  5006  0143  0AAF               	incf	waitFlag@j_101+1,f
  5007  0144  3000               	movlw	0
  5008  0145  07AF               	addwf	waitFlag@j_101+1,f
  5009  0146  3000               	movlw	0
  5010  0147  022F               	subwf	waitFlag@j_101+1,w
  5011  0148  3008               	movlw	8
  5012  0149  1903               	skipnz
  5013  014A  022E               	subwf	waitFlag@j_101,w
  5014  014B  1C03               	skipc
  5015  014C  2925               	goto	l2505
  5016  014D                     l2519:	
  5017                           
  5018                           ;decode_AX25.c: 104: }
  5019                           ;decode_AX25.c: 105: }
  5020                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  5021  014D  300C               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  5022  014E  0084               	movwf	4
  5023  014F  160A  118A  2000  120A  118A  	fcall	stringdir
  5024  0154  00A6               	movwf	??_waitFlag
  5025  0155  01A7               	clrf	??_waitFlag+1
  5026  0156  1003               	clrc
  5027  0157  0DA6               	rlf	??_waitFlag,f
  5028  0158  0DA7               	rlf	??_waitFlag+1,f
  5029  0159  0846               	movf	waitFlag@buf,w
  5030  015A  00A8               	movwf	??_waitFlag+2
  5031  015B  01A9               	clrf	??_waitFlag+3
  5032  015C  0827               	movf	??_waitFlag+1,w
  5033  015D  0629               	xorwf	??_waitFlag+3,w
  5034  015E  1D03               	skipz
  5035  015F  2962               	goto	u2225
  5036  0160  0826               	movf	??_waitFlag,w
  5037  0161  0628               	xorwf	??_waitFlag+2,w
  5038  0162                     u2225:	
  5039  0162  1D03               	skipz
  5040  0163  2A7B               	goto	l2615
  5041                           
  5042                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  5043  0164  0846               	movf	waitFlag@buf,w
  5044  0165  00A6               	movwf	??_waitFlag
  5045  0166  0872               	movf	_dPacketnum,w
  5046  0167  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  5047  0168  0084               	movwf	4
  5048  0169  0826               	movf	??_waitFlag,w
  5049  016A  1783               	bsf	3,7	;select IRP bank3
  5050  016B  0080               	movwf	0
  5051                           
  5052                           ;decode_AX25.c: 108: dPacketnum ++;
  5053  016C  3001               	movlw	1
  5054  016D  07F2               	addwf	_dPacketnum,f
  5055  016E  1803               	skipnc
  5056  016F  0AF3               	incf	_dPacketnum+1,f
  5057  0170  3000               	movlw	0
  5058  0171  07F3               	addwf	_dPacketnum+1,f
  5059                           
  5060                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  5061  0172  01B0               	clrf	waitFlag@j_103
  5062  0173  01B1               	clrf	waitFlag@j_103+1
  5063  0174  3000               	movlw	0
  5064  0175  0231               	subwf	waitFlag@j_103+1,w
  5065  0176  3008               	movlw	8
  5066  0177  1903               	skipnz
  5067  0178  0230               	subwf	waitFlag@j_103,w
  5068  0179  1803               	btfsc	3,0
  5069  017A  29A3               	goto	l2545
  5070  017B                     l2531:	
  5071                           
  5072                           ;decode_AX25.c: 110: flag_judge = getbit();
  5073  017B  120A  158A  22A6  120A  118A  	fcall	_getbit
  5074  0180  1283               	bcf	3,5	;RP0=0, select bank0
  5075  0181  1303               	bcf	3,6	;RP1=0, select bank0
  5076  0182  0821               	movf	?_getbit+1,w
  5077  0183  00C5               	movwf	waitFlag@flag_judge+1
  5078  0184  0820               	movf	?_getbit,w
  5079  0185  00C4               	movwf	waitFlag@flag_judge
  5080                           
  5081                           ;decode_AX25.c: 111: buf = buf >> 1;
  5082  0186  0846               	movf	waitFlag@buf,w
  5083  0187  00A6               	movwf	??_waitFlag
  5084  0188  1003               	clrc
  5085  0189  0C26               	rrf	??_waitFlag,w
  5086  018A  00A7               	movwf	??_waitFlag+1
  5087  018B  0827               	movf	??_waitFlag+1,w
  5088  018C  00C6               	movwf	waitFlag@buf
  5089                           
  5090                           ;decode_AX25.c: 113: buf = buf | 0x00;
  5091  018D  0844               	movf	waitFlag@flag_judge,w
  5092  018E  0445               	iorwf	waitFlag@flag_judge+1,w
  5093  018F  1903               	btfsc	3,2
  5094  0190  2996               	goto	l2541
  5095                           
  5096                           ;decode_AX25.c: 115: buf = buf | 0x80;
  5097                           
  5098                           ;decode_AX25.c: 114: }else{
  5099  0191  0846               	movf	waitFlag@buf,w
  5100  0192  3880               	iorlw	128
  5101  0193  00A6               	movwf	??_waitFlag
  5102  0194  0826               	movf	??_waitFlag,w
  5103  0195  00C6               	movwf	waitFlag@buf
  5104  0196                     l2541:	
  5105  0196  3001               	movlw	1
  5106  0197  07B0               	addwf	waitFlag@j_103,f
  5107  0198  1803               	skipnc
  5108  0199  0AB1               	incf	waitFlag@j_103+1,f
  5109  019A  3000               	movlw	0
  5110  019B  07B1               	addwf	waitFlag@j_103+1,f
  5111  019C  3000               	movlw	0
  5112  019D  0231               	subwf	waitFlag@j_103+1,w
  5113  019E  3008               	movlw	8
  5114  019F  1903               	skipnz
  5115  01A0  0230               	subwf	waitFlag@j_103,w
  5116  01A1  1C03               	skipc
  5117  01A2  297B               	goto	l2531
  5118  01A3                     l2545:	
  5119                           
  5120                           ;decode_AX25.c: 116: }
  5121                           ;decode_AX25.c: 117: }
  5122                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  5123  01A3  300D               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  5124  01A4  0084               	movwf	4
  5125  01A5  160A  118A  2000  120A  118A  	fcall	stringdir
  5126  01AA  00A6               	movwf	??_waitFlag
  5127  01AB  01A7               	clrf	??_waitFlag+1
  5128  01AC  1003               	clrc
  5129  01AD  0DA6               	rlf	??_waitFlag,f
  5130  01AE  0DA7               	rlf	??_waitFlag+1,f
  5131  01AF  0846               	movf	waitFlag@buf,w
  5132  01B0  00A8               	movwf	??_waitFlag+2
  5133  01B1  01A9               	clrf	??_waitFlag+3
  5134  01B2  0827               	movf	??_waitFlag+1,w
  5135  01B3  0629               	xorwf	??_waitFlag+3,w
  5136  01B4  1D03               	skipz
  5137  01B5  29B8               	goto	u2265
  5138  01B6  0826               	movf	??_waitFlag,w
  5139  01B7  0628               	xorwf	??_waitFlag+2,w
  5140  01B8                     u2265:	
  5141  01B8  1D03               	skipz
  5142  01B9  2A7B               	goto	l2615
  5143                           
  5144                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  5145  01BA  0846               	movf	waitFlag@buf,w
  5146  01BB  00A6               	movwf	??_waitFlag
  5147  01BC  0872               	movf	_dPacketnum,w
  5148  01BD  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  5149  01BE  0084               	movwf	4
  5150  01BF  0826               	movf	??_waitFlag,w
  5151  01C0  1783               	bsf	3,7	;select IRP bank3
  5152  01C1  0080               	movwf	0
  5153                           
  5154                           ;decode_AX25.c: 120: dPacketnum ++;
  5155  01C2  3001               	movlw	1
  5156  01C3  07F2               	addwf	_dPacketnum,f
  5157  01C4  1803               	skipnc
  5158  01C5  0AF3               	incf	_dPacketnum+1,f
  5159  01C6  3000               	movlw	0
  5160  01C7  07F3               	addwf	_dPacketnum+1,f
  5161                           
  5162                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  5163  01C8  01B2               	clrf	waitFlag@j_105
  5164  01C9  01B3               	clrf	waitFlag@j_105+1
  5165  01CA  3000               	movlw	0
  5166  01CB  0233               	subwf	waitFlag@j_105+1,w
  5167  01CC  3008               	movlw	8
  5168  01CD  1903               	skipnz
  5169  01CE  0232               	subwf	waitFlag@j_105,w
  5170  01CF  1803               	btfsc	3,0
  5171  01D0  29F9               	goto	l2571
  5172  01D1                     l2557:	
  5173                           
  5174                           ;decode_AX25.c: 122: flag_judge = getbit();
  5175  01D1  120A  158A  22A6  120A  118A  	fcall	_getbit
  5176  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  5177  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  5178  01D8  0821               	movf	?_getbit+1,w
  5179  01D9  00C5               	movwf	waitFlag@flag_judge+1
  5180  01DA  0820               	movf	?_getbit,w
  5181  01DB  00C4               	movwf	waitFlag@flag_judge
  5182                           
  5183                           ;decode_AX25.c: 123: buf = buf >> 1;
  5184  01DC  0846               	movf	waitFlag@buf,w
  5185  01DD  00A6               	movwf	??_waitFlag
  5186  01DE  1003               	clrc
  5187  01DF  0C26               	rrf	??_waitFlag,w
  5188  01E0  00A7               	movwf	??_waitFlag+1
  5189  01E1  0827               	movf	??_waitFlag+1,w
  5190  01E2  00C6               	movwf	waitFlag@buf
  5191                           
  5192                           ;decode_AX25.c: 125: buf = buf | 0x00;
  5193  01E3  0844               	movf	waitFlag@flag_judge,w
  5194  01E4  0445               	iorwf	waitFlag@flag_judge+1,w
  5195  01E5  1903               	btfsc	3,2
  5196  01E6  29EC               	goto	l2567
  5197                           
  5198                           ;decode_AX25.c: 127: buf = buf | 0x80;
  5199                           
  5200                           ;decode_AX25.c: 126: }else{
  5201  01E7  0846               	movf	waitFlag@buf,w
  5202  01E8  3880               	iorlw	128
  5203  01E9  00A6               	movwf	??_waitFlag
  5204  01EA  0826               	movf	??_waitFlag,w
  5205  01EB  00C6               	movwf	waitFlag@buf
  5206  01EC                     l2567:	
  5207  01EC  3001               	movlw	1
  5208  01ED  07B2               	addwf	waitFlag@j_105,f
  5209  01EE  1803               	skipnc
  5210  01EF  0AB3               	incf	waitFlag@j_105+1,f
  5211  01F0  3000               	movlw	0
  5212  01F1  07B3               	addwf	waitFlag@j_105+1,f
  5213  01F2  3000               	movlw	0
  5214  01F3  0233               	subwf	waitFlag@j_105+1,w
  5215  01F4  3008               	movlw	8
  5216  01F5  1903               	skipnz
  5217  01F6  0232               	subwf	waitFlag@j_105,w
  5218  01F7  1C03               	skipc
  5219  01F8  29D1               	goto	l2557
  5220  01F9                     l2571:	
  5221                           
  5222                           ;decode_AX25.c: 128: }
  5223                           ;decode_AX25.c: 129: }
  5224                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  5225  01F9  300E               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  5226  01FA  0084               	movwf	4
  5227  01FB  160A  118A  2000  120A  118A  	fcall	stringdir
  5228  0200  00A6               	movwf	??_waitFlag
  5229  0201  01A7               	clrf	??_waitFlag+1
  5230  0202  1003               	clrc
  5231  0203  0DA6               	rlf	??_waitFlag,f
  5232  0204  0DA7               	rlf	??_waitFlag+1,f
  5233  0205  0846               	movf	waitFlag@buf,w
  5234  0206  00A8               	movwf	??_waitFlag+2
  5235  0207  01A9               	clrf	??_waitFlag+3
  5236  0208  0827               	movf	??_waitFlag+1,w
  5237  0209  0629               	xorwf	??_waitFlag+3,w
  5238  020A  1D03               	skipz
  5239  020B  2A0E               	goto	u2305
  5240  020C  0826               	movf	??_waitFlag,w
  5241  020D  0628               	xorwf	??_waitFlag+2,w
  5242  020E                     u2305:	
  5243  020E  1D03               	skipz
  5244  020F  2A7B               	goto	l2615
  5245                           
  5246                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  5247  0210  0846               	movf	waitFlag@buf,w
  5248  0211  00A6               	movwf	??_waitFlag
  5249  0212  0872               	movf	_dPacketnum,w
  5250  0213  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  5251  0214  0084               	movwf	4
  5252  0215  0826               	movf	??_waitFlag,w
  5253  0216  1783               	bsf	3,7	;select IRP bank3
  5254  0217  0080               	movwf	0
  5255                           
  5256                           ;decode_AX25.c: 132: dPacketnum ++;
  5257  0218  3001               	movlw	1
  5258  0219  07F2               	addwf	_dPacketnum,f
  5259  021A  1803               	skipnc
  5260  021B  0AF3               	incf	_dPacketnum+1,f
  5261  021C  3000               	movlw	0
  5262  021D  07F3               	addwf	_dPacketnum+1,f
  5263                           
  5264                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  5265  021E  01B4               	clrf	waitFlag@j_107
  5266  021F  01B5               	clrf	waitFlag@j_107+1
  5267  0220  3000               	movlw	0
  5268  0221  0235               	subwf	waitFlag@j_107+1,w
  5269  0222  3008               	movlw	8
  5270  0223  1903               	skipnz
  5271  0224  0234               	subwf	waitFlag@j_107,w
  5272  0225  1803               	btfsc	3,0
  5273  0226  2A4F               	goto	l2597
  5274  0227                     l2583:	
  5275                           
  5276                           ;decode_AX25.c: 134: flag_judge = getbit();
  5277  0227  120A  158A  22A6  120A  118A  	fcall	_getbit
  5278  022C  1283               	bcf	3,5	;RP0=0, select bank0
  5279  022D  1303               	bcf	3,6	;RP1=0, select bank0
  5280  022E  0821               	movf	?_getbit+1,w
  5281  022F  00C5               	movwf	waitFlag@flag_judge+1
  5282  0230  0820               	movf	?_getbit,w
  5283  0231  00C4               	movwf	waitFlag@flag_judge
  5284                           
  5285                           ;decode_AX25.c: 135: buf = buf >> 1;
  5286  0232  0846               	movf	waitFlag@buf,w
  5287  0233  00A6               	movwf	??_waitFlag
  5288  0234  1003               	clrc
  5289  0235  0C26               	rrf	??_waitFlag,w
  5290  0236  00A7               	movwf	??_waitFlag+1
  5291  0237  0827               	movf	??_waitFlag+1,w
  5292  0238  00C6               	movwf	waitFlag@buf
  5293                           
  5294                           ;decode_AX25.c: 137: buf = buf | 0x00;
  5295  0239  0844               	movf	waitFlag@flag_judge,w
  5296  023A  0445               	iorwf	waitFlag@flag_judge+1,w
  5297  023B  1903               	btfsc	3,2
  5298  023C  2A42               	goto	l2593
  5299                           
  5300                           ;decode_AX25.c: 139: buf = buf | 0x80;
  5301                           
  5302                           ;decode_AX25.c: 138: }else{
  5303  023D  0846               	movf	waitFlag@buf,w
  5304  023E  3880               	iorlw	128
  5305  023F  00A6               	movwf	??_waitFlag
  5306  0240  0826               	movf	??_waitFlag,w
  5307  0241  00C6               	movwf	waitFlag@buf
  5308  0242                     l2593:	
  5309  0242  3001               	movlw	1
  5310  0243  07B4               	addwf	waitFlag@j_107,f
  5311  0244  1803               	skipnc
  5312  0245  0AB5               	incf	waitFlag@j_107+1,f
  5313  0246  3000               	movlw	0
  5314  0247  07B5               	addwf	waitFlag@j_107+1,f
  5315  0248  3000               	movlw	0
  5316  0249  0235               	subwf	waitFlag@j_107+1,w
  5317  024A  3008               	movlw	8
  5318  024B  1903               	skipnz
  5319  024C  0234               	subwf	waitFlag@j_107,w
  5320  024D  1C03               	skipc
  5321  024E  2A27               	goto	l2583
  5322  024F                     l2597:	
  5323                           
  5324                           ;decode_AX25.c: 140: }
  5325                           ;decode_AX25.c: 141: }
  5326                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  5327  024F  300F               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  5328  0250  0084               	movwf	4
  5329  0251  160A  118A  2000  120A  118A  	fcall	stringdir
  5330  0256  00A6               	movwf	??_waitFlag
  5331  0257  01A7               	clrf	??_waitFlag+1
  5332  0258  1003               	clrc
  5333  0259  0DA6               	rlf	??_waitFlag,f
  5334  025A  0DA7               	rlf	??_waitFlag+1,f
  5335  025B  0846               	movf	waitFlag@buf,w
  5336  025C  00A8               	movwf	??_waitFlag+2
  5337  025D  01A9               	clrf	??_waitFlag+3
  5338  025E  0827               	movf	??_waitFlag+1,w
  5339  025F  0629               	xorwf	??_waitFlag+3,w
  5340  0260  1D03               	skipz
  5341  0261  2A64               	goto	u2345
  5342  0262  0826               	movf	??_waitFlag,w
  5343  0263  0628               	xorwf	??_waitFlag+2,w
  5344  0264                     u2345:	
  5345  0264  1D03               	skipz
  5346  0265  2A7B               	goto	l2615
  5347                           
  5348                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  5349  0266  0846               	movf	waitFlag@buf,w
  5350  0267  00A6               	movwf	??_waitFlag
  5351  0268  0872               	movf	_dPacketnum,w
  5352  0269  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  5353  026A  0084               	movwf	4
  5354  026B  0826               	movf	??_waitFlag,w
  5355  026C  1783               	bsf	3,7	;select IRP bank3
  5356  026D  0080               	movwf	0
  5357                           
  5358                           ;decode_AX25.c: 144: dPacketnum ++;
  5359  026E  3001               	movlw	1
  5360  026F  07F2               	addwf	_dPacketnum,f
  5361  0270  1803               	skipnc
  5362  0271  0AF3               	incf	_dPacketnum+1,f
  5363  0272  3000               	movlw	0
  5364  0273  07F3               	addwf	_dPacketnum+1,f
  5365                           
  5366                           ;decode_AX25.c: 145: rcv_state ++;
  5367  0274  3001               	movlw	1
  5368  0275  07F4               	addwf	_rcv_state,f
  5369  0276  1803               	skipnc
  5370  0277  0AF5               	incf	_rcv_state+1,f
  5371  0278  3000               	movlw	0
  5372  0279  07F5               	addwf	_rcv_state+1,f
  5373                           
  5374                           ;decode_AX25.c: 146: }else{
  5375  027A  2A7D               	goto	l171
  5376  027B                     l2615:	
  5377                           ;decode_AX25.c: 160: }
  5378                           ;decode_AX25.c: 161: }else{
  5379                           
  5380                           ;decode_AX25.c: 159: dPacketnum = 0;
  5381                           
  5382                           ;decode_AX25.c: 157: }
  5383                           ;decode_AX25.c: 158: }else{
  5384                           
  5385                           ;decode_AX25.c: 156: dPacketnum = 0;
  5386                           
  5387                           ;decode_AX25.c: 154: }
  5388                           ;decode_AX25.c: 155: }else{
  5389                           
  5390                           ;decode_AX25.c: 153: dPacketnum = 0;
  5391                           
  5392                           ;decode_AX25.c: 151: }
  5393                           ;decode_AX25.c: 152: }else{
  5394                           
  5395                           ;decode_AX25.c: 150: dPacketnum = 0;
  5396                           
  5397                           ;decode_AX25.c: 148: }
  5398                           ;decode_AX25.c: 149: }else{
  5399                           
  5400                           ;decode_AX25.c: 147: dPacketnum = 0;
  5401                           
  5402                           
  5403                           ;decode_AX25.c: 162: dPacketnum = 0;
  5404  027B  01F2               	clrf	_dPacketnum
  5405  027C  01F3               	clrf	_dPacketnum+1
  5406  027D                     l171:	
  5407                           
  5408                           ;decode_AX25.c: 163: }
  5409                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  5410  027D  01B6               	clrf	waitFlag@j_109
  5411  027E  01B7               	clrf	waitFlag@j_109+1
  5412  027F  3000               	movlw	0
  5413  0280  0237               	subwf	waitFlag@j_109+1,w
  5414  0281  3008               	movlw	8
  5415  0282  1903               	skipnz
  5416  0283  0236               	subwf	waitFlag@j_109,w
  5417  0284  1803               	btfsc	3,0
  5418  0285  2AAE               	goto	l2635
  5419  0286                     l2621:	
  5420                           
  5421                           ;decode_AX25.c: 166: flag_judge = getbit();
  5422  0286  120A  158A  22A6  120A  118A  	fcall	_getbit
  5423  028B  1283               	bcf	3,5	;RP0=0, select bank0
  5424  028C  1303               	bcf	3,6	;RP1=0, select bank0
  5425  028D  0821               	movf	?_getbit+1,w
  5426  028E  00C5               	movwf	waitFlag@flag_judge+1
  5427  028F  0820               	movf	?_getbit,w
  5428  0290  00C4               	movwf	waitFlag@flag_judge
  5429                           
  5430                           ;decode_AX25.c: 167: buf = buf >> 1;
  5431  0291  0846               	movf	waitFlag@buf,w
  5432  0292  00A6               	movwf	??_waitFlag
  5433  0293  1003               	clrc
  5434  0294  0C26               	rrf	??_waitFlag,w
  5435  0295  00A7               	movwf	??_waitFlag+1
  5436  0296  0827               	movf	??_waitFlag+1,w
  5437  0297  00C6               	movwf	waitFlag@buf
  5438                           
  5439                           ;decode_AX25.c: 169: buf = buf | 0x00;
  5440  0298  0844               	movf	waitFlag@flag_judge,w
  5441  0299  0445               	iorwf	waitFlag@flag_judge+1,w
  5442  029A  1903               	btfsc	3,2
  5443  029B  2AA1               	goto	l2631
  5444                           
  5445                           ;decode_AX25.c: 171: buf = buf | 0x80;
  5446                           
  5447                           ;decode_AX25.c: 170: }else{
  5448  029C  0846               	movf	waitFlag@buf,w
  5449  029D  3880               	iorlw	128
  5450  029E  00A6               	movwf	??_waitFlag
  5451  029F  0826               	movf	??_waitFlag,w
  5452  02A0  00C6               	movwf	waitFlag@buf
  5453  02A1                     l2631:	
  5454  02A1  3001               	movlw	1
  5455  02A2  07B6               	addwf	waitFlag@j_109,f
  5456  02A3  1803               	skipnc
  5457  02A4  0AB7               	incf	waitFlag@j_109+1,f
  5458  02A5  3000               	movlw	0
  5459  02A6  07B7               	addwf	waitFlag@j_109+1,f
  5460  02A7  3000               	movlw	0
  5461  02A8  0237               	subwf	waitFlag@j_109+1,w
  5462  02A9  3008               	movlw	8
  5463  02AA  1903               	skipnz
  5464  02AB  0236               	subwf	waitFlag@j_109,w
  5465  02AC  1C03               	skipc
  5466  02AD  2A86               	goto	l2621
  5467  02AE                     l2635:	
  5468                           
  5469                           ;decode_AX25.c: 172: }
  5470                           ;decode_AX25.c: 173: }
  5471                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  5472  02AE  0846               	movf	waitFlag@buf,w
  5473  02AF  00A6               	movwf	??_waitFlag
  5474  02B0  0872               	movf	_dPacketnum,w
  5475  02B1  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  5476  02B2  0084               	movwf	4
  5477  02B3  0826               	movf	??_waitFlag,w
  5478  02B4  1783               	bsf	3,7	;select IRP bank3
  5479  02B5  0080               	movwf	0
  5480                           
  5481                           ;decode_AX25.c: 175: dPacketnum ++;
  5482  02B6  3001               	movlw	1
  5483  02B7  07F2               	addwf	_dPacketnum,f
  5484  02B8  1803               	skipnc
  5485  02B9  0AF3               	incf	_dPacketnum+1,f
  5486  02BA  3000               	movlw	0
  5487  02BB  07F3               	addwf	_dPacketnum+1,f
  5488                           
  5489                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  5490  02BC  01B8               	clrf	waitFlag@j_110
  5491  02BD  01B9               	clrf	waitFlag@j_110+1
  5492  02BE  3000               	movlw	0
  5493  02BF  0239               	subwf	waitFlag@j_110+1,w
  5494  02C0  3008               	movlw	8
  5495  02C1  1903               	skipnz
  5496  02C2  0238               	subwf	waitFlag@j_110,w
  5497  02C3  1803               	btfsc	3,0
  5498  02C4  2AED               	goto	l2659
  5499  02C5                     l2645:	
  5500                           
  5501                           ;decode_AX25.c: 177: flag_judge = getbit();
  5502  02C5  120A  158A  22A6  120A  118A  	fcall	_getbit
  5503  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  5504  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  5505  02CC  0821               	movf	?_getbit+1,w
  5506  02CD  00C5               	movwf	waitFlag@flag_judge+1
  5507  02CE  0820               	movf	?_getbit,w
  5508  02CF  00C4               	movwf	waitFlag@flag_judge
  5509                           
  5510                           ;decode_AX25.c: 178: buf = buf >> 1;
  5511  02D0  0846               	movf	waitFlag@buf,w
  5512  02D1  00A6               	movwf	??_waitFlag
  5513  02D2  1003               	clrc
  5514  02D3  0C26               	rrf	??_waitFlag,w
  5515  02D4  00A7               	movwf	??_waitFlag+1
  5516  02D5  0827               	movf	??_waitFlag+1,w
  5517  02D6  00C6               	movwf	waitFlag@buf
  5518                           
  5519                           ;decode_AX25.c: 180: buf = buf | 0x00;
  5520  02D7  0844               	movf	waitFlag@flag_judge,w
  5521  02D8  0445               	iorwf	waitFlag@flag_judge+1,w
  5522  02D9  1903               	btfsc	3,2
  5523  02DA  2AE0               	goto	l2655
  5524                           
  5525                           ;decode_AX25.c: 182: buf = buf | 0x80;
  5526                           
  5527                           ;decode_AX25.c: 181: }else{
  5528  02DB  0846               	movf	waitFlag@buf,w
  5529  02DC  3880               	iorlw	128
  5530  02DD  00A6               	movwf	??_waitFlag
  5531  02DE  0826               	movf	??_waitFlag,w
  5532  02DF  00C6               	movwf	waitFlag@buf
  5533  02E0                     l2655:	
  5534  02E0  3001               	movlw	1
  5535  02E1  07B8               	addwf	waitFlag@j_110,f
  5536  02E2  1803               	skipnc
  5537  02E3  0AB9               	incf	waitFlag@j_110+1,f
  5538  02E4  3000               	movlw	0
  5539  02E5  07B9               	addwf	waitFlag@j_110+1,f
  5540  02E6  3000               	movlw	0
  5541  02E7  0239               	subwf	waitFlag@j_110+1,w
  5542  02E8  3008               	movlw	8
  5543  02E9  1903               	skipnz
  5544  02EA  0238               	subwf	waitFlag@j_110,w
  5545  02EB  1C03               	skipc
  5546  02EC  2AC5               	goto	l2645
  5547  02ED                     l2659:	
  5548                           
  5549                           ;decode_AX25.c: 183: }
  5550                           ;decode_AX25.c: 184: }
  5551                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  5552  02ED  3003               	movlw	low (STR_7-__stringbase)
  5553  02EE  0084               	movwf	4
  5554  02EF  160A  118A  2000  120A  118A  	fcall	stringdir
  5555  02F4  00A6               	movwf	??_waitFlag
  5556  02F5  01A7               	clrf	??_waitFlag+1
  5557  02F6  1003               	clrc
  5558  02F7  0DA6               	rlf	??_waitFlag,f
  5559  02F8  0DA7               	rlf	??_waitFlag+1,f
  5560  02F9  0846               	movf	waitFlag@buf,w
  5561  02FA  00A8               	movwf	??_waitFlag+2
  5562  02FB  01A9               	clrf	??_waitFlag+3
  5563  02FC  0827               	movf	??_waitFlag+1,w
  5564  02FD  0629               	xorwf	??_waitFlag+3,w
  5565  02FE  1D03               	skipz
  5566  02FF  2B02               	goto	u2415
  5567  0300  0826               	movf	??_waitFlag,w
  5568  0301  0628               	xorwf	??_waitFlag+2,w
  5569  0302                     u2415:	
  5570  0302  1D03               	skipz
  5571  0303  2CC7               	goto	l2807
  5572                           
  5573                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  5574  0304  0846               	movf	waitFlag@buf,w
  5575  0305  00A6               	movwf	??_waitFlag
  5576  0306  0872               	movf	_dPacketnum,w
  5577  0307  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  5578  0308  0084               	movwf	4
  5579  0309  0826               	movf	??_waitFlag,w
  5580  030A  1783               	bsf	3,7	;select IRP bank3
  5581  030B  0080               	movwf	0
  5582                           
  5583                           ;decode_AX25.c: 187: dPacketnum ++;
  5584  030C  3001               	movlw	1
  5585  030D  07F2               	addwf	_dPacketnum,f
  5586  030E  1803               	skipnc
  5587  030F  0AF3               	incf	_dPacketnum+1,f
  5588  0310  3000               	movlw	0
  5589  0311  07F3               	addwf	_dPacketnum+1,f
  5590                           
  5591                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  5592  0312  01BA               	clrf	waitFlag@j_112
  5593  0313  01BB               	clrf	waitFlag@j_112+1
  5594  0314  3000               	movlw	0
  5595  0315  023B               	subwf	waitFlag@j_112+1,w
  5596  0316  3008               	movlw	8
  5597  0317  1903               	skipnz
  5598  0318  023A               	subwf	waitFlag@j_112,w
  5599  0319  1803               	btfsc	3,0
  5600  031A  2B43               	goto	l2685
  5601  031B                     l2671:	
  5602                           
  5603                           ;decode_AX25.c: 189: flag_judge = getbit();
  5604  031B  120A  158A  22A6  120A  118A  	fcall	_getbit
  5605  0320  1283               	bcf	3,5	;RP0=0, select bank0
  5606  0321  1303               	bcf	3,6	;RP1=0, select bank0
  5607  0322  0821               	movf	?_getbit+1,w
  5608  0323  00C5               	movwf	waitFlag@flag_judge+1
  5609  0324  0820               	movf	?_getbit,w
  5610  0325  00C4               	movwf	waitFlag@flag_judge
  5611                           
  5612                           ;decode_AX25.c: 190: buf = buf >> 1;
  5613  0326  0846               	movf	waitFlag@buf,w
  5614  0327  00A6               	movwf	??_waitFlag
  5615  0328  1003               	clrc
  5616  0329  0C26               	rrf	??_waitFlag,w
  5617  032A  00A7               	movwf	??_waitFlag+1
  5618  032B  0827               	movf	??_waitFlag+1,w
  5619  032C  00C6               	movwf	waitFlag@buf
  5620                           
  5621                           ;decode_AX25.c: 192: buf = buf | 0x00;
  5622  032D  0844               	movf	waitFlag@flag_judge,w
  5623  032E  0445               	iorwf	waitFlag@flag_judge+1,w
  5624  032F  1903               	btfsc	3,2
  5625  0330  2B36               	goto	l2681
  5626                           
  5627                           ;decode_AX25.c: 194: buf = buf | 0x80;
  5628                           
  5629                           ;decode_AX25.c: 193: }else{
  5630  0331  0846               	movf	waitFlag@buf,w
  5631  0332  3880               	iorlw	128
  5632  0333  00A6               	movwf	??_waitFlag
  5633  0334  0826               	movf	??_waitFlag,w
  5634  0335  00C6               	movwf	waitFlag@buf
  5635  0336                     l2681:	
  5636  0336  3001               	movlw	1
  5637  0337  07BA               	addwf	waitFlag@j_112,f
  5638  0338  1803               	skipnc
  5639  0339  0ABB               	incf	waitFlag@j_112+1,f
  5640  033A  3000               	movlw	0
  5641  033B  07BB               	addwf	waitFlag@j_112+1,f
  5642  033C  3000               	movlw	0
  5643  033D  023B               	subwf	waitFlag@j_112+1,w
  5644  033E  3008               	movlw	8
  5645  033F  1903               	skipnz
  5646  0340  023A               	subwf	waitFlag@j_112,w
  5647  0341  1C03               	skipc
  5648  0342  2B1B               	goto	l2671
  5649  0343                     l2685:	
  5650                           
  5651                           ;decode_AX25.c: 195: }
  5652                           ;decode_AX25.c: 196: }
  5653                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  5654  0343  3004               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  5655  0344  0084               	movwf	4
  5656  0345  160A  118A  2000  120A  118A  	fcall	stringdir
  5657  034A  00A6               	movwf	??_waitFlag
  5658  034B  01A7               	clrf	??_waitFlag+1
  5659  034C  1003               	clrc
  5660  034D  0DA6               	rlf	??_waitFlag,f
  5661  034E  0DA7               	rlf	??_waitFlag+1,f
  5662  034F  0846               	movf	waitFlag@buf,w
  5663  0350  00A8               	movwf	??_waitFlag+2
  5664  0351  01A9               	clrf	??_waitFlag+3
  5665  0352  0827               	movf	??_waitFlag+1,w
  5666  0353  0629               	xorwf	??_waitFlag+3,w
  5667  0354  1D03               	skipz
  5668  0355  2B58               	goto	u2455
  5669  0356  0826               	movf	??_waitFlag,w
  5670  0357  0628               	xorwf	??_waitFlag+2,w
  5671  0358                     u2455:	
  5672  0358  1D03               	skipz
  5673  0359  2CC7               	goto	l2807
  5674                           
  5675                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  5676  035A  0846               	movf	waitFlag@buf,w
  5677  035B  00A6               	movwf	??_waitFlag
  5678  035C  0872               	movf	_dPacketnum,w
  5679  035D  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  5680  035E  0084               	movwf	4
  5681  035F  0826               	movf	??_waitFlag,w
  5682  0360  1783               	bsf	3,7	;select IRP bank3
  5683  0361  0080               	movwf	0
  5684                           
  5685                           ;decode_AX25.c: 199: dPacketnum ++;
  5686  0362  3001               	movlw	1
  5687  0363  07F2               	addwf	_dPacketnum,f
  5688  0364  1803               	skipnc
  5689  0365  0AF3               	incf	_dPacketnum+1,f
  5690  0366  3000               	movlw	0
  5691  0367  07F3               	addwf	_dPacketnum+1,f
  5692                           
  5693                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  5694  0368  01BC               	clrf	waitFlag@j_114
  5695  0369  01BD               	clrf	waitFlag@j_114+1
  5696  036A  3000               	movlw	0
  5697  036B  023D               	subwf	waitFlag@j_114+1,w
  5698  036C  3008               	movlw	8
  5699  036D  1903               	skipnz
  5700  036E  023C               	subwf	waitFlag@j_114,w
  5701  036F  1803               	btfsc	3,0
  5702  0370  2B99               	goto	l2711
  5703  0371                     l2697:	
  5704                           
  5705                           ;decode_AX25.c: 201: flag_judge = getbit();
  5706  0371  120A  158A  22A6  120A  118A  	fcall	_getbit
  5707  0376  1283               	bcf	3,5	;RP0=0, select bank0
  5708  0377  1303               	bcf	3,6	;RP1=0, select bank0
  5709  0378  0821               	movf	?_getbit+1,w
  5710  0379  00C5               	movwf	waitFlag@flag_judge+1
  5711  037A  0820               	movf	?_getbit,w
  5712  037B  00C4               	movwf	waitFlag@flag_judge
  5713                           
  5714                           ;decode_AX25.c: 202: buf = buf >> 1;
  5715  037C  0846               	movf	waitFlag@buf,w
  5716  037D  00A6               	movwf	??_waitFlag
  5717  037E  1003               	clrc
  5718  037F  0C26               	rrf	??_waitFlag,w
  5719  0380  00A7               	movwf	??_waitFlag+1
  5720  0381  0827               	movf	??_waitFlag+1,w
  5721  0382  00C6               	movwf	waitFlag@buf
  5722                           
  5723                           ;decode_AX25.c: 204: buf = buf | 0x00;
  5724  0383  0844               	movf	waitFlag@flag_judge,w
  5725  0384  0445               	iorwf	waitFlag@flag_judge+1,w
  5726  0385  1903               	btfsc	3,2
  5727  0386  2B8C               	goto	l2707
  5728                           
  5729                           ;decode_AX25.c: 206: buf = buf | 0x80;
  5730                           
  5731                           ;decode_AX25.c: 205: }else{
  5732  0387  0846               	movf	waitFlag@buf,w
  5733  0388  3880               	iorlw	128
  5734  0389  00A6               	movwf	??_waitFlag
  5735  038A  0826               	movf	??_waitFlag,w
  5736  038B  00C6               	movwf	waitFlag@buf
  5737  038C                     l2707:	
  5738  038C  3001               	movlw	1
  5739  038D  07BC               	addwf	waitFlag@j_114,f
  5740  038E  1803               	skipnc
  5741  038F  0ABD               	incf	waitFlag@j_114+1,f
  5742  0390  3000               	movlw	0
  5743  0391  07BD               	addwf	waitFlag@j_114+1,f
  5744  0392  3000               	movlw	0
  5745  0393  023D               	subwf	waitFlag@j_114+1,w
  5746  0394  3008               	movlw	8
  5747  0395  1903               	skipnz
  5748  0396  023C               	subwf	waitFlag@j_114,w
  5749  0397  1C03               	skipc
  5750  0398  2B71               	goto	l2697
  5751  0399                     l2711:	
  5752                           
  5753                           ;decode_AX25.c: 207: }
  5754                           ;decode_AX25.c: 208: }
  5755                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  5756  0399  3005               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  5757  039A  0084               	movwf	4
  5758  039B  160A  118A  2000  120A  118A  	fcall	stringdir
  5759  03A0  00A6               	movwf	??_waitFlag
  5760  03A1  01A7               	clrf	??_waitFlag+1
  5761  03A2  1003               	clrc
  5762  03A3  0DA6               	rlf	??_waitFlag,f
  5763  03A4  0DA7               	rlf	??_waitFlag+1,f
  5764  03A5  0846               	movf	waitFlag@buf,w
  5765  03A6  00A8               	movwf	??_waitFlag+2
  5766  03A7  01A9               	clrf	??_waitFlag+3
  5767  03A8  0827               	movf	??_waitFlag+1,w
  5768  03A9  0629               	xorwf	??_waitFlag+3,w
  5769  03AA  1D03               	skipz
  5770  03AB  2BAE               	goto	u2495
  5771  03AC  0826               	movf	??_waitFlag,w
  5772  03AD  0628               	xorwf	??_waitFlag+2,w
  5773  03AE                     u2495:	
  5774  03AE  1D03               	skipz
  5775  03AF  2CC7               	goto	l2807
  5776                           
  5777                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  5778  03B0  0846               	movf	waitFlag@buf,w
  5779  03B1  00A6               	movwf	??_waitFlag
  5780  03B2  0872               	movf	_dPacketnum,w
  5781  03B3  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  5782  03B4  0084               	movwf	4
  5783  03B5  0826               	movf	??_waitFlag,w
  5784  03B6  1783               	bsf	3,7	;select IRP bank3
  5785  03B7  0080               	movwf	0
  5786                           
  5787                           ;decode_AX25.c: 211: dPacketnum ++;
  5788  03B8  3001               	movlw	1
  5789  03B9  07F2               	addwf	_dPacketnum,f
  5790  03BA  1803               	skipnc
  5791  03BB  0AF3               	incf	_dPacketnum+1,f
  5792  03BC  3000               	movlw	0
  5793  03BD  07F3               	addwf	_dPacketnum+1,f
  5794                           
  5795                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  5796  03BE  01BE               	clrf	waitFlag@j_116
  5797  03BF  01BF               	clrf	waitFlag@j_116+1
  5798  03C0  3000               	movlw	0
  5799  03C1  023F               	subwf	waitFlag@j_116+1,w
  5800  03C2  3008               	movlw	8
  5801  03C3  1903               	skipnz
  5802  03C4  023E               	subwf	waitFlag@j_116,w
  5803  03C5  1803               	btfsc	3,0
  5804  03C6  2BEF               	goto	l2737
  5805  03C7                     l2723:	
  5806                           
  5807                           ;decode_AX25.c: 213: flag_judge = getbit();
  5808  03C7  120A  158A  22A6  120A  118A  	fcall	_getbit
  5809  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  5810  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  5811  03CE  0821               	movf	?_getbit+1,w
  5812  03CF  00C5               	movwf	waitFlag@flag_judge+1
  5813  03D0  0820               	movf	?_getbit,w
  5814  03D1  00C4               	movwf	waitFlag@flag_judge
  5815                           
  5816                           ;decode_AX25.c: 214: buf = buf >> 1;
  5817  03D2  0846               	movf	waitFlag@buf,w
  5818  03D3  00A6               	movwf	??_waitFlag
  5819  03D4  1003               	clrc
  5820  03D5  0C26               	rrf	??_waitFlag,w
  5821  03D6  00A7               	movwf	??_waitFlag+1
  5822  03D7  0827               	movf	??_waitFlag+1,w
  5823  03D8  00C6               	movwf	waitFlag@buf
  5824                           
  5825                           ;decode_AX25.c: 216: buf = buf | 0x00;
  5826  03D9  0844               	movf	waitFlag@flag_judge,w
  5827  03DA  0445               	iorwf	waitFlag@flag_judge+1,w
  5828  03DB  1903               	btfsc	3,2
  5829  03DC  2BE2               	goto	l2733
  5830                           
  5831                           ;decode_AX25.c: 218: buf = buf | 0x80;
  5832                           
  5833                           ;decode_AX25.c: 217: }else{
  5834  03DD  0846               	movf	waitFlag@buf,w
  5835  03DE  3880               	iorlw	128
  5836  03DF  00A6               	movwf	??_waitFlag
  5837  03E0  0826               	movf	??_waitFlag,w
  5838  03E1  00C6               	movwf	waitFlag@buf
  5839  03E2                     l2733:	
  5840  03E2  3001               	movlw	1
  5841  03E3  07BE               	addwf	waitFlag@j_116,f
  5842  03E4  1803               	skipnc
  5843  03E5  0ABF               	incf	waitFlag@j_116+1,f
  5844  03E6  3000               	movlw	0
  5845  03E7  07BF               	addwf	waitFlag@j_116+1,f
  5846  03E8  3000               	movlw	0
  5847  03E9  023F               	subwf	waitFlag@j_116+1,w
  5848  03EA  3008               	movlw	8
  5849  03EB  1903               	skipnz
  5850  03EC  023E               	subwf	waitFlag@j_116,w
  5851  03ED  1C03               	skipc
  5852  03EE  2BC7               	goto	l2723
  5853  03EF                     l2737:	
  5854                           
  5855                           ;decode_AX25.c: 219: }
  5856                           ;decode_AX25.c: 220: }
  5857                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  5858  03EF  3006               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  5859  03F0  0084               	movwf	4
  5860  03F1  160A  118A  2000  120A  118A  	fcall	stringdir
  5861  03F6  00A6               	movwf	??_waitFlag
  5862  03F7  01A7               	clrf	??_waitFlag+1
  5863  03F8  1003               	clrc
  5864  03F9  0DA6               	rlf	??_waitFlag,f
  5865  03FA  0DA7               	rlf	??_waitFlag+1,f
  5866  03FB  0846               	movf	waitFlag@buf,w
  5867  03FC  00A8               	movwf	??_waitFlag+2
  5868  03FD  01A9               	clrf	??_waitFlag+3
  5869  03FE  0827               	movf	??_waitFlag+1,w
  5870  03FF  0629               	xorwf	??_waitFlag+3,w
  5871  0400  1D03               	skipz
  5872  0401  2C04               	goto	u2535
  5873  0402  0826               	movf	??_waitFlag,w
  5874  0403  0628               	xorwf	??_waitFlag+2,w
  5875  0404                     u2535:	
  5876  0404  1D03               	skipz
  5877  0405  2CC7               	goto	l2807
  5878                           
  5879                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  5880  0406  0846               	movf	waitFlag@buf,w
  5881  0407  00A6               	movwf	??_waitFlag
  5882  0408  0872               	movf	_dPacketnum,w
  5883  0409  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  5884  040A  0084               	movwf	4
  5885  040B  0826               	movf	??_waitFlag,w
  5886  040C  1783               	bsf	3,7	;select IRP bank3
  5887  040D  0080               	movwf	0
  5888                           
  5889                           ;decode_AX25.c: 223: dPacketnum ++;
  5890  040E  3001               	movlw	1
  5891  040F  07F2               	addwf	_dPacketnum,f
  5892  0410  1803               	skipnc
  5893  0411  0AF3               	incf	_dPacketnum+1,f
  5894  0412  3000               	movlw	0
  5895  0413  07F3               	addwf	_dPacketnum+1,f
  5896                           
  5897                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  5898  0414  01C0               	clrf	waitFlag@j_118
  5899  0415  01C1               	clrf	waitFlag@j_118+1
  5900  0416  3000               	movlw	0
  5901  0417  0241               	subwf	waitFlag@j_118+1,w
  5902  0418  3008               	movlw	8
  5903  0419  1903               	skipnz
  5904  041A  0240               	subwf	waitFlag@j_118,w
  5905  041B  1803               	btfsc	3,0
  5906  041C  2C45               	goto	l2763
  5907  041D                     l2749:	
  5908                           
  5909                           ;decode_AX25.c: 225: flag_judge = getbit();
  5910  041D  120A  158A  22A6  120A  118A  	fcall	_getbit
  5911  0422  1283               	bcf	3,5	;RP0=0, select bank0
  5912  0423  1303               	bcf	3,6	;RP1=0, select bank0
  5913  0424  0821               	movf	?_getbit+1,w
  5914  0425  00C5               	movwf	waitFlag@flag_judge+1
  5915  0426  0820               	movf	?_getbit,w
  5916  0427  00C4               	movwf	waitFlag@flag_judge
  5917                           
  5918                           ;decode_AX25.c: 226: buf = buf >> 1;
  5919  0428  0846               	movf	waitFlag@buf,w
  5920  0429  00A6               	movwf	??_waitFlag
  5921  042A  1003               	clrc
  5922  042B  0C26               	rrf	??_waitFlag,w
  5923  042C  00A7               	movwf	??_waitFlag+1
  5924  042D  0827               	movf	??_waitFlag+1,w
  5925  042E  00C6               	movwf	waitFlag@buf
  5926                           
  5927                           ;decode_AX25.c: 228: buf = buf | 0x00;
  5928  042F  0844               	movf	waitFlag@flag_judge,w
  5929  0430  0445               	iorwf	waitFlag@flag_judge+1,w
  5930  0431  1903               	btfsc	3,2
  5931  0432  2C38               	goto	l2759
  5932                           
  5933                           ;decode_AX25.c: 230: buf = buf | 0x80;
  5934                           
  5935                           ;decode_AX25.c: 229: }else{
  5936  0433  0846               	movf	waitFlag@buf,w
  5937  0434  3880               	iorlw	128
  5938  0435  00A6               	movwf	??_waitFlag
  5939  0436  0826               	movf	??_waitFlag,w
  5940  0437  00C6               	movwf	waitFlag@buf
  5941  0438                     l2759:	
  5942  0438  3001               	movlw	1
  5943  0439  07C0               	addwf	waitFlag@j_118,f
  5944  043A  1803               	skipnc
  5945  043B  0AC1               	incf	waitFlag@j_118+1,f
  5946  043C  3000               	movlw	0
  5947  043D  07C1               	addwf	waitFlag@j_118+1,f
  5948  043E  3000               	movlw	0
  5949  043F  0241               	subwf	waitFlag@j_118+1,w
  5950  0440  3008               	movlw	8
  5951  0441  1903               	skipnz
  5952  0442  0240               	subwf	waitFlag@j_118,w
  5953  0443  1C03               	skipc
  5954  0444  2C1D               	goto	l2749
  5955  0445                     l2763:	
  5956                           
  5957                           ;decode_AX25.c: 231: }
  5958                           ;decode_AX25.c: 232: }
  5959                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  5960  0445  3007               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  5961  0446  0084               	movwf	4
  5962  0447  160A  118A  2000  120A  118A  	fcall	stringdir
  5963  044C  00A6               	movwf	??_waitFlag
  5964  044D  01A7               	clrf	??_waitFlag+1
  5965  044E  1003               	clrc
  5966  044F  0DA6               	rlf	??_waitFlag,f
  5967  0450  0DA7               	rlf	??_waitFlag+1,f
  5968  0451  0846               	movf	waitFlag@buf,w
  5969  0452  00A8               	movwf	??_waitFlag+2
  5970  0453  01A9               	clrf	??_waitFlag+3
  5971  0454  0827               	movf	??_waitFlag+1,w
  5972  0455  0629               	xorwf	??_waitFlag+3,w
  5973  0456  1D03               	skipz
  5974  0457  2C5A               	goto	u2575
  5975  0458  0826               	movf	??_waitFlag,w
  5976  0459  0628               	xorwf	??_waitFlag+2,w
  5977  045A                     u2575:	
  5978  045A  1D03               	skipz
  5979  045B  2CC7               	goto	l2807
  5980                           
  5981                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  5982  045C  0846               	movf	waitFlag@buf,w
  5983  045D  00A6               	movwf	??_waitFlag
  5984  045E  0872               	movf	_dPacketnum,w
  5985  045F  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  5986  0460  0084               	movwf	4
  5987  0461  0826               	movf	??_waitFlag,w
  5988  0462  1783               	bsf	3,7	;select IRP bank3
  5989  0463  0080               	movwf	0
  5990                           
  5991                           ;decode_AX25.c: 235: dPacketnum ++;
  5992  0464  3001               	movlw	1
  5993  0465  07F2               	addwf	_dPacketnum,f
  5994  0466  1803               	skipnc
  5995  0467  0AF3               	incf	_dPacketnum+1,f
  5996  0468  3000               	movlw	0
  5997  0469  07F3               	addwf	_dPacketnum+1,f
  5998                           
  5999                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  6000  046A  01C2               	clrf	waitFlag@j_120
  6001  046B  01C3               	clrf	waitFlag@j_120+1
  6002  046C  3000               	movlw	0
  6003  046D  0243               	subwf	waitFlag@j_120+1,w
  6004  046E  3008               	movlw	8
  6005  046F  1903               	skipnz
  6006  0470  0242               	subwf	waitFlag@j_120,w
  6007  0471  1803               	btfsc	3,0
  6008  0472  2C9B               	goto	l2789
  6009  0473                     l2775:	
  6010                           
  6011                           ;decode_AX25.c: 237: flag_judge = getbit();
  6012  0473  120A  158A  22A6  120A  118A  	fcall	_getbit
  6013  0478  1283               	bcf	3,5	;RP0=0, select bank0
  6014  0479  1303               	bcf	3,6	;RP1=0, select bank0
  6015  047A  0821               	movf	?_getbit+1,w
  6016  047B  00C5               	movwf	waitFlag@flag_judge+1
  6017  047C  0820               	movf	?_getbit,w
  6018  047D  00C4               	movwf	waitFlag@flag_judge
  6019                           
  6020                           ;decode_AX25.c: 238: buf = buf >> 1;
  6021  047E  0846               	movf	waitFlag@buf,w
  6022  047F  00A6               	movwf	??_waitFlag
  6023  0480  1003               	clrc
  6024  0481  0C26               	rrf	??_waitFlag,w
  6025  0482  00A7               	movwf	??_waitFlag+1
  6026  0483  0827               	movf	??_waitFlag+1,w
  6027  0484  00C6               	movwf	waitFlag@buf
  6028                           
  6029                           ;decode_AX25.c: 240: buf = buf | 0x00;
  6030  0485  0844               	movf	waitFlag@flag_judge,w
  6031  0486  0445               	iorwf	waitFlag@flag_judge+1,w
  6032  0487  1903               	btfsc	3,2
  6033  0488  2C8E               	goto	l2785
  6034                           
  6035                           ;decode_AX25.c: 242: buf = buf | 0x80;
  6036                           
  6037                           ;decode_AX25.c: 241: }else{
  6038  0489  0846               	movf	waitFlag@buf,w
  6039  048A  3880               	iorlw	128
  6040  048B  00A6               	movwf	??_waitFlag
  6041  048C  0826               	movf	??_waitFlag,w
  6042  048D  00C6               	movwf	waitFlag@buf
  6043  048E                     l2785:	
  6044  048E  3001               	movlw	1
  6045  048F  07C2               	addwf	waitFlag@j_120,f
  6046  0490  1803               	skipnc
  6047  0491  0AC3               	incf	waitFlag@j_120+1,f
  6048  0492  3000               	movlw	0
  6049  0493  07C3               	addwf	waitFlag@j_120+1,f
  6050  0494  3000               	movlw	0
  6051  0495  0243               	subwf	waitFlag@j_120+1,w
  6052  0496  3008               	movlw	8
  6053  0497  1903               	skipnz
  6054  0498  0242               	subwf	waitFlag@j_120,w
  6055  0499  1C03               	skipc
  6056  049A  2C73               	goto	l2775
  6057  049B                     l2789:	
  6058                           
  6059                           ;decode_AX25.c: 243: }
  6060                           ;decode_AX25.c: 244: }
  6061                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  6062  049B  3008               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  6063  049C  0084               	movwf	4
  6064  049D  160A  118A  2000  120A  118A  	fcall	stringdir
  6065  04A2  00A6               	movwf	??_waitFlag
  6066  04A3  01A7               	clrf	??_waitFlag+1
  6067  04A4  1003               	clrc
  6068  04A5  0DA6               	rlf	??_waitFlag,f
  6069  04A6  0DA7               	rlf	??_waitFlag+1,f
  6070  04A7  0846               	movf	waitFlag@buf,w
  6071  04A8  00A8               	movwf	??_waitFlag+2
  6072  04A9  01A9               	clrf	??_waitFlag+3
  6073  04AA  0827               	movf	??_waitFlag+1,w
  6074  04AB  0629               	xorwf	??_waitFlag+3,w
  6075  04AC  1D03               	skipz
  6076  04AD  2CB0               	goto	u2615
  6077  04AE  0826               	movf	??_waitFlag,w
  6078  04AF  0628               	xorwf	??_waitFlag+2,w
  6079  04B0                     u2615:	
  6080  04B0  1D03               	skipz
  6081  04B1  2CC7               	goto	l2807
  6082                           
  6083                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  6084  04B2  0846               	movf	waitFlag@buf,w
  6085  04B3  00A6               	movwf	??_waitFlag
  6086  04B4  0872               	movf	_dPacketnum,w
  6087  04B5  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  6088  04B6  0084               	movwf	4
  6089  04B7  0826               	movf	??_waitFlag,w
  6090  04B8  1783               	bsf	3,7	;select IRP bank3
  6091  04B9  0080               	movwf	0
  6092                           
  6093                           ;decode_AX25.c: 247: dPacketnum ++;
  6094  04BA  3001               	movlw	1
  6095  04BB  07F2               	addwf	_dPacketnum,f
  6096  04BC  1803               	skipnc
  6097  04BD  0AF3               	incf	_dPacketnum+1,f
  6098  04BE  3000               	movlw	0
  6099  04BF  07F3               	addwf	_dPacketnum+1,f
  6100                           
  6101                           ;decode_AX25.c: 248: rcv_state ++;
  6102  04C0  3001               	movlw	1
  6103  04C1  07F4               	addwf	_rcv_state,f
  6104  04C2  1803               	skipnc
  6105  04C3  0AF5               	incf	_rcv_state+1,f
  6106  04C4  3000               	movlw	0
  6107  04C5  07F5               	addwf	_rcv_state+1,f
  6108                           
  6109                           ;decode_AX25.c: 249: }else{
  6110  04C6  2846               	goto	l2809
  6111  04C7                     l2807:	
  6112                           ;decode_AX25.c: 268: }
  6113                           ;decode_AX25.c: 269: }else{
  6114                           
  6115                           ;decode_AX25.c: 267: rcv_state = 0;
  6116                           
  6117                           ;decode_AX25.c: 266: dPacketnum = 0;
  6118                           
  6119                           ;decode_AX25.c: 264: }
  6120                           ;decode_AX25.c: 265: }else{
  6121                           
  6122                           ;decode_AX25.c: 263: rcv_state = 0;
  6123                           
  6124                           ;decode_AX25.c: 262: dPacketnum = 0;
  6125                           
  6126                           ;decode_AX25.c: 260: }
  6127                           ;decode_AX25.c: 261: }else{
  6128                           
  6129                           ;decode_AX25.c: 259: rcv_state = 0;
  6130                           
  6131                           ;decode_AX25.c: 258: dPacketnum = 0;
  6132                           
  6133                           ;decode_AX25.c: 256: }
  6134                           ;decode_AX25.c: 257: }else{
  6135                           
  6136                           ;decode_AX25.c: 255: rcv_state = 0;
  6137                           
  6138                           ;decode_AX25.c: 254: dPacketnum = 0;
  6139                           
  6140                           ;decode_AX25.c: 252: }
  6141                           ;decode_AX25.c: 253: }else{
  6142                           
  6143                           ;decode_AX25.c: 251: rcv_state = 0;
  6144                           
  6145                           ;decode_AX25.c: 250: dPacketnum = 0;
  6146                           
  6147                           
  6148                           ;decode_AX25.c: 270: dPacketnum = 0;
  6149  04C7  01F2               	clrf	_dPacketnum
  6150  04C8  01F3               	clrf	_dPacketnum+1
  6151  04C9  2844               	goto	L8
  6152  04CA                     __end_of_waitFlag:	
  6153                           
  6154                           	psect	text17
  6155  0BB7                     __ptext17:	
  6156 ;; *************** function _getdata *****************
  6157 ;; Defined at:
  6158 ;;		line 278 in file "decode_AX25.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;		None
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;  dbitstatus      2   12[BANK0 ] unsigned int 
  6163 ;;  dstuff          2   10[BANK0 ] unsigned int 
  6164 ;;  bufstore_cou    2    8[BANK0 ] unsigned int 
  6165 ;;  buf             1   14[BANK0 ] unsigned char 
  6166 ;;  dammy_data      1    0        unsigned char 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  1    wreg      void 
  6169 ;; Registers used:
  6170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6176 ;;      Params:         0       0       0       0       0
  6177 ;;      Locals:         0       7       0       0       0
  6178 ;;      Temps:          0       2       0       0       0
  6179 ;;      Totals:         0       9       0       0       0
  6180 ;;Total ram usage:        9 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    2
  6183 ;; This function calls:
  6184 ;;		_getbit
  6185 ;; This function is called by:
  6186 ;;		_ReceivePacket_data
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           
  6191                           ;psect for function _getdata
  6192  0BB7                     _getdata:	
  6193                           
  6194                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  6195                           
  6196                           ;incstack = 0
  6197                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6198  0BB7  1283               	bcf	3,5	;RP0=0, select bank0
  6199  0BB8  1303               	bcf	3,6	;RP1=0, select bank0
  6200  0BB9  01AE               	clrf	getdata@buf
  6201                           
  6202                           ;decode_AX25.c: 280: UINT dstuff = 0;
  6203  0BBA  01AA               	clrf	getdata@dstuff
  6204  0BBB  01AB               	clrf	getdata@dstuff+1
  6205                           
  6206                           ;decode_AX25.c: 281: UBYTE dammy_data;
  6207                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  6208  0BBC  01A8               	clrf	getdata@bufstore_counter
  6209  0BBD  01A9               	clrf	getdata@bufstore_counter+1
  6210                           
  6211                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  6212  0BBE  01AC               	clrf	getdata@dbitstatus
  6213  0BBF  01AD               	clrf	getdata@dbitstatus+1
  6214  0BC0                     l2843:	
  6215                           ;decode_AX25.c: 285: while(rcv_state == 2){
  6216                           
  6217  0BC0  3002               	movlw	2
  6218  0BC1  0674               	xorwf	_rcv_state,w
  6219  0BC2  0475               	iorwf	_rcv_state+1,w
  6220  0BC3  1D03               	btfss	3,2
  6221  0BC4  0008               	return
  6222                           
  6223                           ;decode_AX25.c: 286: dbitstatus = getbit();
  6224  0BC5  120A  158A  22A6  120A  158A  	fcall	_getbit
  6225  0BCA  1283               	bcf	3,5	;RP0=0, select bank0
  6226  0BCB  1303               	bcf	3,6	;RP1=0, select bank0
  6227  0BCC  0821               	movf	?_getbit+1,w
  6228  0BCD  00AD               	movwf	getdata@dbitstatus+1
  6229  0BCE  0820               	movf	?_getbit,w
  6230  0BCF  00AC               	movwf	getdata@dbitstatus
  6231                           
  6232                           ;decode_AX25.c: 287: if(dstuff == 5){
  6233  0BD0  3005               	movlw	5
  6234  0BD1  062A               	xorwf	getdata@dstuff,w
  6235  0BD2  042B               	iorwf	getdata@dstuff+1,w
  6236  0BD3  1D03               	btfss	3,2
  6237  0BD4  2BE3               	goto	l2825
  6238                           
  6239                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  6240  0BD5  032C               	decf	getdata@dbitstatus,w
  6241  0BD6  042D               	iorwf	getdata@dbitstatus+1,w
  6242  0BD7  1D03               	btfss	3,2
  6243  0BD8  2BE0               	goto	l2823
  6244                           
  6245                           ;decode_AX25.c: 289: rcv_state ++;
  6246  0BD9  3001               	movlw	1
  6247  0BDA  07F4               	addwf	_rcv_state,f
  6248  0BDB  1803               	skipnc
  6249  0BDC  0AF5               	incf	_rcv_state+1,f
  6250  0BDD  3000               	movlw	0
  6251  0BDE  07F5               	addwf	_rcv_state+1,f
  6252                           
  6253                           ;decode_AX25.c: 290: break;
  6254  0BDF  0008               	return
  6255  0BE0                     l2823:	
  6256                           ;decode_AX25.c: 291: }else{
  6257                           
  6258                           
  6259                           ;decode_AX25.c: 292: dstuff = 0;
  6260  0BE0  01AA               	clrf	getdata@dstuff
  6261  0BE1  01AB               	clrf	getdata@dstuff+1
  6262                           
  6263                           ;decode_AX25.c: 293: }
  6264                           ;decode_AX25.c: 294: }else{
  6265  0BE2  2BC0               	goto	l2843
  6266  0BE3                     l2825:	
  6267                           
  6268                           ;decode_AX25.c: 295: buf = buf >> 1;
  6269  0BE3  082E               	movf	getdata@buf,w
  6270  0BE4  00A6               	movwf	??_getdata
  6271  0BE5  1003               	clrc
  6272  0BE6  0C26               	rrf	??_getdata,w
  6273  0BE7  00A7               	movwf	??_getdata+1
  6274  0BE8  0827               	movf	??_getdata+1,w
  6275  0BE9  00AE               	movwf	getdata@buf
  6276                           
  6277                           ;decode_AX25.c: 297: buf = buf | 0x00;
  6278  0BEA  082C               	movf	getdata@dbitstatus,w
  6279  0BEB  042D               	iorwf	getdata@dbitstatus+1,w
  6280  0BEC  1D03               	btfss	3,2
  6281  0BED  2BF1               	goto	l2829
  6282                           
  6283                           ;decode_AX25.c: 298: dstuff = 0;
  6284  0BEE  01AA               	clrf	getdata@dstuff
  6285  0BEF  01AB               	clrf	getdata@dstuff+1
  6286                           
  6287                           ;decode_AX25.c: 299: }else{
  6288  0BF0  2BFC               	goto	l2833
  6289  0BF1                     l2829:	
  6290                           
  6291                           ;decode_AX25.c: 300: buf = buf | 0x80;
  6292  0BF1  082E               	movf	getdata@buf,w
  6293  0BF2  3880               	iorlw	128
  6294  0BF3  00A6               	movwf	??_getdata
  6295  0BF4  0826               	movf	??_getdata,w
  6296  0BF5  00AE               	movwf	getdata@buf
  6297                           
  6298                           ;decode_AX25.c: 301: dstuff ++;
  6299  0BF6  3001               	movlw	1
  6300  0BF7  07AA               	addwf	getdata@dstuff,f
  6301  0BF8  1803               	skipnc
  6302  0BF9  0AAB               	incf	getdata@dstuff+1,f
  6303  0BFA  3000               	movlw	0
  6304  0BFB  07AB               	addwf	getdata@dstuff+1,f
  6305  0BFC                     l2833:	
  6306                           
  6307                           ;decode_AX25.c: 302: }
  6308                           ;decode_AX25.c: 303: bufstore_counter ++;
  6309  0BFC  3001               	movlw	1
  6310  0BFD  07A8               	addwf	getdata@bufstore_counter,f
  6311  0BFE  1803               	skipnc
  6312  0BFF  0AA9               	incf	getdata@bufstore_counter+1,f
  6313  0C00  3000               	movlw	0
  6314  0C01  07A9               	addwf	getdata@bufstore_counter+1,f
  6315                           
  6316                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  6317  0C02  3008               	movlw	8
  6318  0C03  0628               	xorwf	getdata@bufstore_counter,w
  6319  0C04  0429               	iorwf	getdata@bufstore_counter+1,w
  6320  0C05  1D03               	btfss	3,2
  6321  0C06  2BC0               	goto	l2843
  6322                           
  6323                           ;decode_AX25.c: 305: bufstore_counter = 0;
  6324  0C07  01A8               	clrf	getdata@bufstore_counter
  6325  0C08  01A9               	clrf	getdata@bufstore_counter+1
  6326                           
  6327                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  6328  0C09  082E               	movf	getdata@buf,w
  6329  0C0A  00A6               	movwf	??_getdata
  6330  0C0B  0872               	movf	_dPacketnum,w
  6331  0C0C  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  6332  0C0D  0084               	movwf	4
  6333  0C0E  0826               	movf	??_getdata,w
  6334  0C0F  1783               	bsf	3,7	;select IRP bank3
  6335  0C10  0080               	movwf	0
  6336                           
  6337                           ;decode_AX25.c: 307: dPacketnum ++;
  6338  0C11  3001               	movlw	1
  6339  0C12  07F2               	addwf	_dPacketnum,f
  6340  0C13  1803               	skipnc
  6341  0C14  0AF3               	incf	_dPacketnum+1,f
  6342  0C15  3000               	movlw	0
  6343  0C16  07F3               	addwf	_dPacketnum+1,f
  6344  0C17  2BC0               	goto	l2843
  6345  0C18                     __end_of_getdata:	
  6346                           
  6347                           	psect	text18
  6348  0AA6                     __ptext18:	
  6349 ;; *************** function _getbit *****************
  6350 ;; Defined at:
  6351 ;;		line 40 in file "decode_AX25.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;		None
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  i               2    4[BANK0 ] unsigned int 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  2    0[BANK0 ] unsigned int 
  6358 ;; Registers used:
  6359 ;;		wreg, status,2, status,0
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6365 ;;      Params:         0       2       0       0       0
  6366 ;;      Locals:         0       2       0       0       0
  6367 ;;      Temps:          0       2       0       0       0
  6368 ;;      Totals:         0       6       0       0       0
  6369 ;;Total ram usage:        6 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    1
  6372 ;; This function calls:
  6373 ;;		Nothing
  6374 ;; This function is called by:
  6375 ;;		_waitFlag
  6376 ;;		_getdata
  6377 ;;		_conv_DI_UARTRX
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           
  6382                           ;psect for function _getbit
  6383  0AA6                     _getbit:	
  6384                           
  6385                           ;decode_AX25.c: 41: static UINT oldbit;
  6386                           ;decode_AX25.c: 42: oldbit = RB5;
  6387                           
  6388                           ;incstack = 0
  6389                           ; Regs used in _getbit: [wreg+status,2+status,0]
  6390  0AA6  1003               	clrc
  6391  0AA7  1283               	bcf	3,5	;RP0=0, select bank0
  6392  0AA8  1303               	bcf	3,6	;RP1=0, select bank0
  6393  0AA9  1A86               	btfsc	6,5	;volatile
  6394  0AAA  1403               	setc
  6395  0AAB  3000               	movlw	0
  6396  0AAC  1803               	skipnc
  6397  0AAD  3001               	movlw	1
  6398  0AAE  00A2               	movwf	??_getbit
  6399  0AAF  01A3               	clrf	??_getbit+1
  6400  0AB0  0822               	movf	??_getbit,w
  6401  0AB1  1683               	bsf	3,5	;RP0=1, select bank1
  6402  0AB2  1303               	bcf	3,6	;RP1=0, select bank1
  6403  0AB3  00EE               	movwf	getbit@oldbit^(0+128)
  6404  0AB4  1283               	bcf	3,5	;RP0=0, select bank0
  6405  0AB5  1303               	bcf	3,6	;RP1=0, select bank0
  6406  0AB6  0823               	movf	??_getbit+1,w
  6407  0AB7  1683               	bsf	3,5	;RP0=1, select bank1
  6408  0AB8  1303               	bcf	3,6	;RP1=0, select bank1
  6409  0AB9  00EF               	movwf	(getbit@oldbit+1)^(0+128)
  6410                           
  6411                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  6412  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  6413  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  6414  0ABC  01A4               	clrf	getbit@i
  6415  0ABD  01A5               	clrf	getbit@i+1
  6416  0ABE  3000               	movlw	0
  6417  0ABF  0225               	subwf	getbit@i+1,w
  6418  0AC0  303E               	movlw	62
  6419  0AC1  1903               	skipnz
  6420  0AC2  0224               	subwf	getbit@i,w
  6421  0AC3  1803               	btfsc	3,0
  6422  0AC4  2AF7               	goto	l2291
  6423                           
  6424                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  6425  0AC5  1003               	clrc
  6426  0AC6                     L9:	
  6427  0AC6  1A86               	btfsc	6,5	;volatile
  6428  0AC7  1403               	setc
  6429  0AC8  3000               	movlw	0
  6430  0AC9  1803               	skipnc
  6431  0ACA  3001               	movlw	1
  6432  0ACB  00A2               	movwf	??_getbit
  6433  0ACC  01A3               	clrf	??_getbit+1
  6434  0ACD  1683               	bsf	3,5	;RP0=1, select bank1
  6435  0ACE  1303               	bcf	3,6	;RP1=0, select bank1
  6436  0ACF  086F               	movf	(getbit@oldbit+1)^(0+128),w
  6437  0AD0  1283               	bcf	3,5	;RP0=0, select bank0
  6438  0AD1  1303               	bcf	3,6	;RP1=0, select bank0
  6439  0AD2  0623               	xorwf	??_getbit+1,w
  6440  0AD3  1D03               	skipz
  6441  0AD4  2ADB               	goto	u1815
  6442  0AD5  1683               	bsf	3,5	;RP0=1, select bank1
  6443  0AD6  1303               	bcf	3,6	;RP1=0, select bank1
  6444  0AD7  086E               	movf	getbit@oldbit^(0+128),w
  6445  0AD8  1283               	bcf	3,5	;RP0=0, select bank0
  6446  0AD9  1303               	bcf	3,6	;RP1=0, select bank0
  6447  0ADA  0622               	xorwf	??_getbit,w
  6448  0ADB                     u1815:	
  6449  0ADB  1903               	skipnz
  6450  0ADC  2AEA               	goto	l2289
  6451                           
  6452                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  6453  0ADD  30C7               	movlw	199
  6454  0ADE  1283               	bcf	3,5	;RP0=0, select bank0
  6455  0ADF  1303               	bcf	3,6	;RP1=0, select bank0
  6456  0AE0  00A2               	movwf	??_getbit
  6457  0AE1                     u3797:	
  6458  0AE1  2AE2               	nop2
  6459  0AE2  0BA2               	decfsz	??_getbit,f
  6460  0AE3  2AE1               	goto	u3797
  6461  0AE4  2AE5               	nop2
  6462                           
  6463                           ;decode_AX25.c: 47: return 0;
  6464  0AE5  1283               	bcf	3,5	;RP0=0, select bank0
  6465  0AE6  1303               	bcf	3,6	;RP1=0, select bank0
  6466  0AE7  01A0               	clrf	?_getbit
  6467  0AE8  01A1               	clrf	?_getbit+1
  6468  0AE9  0008               	return
  6469  0AEA                     l2289:	
  6470  0AEA  3001               	movlw	1
  6471  0AEB  07A4               	addwf	getbit@i,f
  6472  0AEC  1803               	skipnc
  6473  0AED  0AA5               	incf	getbit@i+1,f
  6474  0AEE  3000               	movlw	0
  6475  0AEF  07A5               	addwf	getbit@i+1,f
  6476  0AF0  3000               	movlw	0
  6477  0AF1  0225               	subwf	getbit@i+1,w
  6478  0AF2  303E               	movlw	62
  6479  0AF3  1903               	skipnz
  6480  0AF4  0224               	subwf	getbit@i,w
  6481  0AF5  1C03               	skipc
  6482  0AF6  2AC6               	goto	L9
  6483  0AF7                     l2291:	
  6484                           
  6485                           ;decode_AX25.c: 48: }
  6486                           ;decode_AX25.c: 49: }
  6487                           ;decode_AX25.c: 50: return 1;
  6488  0AF7  3001               	movlw	1
  6489  0AF8  00A0               	movwf	?_getbit
  6490  0AF9  3000               	movlw	0
  6491  0AFA  00A1               	movwf	?_getbit+1
  6492  0AFB  0008               	return
  6493  0AFC                     __end_of_getbit:	
  6494                           
  6495                           	psect	text19
  6496  0D66                     __ptext19:	
  6497 ;; *************** function _fcscheck *****************
  6498 ;; Defined at:
  6499 ;;		line 313 in file "decode_AX25.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;		None
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;  i               2    7[BANK0 ] unsigned int 
  6504 ;;  i               2    5[BANK0 ] unsigned int 
  6505 ;;  byte            1    9[BANK0 ] unsigned char 
  6506 ;;  bt              1    4[BANK0 ] unsigned char 
  6507 ;; Return value:  Size  Location     Type
  6508 ;;                  2    0[BANK0 ] unsigned int 
  6509 ;; Registers used:
  6510 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6516 ;;      Params:         0       2       0       0       0
  6517 ;;      Locals:         0       6       0       0       0
  6518 ;;      Temps:          0       2       0       0       0
  6519 ;;      Totals:         0      10       0       0       0
  6520 ;;Total ram usage:       10 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    1
  6523 ;; This function calls:
  6524 ;;		Nothing
  6525 ;; This function is called by:
  6526 ;;		_ReceivePacket_data
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           
  6531                           ;psect for function _fcscheck
  6532  0D66                     _fcscheck:	
  6533                           
  6534                           ;decode_AX25.c: 314: UBYTE bt,byte;
  6535                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  6536                           
  6537                           ;incstack = 0
  6538                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  6539  0D66  30FF               	movlw	255
  6540  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  6541  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  6542  0D69  00EF               	movwf	_dfcshi
  6543  0D6A  00A2               	movwf	??_fcscheck
  6544  0D6B  0822               	movf	??_fcscheck,w
  6545  0D6C  00F6               	movwf	_dfcslo
  6546                           
  6547                           ;decode_AX25.c: 316: while(rcv_state == 3){
  6548  0D6D  3003               	movlw	3
  6549  0D6E  0674               	xorwf	_rcv_state,w
  6550  0D6F  0475               	iorwf	_rcv_state+1,w
  6551  0D70  1D03               	btfss	3,2
  6552  0D71  0008               	return
  6553                           
  6554                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  6555  0D72  01A5               	clrf	fcscheck@i
  6556  0D73  01A6               	clrf	fcscheck@i+1
  6557  0D74                     l2871:	
  6558  0D74  0872               	movf	_dPacketnum,w
  6559  0D75  3EFE               	addlw	254
  6560  0D76  00A2               	movwf	??_fcscheck
  6561  0D77  0873               	movf	_dPacketnum+1,w
  6562  0D78  1803               	skipnc
  6563  0D79  3E01               	addlw	1
  6564  0D7A  3EFF               	addlw	255
  6565  0D7B  00A3               	movwf	??_fcscheck+1
  6566  0D7C  0823               	movf	??_fcscheck+1,w
  6567  0D7D  0226               	subwf	fcscheck@i+1,w
  6568  0D7E  1D03               	skipz
  6569  0D7F  2D82               	goto	u2715
  6570  0D80  0822               	movf	??_fcscheck,w
  6571  0D81  0225               	subwf	fcscheck@i,w
  6572  0D82                     u2715:	
  6573  0D82  1803               	btfsc	3,0
  6574  0D83  2DCD               	goto	l236
  6575                           
  6576                           ;decode_AX25.c: 318: byte = dPacket[i];
  6577  0D84  0825               	movf	fcscheck@i,w
  6578  0D85  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  6579  0D86  0084               	movwf	4
  6580  0D87  1783               	bsf	3,7	;select IRP bank3
  6581  0D88  0800               	movf	0,w
  6582  0D89  00A2               	movwf	??_fcscheck
  6583  0D8A  0822               	movf	??_fcscheck,w
  6584  0D8B  00A9               	movwf	fcscheck@byte
  6585                           
  6586                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  6587  0D8C  01A7               	clrf	fcscheck@i_132
  6588  0D8D  01A8               	clrf	fcscheck@i_132+1
  6589  0D8E  3000               	movlw	0
  6590  0D8F  0228               	subwf	fcscheck@i_132+1,w
  6591  0D90  3008               	movlw	8
  6592  0D91  1903               	skipnz
  6593  0D92  0227               	subwf	fcscheck@i_132,w
  6594  0D93  1803               	btfsc	3,0
  6595  0D94  2DC6               	goto	l2869
  6596  0D95                     l2857:	
  6597                           
  6598                           ;decode_AX25.c: 320: bt = byte & 0x01;
  6599  0D95  0829               	movf	fcscheck@byte,w
  6600  0D96  3901               	andlw	1
  6601  0D97  00A2               	movwf	??_fcscheck
  6602  0D98  0822               	movf	??_fcscheck,w
  6603  0D99  00A4               	movwf	fcscheck@bt
  6604  0D9A  1003               	bcf	3,0	;# 
  6605  0D9B  0CEF               	rrf	_dfcshi,f	;# 
  6606  0D9C  0CF6               	rrf	_dfcslo,f	;# 
  6607                           
  6608                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  6609  0D9D  3001               	movlw	1
  6610  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  6611  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  6612  0DA0  0503               	andwf	3,w	;volatile
  6613  0DA1  00A2               	movwf	??_fcscheck
  6614  0DA2  0824               	movf	fcscheck@bt,w
  6615  0DA3  0622               	xorwf	??_fcscheck,w
  6616  0DA4  00A3               	movwf	??_fcscheck+1
  6617  0DA5  0323               	decf	??_fcscheck+1,w
  6618  0DA6  1D03               	btfss	3,2
  6619  0DA7  2DB2               	goto	l2863
  6620                           
  6621                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  6622  0DA8  086F               	movf	_dfcshi,w
  6623  0DA9  3A84               	xorlw	132
  6624  0DAA  00A2               	movwf	??_fcscheck
  6625  0DAB  0822               	movf	??_fcscheck,w
  6626  0DAC  00EF               	movwf	_dfcshi
  6627                           
  6628                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  6629  0DAD  0876               	movf	_dfcslo,w
  6630  0DAE  3A08               	xorlw	8
  6631  0DAF  00A2               	movwf	??_fcscheck
  6632  0DB0  0822               	movf	??_fcscheck,w
  6633  0DB1  00F6               	movwf	_dfcslo
  6634  0DB2                     l2863:	
  6635                           
  6636                           ;decode_AX25.c: 329: }
  6637                           ;decode_AX25.c: 330: byte = byte >> 1;
  6638  0DB2  0829               	movf	fcscheck@byte,w
  6639  0DB3  00A2               	movwf	??_fcscheck
  6640  0DB4  1003               	clrc
  6641  0DB5  0C22               	rrf	??_fcscheck,w
  6642  0DB6  00A3               	movwf	??_fcscheck+1
  6643  0DB7  0823               	movf	??_fcscheck+1,w
  6644  0DB8  00A9               	movwf	fcscheck@byte
  6645  0DB9  3001               	movlw	1
  6646  0DBA  07A7               	addwf	fcscheck@i_132,f
  6647  0DBB  1803               	skipnc
  6648  0DBC  0AA8               	incf	fcscheck@i_132+1,f
  6649  0DBD  3000               	movlw	0
  6650  0DBE  07A8               	addwf	fcscheck@i_132+1,f
  6651  0DBF  3000               	movlw	0
  6652  0DC0  0228               	subwf	fcscheck@i_132+1,w
  6653  0DC1  3008               	movlw	8
  6654  0DC2  1903               	skipnz
  6655  0DC3  0227               	subwf	fcscheck@i_132,w
  6656  0DC4  1C03               	skipc
  6657  0DC5  2D95               	goto	l2857
  6658  0DC6                     l2869:	
  6659  0DC6  3001               	movlw	1
  6660  0DC7  07A5               	addwf	fcscheck@i,f
  6661  0DC8  1803               	skipnc
  6662  0DC9  0AA6               	incf	fcscheck@i+1,f
  6663  0DCA  3000               	movlw	0
  6664  0DCB  07A6               	addwf	fcscheck@i+1,f
  6665  0DCC  2D74               	goto	l2871
  6666  0DCD                     l236:	
  6667                           
  6668                           ;decode_AX25.c: 331: }
  6669                           ;decode_AX25.c: 332: }
  6670                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  6671  0DCD  09F6               	comf	_dfcslo,f
  6672                           
  6673                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  6674  0DCE  09EF               	comf	_dfcshi,f
  6675                           
  6676                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  6677  0DCF  0872               	movf	_dPacketnum,w
  6678  0DD0  3EFE               	addlw	254
  6679  0DD1  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  6680  0DD2  0084               	movwf	4
  6681  0DD3  1783               	bsf	3,7	;select IRP bank3
  6682  0DD4  0800               	movf	0,w
  6683  0DD5  0676               	xorwf	_dfcslo,w
  6684  0DD6  1D03               	skipz
  6685  0DD7  2DE5               	goto	l2883
  6686  0DD8  0872               	movf	_dPacketnum,w
  6687  0DD9  3EFF               	addlw	255
  6688  0DDA  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  6689  0DDB  0084               	movwf	4
  6690  0DDC  0800               	movf	0,w
  6691  0DDD  066F               	xorwf	_dfcshi,w
  6692  0DDE  1D03               	skipz
  6693  0DDF  2DE5               	goto	l2883
  6694                           
  6695                           ;decode_AX25.c: 342: return 1;
  6696  0DE0  3001               	movlw	1
  6697  0DE1  00A0               	movwf	?_fcscheck
  6698  0DE2  3000               	movlw	0
  6699  0DE3  00A1               	movwf	?_fcscheck+1
  6700  0DE4  0008               	return
  6701  0DE5                     l2883:	
  6702                           ;decode_AX25.c: 343: }else{
  6703                           
  6704                           
  6705                           ;decode_AX25.c: 348: return 0;
  6706  0DE5  01A0               	clrf	?_fcscheck
  6707  0DE6  01A1               	clrf	?_fcscheck+1
  6708  0DE7  0008               	return
  6709  0DE8                     __end_of_fcscheck:	
  6710                           
  6711                           	psect	text20
  6712  0820                     __ptext20:	
  6713 ;; *************** function _NM_waddress *****************
  6714 ;; Defined at:
  6715 ;;		line 72 in file "UART.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;  NM_wad_heade    1    wreg     unsigned char 
  6718 ;;  whigh_addres    1    1[BANK0 ] unsigned char 
  6719 ;;  wlow_address    1    2[BANK0 ] unsigned char 
  6720 ;; Auto vars:     Size  Location     Type
  6721 ;;  NM_wad_heade    1    3[BANK0 ] unsigned char 
  6722 ;; Return value:  Size  Location     Type
  6723 ;;                  1    wreg      void 
  6724 ;; Registers used:
  6725 ;;		wreg, status,2, status,0, pclath, cstack
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6731 ;;      Params:         0       2       0       0       0
  6732 ;;      Locals:         0       1       0       0       0
  6733 ;;      Temps:          0       0       0       0       0
  6734 ;;      Totals:         0       3       0       0       0
  6735 ;;Total ram usage:        3 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    2
  6738 ;; This function calls:
  6739 ;;		_putch
  6740 ;; This function is called by:
  6741 ;;		_main
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           
  6746                           ;psect for function _NM_waddress
  6747  0820                     _NM_waddress:	
  6748                           
  6749                           ;incstack = 0
  6750                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  6751                           ;NM_waddress@NM_wad_header stored from wreg
  6752  0820  1283               	bcf	3,5	;RP0=0, select bank0
  6753  0821  1303               	bcf	3,6	;RP1=0, select bank0
  6754  0822  00A3               	movwf	NM_waddress@NM_wad_header
  6755                           
  6756                           ;UART.c: 73: putch(NM_wad_header);
  6757  0823  0823               	movf	NM_waddress@NM_wad_header,w
  6758  0824  160A  118A  27DF  120A  158A  	fcall	_putch
  6759                           
  6760                           ;UART.c: 74: putch(whigh_address);
  6761  0829  1283               	bcf	3,5	;RP0=0, select bank0
  6762  082A  1303               	bcf	3,6	;RP1=0, select bank0
  6763  082B  0821               	movf	NM_waddress@whigh_address,w
  6764  082C  160A  118A  27DF  120A  158A  	fcall	_putch
  6765                           
  6766                           ;UART.c: 75: putch(wlow_address);
  6767  0831  1283               	bcf	3,5	;RP0=0, select bank0
  6768  0832  1303               	bcf	3,6	;RP1=0, select bank0
  6769  0833  0822               	movf	NM_waddress@wlow_address,w
  6770  0834  160A  118A  27DF   	fcall	_putch
  6771  0837  0008               	return
  6772  0838                     __end_of_NM_waddress:	
  6773                           
  6774                           	psect	text21
  6775  17DF                     __ptext21:	
  6776 ;; *************** function _putch *****************
  6777 ;; Defined at:
  6778 ;;		line 39 in file "UART.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;  byte            1    wreg     unsigned char 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  byte            1    0[BANK0 ] unsigned char 
  6783 ;; Return value:  Size  Location     Type
  6784 ;;                  1    wreg      void 
  6785 ;; Registers used:
  6786 ;;		wreg
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6792 ;;      Params:         0       0       0       0       0
  6793 ;;      Locals:         0       1       0       0       0
  6794 ;;      Temps:          0       0       0       0       0
  6795 ;;      Totals:         0       1       0       0       0
  6796 ;;Total ram usage:        1 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    1
  6799 ;; This function calls:
  6800 ;;		Nothing
  6801 ;; This function is called by:
  6802 ;;		_NM_waddress
  6803 ;;		_TXOBC_waddress
  6804 ;;		_putAX25
  6805 ;;		_conv_DI_UARTRX
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           
  6810                           ;psect for function _putch
  6811  17DF                     _putch:	
  6812                           
  6813                           ;incstack = 0
  6814                           ; Regs used in _putch: [wreg]
  6815                           ;putch@byte stored from wreg
  6816  17DF  1283               	bcf	3,5	;RP0=0, select bank0
  6817  17E0  1303               	bcf	3,6	;RP1=0, select bank0
  6818  17E1  00A0               	movwf	putch@byte
  6819  17E2                     l55:	
  6820                           ;UART.c: 40: while(!TXIF);
  6821                           
  6822  17E2  1E0C               	btfss	12,4	;volatile
  6823  17E3  2FE2               	goto	l55
  6824                           
  6825                           ;UART.c: 41: TXREG = byte;
  6826  17E4  0820               	movf	putch@byte,w
  6827  17E5  0099               	movwf	25	;volatile
  6828  17E6  0008               	return
  6829  17E7                     __end_of_putch:	
  6830                           
  6831                           	psect	text22
  6832  0809                     __ptext22:	
  6833 ;; *************** function _Init_WDT *****************
  6834 ;; Defined at:
  6835 ;;		line 7 in file "WDT.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;		None
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;		None
  6840 ;; Return value:  Size  Location     Type
  6841 ;;                  1    wreg      void 
  6842 ;; Registers used:
  6843 ;;		wreg, status,2, status,0
  6844 ;; Tracked objects:
  6845 ;;		On entry : 0/0
  6846 ;;		On exit  : 0/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6849 ;;      Params:         0       0       0       0       0
  6850 ;;      Locals:         0       0       0       0       0
  6851 ;;      Temps:          0       0       0       0       0
  6852 ;;      Totals:         0       0       0       0       0
  6853 ;;Total ram usage:        0 bytes
  6854 ;; Hardware stack levels used:    1
  6855 ;; Hardware stack levels required when called:    1
  6856 ;; This function calls:
  6857 ;;		Nothing
  6858 ;; This function is called by:
  6859 ;;		_main
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           
  6864                           ;psect for function _Init_WDT
  6865  0809                     _Init_WDT:	
  6866                           
  6867                           ;WDT.c: 8: INTCONbits.GIE = 1;
  6868                           
  6869                           ;incstack = 0
  6870                           ; Regs used in _Init_WDT: [wreg+status,2+status,0]
  6871  0809  178B               	bsf	11,7	;volatile
  6872                           
  6873                           ;WDT.c: 9: INTCONbits.PEIE = 1;
  6874  080A  170B               	bsf	11,6	;volatile
  6875                           
  6876                           ;WDT.c: 11: OPTION_REGbits.PSA = 1;
  6877  080B  1683               	bsf	3,5	;RP0=1, select bank1
  6878  080C  1303               	bcf	3,6	;RP1=0, select bank1
  6879  080D  1581               	bsf	1,3	;volatile
  6880                           
  6881                           ;WDT.c: 12: OPTION_REGbits.PS = 7;
  6882  080E  3007               	movlw	7
  6883  080F  0481               	iorwf	1,f	;volatile
  6884                           
  6885                           ;WDT.c: 16: PIR1bits.TMR1IF = 0;
  6886  0810  1283               	bcf	3,5	;RP0=0, select bank0
  6887  0811  1303               	bcf	3,6	;RP1=0, select bank0
  6888  0812  100C               	bcf	12,0	;volatile
  6889                           
  6890                           ;WDT.c: 17: PIE1bits.TMR1IE = 1;
  6891  0813  1683               	bsf	3,5	;RP0=1, select bank1
  6892  0814  1303               	bcf	3,6	;RP1=0, select bank1
  6893  0815  140C               	bsf	12,0	;volatile
  6894                           
  6895                           ;WDT.c: 20: T1CONbits.T1CKPS = 3;
  6896  0816  3030               	movlw	48
  6897  0817  1283               	bcf	3,5	;RP0=0, select bank0
  6898  0818  1303               	bcf	3,6	;RP1=0, select bank0
  6899  0819  0490               	iorwf	16,f	;volatile
  6900                           
  6901                           ;WDT.c: 21: TMR1 = (0xffff - 62500);
  6902  081A  300B               	movlw	11
  6903  081B  008F               	movwf	15	;volatile
  6904  081C  30DB               	movlw	219
  6905  081D  008E               	movwf	14	;volatile
  6906                           
  6907                           ;WDT.c: 23: T1CONbits.TMR1ON = 1;
  6908  081E  1410               	bsf	16,0	;volatile
  6909  081F  0008               	return
  6910  0820                     __end_of_Init_WDT:	
  6911                           
  6912                           	psect	text23
  6913  0850                     __ptext23:	
  6914 ;; *************** function _Init_SERIAL *****************
  6915 ;; Defined at:
  6916 ;;		line 6 in file "UART.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      void 
  6923 ;; Registers used:
  6924 ;;		wreg
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6930 ;;      Params:         0       0       0       0       0
  6931 ;;      Locals:         0       0       0       0       0
  6932 ;;      Temps:          0       0       0       0       0
  6933 ;;      Totals:         0       0       0       0       0
  6934 ;;Total ram usage:        0 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    1
  6937 ;; This function calls:
  6938 ;;		Nothing
  6939 ;; This function is called by:
  6940 ;;		_main
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           
  6945                           ;psect for function _Init_SERIAL
  6946  0850                     _Init_SERIAL:	
  6947                           
  6948                           ;UART.c: 7: SPBRG = 10;
  6949                           
  6950                           ;incstack = 0
  6951                           ; Regs used in _Init_SERIAL: [wreg]
  6952  0850  300A               	movlw	10
  6953  0851  1683               	bsf	3,5	;RP0=1, select bank1
  6954  0852  1303               	bcf	3,6	;RP1=0, select bank1
  6955  0853  0099               	movwf	25	;volatile
  6956                           
  6957                           ;UART.c: 8: BRGH = 0;
  6958  0854  1118               	bcf	24,2	;volatile
  6959                           
  6960                           ;UART.c: 9: SYNC = 0;
  6961  0855  1218               	bcf	24,4	;volatile
  6962                           
  6963                           ;UART.c: 10: SPEN = 1;
  6964  0856  1283               	bcf	3,5	;RP0=0, select bank0
  6965  0857  1303               	bcf	3,6	;RP1=0, select bank0
  6966  0858  1798               	bsf	24,7	;volatile
  6967                           
  6968                           ;UART.c: 11: CREN = 1;
  6969  0859  1618               	bsf	24,4	;volatile
  6970                           
  6971                           ;UART.c: 12: SREN = 0;
  6972  085A  1298               	bcf	24,5	;volatile
  6973                           
  6974                           ;UART.c: 13: RCIF = 0;
  6975  085B  128C               	bcf	12,5	;volatile
  6976                           
  6977                           ;UART.c: 14: TXIE = 0;
  6978  085C  1683               	bsf	3,5	;RP0=1, select bank1
  6979  085D  1303               	bcf	3,6	;RP1=0, select bank1
  6980  085E  120C               	bcf	12,4	;volatile
  6981                           
  6982                           ;UART.c: 15: RCIE = 1;
  6983  085F  168C               	bsf	12,5	;volatile
  6984                           
  6985                           ;UART.c: 16: TX9 = 0;
  6986  0860  1318               	bcf	24,6	;volatile
  6987                           
  6988                           ;UART.c: 17: RX9 = 0;
  6989  0861  1283               	bcf	3,5	;RP0=0, select bank0
  6990  0862  1303               	bcf	3,6	;RP1=0, select bank0
  6991  0863  1318               	bcf	24,6	;volatile
  6992                           
  6993                           ;UART.c: 18: TXEN = 0;
  6994  0864  1683               	bsf	3,5	;RP0=1, select bank1
  6995  0865  1303               	bcf	3,6	;RP1=0, select bank1
  6996  0866  1298               	bcf	24,5	;volatile
  6997                           
  6998                           ;UART.c: 19: TXEN = 1;
  6999  0867  1698               	bsf	24,5	;volatile
  7000  0868  0008               	return
  7001  0869                     __end_of_Init_SERIAL:	
  7002                           
  7003                           	psect	text24
  7004  0869                     __ptext24:	
  7005 ;; *************** function _Init_MPU *****************
  7006 ;; Defined at:
  7007 ;;		line 8 in file "Init_MPU.c"
  7008 ;; Parameters:    Size  Location     Type
  7009 ;;		None
  7010 ;; Auto vars:     Size  Location     Type
  7011 ;;		None
  7012 ;; Return value:  Size  Location     Type
  7013 ;;                  1    wreg      void 
  7014 ;; Registers used:
  7015 ;;		wreg, status,2
  7016 ;; Tracked objects:
  7017 ;;		On entry : 0/0
  7018 ;;		On exit  : 0/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7021 ;;      Params:         0       0       0       0       0
  7022 ;;      Locals:         0       0       0       0       0
  7023 ;;      Temps:          0       0       0       0       0
  7024 ;;      Totals:         0       0       0       0       0
  7025 ;;Total ram usage:        0 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; Hardware stack levels required when called:    1
  7028 ;; This function calls:
  7029 ;;		Nothing
  7030 ;; This function is called by:
  7031 ;;		_main
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           
  7036                           ;psect for function _Init_MPU
  7037  0869                     _Init_MPU:	
  7038                           
  7039                           ;Init_MPU.c: 11: PORTA = 0x00;
  7040                           
  7041                           ;incstack = 0
  7042                           ; Regs used in _Init_MPU: [wreg+status,2]
  7043  0869  1283               	bcf	3,5	;RP0=0, select bank0
  7044  086A  1303               	bcf	3,6	;RP1=0, select bank0
  7045  086B  0185               	clrf	5	;volatile
  7046                           
  7047                           ;Init_MPU.c: 12: PORTB = 0x00;
  7048  086C  0186               	clrf	6	;volatile
  7049                           
  7050                           ;Init_MPU.c: 13: PORTC = 0x00;
  7051  086D  0187               	clrf	7	;volatile
  7052                           
  7053                           ;Init_MPU.c: 14: PORTD = 0x00;
  7054  086E  0188               	clrf	8	;volatile
  7055                           
  7056                           ;Init_MPU.c: 15: PORTE = 0x00;
  7057  086F  0189               	clrf	9	;volatile
  7058                           
  7059                           ;Init_MPU.c: 18: ANSEL = 0x00;
  7060  0870  1683               	bsf	3,5	;RP0=1, select bank3
  7061  0871  1703               	bsf	3,6	;RP1=1, select bank3
  7062  0872  0188               	clrf	8	;volatile
  7063                           
  7064                           ;Init_MPU.c: 19: ANSELH = 0x00;
  7065  0873  0189               	clrf	9	;volatile
  7066                           
  7067                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  7068  0874  3080               	movlw	128
  7069  0875  1683               	bsf	3,5	;RP0=1, select bank1
  7070  0876  1303               	bcf	3,6	;RP1=0, select bank1
  7071  0877  0085               	movwf	5	;volatile
  7072                           
  7073                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  7074  0878  3020               	movlw	32
  7075  0879  0086               	movwf	6	;volatile
  7076                           
  7077                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  7078  087A  3098               	movlw	152
  7079  087B  0087               	movwf	7	;volatile
  7080                           
  7081                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  7082  087C  0188               	clrf	8	;volatile
  7083                           
  7084                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  7085  087D  0189               	clrf	9	;volatile
  7086                           
  7087                           ;Init_MPU.c: 30: PORTA = 0x00;
  7088  087E  1283               	bcf	3,5	;RP0=0, select bank0
  7089  087F  1303               	bcf	3,6	;RP1=0, select bank0
  7090  0880  0185               	clrf	5	;volatile
  7091                           
  7092                           ;Init_MPU.c: 31: PORTB = 0x00;
  7093  0881  0186               	clrf	6	;volatile
  7094                           
  7095                           ;Init_MPU.c: 32: PORTC = 0x00;
  7096  0882  0187               	clrf	7	;volatile
  7097                           
  7098                           ;Init_MPU.c: 33: PORTD = 0x00;
  7099  0883  0188               	clrf	8	;volatile
  7100                           
  7101                           ;Init_MPU.c: 34: PORTE = 0x00;
  7102  0884  0189               	clrf	9	;volatile
  7103  0885  0008               	return
  7104  0886                     __end_of_Init_MPU:	
  7105                           
  7106                           	psect	text25
  7107  0958                     __ptext25:	
  7108 ;; *************** function _Init_I2C_M *****************
  7109 ;; Defined at:
  7110 ;;		line 8 in file "I2C.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;  c               4   14[BANK0 ] const unsigned long 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      void 
  7117 ;; Registers used:
  7118 ;;		wreg, status,2, status,0, pclath, cstack
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7124 ;;      Params:         0       4       0       0       0
  7125 ;;      Locals:         0       0       0       0       0
  7126 ;;      Temps:          0       4       0       0       0
  7127 ;;      Totals:         0       8       0       0       0
  7128 ;;Total ram usage:        8 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    2
  7131 ;; This function calls:
  7132 ;;		___lldiv
  7133 ;; This function is called by:
  7134 ;;		_main
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function _Init_I2C_M
  7140  0958                     _Init_I2C_M:	
  7141                           
  7142                           ;I2C.c: 9: SSPCON = 0b00101000;
  7143                           
  7144                           ;incstack = 0
  7145                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  7146  0958  3028               	movlw	40
  7147  0959  1283               	bcf	3,5	;RP0=0, select bank0
  7148  095A  1303               	bcf	3,6	;RP1=0, select bank0
  7149  095B  0094               	movwf	20	;volatile
  7150                           
  7151                           ;I2C.c: 10: SSPCON2 = 0;
  7152  095C  1683               	bsf	3,5	;RP0=1, select bank1
  7153  095D  1303               	bcf	3,6	;RP1=0, select bank1
  7154  095E  0191               	clrf	17	;volatile
  7155                           
  7156                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  7157  095F  1283               	bcf	3,5	;RP0=0, select bank0
  7158  0960  1303               	bcf	3,6	;RP1=0, select bank0
  7159  0961  082E               	movf	Init_I2C_M@c,w
  7160  0962  00B2               	movwf	??_Init_I2C_M
  7161  0963  082F               	movf	Init_I2C_M@c+1,w
  7162  0964  00B3               	movwf	??_Init_I2C_M+1
  7163  0965  0830               	movf	Init_I2C_M@c+2,w
  7164  0966  00B4               	movwf	??_Init_I2C_M+2
  7165  0967  0831               	movf	Init_I2C_M@c+3,w
  7166  0968  00B5               	movwf	??_Init_I2C_M+3
  7167  0969  3002               	movlw	2
  7168  096A                     u2855:	
  7169  096A  1003               	clrc
  7170  096B  0DB2               	rlf	??_Init_I2C_M,f
  7171  096C  0DB3               	rlf	??_Init_I2C_M+1,f
  7172  096D  0DB4               	rlf	??_Init_I2C_M+2,f
  7173  096E  0DB5               	rlf	??_Init_I2C_M+3,f
  7174  096F  3EFF               	addlw	-1
  7175  0970  1D03               	skipz
  7176  0971  296A               	goto	u2855
  7177  0972  0835               	movf	??_Init_I2C_M+3,w
  7178  0973  00A3               	movwf	___lldiv@divisor+3
  7179  0974  0834               	movf	??_Init_I2C_M+2,w
  7180  0975  00A2               	movwf	___lldiv@divisor+2
  7181  0976  0833               	movf	??_Init_I2C_M+1,w
  7182  0977  00A1               	movwf	___lldiv@divisor+1
  7183  0978  0832               	movf	??_Init_I2C_M,w
  7184  0979  00A0               	movwf	___lldiv@divisor
  7185  097A  3000               	movlw	0
  7186  097B  00A7               	movwf	___lldiv@dividend+3
  7187  097C  3098               	movlw	152
  7188  097D  00A6               	movwf	___lldiv@dividend+2
  7189  097E  3096               	movlw	150
  7190  097F  00A5               	movwf	___lldiv@dividend+1
  7191  0980  3080               	movlw	128
  7192  0981  00A4               	movwf	___lldiv@dividend
  7193  0982  120A  158A  2357   	fcall	___lldiv
  7194  0985  1283               	bcf	3,5	;RP0=0, select bank0
  7195  0986  1303               	bcf	3,6	;RP1=0, select bank0
  7196  0987  0820               	movf	?___lldiv,w
  7197  0988  3EFF               	addlw	255
  7198  0989  1683               	bsf	3,5	;RP0=1, select bank1
  7199  098A  1303               	bcf	3,6	;RP1=0, select bank1
  7200  098B  0093               	movwf	19	;volatile
  7201                           
  7202                           ;I2C.c: 12: SSPSTAT = 0;
  7203  098C  0194               	clrf	20	;volatile
  7204  098D  0008               	return
  7205  098E                     __end_of_Init_I2C_M:	
  7206                           
  7207                           	psect	text26
  7208  0B57                     __ptext26:	
  7209 ;; *************** function ___lldiv *****************
  7210 ;; Defined at:
  7211 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;  divisor         4    0[BANK0 ] unsigned long 
  7214 ;;  dividend        4    4[BANK0 ] unsigned long 
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;  quotient        4    9[BANK0 ] unsigned long 
  7217 ;;  counter         1   13[BANK0 ] unsigned char 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  4    0[BANK0 ] unsigned long 
  7220 ;; Registers used:
  7221 ;;		wreg, status,2, status,0
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7227 ;;      Params:         0       8       0       0       0
  7228 ;;      Locals:         0       5       0       0       0
  7229 ;;      Temps:          0       1       0       0       0
  7230 ;;      Totals:         0      14       0       0       0
  7231 ;;Total ram usage:       14 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    1
  7234 ;; This function calls:
  7235 ;;		Nothing
  7236 ;; This function is called by:
  7237 ;;		_Init_I2C_M
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           
  7242                           ;psect for function ___lldiv
  7243  0B57                     ___lldiv:	
  7244                           
  7245                           ;incstack = 0
  7246                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7247  0B57  3000               	movlw	0
  7248  0B58  1283               	bcf	3,5	;RP0=0, select bank0
  7249  0B59  1303               	bcf	3,6	;RP1=0, select bank0
  7250  0B5A  00AC               	movwf	___lldiv@quotient+3
  7251  0B5B  3000               	movlw	0
  7252  0B5C  00AB               	movwf	___lldiv@quotient+2
  7253  0B5D  3000               	movlw	0
  7254  0B5E  00AA               	movwf	___lldiv@quotient+1
  7255  0B5F  3000               	movlw	0
  7256  0B60  00A9               	movwf	___lldiv@quotient
  7257  0B61  0823               	movf	___lldiv@divisor+3,w
  7258  0B62  0422               	iorwf	___lldiv@divisor+2,w
  7259  0B63  0421               	iorwf	___lldiv@divisor+1,w
  7260  0B64  0420               	iorwf	___lldiv@divisor,w
  7261  0B65  1903               	skipnz
  7262  0B66  2BAE               	goto	l2945
  7263  0B67  01AD               	clrf	___lldiv@counter
  7264  0B68  0AAD               	incf	___lldiv@counter,f
  7265  0B69                     l2931:	
  7266  0B69  1BA3               	btfsc	___lldiv@divisor+3,7
  7267  0B6A  2B79               	goto	l2933
  7268  0B6B  3001               	movlw	1
  7269  0B6C  00A8               	movwf	??___lldiv
  7270  0B6D                     u2765:	
  7271  0B6D  1003               	clrc
  7272  0B6E  0DA0               	rlf	___lldiv@divisor,f
  7273  0B6F  0DA1               	rlf	___lldiv@divisor+1,f
  7274  0B70  0DA2               	rlf	___lldiv@divisor+2,f
  7275  0B71  0DA3               	rlf	___lldiv@divisor+3,f
  7276  0B72  0BA8               	decfsz	??___lldiv,f
  7277  0B73  2B6D               	goto	u2765
  7278  0B74  3001               	movlw	1
  7279  0B75  00A8               	movwf	??___lldiv
  7280  0B76  0828               	movf	??___lldiv,w
  7281  0B77  07AD               	addwf	___lldiv@counter,f
  7282  0B78  2B69               	goto	l2931
  7283  0B79                     l2933:	
  7284  0B79  3001               	movlw	1
  7285  0B7A  00A8               	movwf	??___lldiv
  7286  0B7B                     u2785:	
  7287  0B7B  1003               	clrc
  7288  0B7C  0DA9               	rlf	___lldiv@quotient,f
  7289  0B7D  0DAA               	rlf	___lldiv@quotient+1,f
  7290  0B7E  0DAB               	rlf	___lldiv@quotient+2,f
  7291  0B7F  0DAC               	rlf	___lldiv@quotient+3,f
  7292  0B80  0BA8               	decfsz	??___lldiv,f
  7293  0B81  2B7B               	goto	u2785
  7294  0B82  0823               	movf	___lldiv@divisor+3,w
  7295  0B83  0227               	subwf	___lldiv@dividend+3,w
  7296  0B84  1D03               	skipz
  7297  0B85  2B90               	goto	u2795
  7298  0B86  0822               	movf	___lldiv@divisor+2,w
  7299  0B87  0226               	subwf	___lldiv@dividend+2,w
  7300  0B88  1D03               	skipz
  7301  0B89  2B90               	goto	u2795
  7302  0B8A  0821               	movf	___lldiv@divisor+1,w
  7303  0B8B  0225               	subwf	___lldiv@dividend+1,w
  7304  0B8C  1D03               	skipz
  7305  0B8D  2B90               	goto	u2795
  7306  0B8E  0820               	movf	___lldiv@divisor,w
  7307  0B8F  0224               	subwf	___lldiv@dividend,w
  7308  0B90                     u2795:	
  7309  0B90  1C03               	skipc
  7310  0B91  2BA1               	goto	l2941
  7311  0B92  0820               	movf	___lldiv@divisor,w
  7312  0B93  02A4               	subwf	___lldiv@dividend,f
  7313  0B94  0821               	movf	___lldiv@divisor+1,w
  7314  0B95  1C03               	skipc
  7315  0B96  0F21               	incfsz	___lldiv@divisor+1,w
  7316  0B97  02A5               	subwf	___lldiv@dividend+1,f
  7317  0B98  0822               	movf	___lldiv@divisor+2,w
  7318  0B99  1C03               	skipc
  7319  0B9A  0F22               	incfsz	___lldiv@divisor+2,w
  7320  0B9B  02A6               	subwf	___lldiv@dividend+2,f
  7321  0B9C  0823               	movf	___lldiv@divisor+3,w
  7322  0B9D  1C03               	skipc
  7323  0B9E  0F23               	incfsz	___lldiv@divisor+3,w
  7324  0B9F  02A7               	subwf	___lldiv@dividend+3,f
  7325  0BA0  1429               	bsf	___lldiv@quotient,0
  7326  0BA1                     l2941:	
  7327  0BA1  3001               	movlw	1
  7328  0BA2                     u2805:	
  7329  0BA2  1003               	clrc
  7330  0BA3  0CA3               	rrf	___lldiv@divisor+3,f
  7331  0BA4  0CA2               	rrf	___lldiv@divisor+2,f
  7332  0BA5  0CA1               	rrf	___lldiv@divisor+1,f
  7333  0BA6  0CA0               	rrf	___lldiv@divisor,f
  7334  0BA7  3EFF               	addlw	-1
  7335  0BA8  1D03               	skipz
  7336  0BA9  2BA2               	goto	u2805
  7337  0BAA  3001               	movlw	1
  7338  0BAB  02AD               	subwf	___lldiv@counter,f
  7339  0BAC  1D03               	btfss	3,2
  7340  0BAD  2B79               	goto	l2933
  7341  0BAE                     l2945:	
  7342  0BAE  082C               	movf	___lldiv@quotient+3,w
  7343  0BAF  00A3               	movwf	?___lldiv+3
  7344  0BB0  082B               	movf	___lldiv@quotient+2,w
  7345  0BB1  00A2               	movwf	?___lldiv+2
  7346  0BB2  082A               	movf	___lldiv@quotient+1,w
  7347  0BB3  00A1               	movwf	?___lldiv+1
  7348  0BB4  0829               	movf	___lldiv@quotient,w
  7349  0BB5  00A0               	movwf	?___lldiv
  7350  0BB6  0008               	return
  7351  0BB7                     __end_of___lldiv:	
  7352                           
  7353                           	psect	text27
  7354  0C7D                     __ptext27:	
  7355 ;; *************** function _EEPROM_Write *****************
  7356 ;; Defined at:
  7357 ;;		line 51 in file "I2C.c"
  7358 ;; Parameters:    Size  Location     Type
  7359 ;;  EEPROM_addre    1    wreg     unsigned char 
  7360 ;;  high_address    1    2[BANK0 ] unsigned char 
  7361 ;;  low_address     1    3[BANK0 ] unsigned char 
  7362 ;;  data            1    4[BANK0 ] PTR unsigned char 
  7363 ;;		 -> NULL(0), dData(16), 
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;  EEPROM_addre    1    8[BANK0 ] unsigned char 
  7366 ;;  Address         1    9[BANK0 ] unsigned char 
  7367 ;; Return value:  Size  Location     Type
  7368 ;;                  1    wreg      void 
  7369 ;; Registers used:
  7370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7376 ;;      Params:         0       3       0       0       0
  7377 ;;      Locals:         0       2       0       0       0
  7378 ;;      Temps:          0       3       0       0       0
  7379 ;;      Totals:         0       8       0       0       0
  7380 ;;Total ram usage:        8 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    3
  7383 ;; This function calls:
  7384 ;;		_I2C_Master_Start
  7385 ;;		_I2C_Master_Stop
  7386 ;;		_I2C_Master_Write
  7387 ;; This function is called by:
  7388 ;;		_main
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           
  7393                           ;psect for function _EEPROM_Write
  7394  0C7D                     _EEPROM_Write:	
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7398                           ;EEPROM_Write@EEPROM_address stored from wreg
  7399  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  7400  0C7E  1303               	bcf	3,6	;RP1=0, select bank0
  7401  0C7F  00A8               	movwf	EEPROM_Write@EEPROM_address
  7402                           
  7403                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  7404  0C80  0828               	movf	EEPROM_Write@EEPROM_address,w
  7405  0C81  00A5               	movwf	??_EEPROM_Write
  7406  0C82  0725               	addwf	??_EEPROM_Write,w
  7407  0C83  00A6               	movwf	??_EEPROM_Write+1
  7408  0C84  0826               	movf	??_EEPROM_Write+1,w
  7409  0C85  00A9               	movwf	EEPROM_Write@Address
  7410                           
  7411                           ;I2C.c: 55: I2C_Master_Start();
  7412  0C86  160A  118A  27C9  120A  158A  	fcall	_I2C_Master_Start
  7413                           
  7414                           ;I2C.c: 56: I2C_Master_Write(Address);
  7415  0C8B  1283               	bcf	3,5	;RP0=0, select bank0
  7416  0C8C  1303               	bcf	3,6	;RP1=0, select bank0
  7417  0C8D  0829               	movf	EEPROM_Write@Address,w
  7418  0C8E  00A5               	movwf	??_EEPROM_Write
  7419  0C8F  01A6               	clrf	??_EEPROM_Write+1
  7420  0C90  0825               	movf	??_EEPROM_Write,w
  7421  0C91  00A0               	movwf	I2C_Master_Write@d
  7422  0C92  0826               	movf	??_EEPROM_Write+1,w
  7423  0C93  00A1               	movwf	I2C_Master_Write@d+1
  7424  0C94  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  7425                           
  7426                           ;I2C.c: 57: I2C_Master_Write(high_address);
  7427  0C99  1283               	bcf	3,5	;RP0=0, select bank0
  7428  0C9A  1303               	bcf	3,6	;RP1=0, select bank0
  7429  0C9B  0822               	movf	EEPROM_Write@high_address,w
  7430  0C9C  00A5               	movwf	??_EEPROM_Write
  7431  0C9D  01A6               	clrf	??_EEPROM_Write+1
  7432  0C9E  0825               	movf	??_EEPROM_Write,w
  7433  0C9F  00A0               	movwf	I2C_Master_Write@d
  7434  0CA0  0826               	movf	??_EEPROM_Write+1,w
  7435  0CA1  00A1               	movwf	I2C_Master_Write@d+1
  7436  0CA2  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  7437                           
  7438                           ;I2C.c: 58: I2C_Master_Write(low_address);
  7439  0CA7  1283               	bcf	3,5	;RP0=0, select bank0
  7440  0CA8  1303               	bcf	3,6	;RP1=0, select bank0
  7441  0CA9  0823               	movf	EEPROM_Write@low_address,w
  7442  0CAA  00A5               	movwf	??_EEPROM_Write
  7443  0CAB  01A6               	clrf	??_EEPROM_Write+1
  7444  0CAC  0825               	movf	??_EEPROM_Write,w
  7445  0CAD  00A0               	movwf	I2C_Master_Write@d
  7446  0CAE  0826               	movf	??_EEPROM_Write+1,w
  7447  0CAF  00A1               	movwf	I2C_Master_Write@d+1
  7448  0CB0  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  7449  0CB5                     l3639:	
  7450                           ;I2C.c: 59: while(*data){
  7451                           
  7452  0CB5  1283               	bcf	3,5	;RP0=0, select bank0
  7453  0CB6  1303               	bcf	3,6	;RP1=0, select bank0
  7454  0CB7  0824               	movf	EEPROM_Write@data,w
  7455  0CB8  0084               	movwf	4
  7456  0CB9  1783               	bsf	3,7	;select IRP bank2
  7457  0CBA  0800               	movf	0,w
  7458  0CBB  1903               	btfsc	3,2
  7459  0CBC  2CD5               	goto	l3641
  7460                           
  7461                           ;I2C.c: 60: I2C_Master_Write(*data);
  7462  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  7463  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  7464  0CBF  0824               	movf	EEPROM_Write@data,w
  7465  0CC0  0084               	movwf	4
  7466  0CC1  1783               	bsf	3,7	;select IRP bank2
  7467  0CC2  0800               	movf	0,w
  7468  0CC3  00A5               	movwf	??_EEPROM_Write
  7469  0CC4  01A6               	clrf	??_EEPROM_Write+1
  7470  0CC5  0825               	movf	??_EEPROM_Write,w
  7471  0CC6  00A0               	movwf	I2C_Master_Write@d
  7472  0CC7  0826               	movf	??_EEPROM_Write+1,w
  7473  0CC8  00A1               	movwf	I2C_Master_Write@d+1
  7474  0CC9  160A  118A  27D7  120A  158A  	fcall	_I2C_Master_Write
  7475                           
  7476                           ;I2C.c: 61: ++data;
  7477  0CCE  3001               	movlw	1
  7478  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  7479  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  7480  0CD1  00A5               	movwf	??_EEPROM_Write
  7481  0CD2  0825               	movf	??_EEPROM_Write,w
  7482  0CD3  07A4               	addwf	EEPROM_Write@data,f
  7483  0CD4  2CB5               	goto	l3639
  7484  0CD5                     l3641:	
  7485                           
  7486                           ;I2C.c: 62: }
  7487                           ;I2C.c: 63: I2C_Master_Stop();
  7488  0CD5  160A  118A  27D0  120A  158A  	fcall	_I2C_Master_Stop
  7489                           
  7490                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  7491  0CDA  3003               	movlw	3
  7492  0CDB  1283               	bcf	3,5	;RP0=0, select bank0
  7493  0CDC  1303               	bcf	3,6	;RP1=0, select bank0
  7494  0CDD  00A7               	movwf	??_EEPROM_Write+2
  7495  0CDE  308A               	movlw	138
  7496  0CDF  00A6               	movwf	??_EEPROM_Write+1
  7497  0CE0  3055               	movlw	85
  7498  0CE1  00A5               	movwf	??_EEPROM_Write
  7499  0CE2                     u3807:	
  7500  0CE2  0BA5               	decfsz	??_EEPROM_Write,f
  7501  0CE3  2CE2               	goto	u3807
  7502  0CE4  0BA6               	decfsz	??_EEPROM_Write+1,f
  7503  0CE5  2CE2               	goto	u3807
  7504  0CE6  0BA7               	decfsz	??_EEPROM_Write+2,f
  7505  0CE7  2CE2               	goto	u3807
  7506  0CE8  0008               	return
  7507  0CE9                     __end_of_EEPROM_Write:	
  7508                           
  7509                           	psect	text28
  7510  17D7                     __ptext28:	
  7511 ;; *************** function _I2C_Master_Write *****************
  7512 ;; Defined at:
  7513 ;;		line 34 in file "I2C.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;  d               2    0[BANK0 ] unsigned int 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;		None
  7518 ;; Return value:  Size  Location     Type
  7519 ;;                  1    wreg      void 
  7520 ;; Registers used:
  7521 ;;		wreg, status,2, status,0, pclath, cstack
  7522 ;; Tracked objects:
  7523 ;;		On entry : 0/0
  7524 ;;		On exit  : 0/0
  7525 ;;		Unchanged: 0/0
  7526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7527 ;;      Params:         0       2       0       0       0
  7528 ;;      Locals:         0       0       0       0       0
  7529 ;;      Temps:          0       0       0       0       0
  7530 ;;      Totals:         0       2       0       0       0
  7531 ;;Total ram usage:        2 bytes
  7532 ;; Hardware stack levels used:    1
  7533 ;; Hardware stack levels required when called:    2
  7534 ;; This function calls:
  7535 ;;		_I2C_Master_Wait
  7536 ;; This function is called by:
  7537 ;;		_EEPROM_Write
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           
  7542                           ;psect for function _I2C_Master_Write
  7543  17D7                     _I2C_Master_Write:	
  7544                           
  7545                           ;I2C.c: 35: I2C_Master_Wait();
  7546                           
  7547                           ;incstack = 0
  7548                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  7549  17D7  120A  158A  2000   	fcall	_I2C_Master_Wait
  7550                           
  7551                           ;I2C.c: 36: SSPBUF = d;
  7552  17DA  1283               	bcf	3,5	;RP0=0, select bank0
  7553  17DB  1303               	bcf	3,6	;RP1=0, select bank0
  7554  17DC  0820               	movf	I2C_Master_Write@d,w
  7555  17DD  0093               	movwf	19	;volatile
  7556  17DE  0008               	return
  7557  17DF                     __end_of_I2C_Master_Write:	
  7558                           
  7559                           	psect	text29
  7560  17D0                     __ptext29:	
  7561 ;; *************** function _I2C_Master_Stop *****************
  7562 ;; Defined at:
  7563 ;;		line 29 in file "I2C.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;		None
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;		None
  7568 ;; Return value:  Size  Location     Type
  7569 ;;                  1    wreg      void 
  7570 ;; Registers used:
  7571 ;;		wreg, status,2, status,0, pclath, cstack
  7572 ;; Tracked objects:
  7573 ;;		On entry : 0/0
  7574 ;;		On exit  : 0/0
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7577 ;;      Params:         0       0       0       0       0
  7578 ;;      Locals:         0       0       0       0       0
  7579 ;;      Temps:          0       0       0       0       0
  7580 ;;      Totals:         0       0       0       0       0
  7581 ;;Total ram usage:        0 bytes
  7582 ;; Hardware stack levels used:    1
  7583 ;; Hardware stack levels required when called:    2
  7584 ;; This function calls:
  7585 ;;		_I2C_Master_Wait
  7586 ;; This function is called by:
  7587 ;;		_EEPROM_Write
  7588 ;; This function uses a non-reentrant model
  7589 ;;
  7590                           
  7591                           
  7592                           ;psect for function _I2C_Master_Stop
  7593  17D0                     _I2C_Master_Stop:	
  7594                           
  7595                           ;I2C.c: 30: I2C_Master_Wait();
  7596                           
  7597                           ;incstack = 0
  7598                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  7599  17D0  120A  158A  2000   	fcall	_I2C_Master_Wait
  7600                           
  7601                           ;I2C.c: 31: PEN = 1;
  7602  17D3  1683               	bsf	3,5	;RP0=1, select bank1
  7603  17D4  1303               	bcf	3,6	;RP1=0, select bank1
  7604  17D5  1511               	bsf	17,2	;volatile
  7605  17D6  0008               	return
  7606  17D7                     __end_of_I2C_Master_Stop:	
  7607                           
  7608                           	psect	text30
  7609  17C9                     __ptext30:	
  7610 ;; *************** function _I2C_Master_Start *****************
  7611 ;; Defined at:
  7612 ;;		line 19 in file "I2C.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;		None
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;		None
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  1    wreg      void 
  7619 ;; Registers used:
  7620 ;;		wreg, status,2, status,0, pclath, cstack
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7626 ;;      Params:         0       0       0       0       0
  7627 ;;      Locals:         0       0       0       0       0
  7628 ;;      Temps:          0       0       0       0       0
  7629 ;;      Totals:         0       0       0       0       0
  7630 ;;Total ram usage:        0 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; Hardware stack levels required when called:    2
  7633 ;; This function calls:
  7634 ;;		_I2C_Master_Wait
  7635 ;; This function is called by:
  7636 ;;		_EEPROM_Write
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           
  7641                           ;psect for function _I2C_Master_Start
  7642  17C9                     _I2C_Master_Start:	
  7643                           
  7644                           ;I2C.c: 20: I2C_Master_Wait();
  7645                           
  7646                           ;incstack = 0
  7647                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  7648  17C9  120A  158A  2000   	fcall	_I2C_Master_Wait
  7649                           
  7650                           ;I2C.c: 21: SEN = 1;
  7651  17CC  1683               	bsf	3,5	;RP0=1, select bank1
  7652  17CD  1303               	bcf	3,6	;RP1=0, select bank1
  7653  17CE  1411               	bsf	17,0	;volatile
  7654  17CF  0008               	return
  7655  17D0                     __end_of_I2C_Master_Start:	
  7656                           
  7657                           	psect	text31
  7658  0800                     __ptext31:	
  7659 ;; *************** function _I2C_Master_Wait *****************
  7660 ;; Defined at:
  7661 ;;		line 15 in file "I2C.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;		None
  7664 ;; Auto vars:     Size  Location     Type
  7665 ;;		None
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  1    wreg      void 
  7668 ;; Registers used:
  7669 ;;		wreg, status,2
  7670 ;; Tracked objects:
  7671 ;;		On entry : 0/0
  7672 ;;		On exit  : 0/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7675 ;;      Params:         0       0       0       0       0
  7676 ;;      Locals:         0       0       0       0       0
  7677 ;;      Temps:          0       0       0       0       0
  7678 ;;      Totals:         0       0       0       0       0
  7679 ;;Total ram usage:        0 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:    1
  7682 ;; This function calls:
  7683 ;;		Nothing
  7684 ;; This function is called by:
  7685 ;;		_I2C_Master_Start
  7686 ;;		_I2C_Master_Stop
  7687 ;;		_I2C_Master_Write
  7688 ;;		_I2C_Master_RepeatedStart
  7689 ;;		_I2C_Master_Read
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           
  7694                           ;psect for function _I2C_Master_Wait
  7695  0800                     _I2C_Master_Wait:	
  7696  0800                     l355:	
  7697                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  7698                           
  7699                           ;incstack = 0
  7700                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  7701                           
  7702  0800  1683               	bsf	3,5	;RP0=1, select bank1
  7703  0801  1303               	bcf	3,6	;RP1=0, select bank1
  7704  0802  1914               	btfsc	20,2	;volatile
  7705  0803  2800               	goto	l355
  7706  0804  0811               	movf	17,w	;volatile
  7707  0805  391F               	andlw	31
  7708  0806  1903               	btfsc	3,2
  7709  0807  0008               	return
  7710  0808  2800               	goto	l355
  7711  0809                     __end_of_I2C_Master_Wait:	
  7712                           
  7713                           	psect	text32
  7714  0A12                     __ptext32:	
  7715 ;; *************** function _InterReceiver *****************
  7716 ;; Defined at:
  7717 ;;		line 27 in file "WDT.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;		None
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;		None
  7722 ;; Return value:  Size  Location     Type
  7723 ;;                  1    wreg      void 
  7724 ;; Registers used:
  7725 ;;		wreg, status,2, btemp+1
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7731 ;;      Params:         0       0       0       0       0
  7732 ;;      Locals:         0       0       0       0       0
  7733 ;;      Temps:          7       0       0       0       0
  7734 ;;      Totals:         7       0       0       0       0
  7735 ;;Total ram usage:        7 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; This function calls:
  7738 ;;		Nothing
  7739 ;; This function is called by:
  7740 ;;		Interrupt level 1
  7741 ;; This function uses a non-reentrant model
  7742 ;;
  7743                           
  7744                           
  7745                           ;psect for function _InterReceiver
  7746  0A12                     _InterReceiver:	
  7747                           
  7748                           ;WDT.c: 28: volatile static int intr_counter;
  7749                           ;WDT.c: 29: volatile static int intr_counter_H;
  7750                           ;WDT.c: 30: if(PIR1bits.TMR1IF == 1){
  7751  0A12  1C0C               	btfss	12,0	;volatile
  7752  0A13  2A4F               	goto	i1l517
  7753                           
  7754                           ;WDT.c: 31: TMR1 = (0xffff - 62500);
  7755  0A14  300B               	movlw	11
  7756  0A15  008F               	movwf	15	;volatile
  7757  0A16  30DB               	movlw	219
  7758  0A17  008E               	movwf	14	;volatile
  7759                           
  7760                           ;WDT.c: 33: intr_counter++;
  7761  0A18  3001               	movlw	1
  7762  0A19  07F0               	addwf	InterReceiver@intr_counter,f	;volatile
  7763  0A1A  1803               	skipnc
  7764  0A1B  0AF1               	incf	InterReceiver@intr_counter+1,f	;volatile
  7765  0A1C  3000               	movlw	0
  7766  0A1D  07F1               	addwf	InterReceiver@intr_counter+1,f	;volatile
  7767                           
  7768                           ;WDT.c: 34: if (intr_counter >= 2) {
  7769  0A1E  0871               	movf	InterReceiver@intr_counter+1,w	;volatile
  7770  0A1F  3A80               	xorlw	128
  7771  0A20  00FF               	movwf	127
  7772  0A21  3080               	movlw	128
  7773  0A22  027F               	subwf	127,w
  7774  0A23  1D03               	skipz
  7775  0A24  2A27               	goto	u307_25
  7776  0A25  3002               	movlw	2
  7777  0A26  0270               	subwf	InterReceiver@intr_counter,w	;volatile
  7778  0A27                     u307_25:	
  7779  0A27  1C03               	skipc
  7780  0A28  2A4C               	goto	i1l3275
  7781  0A29  0064               	clrwdt	;# 
  7782                           
  7783                           ;WDT.c: 36: intr_counter = 0;
  7784  0A2A  01F0               	clrf	InterReceiver@intr_counter	;volatile
  7785  0A2B  01F1               	clrf	InterReceiver@intr_counter+1	;volatile
  7786                           
  7787                           ;WDT.c: 37: intr_counter_H ++;
  7788  0A2C  3001               	movlw	1
  7789  0A2D  1683               	bsf	3,5	;RP0=1, select bank1
  7790  0A2E  1303               	bcf	3,6	;RP1=0, select bank1
  7791  0A2F  07EC               	addwf	InterReceiver@intr_counter_H^(0+128),f	;volatile
  7792  0A30  1803               	skipnc
  7793  0A31  0AED               	incf	(InterReceiver@intr_counter_H+1)^(0+128),f	;volatile
  7794  0A32  3000               	movlw	0
  7795  0A33  07ED               	addwf	(InterReceiver@intr_counter_H+1)^(0+128),f	;volatile
  7796                           
  7797                           ;WDT.c: 38: if (intr_counter_H >= 60) {
  7798  0A34  086D               	movf	(InterReceiver@intr_counter_H+1)^(0+128),w	;volatile
  7799  0A35  3A80               	xorlw	128
  7800  0A36  00FF               	movwf	127
  7801  0A37  3080               	movlw	128
  7802  0A38  027F               	subwf	127,w
  7803  0A39  1D03               	skipz
  7804  0A3A  2A3D               	goto	u308_25
  7805  0A3B  303C               	movlw	60
  7806  0A3C  026C               	subwf	InterReceiver@intr_counter_H^(0+128),w	;volatile
  7807  0A3D                     u308_25:	
  7808  0A3D  1C03               	skipc
  7809  0A3E  2A4C               	goto	i1l3275
  7810                           
  7811                           ;WDT.c: 47: _delay((unsigned long)((500)*(10000000/4000.0)));
  7812  0A3F  3007               	movlw	7
  7813  0A40  00F9               	movwf	??_InterReceiver+2
  7814  0A41  3058               	movlw	88
  7815  0A42  00F8               	movwf	??_InterReceiver+1
  7816  0A43  3059               	movlw	89
  7817  0A44  00F7               	movwf	??_InterReceiver
  7818  0A45                     u381_27:	
  7819  0A45  0BF7               	decfsz	??_InterReceiver,f
  7820  0A46  2A45               	goto	u381_27
  7821  0A47  0BF8               	decfsz	??_InterReceiver+1,f
  7822  0A48  2A45               	goto	u381_27
  7823  0A49  0BF9               	decfsz	??_InterReceiver+2,f
  7824  0A4A  2A45               	goto	u381_27
  7825  0A4B  2A4C               	nop2
  7826  0A4C                     i1l3275:	
  7827                           
  7828                           ;WDT.c: 48: }
  7829                           ;WDT.c: 49: }
  7830                           ;WDT.c: 51: PIR1bits.TMR1IF = 0;
  7831  0A4C  1283               	bcf	3,5	;RP0=0, select bank0
  7832  0A4D  1303               	bcf	3,6	;RP1=0, select bank0
  7833  0A4E  100C               	bcf	12,0	;volatile
  7834  0A4F                     i1l517:	
  7835  0A4F  087D               	movf	??_InterReceiver+6,w
  7836  0A50  00FF               	movwf	127
  7837  0A51  087C               	movf	??_InterReceiver+5,w
  7838  0A52  008A               	movwf	10
  7839  0A53  087B               	movf	??_InterReceiver+4,w
  7840  0A54  0084               	movwf	4
  7841  0A55  0E7A               	swapf	(??_InterReceiver+3)^(0+-128),w
  7842  0A56  0083               	movwf	3
  7843  0A57  0EFE               	swapf	126,f
  7844  0A58  0E7E               	swapf	126,w
  7845  0A59  0009               	retfie
  7846  0A5A                     __end_of_InterReceiver:	
  7847  007E                     btemp	set	126	;btemp
  7848  007E                     wtemp0	set	126
  7849                           
  7850                           	psect	intentry
  7851  0004                     __pintentry:	
  7852                           ;incstack = 0
  7853                           ; Regs used in _InterReceiver: [wreg+status,2+btemp+1]
  7854                           
  7855  0004                     interrupt_function:	
  7856  007E                     saved_w	set	btemp
  7857  0004  00FE               	movwf	btemp
  7858  0005  0E03               	swapf	3,w
  7859  0006  00FA               	movwf	??_InterReceiver+3
  7860  0007  0804               	movf	4,w
  7861  0008  00FB               	movwf	??_InterReceiver+4
  7862  0009  080A               	movf	10,w
  7863  000A  00FC               	movwf	??_InterReceiver+5
  7864  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7865  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7866  000D  087F               	movf	btemp+1,w
  7867  000E  00FD               	movwf	??_InterReceiver+6
  7868  000F  120A  158A  2A12   	ljmp	_InterReceiver


Data Sizes:
    Strings     14
    Constant    2
    Data        36
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     79      80
    BANK1            80     40      80
    BANK3            96      0      66
    BANK2            96      0       0

Pointer List with Targets:

    FMRX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), ResetFreq@FMRX_Nprg(BANK1[10]), 

    CWTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), ResetFreq@CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), ResetFreq@FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), ResetFreq@FMRX_Nprg(BANK1[10]), ResetFreq@CWTX_Nprg(BANK1[10]), ResetFreq@FMTX_Nprg(BANK1[10]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _InterReceiver in COMMON

    None.

Critical Paths under _main in BANK0

    _TXOBC_waddress->_putch
    _ResetFreq->_CWTX
    _ResetFreq->_FMRX
    _ResetFreq->_FMTX
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _EEPROM_Write->_I2C_Master_Write

Critical Paths under _InterReceiver in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_ResetFreq

Critical Paths under _InterReceiver in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _InterReceiver in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterReceiver in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   40378
                                             34 BANK1      6     6      0
                       _EEPROM_Write
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                           _Init_WDT
                        _NM_waddress
                 _ReceivePacket_data
                          _ResetFreq
                          _Reset_EPS
                     _TXOBC_waddress
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     254
                                              1 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ResetFreq                                           34    34      0   35901
                                              0 BANK1     34    34      0
                               _CWTX
                               _FMRX
                               _FMTX
 ---------------------------------------------------------------------------------
 (2) _FMTX                                                 6     2      4   11882
                                             73 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _FMRX                                                 6     2      4   11882
                                             73 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _CWTX                                                 6     2      4   11882
                                             73 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (3) _RFDOUT                                              37    33      4    3953
                                              9 BANK0     37    33      4
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) _OUTFQ                                               64    60      4    4839
                                              9 BANK0     64    60      4
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     830
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _OPINIT                                               2     0      2    2672
                                              4 BANK0      2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (4) _STBOUT                                               2     0      2     356
                                              2 BANK0      2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) _L_OUT                                                2     0      2    1006
                                              2 BANK0      2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) _H_OUT                                                2     0      2     681
                                              2 BANK0      2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (5) __NOP                                                 2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             39 BANK0      6     6      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 BANK0     33    33      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 BANK0      9     9      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     254
                                              1 BANK0      3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_WDT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                             14 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     678
                                              2 BANK0      8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     291
                                              0 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterReceiver                                        7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _Init_WDT
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _ResetFreq
     _CWTX
       _OPINIT
         _H_OUT
           __NOP
         _L_OUT
           __NOP
         _STBOUT
           __NOP
       _OUTFQ
         _H_OUT
           __NOP
         _L_OUT
           __NOP
         _STBOUT
           __NOP
         ___awdiv
       _RFDOUT
         _H_OUT
           __NOP
         _L_OUT
           __NOP
         _STBOUT
           __NOP
         ___awdiv
     _FMRX
       _OPINIT
         _H_OUT
           __NOP
         _L_OUT
           __NOP
         _STBOUT
           __NOP
       _OUTFQ
         _H_OUT
           __NOP
         _L_OUT
           __NOP
         _STBOUT
           __NOP
         ___awdiv
       _RFDOUT
         _H_OUT
           __NOP
         _L_OUT
           __NOP
         _STBOUT
           __NOP
         ___awdiv
     _FMTX
       _OPINIT
         _H_OUT
           __NOP
         _L_OUT
           __NOP
         _STBOUT
           __NOP
       _OUTFQ
         _H_OUT
           __NOP
         _L_OUT
           __NOP
         _STBOUT
           __NOP
         ___awdiv
       _RFDOUT
         _H_OUT
           __NOP
         _L_OUT
           __NOP
         _STBOUT
           __NOP
         ___awdiv
   _Reset_EPS
   _TXOBC_waddress
     _putch

 _InterReceiver (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      42       9       68.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     28      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4F      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      F0      12        0.0%
ABS                  0      0      F0       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 23 18:03:24 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l55 17E2  
                  ___awdiv@sign 0026                              fsr 0004                             l310 0FDC  
                           l171 027D                             l236 0DCD                             l309 0FF1  
                           l355 0800                             _RA1 0029                             _RB2 0032  
                           _RB4 0034                             _RB5 0035                             _RC5 003D  
                           _PEN 048A                    __CFG_CPD$OFF 0000                             _SEN 0488  
                           _RX9 00C6                             _TX9 04C6                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                    __CFG_LVP$OFF 0000  
                          l3023 0C49                            l2243 0B13                            l3029 0C71  
                          l3037 0C77                            l2261 0B3F                            l2253 0B1B  
                          l2237 0B08                            l2255 0B29                            l2505 0125  
                          l2265 0B4A                            l2291 0AF7                            l2531 017B  
                          l2515 0140                            l2451 0075                            l2443 004D  
                          l3307 09FD                            l3411 05BB                            l2621 0286  
                          l2541 0196                            l2461 0090                            l2445 006C  
                          l2269 0B52                            l3421 062A                            l2711 0399  
                          l2631 02A1                            l2519 014D                            l2615 027B  
                          l3327 09A5                            l2289 0AEA                            l2545 01A3  
                          l2465 009D                            l3337 09BB                            l3425 06B1  
                          l3409 057E                            l3433 06D5                            l2723 03C7  
                          l2707 038C                            l2635 02AE                            l2571 01F9  
                          l3363 08C7                            l3355 08B9                            l3443 06FE  
                          l3451 072B                            l3419 0623                            l2733 03E2  
                          l2645 02C5                            l2557 01D1                            l2493 00F7  
                          l3429 06C2                            l3381 04DB                            l2823 0BE0  
                          l2671 031B                            l2807 04C7                            l2655 02E0  
                          l2583 0227                            l2567 01EC                            l2479 00CF  
                          l3447 0718                            l3439 06E4                            l3471 0E22  
                          l3641 0CD5                            l2833 0BFC                            l2825 0BE3  
                          l2737 03EF                            l2681 0336                            l2593 0242  
                          l2489 00EA                            l2809 0046                            l3297 09E7  
                          l3393 0506                            l3465 0E13                            l2931 0B69  
                          l2843 0BC0                            l2763 0445                            l2659 02ED  
                          l3387 04F7                            l3459 0DF7                            l2941 0BA1  
                          l2933 0B79                            l2829 0BF1                            l2749 041D  
                          l2685 0343                            l2597 024F                            l3493 0E9C  
                          l3485 0E68                            l3639 0CB5                            l2863 0DB2  
                          l2871 0D74                            l2775 0473                            l2759 0438  
                          l3399 0515                            l3479 0E59                            l2945 0BAE  
                          l2857 0D95                            l2785 048E                            l2697 0371  
                          l3489 0E82                            l3497 0EAF                            l3737 0F15  
                          l2883 0DE5                            l3763 0F8E                            l2869 0DC6  
                          l2789 049B                            l3757 0F7D                            l3775 0FC4  
                          STR_1 100F                    __CFG_WDTE$ON 0000                            STR_2 100F  
                          STR_3 100F                            STR_4 100F                            STR_5 100F  
                          STR_6 100F                            STR_7 1008                            STR_8 1008  
                          STR_9 1008                            _BRGH 04C2                            _CREN 00C4  
                          _FERR 00C2                            u2305 020E                            u2225 0162  
                          u2145 00B6                            u2415 0302                            u2345 0264  
                          u2265 01B8                            u2185 010C                            u3305 06C0  
                          u3225 04D9                            u3315 06D3                            u3235 04F5  
                          u3325 06E2                            u3245 0504                            u3405 0E66  
                          u1815 0ADB                            u2615 04B0                            u2535 0404  
                          u2455 0358                            u3095 07F1                            u1735 0B1E  
                          u3255 0513                            _FMRX 0900                            u3450 0CF3  
                          u2715 0D82                            u1755 0B2A                            u3355 0729  
                          u3435 0EAD                            u3460 0D08                            _FMTX 092C  
                          u2805 0BA2                            u1765 0B36                            u3365 0DF5  
                          u3470 0D1D                            u2575 045A                            u2495 03AE  
                          u1775 0B40                            u3375 0E11                            u3385 0E20  
                          u2835 0C47                            u3395 0E57                            u3707 0FA9  
                          u2765 0B6D                            u2845 0C6F                            u3717 0FBD  
                          u3807 0CE2                            u2855 096A                            u3727 0FE7  
                          u2785 0B7B                            u3737 0FF9                            u3657 0ED7  
                          u2795 0B90                            u3747 0A64                            u3667 0F06  
                          _RCIE 0465                            _RCEN 048B                            _RCIF 0065  
                          _CWTX 08D4                            u3757 0A77                            u3677 0F2A  
                          u3767 0A8A                            u3687 0F4B                            u3777 0A9D  
                          u3697 0F96                            u3787 0844                            u3797 0AE1  
                          _OERR 00C1                            _TMR1 000E                            _SPEN 00C7  
                          _RSEN 0489                            _SREN 00C5                            _TXIE 0464  
                          _TXEN 04C5                            _TXIF 0064                            _SYNC 04C4  
                          __NOP 07E4  TXOBC_waddress@TXOBC_wad_header 0025                    __CFG_WRT$OFF 0000  
                          _main 0ECF                     _NM_waddress 0820                   ??_Init_SERIAL 0020  
                          btemp 007E                   __CFG_BOREN$ON 0000                    getbit@oldbit 00EE  
                   Init_I2C_M@c 002E                            start 0012    ReceivePacket_data@fcschecker 0049  
                 __CFG_IESO$OFF 0000                   __CFG_MCLRE$ON 0000            __end_of_EEPROM_Write 0CE9  
                         ?_FMRX 0069                           ?_FMTX 0069                           ?_CWTX 0069  
              ?_I2C_Master_Wait 0077                ?_I2C_Master_Stop 0077                           ?__NOP 0077  
                         ?_main 0077                           _ACKEN 048C                           _ACKDT 048D  
               __end_of___awdiv 0B57                           STR_10 1008                           STR_11 1008  
                         STR_12 1008                           _ANSEL 0188                 __end_of___lldiv 0BB7  
               ___awdiv@divisor 0020         __size_of_TXOBC_waddress 004C                           i1l517 0A4F  
               ___awdiv@counter 0025                           _RCREG 001A                           _SPBRG 0099  
                         _PORTA 0005                           _PORTB 0006                           _PORTC 0007  
                         _PORTD 0008                           _PORTE 0009                           _H_OUT 098E  
                         _OUTFQ 04CA                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _L_OUT 09D0                           _TXREG 0019                   __CFG_PWRTE$ON 0000  
                __CFG_FCMEN$OFF 0000                           _dData 01C2                 __end_of_getdata 0C18  
                 getdata@dstuff 002A                           _putch 17DF                           pclath 000A  
                         status 0003                           wtemp0 007E          __size_of_InterReceiver 0048  
                    _Init_I2C_M 0958                EEPROM_Write@data 0024      __end_of_ReceivePacket_data 0C7D  
                  __end_of_FMRX 092C                    __end_of_FMTX 0958                    __end_of_CWTX 0900  
                  __end_of__NOP 07FD                 __initialization 0015                    __end_of_main 1000  
           __end_of_Init_SERIAL 0869                __end_of_Init_MPU 0886                __end_of_Init_WDT 0820  
                        ??_FMRX 006D                          ??_FMTX 006D                          ??_CWTX 006D  
                        ??__NOP 0020                          ??_main 00C2                          ?_H_OUT 0022  
      EEPROM_Write@high_address 0022                          ?_OUTFQ 0029                          ?_L_OUT 0022  
             ?_I2C_Master_Start 0077               ?_I2C_Master_Write 0020                          OUTFQ@i 0063  
            ??_I2C_Master_Start 0020                          OUTFQ@j 0067              ??_I2C_Master_Write 0022  
              ___awdiv@dividend 0022                          ?_putch 0077                          _ANSELH 0189  
                        i1l3275 0A4C                          u307_25 0A27                          u308_25 0A3D  
                        _RFDOUT 0DE8                          u381_27 0A45                          _OPINIT 074B  
                        _SSPADD 0093                          _STBOUT 08AA                          _STATUS 0003  
                        _SSPCON 0014                          _SSPBUF 0013                          __NOP@i 0020  
              __end_of_fcscheck 0DE8                       ??___awdiv 0024                          _dfcshi 006F  
                     ??___lldiv 0028                          _dfcslo 0076                          _getbit 0AA6  
            __size_of_Reset_EPS 0018              __size_of_ResetFreq 007D                ___awdiv@quotient 0027  
                    _dPacketnum 0072                       ??_getdata 0026                   _InterReceiver 0A12  
                   RFDOUT@i_342 0048                     RFDOUT@i_343 004C                __end_of_waitFlag 04CA  
                        saved_w 007E      EEPROM_Write@EEPROM_address 0028         __end_of__initialization 003A  
       EEPROM_Write@low_address 0023                     ?_Init_I2C_M 002E                     _Init_SERIAL 0850  
         __size_of_EEPROM_Write 006C                   __end_of_H_OUT 09D0                   __end_of_OUTFQ 074B  
                 __end_of_L_OUT 0A12                   L_OUT@fmcwtxrx 0022                  __pcstackCOMMON 0077  
                  __pidataBANK1 0886                   __end_of_putch 17E7                  ?_InterReceiver 0077  
                _TXOBC_waddress 0A5A                         ??_H_OUT 0024                         ??_OUTFQ 002D  
                _OPTION_REGbits 0081                         ??_L_OUT 0024                         ??_putch 0020  
                  _EEPROM_Write 0C7D                      __pbssBANK0 006F                      __pbssBANK1 00EC  
                    __pbssBANK3 0190               __end_of_Reset_EPS 0850               __end_of_ResetFreq 0D66  
                     ?_Init_MPU 0077                         ?_RFDOUT 0029                       ?_Init_WDT 0077  
                       ?_OPINIT 0024                    ?_NM_waddress 0021                         ?_STBOUT 0022  
                       RFDOUT@i 004A                      __pmaintext 0ECF                      __pintentry 0004  
                       ?_getbit 0020          __end_of_TXOBC_waddress 0AA6     TXOBC_waddress@whigh_address 0021  
           __size_of_Init_I2C_M 0036                       OUTFQ@Nprg 002B                       ?_fcscheck 0020  
                       _SSPCON2 0091                         _SSPSTAT 0094                      __stringtab 1000  
                    ??_Init_MPU 0020                      ??_Init_WDT 0020                 __size_of_RFDOUT 00E7  
               __size_of_OPINIT 0099                 __size_of_STBOUT 002A                       ?_waitFlag 0077  
                       _dPacket 0190                         ___awdiv 0AFC                         ___lldiv 0B57  
               ??_InterReceiver 0077                 __size_of_getbit 0056                     waitFlag@buf 0046  
               ?_TXOBC_waddress 0021                         __ptext1 0A5A                         __ptext2 0838  
                       __ptext3 0CE9                         __ptext4 092C                         __ptext5 0900  
                       __ptext6 08D4                         __ptext7 0DE8                         __ptext8 04CA  
                       __ptext9 0AFC                         _getdata 0BB7              _ReceivePacket_data 0C18  
                     _T1CONbits 0010        __size_of_I2C_Master_Wait 0009        __size_of_I2C_Master_Stop 0007  
                    ??_fcscheck 0022             ?_ReceivePacket_data 0077                         getbit@i 0024  
                       clrloop0 17E8            end_of_initialization 003A                    RFDOUT@Nref_b 0030  
                     _FMRX_Nref 00E6                       _FMTX_Nref 00EA                       _CWTX_Nref 00E8  
                   OUTFQ@Nprg_b 003D       __size_of_I2C_Master_Start 0007       __size_of_I2C_Master_Write 0008  
               ___lldiv@divisor 0020                 ___lldiv@counter 002D                      ??_waitFlag 0026  
          ??_ReceivePacket_data 0047                      fcscheck@bt 0024                  OPINIT@fmcwtxrx 0024  
     InterReceiver@intr_counter 0070                       _PORTAbits 0005                       _PORTDbits 0008  
                     _PORTEbits 0009     InterReceiver@intr_counter_H 00EC                      getdata@buf 002E  
                  ??_Init_I2C_M 0032                    ?_Init_SERIAL 0077                  __end_of_RFDOUT 0ECF  
                __end_of_OPINIT 07E4                  __end_of_STBOUT 08D4            __size_of_NM_waddress 0018  
                ResetFreq@F1704 00DC                  ResetFreq@F1706 00D2                  ResetFreq@F1708 00C8  
                __end_of_getbit 0AFC      TXOBC_waddress@wlow_address 0022             start_initialization 0015  
            __end_of_Init_I2C_M 098E                        ??_RFDOUT 002D                        ??_OPINIT 0026  
             ??_I2C_Master_Wait 0020               ??_I2C_Master_Stop 0020                        ??_STBOUT 0024  
             __size_of_Init_MPU 001D               __size_of_Init_WDT 0017                       _Reset_EPS 0838  
                     _ResetFreq 0CE9               getdata@dbitstatus 002C                      init_fetch0 17EF  
                      ??_getbit 0022                     __pdataBANK1 00C8                      RFDOUT@Nref 002B  
            ResetFreq@FMRX_Nprg 00B8              ResetFreq@FMTX_Nprg 00A4             __end_of_commandSize 1008  
            ResetFreq@CWTX_Nprg 00AE        NM_waddress@whigh_address 0021                     __pbssCOMMON 0070  
                     ___latbits 0002                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                      FMRX@Nref 0069                        FMRX@Nprg 006B                        FMTX@Nref 0069  
                      FMTX@Nprg 006B                        FMRX@fmrx 006D                        FMTX@fmtx 006D  
                      CWTX@Nref 0069                        CWTX@Nprg 006B               __size_of_fcscheck 0082  
                 waitFlag@j_101 002E                   waitFlag@j_110 0038                   waitFlag@j_103 0030  
                 waitFlag@j_120 0042                   waitFlag@j_112 003A                   waitFlag@j_105 0032  
                 waitFlag@j_114 003C                   waitFlag@j_107 0034                   waitFlag@j_116 003E  
                 waitFlag@j_109 0036                   waitFlag@j_118 0040                        CWTX@cwtx 006D  
              _I2C_Master_Start 17C9                      ?_Reset_EPS 0077                _I2C_Master_Write 17D7  
                    ?_ResetFreq 0077                ??_TXOBC_waddress 0023         getdata@bufstore_counter 0028  
                      ?___awdiv 0020                        ?___lldiv 0020               __size_of_waitFlag 048C  
                     __pstrings 1000                        ?_getdata 0077                  __size_of_H_OUT 0042  
                __size_of_OUTFQ 0281                  __size_of_L_OUT 0042                  __size_of_putch 0008  
             interrupt_function 0004                   H_OUT@fmcwtxrx 0022                       clear_ram0 17E7  
                      _PIE1bits 008C                      OUTFQ@i_331 005F                      OUTFQ@i_333 0065  
                     _rcv_state 0074            __size_of_Init_SERIAL 0019                        _PIR1bits 000C  
                    OUTFQ@count 0061                     _commandSize 1006                       fcscheck@i 0025  
         __end_of_InterReceiver 0A5A                     __stringbase 1005                       main@dData 00C7  
                      _Init_MPU 0869                        _Init_WDT 0809                     ??_Reset_EPS 0020  
                   ??_ResetFreq 00A0                   fcscheck@i_132 0027     __size_of_ReceivePacket_data 0065  
              __size_of___awdiv 005B                __size_of___lldiv 0060              __end_of__stringtab 1006  
              __size_of_getdata 0061                 _I2C_Master_Wait 0800                 _I2C_Master_Stop 17D0  
                RFDOUT@fmcwtxrx 0029                        _fcscheck 0D66                        __ptext10 074B  
                      __ptext11 08AA                        __ptext20 0820                        __ptext12 09D0  
                      __ptext21 17DF                        __ptext13 098E                        __ptext30 17C9  
                      __ptext22 0809                        __ptext14 07E4                        __ptext31 0800  
                      __ptext23 0850                        __ptext15 0C18                        __ptext32 0A12  
                      __ptext24 0869                        __ptext16 003E                        __ptext25 0958  
                      __ptext17 0BB7                        __ptext26 0B57                        __ptext18 0AA6  
                      __ptext27 0C7D                        __ptext19 0D66                        __ptext28 17D7  
                      __ptext29 17D0               __CFG_BOR4V$BOR21V 0000                   ?_EEPROM_Write 0022  
                 __size_of_FMRX 002C                   __size_of_FMTX 002C                   __size_of_CWTX 002C  
                 __size_of__NOP 0019                   ??_NM_waddress 0023                       waitFlag@i 002A  
                     waitFlag@j 002C                   __size_of_main 0131                  STBOUT@fmcwtxrx 0022  
                      _waitFlag 003E        NM_waddress@NM_wad_header 0023                   OUTFQ@fmcwtxrx 0029  
      __end_of_I2C_Master_Start 17D0                       putch@byte 0020        __end_of_I2C_Master_Write 17DF  
                    _INTCONbits 000B                        init_ram0 17F3                    fcscheck@byte 0029  
                ??_EEPROM_Write 0025              waitFlag@flag_judge 0044                        intlevel1 0000  
              ___lldiv@dividend 0024                       stringcode 1000               main@NM_wad_header 00C6  
           __end_of_NM_waddress 0838         __end_of_I2C_Master_Wait 0809         __end_of_I2C_Master_Stop 17D7  
              ___lldiv@quotient 0029               I2C_Master_Write@d 0020             EEPROM_Write@Address 0029  
                      stringdir 1000                        stringtab 1000             ReceivePacket_data@i 004B  
       NM_waddress@wlow_address 0022            main@TXOBC_wad_header 00C5  
