

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 23 19:51:27 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	intentry,global,class=CODE,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16F887 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  0008                     	;# 
    95  0009                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  000D                     	;# 
   100  000E                     	;# 
   101  000E                     	;# 
   102  000F                     	;# 
   103  0010                     	;# 
   104  0011                     	;# 
   105  0012                     	;# 
   106  0013                     	;# 
   107  0014                     	;# 
   108  0015                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0017                     	;# 
   112  0018                     	;# 
   113  0019                     	;# 
   114  001A                     	;# 
   115  001B                     	;# 
   116  001B                     	;# 
   117  001C                     	;# 
   118  001D                     	;# 
   119  001E                     	;# 
   120  001F                     	;# 
   121  0081                     	;# 
   122  0085                     	;# 
   123  0086                     	;# 
   124  0087                     	;# 
   125  0088                     	;# 
   126  0089                     	;# 
   127  008C                     	;# 
   128  008D                     	;# 
   129  008E                     	;# 
   130  008F                     	;# 
   131  0090                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0093                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0095                     	;# 
   139  0096                     	;# 
   140  0097                     	;# 
   141  0098                     	;# 
   142  0099                     	;# 
   143  009A                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  009F                     	;# 
   149  0105                     	;# 
   150  0107                     	;# 
   151  0108                     	;# 
   152  0109                     	;# 
   153  010C                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  0185                     	;# 
   159  0187                     	;# 
   160  0188                     	;# 
   161  0189                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  000E                     	;# 
   180  000F                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0013                     	;# 
   185  0014                     	;# 
   186  0015                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  0081                     	;# 
   200  0085                     	;# 
   201  0086                     	;# 
   202  0087                     	;# 
   203  0088                     	;# 
   204  0089                     	;# 
   205  008C                     	;# 
   206  008D                     	;# 
   207  008E                     	;# 
   208  008F                     	;# 
   209  0090                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0093                     	;# 
   213  0093                     	;# 
   214  0093                     	;# 
   215  0094                     	;# 
   216  0095                     	;# 
   217  0096                     	;# 
   218  0097                     	;# 
   219  0098                     	;# 
   220  0099                     	;# 
   221  009A                     	;# 
   222  009B                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  009F                     	;# 
   227  0105                     	;# 
   228  0107                     	;# 
   229  0108                     	;# 
   230  0109                     	;# 
   231  010C                     	;# 
   232  010C                     	;# 
   233  010D                     	;# 
   234  010E                     	;# 
   235  010F                     	;# 
   236  0185                     	;# 
   237  0187                     	;# 
   238  0188                     	;# 
   239  0189                     	;# 
   240  018C                     	;# 
   241  018D                     	;# 
   242  0000                     	;# 
   243  0001                     	;# 
   244  0002                     	;# 
   245  0003                     	;# 
   246  0004                     	;# 
   247  0005                     	;# 
   248  0006                     	;# 
   249  0007                     	;# 
   250  0008                     	;# 
   251  0009                     	;# 
   252  000A                     	;# 
   253  000B                     	;# 
   254  000C                     	;# 
   255  000D                     	;# 
   256  000E                     	;# 
   257  000E                     	;# 
   258  000F                     	;# 
   259  0010                     	;# 
   260  0011                     	;# 
   261  0012                     	;# 
   262  0013                     	;# 
   263  0014                     	;# 
   264  0015                     	;# 
   265  0015                     	;# 
   266  0016                     	;# 
   267  0017                     	;# 
   268  0018                     	;# 
   269  0019                     	;# 
   270  001A                     	;# 
   271  001B                     	;# 
   272  001B                     	;# 
   273  001C                     	;# 
   274  001D                     	;# 
   275  001E                     	;# 
   276  001F                     	;# 
   277  0081                     	;# 
   278  0085                     	;# 
   279  0086                     	;# 
   280  0087                     	;# 
   281  0088                     	;# 
   282  0089                     	;# 
   283  008C                     	;# 
   284  008D                     	;# 
   285  008E                     	;# 
   286  008F                     	;# 
   287  0090                     	;# 
   288  0091                     	;# 
   289  0092                     	;# 
   290  0093                     	;# 
   291  0093                     	;# 
   292  0093                     	;# 
   293  0094                     	;# 
   294  0095                     	;# 
   295  0096                     	;# 
   296  0097                     	;# 
   297  0098                     	;# 
   298  0099                     	;# 
   299  009A                     	;# 
   300  009B                     	;# 
   301  009C                     	;# 
   302  009D                     	;# 
   303  009E                     	;# 
   304  009F                     	;# 
   305  0105                     	;# 
   306  0107                     	;# 
   307  0108                     	;# 
   308  0109                     	;# 
   309  010C                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  010F                     	;# 
   314  0185                     	;# 
   315  0187                     	;# 
   316  0188                     	;# 
   317  0189                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320  0000                     	;# 
   321  0001                     	;# 
   322  0002                     	;# 
   323  0003                     	;# 
   324  0004                     	;# 
   325  0005                     	;# 
   326  0006                     	;# 
   327  0007                     	;# 
   328  0008                     	;# 
   329  0009                     	;# 
   330  000A                     	;# 
   331  000B                     	;# 
   332  000C                     	;# 
   333  000D                     	;# 
   334  000E                     	;# 
   335  000E                     	;# 
   336  000F                     	;# 
   337  0010                     	;# 
   338  0011                     	;# 
   339  0012                     	;# 
   340  0013                     	;# 
   341  0014                     	;# 
   342  0015                     	;# 
   343  0015                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001B                     	;# 
   351  001C                     	;# 
   352  001D                     	;# 
   353  001E                     	;# 
   354  001F                     	;# 
   355  0081                     	;# 
   356  0085                     	;# 
   357  0086                     	;# 
   358  0087                     	;# 
   359  0088                     	;# 
   360  0089                     	;# 
   361  008C                     	;# 
   362  008D                     	;# 
   363  008E                     	;# 
   364  008F                     	;# 
   365  0090                     	;# 
   366  0091                     	;# 
   367  0092                     	;# 
   368  0093                     	;# 
   369  0093                     	;# 
   370  0093                     	;# 
   371  0094                     	;# 
   372  0095                     	;# 
   373  0096                     	;# 
   374  0097                     	;# 
   375  0098                     	;# 
   376  0099                     	;# 
   377  009A                     	;# 
   378  009B                     	;# 
   379  009C                     	;# 
   380  009D                     	;# 
   381  009E                     	;# 
   382  009F                     	;# 
   383  0105                     	;# 
   384  0107                     	;# 
   385  0108                     	;# 
   386  0109                     	;# 
   387  010C                     	;# 
   388  010C                     	;# 
   389  010D                     	;# 
   390  010E                     	;# 
   391  010F                     	;# 
   392  0185                     	;# 
   393  0187                     	;# 
   394  0188                     	;# 
   395  0189                     	;# 
   396  018C                     	;# 
   397  018D                     	;# 
   398  0000                     	;# 
   399  0001                     	;# 
   400  0002                     	;# 
   401  0003                     	;# 
   402  0004                     	;# 
   403  0005                     	;# 
   404  0006                     	;# 
   405  0007                     	;# 
   406  0008                     	;# 
   407  0009                     	;# 
   408  000A                     	;# 
   409  000B                     	;# 
   410  000C                     	;# 
   411  000D                     	;# 
   412  000E                     	;# 
   413  000E                     	;# 
   414  000F                     	;# 
   415  0010                     	;# 
   416  0011                     	;# 
   417  0012                     	;# 
   418  0013                     	;# 
   419  0014                     	;# 
   420  0015                     	;# 
   421  0015                     	;# 
   422  0016                     	;# 
   423  0017                     	;# 
   424  0018                     	;# 
   425  0019                     	;# 
   426  001A                     	;# 
   427  001B                     	;# 
   428  001B                     	;# 
   429  001C                     	;# 
   430  001D                     	;# 
   431  001E                     	;# 
   432  001F                     	;# 
   433  0081                     	;# 
   434  0085                     	;# 
   435  0086                     	;# 
   436  0087                     	;# 
   437  0088                     	;# 
   438  0089                     	;# 
   439  008C                     	;# 
   440  008D                     	;# 
   441  008E                     	;# 
   442  008F                     	;# 
   443  0090                     	;# 
   444  0091                     	;# 
   445  0092                     	;# 
   446  0093                     	;# 
   447  0093                     	;# 
   448  0093                     	;# 
   449  0094                     	;# 
   450  0095                     	;# 
   451  0096                     	;# 
   452  0097                     	;# 
   453  0098                     	;# 
   454  0099                     	;# 
   455  009A                     	;# 
   456  009B                     	;# 
   457  009C                     	;# 
   458  009D                     	;# 
   459  009E                     	;# 
   460  009F                     	;# 
   461  0105                     	;# 
   462  0107                     	;# 
   463  0108                     	;# 
   464  0109                     	;# 
   465  010C                     	;# 
   466  010C                     	;# 
   467  010D                     	;# 
   468  010E                     	;# 
   469  010F                     	;# 
   470  0185                     	;# 
   471  0187                     	;# 
   472  0188                     	;# 
   473  0189                     	;# 
   474  018C                     	;# 
   475  018D                     	;# 
   476  0000                     	;# 
   477  0001                     	;# 
   478  0002                     	;# 
   479  0003                     	;# 
   480  0004                     	;# 
   481  0005                     	;# 
   482  0006                     	;# 
   483  0007                     	;# 
   484  0008                     	;# 
   485  0009                     	;# 
   486  000A                     	;# 
   487  000B                     	;# 
   488  000C                     	;# 
   489  000D                     	;# 
   490  000E                     	;# 
   491  000E                     	;# 
   492  000F                     	;# 
   493  0010                     	;# 
   494  0011                     	;# 
   495  0012                     	;# 
   496  0013                     	;# 
   497  0014                     	;# 
   498  0015                     	;# 
   499  0015                     	;# 
   500  0016                     	;# 
   501  0017                     	;# 
   502  0018                     	;# 
   503  0019                     	;# 
   504  001A                     	;# 
   505  001B                     	;# 
   506  001B                     	;# 
   507  001C                     	;# 
   508  001D                     	;# 
   509  001E                     	;# 
   510  001F                     	;# 
   511  0081                     	;# 
   512  0085                     	;# 
   513  0086                     	;# 
   514  0087                     	;# 
   515  0088                     	;# 
   516  0089                     	;# 
   517  008C                     	;# 
   518  008D                     	;# 
   519  008E                     	;# 
   520  008F                     	;# 
   521  0090                     	;# 
   522  0091                     	;# 
   523  0092                     	;# 
   524  0093                     	;# 
   525  0093                     	;# 
   526  0093                     	;# 
   527  0094                     	;# 
   528  0095                     	;# 
   529  0096                     	;# 
   530  0097                     	;# 
   531  0098                     	;# 
   532  0099                     	;# 
   533  009A                     	;# 
   534  009B                     	;# 
   535  009C                     	;# 
   536  009D                     	;# 
   537  009E                     	;# 
   538  009F                     	;# 
   539  0105                     	;# 
   540  0107                     	;# 
   541  0108                     	;# 
   542  0109                     	;# 
   543  010C                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  010F                     	;# 
   548  0185                     	;# 
   549  0187                     	;# 
   550  0188                     	;# 
   551  0189                     	;# 
   552  018C                     	;# 
   553  018D                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000D                     	;# 
   568  000E                     	;# 
   569  000E                     	;# 
   570  000F                     	;# 
   571  0010                     	;# 
   572  0011                     	;# 
   573  0012                     	;# 
   574  0013                     	;# 
   575  0014                     	;# 
   576  0015                     	;# 
   577  0015                     	;# 
   578  0016                     	;# 
   579  0017                     	;# 
   580  0018                     	;# 
   581  0019                     	;# 
   582  001A                     	;# 
   583  001B                     	;# 
   584  001B                     	;# 
   585  001C                     	;# 
   586  001D                     	;# 
   587  001E                     	;# 
   588  001F                     	;# 
   589  0081                     	;# 
   590  0085                     	;# 
   591  0086                     	;# 
   592  0087                     	;# 
   593  0088                     	;# 
   594  0089                     	;# 
   595  008C                     	;# 
   596  008D                     	;# 
   597  008E                     	;# 
   598  008F                     	;# 
   599  0090                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0093                     	;# 
   603  0093                     	;# 
   604  0093                     	;# 
   605  0094                     	;# 
   606  0095                     	;# 
   607  0096                     	;# 
   608  0097                     	;# 
   609  0098                     	;# 
   610  0099                     	;# 
   611  009A                     	;# 
   612  009B                     	;# 
   613  009C                     	;# 
   614  009D                     	;# 
   615  009E                     	;# 
   616  009F                     	;# 
   617  0105                     	;# 
   618  0107                     	;# 
   619  0108                     	;# 
   620  0109                     	;# 
   621  010C                     	;# 
   622  010C                     	;# 
   623  010D                     	;# 
   624  010E                     	;# 
   625  010F                     	;# 
   626  0185                     	;# 
   627  0187                     	;# 
   628  0188                     	;# 
   629  0189                     	;# 
   630  018C                     	;# 
   631  018D                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0008                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  000E                     	;# 
   648  000F                     	;# 
   649  0010                     	;# 
   650  0011                     	;# 
   651  0012                     	;# 
   652  0013                     	;# 
   653  0014                     	;# 
   654  0015                     	;# 
   655  0015                     	;# 
   656  0016                     	;# 
   657  0017                     	;# 
   658  0018                     	;# 
   659  0019                     	;# 
   660  001A                     	;# 
   661  001B                     	;# 
   662  001B                     	;# 
   663  001C                     	;# 
   664  001D                     	;# 
   665  001E                     	;# 
   666  001F                     	;# 
   667  0081                     	;# 
   668  0085                     	;# 
   669  0086                     	;# 
   670  0087                     	;# 
   671  0088                     	;# 
   672  0089                     	;# 
   673  008C                     	;# 
   674  008D                     	;# 
   675  008E                     	;# 
   676  008F                     	;# 
   677  0090                     	;# 
   678  0091                     	;# 
   679  0092                     	;# 
   680  0093                     	;# 
   681  0093                     	;# 
   682  0093                     	;# 
   683  0094                     	;# 
   684  0095                     	;# 
   685  0096                     	;# 
   686  0097                     	;# 
   687  0098                     	;# 
   688  0099                     	;# 
   689  009A                     	;# 
   690  009B                     	;# 
   691  009C                     	;# 
   692  009D                     	;# 
   693  009E                     	;# 
   694  009F                     	;# 
   695  0105                     	;# 
   696  0107                     	;# 
   697  0108                     	;# 
   698  0109                     	;# 
   699  010C                     	;# 
   700  010C                     	;# 
   701  010D                     	;# 
   702  010E                     	;# 
   703  010F                     	;# 
   704  0185                     	;# 
   705  0187                     	;# 
   706  0188                     	;# 
   707  0189                     	;# 
   708  018C                     	;# 
   709  018D                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0008                     	;# 
   719  0009                     	;# 
   720  000A                     	;# 
   721  000B                     	;# 
   722  000C                     	;# 
   723  000D                     	;# 
   724  000E                     	;# 
   725  000E                     	;# 
   726  000F                     	;# 
   727  0010                     	;# 
   728  0011                     	;# 
   729  0012                     	;# 
   730  0013                     	;# 
   731  0014                     	;# 
   732  0015                     	;# 
   733  0015                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001B                     	;# 
   741  001C                     	;# 
   742  001D                     	;# 
   743  001E                     	;# 
   744  001F                     	;# 
   745  0081                     	;# 
   746  0085                     	;# 
   747  0086                     	;# 
   748  0087                     	;# 
   749  0088                     	;# 
   750  0089                     	;# 
   751  008C                     	;# 
   752  008D                     	;# 
   753  008E                     	;# 
   754  008F                     	;# 
   755  0090                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0093                     	;# 
   760  0093                     	;# 
   761  0094                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0097                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  009F                     	;# 
   773  0105                     	;# 
   774  0107                     	;# 
   775  0108                     	;# 
   776  0109                     	;# 
   777  010C                     	;# 
   778  010C                     	;# 
   779  010D                     	;# 
   780  010E                     	;# 
   781  010F                     	;# 
   782  0185                     	;# 
   783  0187                     	;# 
   784  0188                     	;# 
   785  0189                     	;# 
   786  018C                     	;# 
   787  018D                     	;# 
   788                           
   789                           	psect	idataBANK1
   790  09AA                     __pidataBANK1:	
   791                           
   792                           ;initializer for main@F1991
   793  09AA  3408               	retlw	8
   794  09AB  3400               	retlw	0
   795  09AC  3407               	retlw	7
   796  09AD  3400               	retlw	0
   797  09AE  3403               	retlw	3
   798  09AF  3400               	retlw	0
   799  09B0  3400               	retlw	0
   800  09B1  3400               	retlw	0
   801  09B2  3400               	retlw	0
   802  09B3  3400               	retlw	0
   803                           
   804                           ;initializer for _FMRX_Nref
   805  09B4  3400               	retlw	0
   806  09B5  340A               	retlw	10
   807                           
   808                           ;initializer for _CWTX_Nref
   809  09B6  34A0               	retlw	160
   810  09B7  3400               	retlw	0
   811                           
   812                           ;initializer for _FMTX_Nref
   813  09B8  3400               	retlw	0
   814  09B9  340A               	retlw	10
   815                           
   816                           ;initializer for _FMRX_Nprg
   817  09BA  3402               	retlw	2
   818  09BB  3400               	retlw	0
   819  09BC  3404               	retlw	4
   820  09BD  3400               	retlw	0
   821  09BE  3408               	retlw	8
   822  09BF  3400               	retlw	0
   823  09C0  3408               	retlw	8
   824  09C1  3400               	retlw	0
   825  09C2  3407               	retlw	7
   826  09C3  3400               	retlw	0
   827                           
   828                           ;initializer for _CWTX_Nprg
   829  09C4  3400               	retlw	0
   830  09C5  3400               	retlw	0
   831  09C6  3401               	retlw	1
   832  09C7  3400               	retlw	0
   833  09C8  3407               	retlw	7
   834  09C9  3400               	retlw	0
   835  09CA  3404               	retlw	4
   836  09CB  3400               	retlw	0
   837  09CC  3407               	retlw	7
   838  09CD  3400               	retlw	0
   839                           
   840                           ;initializer for _FMTX_Nprg
   841  09CE  3408               	retlw	8
   842  09CF  3400               	retlw	0
   843  09D0  3407               	retlw	7
   844  09D1  3400               	retlw	0
   845  09D2  3403               	retlw	3
   846  09D3  3400               	retlw	0
   847  09D4  3400               	retlw	0
   848  09D5  3400               	retlw	0
   849  09D6  3400               	retlw	0
   850  09D7  3400               	retlw	0
   851                           
   852                           	psect	idataBANK3
   853  0869                     __pidataBANK3:	
   854                           
   855                           ;initializer for main@F1995
   856  0869  3402               	retlw	2
   857  086A  3400               	retlw	0
   858  086B  3404               	retlw	4
   859  086C  3400               	retlw	0
   860  086D  3408               	retlw	8
   861  086E  3400               	retlw	0
   862  086F  3408               	retlw	8
   863  0870  3400               	retlw	0
   864  0871  3407               	retlw	7
   865  0872  3400               	retlw	0
   866                           
   867                           ;initializer for main@F1993
   868  0873  3400               	retlw	0
   869  0874  3400               	retlw	0
   870  0875  3401               	retlw	1
   871  0876  3400               	retlw	0
   872  0877  3407               	retlw	7
   873  0878  3400               	retlw	0
   874  0879  3404               	retlw	4
   875  087A  3400               	retlw	0
   876  087B  3407               	retlw	7
   877  087C  3400               	retlw	0
   878                           
   879                           	psect	strings
   880  0800                     __pstrings:	
   881  0800                     stringtab:	
   882  0800                     __stringtab:	
   883  0800                     stringcode:	
   884                           ;	String table - string pointers are 1 byte each
   885                           
   886  0800                     stringdir:	
   887  0800  3008               	movlw	high stringdir
   888  0801  008A               	movwf	10
   889  0802  0804               	movf	4,w
   890  0803  0A84               	incf	4,f
   891  0804  0782               	addwf	2,f
   892  0805                     __stringbase:	
   893  0805  3400               	retlw	0
   894  0806                     __end_of__stringtab:	
   895  0806                     _commandSize:	
   896  0806  3420               	retlw	32
   897  0807  3400               	retlw	0
   898  0808                     __end_of_commandSize:	
   899  000E                     _TMR1	set	14
   900  0010                     _T1CONbits	set	16
   901  000C                     _PIR1bits	set	12
   902  000B                     _INTCONbits	set	11
   903  0005                     _PORTAbits	set	5
   904  0008                     _PORTDbits	set	8
   905  0009                     _PORTEbits	set	9
   906  0013                     _SSPBUF	set	19
   907  0014                     _SSPCON	set	20
   908  0003                     _STATUS	set	3
   909  0009                     _PORTE	set	9
   910  0008                     _PORTD	set	8
   911  0007                     _PORTC	set	7
   912  0006                     _PORTB	set	6
   913  0005                     _PORTA	set	5
   914  0019                     _TXREG	set	25
   915  001A                     _RCREG	set	26
   916  0029                     _RA1	set	41
   917  0034                     _RB4	set	52
   918  0032                     _RB2	set	50
   919  0035                     _RB5	set	53
   920  003D                     _RC5	set	61
   921  0064                     _TXIF	set	100
   922  00C1                     _OERR	set	193
   923  00C2                     _FERR	set	194
   924  00C6                     _RX9	set	198
   925  0065                     _RCIF	set	101
   926  00C5                     _SREN	set	197
   927  00C4                     _CREN	set	196
   928  00C7                     _SPEN	set	199
   929  008C                     _PIE1bits	set	140
   930  0081                     _OPTION_REGbits	set	129
   931  0094                     _SSPSTAT	set	148
   932  0093                     _SSPADD	set	147
   933  0091                     _SSPCON2	set	145
   934  0089                     _TRISE	set	137
   935  0088                     _TRISD	set	136
   936  0087                     _TRISC	set	135
   937  0086                     _TRISB	set	134
   938  0085                     _TRISA	set	133
   939  0099                     _SPBRG	set	153
   940  048A                     _PEN	set	1162
   941  0488                     _SEN	set	1160
   942  04C5                     _TXEN	set	1221
   943  04C6                     _TX9	set	1222
   944  0465                     _RCIE	set	1125
   945  0464                     _TXIE	set	1124
   946  04C4                     _SYNC	set	1220
   947  04C2                     _BRGH	set	1218
   948  0189                     _ANSELH	set	393
   949  0188                     _ANSEL	set	392
   950  0808                     STR_7:	
   951  0808  344A               	retlw	74	;'J'
   952  0809  3451               	retlw	81	;'Q'
   953  080A  3431               	retlw	49	;'1'
   954  080B  345A               	retlw	90	;'Z'
   955  080C  3448               	retlw	72	;'H'
   956  080D  3458               	retlw	88	;'X'
   957  080E  3400               	retlw	0
   958  080F                     STR_1:	
   959  080F  344A               	retlw	74	;'J'
   960  0810  3451               	retlw	81	;'Q'
   961  0811  3431               	retlw	49	;'1'
   962  0812  3459               	retlw	89	;'Y'
   963  0813  3443               	retlw	67	;'C'
   964  0814  345A               	retlw	90	;'Z'
   965  0815  3400               	retlw	0
   966  0808                     
   967                           ; #config settings
   968  0000                     
   969                           	psect	cinit
   970  0015                     start_initialization:	
   971  0015                     __initialization:	
   972                           
   973                           ; Initialize objects allocated to BANK3
   974  0015  1783               	bsf	3,7	;select IRP bank2
   975  0016  30E6               	movlw	low (__pdataBANK3+20)
   976  0017  00FD               	movwf	btemp+-1
   977  0018  3008               	movlw	high __pidataBANK3
   978  0019  00FE               	movwf	btemp
   979  001A  3069               	movlw	low __pidataBANK3
   980  001B  00FF               	movwf	btemp+1
   981  001C  30D2               	movlw	low __pdataBANK3
   982  001D  0084               	movwf	4
   983  001E  120A  158A  205C  120A  118A  	fcall	init_ram0
   984                           
   985                           ; Initialize objects allocated to BANK1
   986  0023  1383               	bcf	3,7	;select IRP bank0
   987  0024  30CE               	movlw	low (__pdataBANK1+46)
   988  0025  00FD               	movwf	btemp+-1
   989  0026  3009               	movlw	high __pidataBANK1
   990  0027  00FE               	movwf	btemp
   991  0028  30AA               	movlw	low __pidataBANK1
   992  0029  00FF               	movwf	btemp+1
   993  002A  30A0               	movlw	low __pdataBANK1
   994  002B  0084               	movwf	4
   995  002C  120A  158A  205C  120A  118A  	fcall	init_ram0
   996                           
   997                           ; Clear objects allocated to BANK3
   998  0031  1783               	bsf	3,7	;select IRP bank2
   999  0032  3090               	movlw	low __pbssBANK3
  1000  0033  0084               	movwf	4
  1001  0034  30D2               	movlw	low (__pbssBANK3+66)
  1002  0035  120A  158A  2047   	fcall	clear_ram0
  1003                           
  1004                           ; Clear objects allocated to BANK0
  1005  0038  01EA               	clrf	__pbssBANK0& (0+127)
  1006  0039  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  1007  003A  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  1008  003B  01ED               	clrf	(__pbssBANK0+3)& (0+127)
  1009  003C  01EE               	clrf	(__pbssBANK0+4)& (0+127)
  1010  003D  01EF               	clrf	(__pbssBANK0+5)& (0+127)
  1011                           
  1012                           ; Clear objects allocated to COMMON
  1013  003E  01F7               	clrf	__pbssCOMMON& (0+127)
  1014  003F  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1015  0040  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1016  0041  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  1017  0042  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  1018  0043  01FC               	clrf	(__pbssCOMMON+5)& (0+127)
  1019  0044                     end_of_initialization:	
  1020                           ;End of C runtime variable initialization code
  1021                           
  1022  0044                     __end_of__initialization:	
  1023  0044  0183               	clrf	3
  1024  0045  120A  118A  2CD4   	ljmp	_main	;jump to C main() function
  1025                           
  1026                           	psect	bssCOMMON
  1027  0077                     __pbssCOMMON:	
  1028  0077                     InterReceiver@intr_counter_H:	
  1029  0077                     	ds	2
  1030  0079                     InterReceiver@intr_counter:	
  1031  0079                     	ds	2
  1032  007B                     getbit@oldbit:	
  1033  007B                     	ds	2
  1034                           
  1035                           	psect	bssBANK0
  1036  006A                     __pbssBANK0:	
  1037  006A                     _dPacketnum:	
  1038  006A                     	ds	2
  1039  006C                     _rcv_state:	
  1040  006C                     	ds	2
  1041  006E                     _dfcslo:	
  1042  006E                     	ds	1
  1043  006F                     _dfcshi:	
  1044  006F                     	ds	1
  1045                           
  1046                           	psect	dataBANK1
  1047  00A0                     __pdataBANK1:	
  1048  00A0                     main@F1991:	
  1049  00A0                     	ds	10
  1050  00AA                     _FMRX_Nref:	
  1051  00AA                     	ds	2
  1052  00AC                     _CWTX_Nref:	
  1053  00AC                     	ds	2
  1054  00AE                     _FMTX_Nref:	
  1055  00AE                     	ds	2
  1056  00B0                     _FMRX_Nprg:	
  1057  00B0                     	ds	10
  1058  00BA                     _CWTX_Nprg:	
  1059  00BA                     	ds	10
  1060  00C4                     _FMTX_Nprg:	
  1061  00C4                     	ds	10
  1062                           
  1063                           	psect	bssBANK3
  1064  0190                     __pbssBANK3:	
  1065  0190                     _dPacket:	
  1066  0190                     	ds	50
  1067  01C2                     _dData:	
  1068  01C2                     	ds	16
  1069                           
  1070                           	psect	dataBANK3
  1071  01D2                     __pdataBANK3:	
  1072  01D2                     main@F1995:	
  1073  01D2                     	ds	10
  1074  01DC                     main@F1993:	
  1075  01DC                     	ds	10
  1076                           
  1077                           	psect	inittext
  1078  0858                     init_fetch0:	
  1079                           ;	Called with low address in FSR and high address in W
  1080                           
  1081  0858  087E               	movf	126,w
  1082  0859  008A               	movwf	10
  1083  085A  087F               	movf	127,w
  1084  085B  0082               	movwf	2
  1085  085C                     init_ram0:	
  1086                           ;Called with:
  1087                           ;	high address of idata address in btemp 
  1088                           ;	low address of idata address in btemp+1 
  1089                           ;	low address of data in FSR
  1090                           ;	high address + 1 of data in btemp-1
  1091                           
  1092  085C  2058  120A  158A   	fcall	init_fetch0
  1093  085F  0080               	movwf	0
  1094  0860  0A84               	incf	4,f
  1095  0861  0804               	movf	4,w
  1096  0862  067D               	xorwf	125,w
  1097  0863  1903               	btfsc	3,2
  1098  0864  3400               	retlw	0
  1099  0865  0AFF               	incf	127,f
  1100  0866  1903               	btfsc	3,2
  1101  0867  0AFE               	incf	126,f
  1102  0868  285C               	goto	init_ram0
  1103                           
  1104                           	psect	clrtext
  1105  0847                     clear_ram0:	
  1106                           ;	Called with FSR containing the base address, and
  1107                           ;	W with the last address+1
  1108                           
  1109  0847  0064               	clrwdt	;clear the watchdog before getting into this loop
  1110  0848                     clrloop0:	
  1111  0848  0180               	clrf	0	;clear RAM location pointed to by FSR
  1112  0849  0A84               	incf	4,f	;increment pointer
  1113  084A  0604               	xorwf	4,w	;XOR with final address
  1114  084B  1903               	btfsc	3,2	;have we reached the end yet?
  1115  084C  3400               	retlw	0	;all done for this memory range, return
  1116  084D  0604               	xorwf	4,w	;XOR again to restore value
  1117  084E  2848               	goto	clrloop0	;do the next byte
  1118                           
  1119                           	psect	cstackBANK1
  1120  00CE                     __pcstackBANK1:	
  1121  00CE                     main@FMTX_Nprg:	
  1122                           
  1123                           ; 10 bytes @ 0x0
  1124  00CE                     	ds	10
  1125  00D8                     main@CWTX_Nprg:	
  1126                           
  1127                           ; 10 bytes @ 0xA
  1128  00D8                     	ds	10
  1129  00E2                     main@FMRX_Nprg:	
  1130                           
  1131                           ; 10 bytes @ 0x14
  1132  00E2                     	ds	10
  1133  00EC                     main@TXOBC_wad_header:	
  1134                           
  1135                           ; 1 bytes @ 0x1E
  1136  00EC                     	ds	1
  1137  00ED                     main@NM_wad_header:	
  1138                           
  1139                           ; 1 bytes @ 0x1F
  1140  00ED                     	ds	1
  1141  00EE                     main@dData:	
  1142                           
  1143                           ; 1 bytes @ 0x20
  1144  00EE                     	ds	1
  1145                           
  1146                           	psect	cstackCOMMON
  1147  0070                     __pcstackCOMMON:	
  1148  0070                     ?_ReceivePacket_data:	
  1149  0070                     ?_Reset_EPS:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  0070                     ?__NOP:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  0070                     ?_Init_SERIAL:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158  0070                     ?_putch:	
  1159                           ; 1 bytes @ 0x0
  1160                           
  1161  0070                     ?_Init_MPU:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  0070                     ?_waitFlag:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167  0070                     ?_getdata:	
  1168                           ; 1 bytes @ 0x0
  1169                           
  1170  0070                     ?_main:	
  1171                           ; 1 bytes @ 0x0
  1172                           
  1173  0070                     ?_I2C_Master_Wait:	
  1174                           ; 1 bytes @ 0x0
  1175                           
  1176  0070                     ?_I2C_Master_Start:	
  1177                           ; 1 bytes @ 0x0
  1178                           
  1179  0070                     ?_I2C_Master_Stop:	
  1180                           ; 1 bytes @ 0x0
  1181                           
  1182  0070                     ?_InterReceiver:	
  1183                           ; 1 bytes @ 0x0
  1184                           
  1185  0070                     ??_InterReceiver:	
  1186                           ; 1 bytes @ 0x0
  1187                           
  1188                           
  1189                           ; 1 bytes @ 0x0
  1190  0070                     	ds	7
  1191                           
  1192                           	psect	cstackBANK0
  1193  0020                     __pcstackBANK0:	
  1194  0020                     ??_Reset_EPS:	
  1195  0020                     ??__NOP:	
  1196                           ; 1 bytes @ 0x0
  1197                           
  1198  0020                     ??_Init_SERIAL:	
  1199                           ; 1 bytes @ 0x0
  1200                           
  1201  0020                     ??_putch:	
  1202                           ; 1 bytes @ 0x0
  1203                           
  1204  0020                     ??_Init_MPU:	
  1205                           ; 1 bytes @ 0x0
  1206                           
  1207  0020                     ??_I2C_Master_Wait:	
  1208                           ; 1 bytes @ 0x0
  1209                           
  1210  0020                     ??_I2C_Master_Start:	
  1211                           ; 1 bytes @ 0x0
  1212                           
  1213  0020                     ??_I2C_Master_Stop:	
  1214                           ; 1 bytes @ 0x0
  1215                           
  1216  0020                     ?_I2C_Master_Write:	
  1217                           ; 1 bytes @ 0x0
  1218                           
  1219  0020                     ?_getbit:	
  1220                           ; 1 bytes @ 0x0
  1221                           
  1222  0020                     ?_fcscheck:	
  1223                           ; 2 bytes @ 0x0
  1224                           
  1225  0020                     ?___awdiv:	
  1226                           ; 2 bytes @ 0x0
  1227                           
  1228  0020                     ?___lldiv:	
  1229                           ; 2 bytes @ 0x0
  1230                           
  1231  0020                     putch@byte:	
  1232                           ; 4 bytes @ 0x0
  1233                           
  1234  0020                     I2C_Master_Write@d:	
  1235                           ; 1 bytes @ 0x0
  1236                           
  1237  0020                     __NOP@i:	
  1238                           ; 2 bytes @ 0x0
  1239                           
  1240  0020                     ___awdiv@divisor:	
  1241                           ; 2 bytes @ 0x0
  1242                           
  1243  0020                     ___lldiv@divisor:	
  1244                           ; 2 bytes @ 0x0
  1245                           
  1246                           
  1247                           ; 4 bytes @ 0x0
  1248  0020                     	ds	1
  1249  0021                     ?_NM_waddress:	
  1250  0021                     ?_TXOBC_waddress:	
  1251                           ; 1 bytes @ 0x1
  1252                           
  1253  0021                     NM_waddress@whigh_address:	
  1254                           ; 1 bytes @ 0x1
  1255                           
  1256  0021                     TXOBC_waddress@whigh_address:	
  1257                           ; 1 bytes @ 0x1
  1258                           
  1259                           
  1260                           ; 1 bytes @ 0x1
  1261  0021                     	ds	1
  1262  0022                     ?_EEPROM_Write:	
  1263  0022                     ??_getbit:	
  1264                           ; 1 bytes @ 0x2
  1265                           
  1266  0022                     ??_fcscheck:	
  1267                           ; 1 bytes @ 0x2
  1268                           
  1269  0022                     ??_I2C_Master_Write:	
  1270                           ; 1 bytes @ 0x2
  1271                           
  1272  0022                     ?_L_OUT:	
  1273                           ; 1 bytes @ 0x2
  1274                           
  1275  0022                     ?_H_OUT:	
  1276                           ; 1 bytes @ 0x2
  1277                           
  1278  0022                     ?_STBOUT:	
  1279                           ; 1 bytes @ 0x2
  1280                           
  1281  0022                     NM_waddress@wlow_address:	
  1282                           ; 1 bytes @ 0x2
  1283                           
  1284  0022                     TXOBC_waddress@wlow_address:	
  1285                           ; 1 bytes @ 0x2
  1286                           
  1287  0022                     EEPROM_Write@high_address:	
  1288                           ; 1 bytes @ 0x2
  1289                           
  1290  0022                     L_OUT@fmcwtxrx:	
  1291                           ; 1 bytes @ 0x2
  1292                           
  1293  0022                     H_OUT@fmcwtxrx:	
  1294                           ; 2 bytes @ 0x2
  1295                           
  1296  0022                     STBOUT@fmcwtxrx:	
  1297                           ; 2 bytes @ 0x2
  1298                           
  1299  0022                     ___awdiv@dividend:	
  1300                           ; 2 bytes @ 0x2
  1301                           
  1302                           
  1303                           ; 2 bytes @ 0x2
  1304  0022                     	ds	1
  1305  0023                     ??_NM_waddress:	
  1306  0023                     ??_TXOBC_waddress:	
  1307                           ; 1 bytes @ 0x3
  1308                           
  1309  0023                     NM_waddress@NM_wad_header:	
  1310                           ; 1 bytes @ 0x3
  1311                           
  1312  0023                     EEPROM_Write@low_address:	
  1313                           ; 1 bytes @ 0x3
  1314                           
  1315                           
  1316                           ; 1 bytes @ 0x3
  1317  0023                     	ds	1
  1318  0024                     ??_L_OUT:	
  1319  0024                     ??_H_OUT:	
  1320                           ; 1 bytes @ 0x4
  1321                           
  1322  0024                     ??_STBOUT:	
  1323                           ; 1 bytes @ 0x4
  1324                           
  1325  0024                     ?_OPINIT:	
  1326                           ; 1 bytes @ 0x4
  1327                           
  1328  0024                     ??___awdiv:	
  1329                           ; 1 bytes @ 0x4
  1330                           
  1331  0024                     fcscheck@bt:	
  1332                           ; 1 bytes @ 0x4
  1333                           
  1334  0024                     EEPROM_Write@data:	
  1335                           ; 1 bytes @ 0x4
  1336                           
  1337  0024                     getbit@i:	
  1338                           ; 1 bytes @ 0x4
  1339                           
  1340  0024                     OPINIT@fmcwtxrx:	
  1341                           ; 2 bytes @ 0x4
  1342                           
  1343  0024                     ___lldiv@dividend:	
  1344                           ; 2 bytes @ 0x4
  1345                           
  1346                           
  1347                           ; 4 bytes @ 0x4
  1348  0024                     	ds	1
  1349  0025                     ??_EEPROM_Write:	
  1350  0025                     TXOBC_waddress@TXOBC_wad_header:	
  1351                           ; 1 bytes @ 0x5
  1352                           
  1353  0025                     ___awdiv@counter:	
  1354                           ; 1 bytes @ 0x5
  1355                           
  1356  0025                     fcscheck@i:	
  1357                           ; 1 bytes @ 0x5
  1358                           
  1359                           
  1360                           ; 2 bytes @ 0x5
  1361  0025                     	ds	1
  1362  0026                     ??_waitFlag:	
  1363  0026                     ??_getdata:	
  1364                           ; 1 bytes @ 0x6
  1365                           
  1366  0026                     ??_OPINIT:	
  1367                           ; 1 bytes @ 0x6
  1368                           
  1369  0026                     ___awdiv@sign:	
  1370                           ; 1 bytes @ 0x6
  1371                           
  1372                           
  1373                           ; 1 bytes @ 0x6
  1374  0026                     	ds	1
  1375  0027                     fcscheck@j:	
  1376  0027                     ___awdiv@quotient:	
  1377                           ; 2 bytes @ 0x7
  1378                           
  1379                           
  1380                           ; 2 bytes @ 0x7
  1381  0027                     	ds	1
  1382  0028                     ??___lldiv:	
  1383  0028                     EEPROM_Write@EEPROM_address:	
  1384                           ; 1 bytes @ 0x8
  1385                           
  1386  0028                     getdata@bufstore_counter:	
  1387                           ; 1 bytes @ 0x8
  1388                           
  1389                           
  1390                           ; 2 bytes @ 0x8
  1391  0028                     	ds	1
  1392  0029                     ?_OUTFQ:	
  1393  0029                     ?_RFDOUT:	
  1394                           ; 1 bytes @ 0x9
  1395                           
  1396  0029                     fcscheck@byte:	
  1397                           ; 1 bytes @ 0x9
  1398                           
  1399  0029                     EEPROM_Write@Address:	
  1400                           ; 1 bytes @ 0x9
  1401                           
  1402  0029                     OUTFQ@fmcwtxrx:	
  1403                           ; 1 bytes @ 0x9
  1404                           
  1405  0029                     RFDOUT@fmcwtxrx:	
  1406                           ; 2 bytes @ 0x9
  1407                           
  1408  0029                     ___lldiv@quotient:	
  1409                           ; 2 bytes @ 0x9
  1410                           
  1411                           
  1412                           ; 4 bytes @ 0x9
  1413  0029                     	ds	1
  1414  002A                     waitFlag@i:	
  1415  002A                     getdata@dstuff:	
  1416                           ; 2 bytes @ 0xA
  1417                           
  1418                           
  1419                           ; 2 bytes @ 0xA
  1420  002A                     	ds	1
  1421  002B                     OUTFQ@Nprg:	
  1422  002B                     RFDOUT@Nref:	
  1423                           ; 1 bytes @ 0xB
  1424                           
  1425                           
  1426                           ; 2 bytes @ 0xB
  1427  002B                     	ds	1
  1428  002C                     ??_OUTFQ:	
  1429  002C                     waitFlag@j:	
  1430                           ; 1 bytes @ 0xC
  1431                           
  1432  002C                     getdata@dbitstatus:	
  1433                           ; 2 bytes @ 0xC
  1434                           
  1435                           
  1436                           ; 2 bytes @ 0xC
  1437  002C                     	ds	1
  1438  002D                     ??_RFDOUT:	
  1439  002D                     ___lldiv@counter:	
  1440                           ; 1 bytes @ 0xD
  1441                           
  1442                           
  1443                           ; 1 bytes @ 0xD
  1444  002D                     	ds	1
  1445  002E                     ?_Init_I2C_M:	
  1446  002E                     getdata@buf:	
  1447                           ; 1 bytes @ 0xE
  1448                           
  1449  002E                     waitFlag@j_101:	
  1450                           ; 1 bytes @ 0xE
  1451                           
  1452  002E                     Init_I2C_M@c:	
  1453                           ; 2 bytes @ 0xE
  1454                           
  1455                           
  1456                           ; 4 bytes @ 0xE
  1457  002E                     	ds	2
  1458  0030                     waitFlag@j_103:	
  1459  0030                     RFDOUT@Nref_b:	
  1460                           ; 2 bytes @ 0x10
  1461                           
  1462                           
  1463                           ; 24 bytes @ 0x10
  1464  0030                     	ds	2
  1465  0032                     ??_Init_I2C_M:	
  1466  0032                     waitFlag@j_105:	
  1467                           ; 1 bytes @ 0x12
  1468                           
  1469                           
  1470                           ; 2 bytes @ 0x12
  1471  0032                     	ds	2
  1472  0034                     waitFlag@j_107:	
  1473  0034                     OUTFQ@Nprg_b:	
  1474                           ; 2 bytes @ 0x14
  1475                           
  1476                           
  1477                           ; 34 bytes @ 0x14
  1478  0034                     	ds	2
  1479  0036                     waitFlag@j_109:	
  1480                           
  1481                           ; 2 bytes @ 0x16
  1482  0036                     	ds	2
  1483  0038                     waitFlag@j_110:	
  1484                           
  1485                           ; 2 bytes @ 0x18
  1486  0038                     	ds	2
  1487  003A                     waitFlag@j_112:	
  1488                           
  1489                           ; 2 bytes @ 0x1A
  1490  003A                     	ds	2
  1491  003C                     waitFlag@j_114:	
  1492                           
  1493                           ; 2 bytes @ 0x1C
  1494  003C                     	ds	2
  1495  003E                     waitFlag@j_116:	
  1496                           
  1497                           ; 2 bytes @ 0x1E
  1498  003E                     	ds	2
  1499  0040                     waitFlag@j_118:	
  1500                           
  1501                           ; 2 bytes @ 0x20
  1502  0040                     	ds	2
  1503  0042                     waitFlag@j_120:	
  1504                           
  1505                           ; 2 bytes @ 0x22
  1506  0042                     	ds	2
  1507  0044                     waitFlag@flag_judge:	
  1508                           
  1509                           ; 2 bytes @ 0x24
  1510  0044                     	ds	2
  1511  0046                     waitFlag@buf:	
  1512                           
  1513                           ; 1 bytes @ 0x26
  1514  0046                     	ds	1
  1515  0047                     ??_ReceivePacket_data:	
  1516                           
  1517                           ; 1 bytes @ 0x27
  1518  0047                     	ds	1
  1519  0048                     RFDOUT@i_349:	
  1520                           
  1521                           ; 2 bytes @ 0x28
  1522  0048                     	ds	1
  1523  0049                     ReceivePacket_data@fcschecker:	
  1524                           
  1525                           ; 2 bytes @ 0x29
  1526  0049                     	ds	1
  1527  004A                     RFDOUT@i:	
  1528                           
  1529                           ; 2 bytes @ 0x2A
  1530  004A                     	ds	1
  1531  004B                     ReceivePacket_data@i:	
  1532                           
  1533                           ; 2 bytes @ 0x2B
  1534  004B                     	ds	1
  1535  004C                     RFDOUT@i_350:	
  1536                           
  1537                           ; 2 bytes @ 0x2C
  1538  004C                     	ds	10
  1539  0056                     OUTFQ@i_338:	
  1540                           
  1541                           ; 2 bytes @ 0x36
  1542  0056                     	ds	2
  1543  0058                     OUTFQ@count:	
  1544                           
  1545                           ; 2 bytes @ 0x38
  1546  0058                     	ds	2
  1547  005A                     OUTFQ@i:	
  1548                           
  1549                           ; 2 bytes @ 0x3A
  1550  005A                     	ds	2
  1551  005C                     OUTFQ@i_340:	
  1552                           
  1553                           ; 2 bytes @ 0x3C
  1554  005C                     	ds	2
  1555  005E                     OUTFQ@j:	
  1556                           
  1557                           ; 2 bytes @ 0x3E
  1558  005E                     	ds	2
  1559  0060                     ?_FMTX:	
  1560  0060                     ?_CWTX:	
  1561                           ; 1 bytes @ 0x40
  1562                           
  1563  0060                     ?_FMRX:	
  1564                           ; 1 bytes @ 0x40
  1565                           
  1566  0060                     FMTX@Nref:	
  1567                           ; 1 bytes @ 0x40
  1568                           
  1569  0060                     CWTX@Nref:	
  1570                           ; 2 bytes @ 0x40
  1571                           
  1572  0060                     FMRX@Nref:	
  1573                           ; 2 bytes @ 0x40
  1574                           
  1575                           
  1576                           ; 2 bytes @ 0x40
  1577  0060                     	ds	2
  1578  0062                     FMTX@Nprg:	
  1579  0062                     CWTX@Nprg:	
  1580                           ; 1 bytes @ 0x42
  1581                           
  1582  0062                     FMRX@Nprg:	
  1583                           ; 1 bytes @ 0x42
  1584                           
  1585                           
  1586                           ; 1 bytes @ 0x42
  1587  0062                     	ds	1
  1588  0063                     ??_FMTX:	
  1589  0063                     ??_CWTX:	
  1590                           ; 1 bytes @ 0x43
  1591                           
  1592  0063                     ??_FMRX:	
  1593                           ; 1 bytes @ 0x43
  1594                           
  1595                           
  1596                           ; 1 bytes @ 0x43
  1597  0063                     	ds	1
  1598  0064                     FMTX@fmtx:	
  1599  0064                     CWTX@cwtx:	
  1600                           ; 2 bytes @ 0x44
  1601                           
  1602  0064                     FMRX@fmrx:	
  1603                           ; 2 bytes @ 0x44
  1604                           
  1605                           
  1606                           ; 2 bytes @ 0x44
  1607  0064                     	ds	2
  1608  0066                     ??_main:	
  1609                           
  1610                           ; 1 bytes @ 0x46
  1611  0066                     	ds	4
  1612                           
  1613                           	psect	maintext
  1614  04D4                     __pmaintext:	
  1615 ;;
  1616 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1617 ;;
  1618 ;; *************** function _main *****************
  1619 ;; Defined at:
  1620 ;;		line 39 in file "main.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1625 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1626 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1627 ;;  NM_wad_heade    1   31[BANK1 ] unsigned char 
  1628 ;;  dData           1   32[BANK1 ] PTR unsigned char 
  1629 ;;		 -> NULL(0), dData(16), 
  1630 ;;  TXOBC_wad_he    1   30[BANK1 ] unsigned char 
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  1    wreg      void 
  1633 ;; Registers used:
  1634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1635 ;; Tracked objects:
  1636 ;;		On entry : B00/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1640 ;;      Params:         0       0       0       0       0
  1641 ;;      Locals:         0       0      33       0       0
  1642 ;;      Temps:          0       4       0       0       0
  1643 ;;      Totals:         0       4      33       0       0
  1644 ;;Total ram usage:       37 bytes
  1645 ;; Hardware stack levels required when called:    5
  1646 ;; This function calls:
  1647 ;;		_CWTX
  1648 ;;		_EEPROM_Write
  1649 ;;		_FMRX
  1650 ;;		_FMTX
  1651 ;;		_Init_I2C_M
  1652 ;;		_Init_MPU
  1653 ;;		_Init_SERIAL
  1654 ;;		_NM_waddress
  1655 ;;		_ReceivePacket_data
  1656 ;;		_Reset_EPS
  1657 ;;		_TXOBC_waddress
  1658 ;; This function is called by:
  1659 ;;		Startup code after reset
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           
  1664                           ;psect for function _main
  1665  04D4                     _main:	
  1666                           
  1667                           ;main.c: 44: _delay((unsigned long)((200)*(10000000/4000.0)));
  1668                           
  1669                           ;incstack = 0
  1670                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1671  04D4  3003               	movlw	3
  1672  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  1673  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  1674  04D7  00E8               	movwf	??_main+2
  1675  04D8  308A               	movlw	138
  1676  04D9  00E7               	movwf	??_main+1
  1677  04DA  3055               	movlw	85
  1678  04DB  00E6               	movwf	??_main
  1679  04DC                     u3307:	
  1680  04DC  0BE6               	decfsz	??_main,f
  1681  04DD  2CDC               	goto	u3307
  1682  04DE  0BE7               	decfsz	??_main+1,f
  1683  04DF  2CDC               	goto	u3307
  1684  04E0  0BE8               	decfsz	??_main+2,f
  1685  04E1  2CDC               	goto	u3307
  1686                           
  1687                           ;main.c: 46: Init_SERIAL();
  1688  04E2  120A  158A  20C6  120A  118A  	fcall	_Init_SERIAL
  1689                           
  1690                           ;main.c: 47: Init_MPU();
  1691  04E7  120A  158A  20DF  120A  118A  	fcall	_Init_MPU
  1692                           
  1693                           ;main.c: 48: Init_I2C_M(400000);
  1694  04EC  3000               	movlw	0
  1695  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  1696  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  1697  04EF  00B1               	movwf	Init_I2C_M@c+3
  1698  04F0  3006               	movlw	6
  1699  04F1  00B0               	movwf	Init_I2C_M@c+2
  1700  04F2  301A               	movlw	26
  1701  04F3  00AF               	movwf	Init_I2C_M@c+1
  1702  04F4  3080               	movlw	128
  1703  04F5  00AE               	movwf	Init_I2C_M@c
  1704  04F6  120A  158A  21D8  120A  118A  	fcall	_Init_I2C_M
  1705                           
  1706                           ;main.c: 55: RB2 = 1;
  1707  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  1708  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  1709  04FD  1506               	bsf	6,2	;volatile
  1710                           
  1711                           ;main.c: 56: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1712  04FE  300D               	movlw	13
  1713  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  1714  0500  1303               	bcf	3,6	;RP1=0, select bank0
  1715  0501  00E8               	movwf	??_main+2
  1716  0502  30AF               	movlw	175
  1717  0503  00E7               	movwf	??_main+1
  1718  0504  30B5               	movlw	181
  1719  0505  00E6               	movwf	??_main
  1720  0506                     u3317:	
  1721  0506  0BE6               	decfsz	??_main,f
  1722  0507  2D06               	goto	u3317
  1723  0508  0BE7               	decfsz	??_main+1,f
  1724  0509  2D06               	goto	u3317
  1725  050A  0BE8               	decfsz	??_main+2,f
  1726  050B  2D06               	goto	u3317
  1727  050C  2D0D               	nop2
  1728                           
  1729                           ;main.c: 58: FMTX(FMTX_Nref, FMTX_Nprg);
  1730  050D  1683               	bsf	3,5	;RP0=1, select bank1
  1731  050E  1303               	bcf	3,6	;RP1=0, select bank1
  1732  050F  082F               	movf	(_FMTX_Nref+1)^(0+128),w
  1733  0510  1283               	bcf	3,5	;RP0=0, select bank0
  1734  0511  1303               	bcf	3,6	;RP1=0, select bank0
  1735  0512  00E1               	movwf	FMTX@Nref+1
  1736  0513  1683               	bsf	3,5	;RP0=1, select bank1
  1737  0514  1303               	bcf	3,6	;RP1=0, select bank1
  1738  0515  082E               	movf	_FMTX_Nref^(0+128),w
  1739  0516  1283               	bcf	3,5	;RP0=0, select bank0
  1740  0517  1303               	bcf	3,6	;RP1=0, select bank0
  1741  0518  00E0               	movwf	FMTX@Nref
  1742  0519  30C4               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1743  051A  00E6               	movwf	??_main
  1744  051B  0866               	movf	??_main,w
  1745  051C  00E2               	movwf	FMTX@Nprg
  1746  051D  120A  158A  217E  120A  118A  	fcall	_FMTX
  1747                           
  1748                           ;main.c: 59: CWTX(CWTX_Nref, CWTX_Nprg);
  1749  0522  1683               	bsf	3,5	;RP0=1, select bank1
  1750  0523  1303               	bcf	3,6	;RP1=0, select bank1
  1751  0524  082D               	movf	(_CWTX_Nref+1)^(0+128),w
  1752  0525  1283               	bcf	3,5	;RP0=0, select bank0
  1753  0526  1303               	bcf	3,6	;RP1=0, select bank0
  1754  0527  00E1               	movwf	CWTX@Nref+1
  1755  0528  1683               	bsf	3,5	;RP0=1, select bank1
  1756  0529  1303               	bcf	3,6	;RP1=0, select bank1
  1757  052A  082C               	movf	_CWTX_Nref^(0+128),w
  1758  052B  1283               	bcf	3,5	;RP0=0, select bank0
  1759  052C  1303               	bcf	3,6	;RP1=0, select bank0
  1760  052D  00E0               	movwf	CWTX@Nref
  1761  052E  30BA               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1762  052F  00E6               	movwf	??_main
  1763  0530  0866               	movf	??_main,w
  1764  0531  00E2               	movwf	CWTX@Nprg
  1765  0532  120A  158A  2126  120A  118A  	fcall	_CWTX
  1766                           
  1767                           ;main.c: 60: FMRX(FMRX_Nref, FMRX_Nprg);
  1768  0537  1683               	bsf	3,5	;RP0=1, select bank1
  1769  0538  1303               	bcf	3,6	;RP1=0, select bank1
  1770  0539  082B               	movf	(_FMRX_Nref+1)^(0+128),w
  1771  053A  1283               	bcf	3,5	;RP0=0, select bank0
  1772  053B  1303               	bcf	3,6	;RP1=0, select bank0
  1773  053C  00E1               	movwf	FMRX@Nref+1
  1774  053D  1683               	bsf	3,5	;RP0=1, select bank1
  1775  053E  1303               	bcf	3,6	;RP1=0, select bank1
  1776  053F  082A               	movf	_FMRX_Nref^(0+128),w
  1777  0540  1283               	bcf	3,5	;RP0=0, select bank0
  1778  0541  1303               	bcf	3,6	;RP1=0, select bank0
  1779  0542  00E0               	movwf	FMRX@Nref
  1780  0543  30B0               	movlw	(low (_FMRX_Nprg| 0))& (0+255)
  1781  0544  00E6               	movwf	??_main
  1782  0545  0866               	movf	??_main,w
  1783  0546  00E2               	movwf	FMRX@Nprg
  1784  0547  120A  158A  2152  120A  118A  	fcall	_FMRX
  1785                           
  1786                           ;main.c: 61: RB2 = 0;
  1787  054C  1283               	bcf	3,5	;RP0=0, select bank0
  1788  054D  1303               	bcf	3,6	;RP1=0, select bank0
  1789  054E  1106               	bcf	6,2	;volatile
  1790  054F                     l3510:	
  1791                           ;main.c: 64: while(1){
  1792                           
  1793                           
  1794                           ;main.c: 79: UBYTE *dData;
  1795                           ;main.c: 80: dData = ReceivePacket_data();
  1796  054F  120A  158A  243A  120A  118A  	fcall	_ReceivePacket_data
  1797  0554  1283               	bcf	3,5	;RP0=0, select bank0
  1798  0555  1303               	bcf	3,6	;RP1=0, select bank0
  1799  0556  00E6               	movwf	??_main
  1800  0557  0866               	movf	??_main,w
  1801  0558  1683               	bsf	3,5	;RP0=1, select bank1
  1802  0559  1303               	bcf	3,6	;RP1=0, select bank1
  1803  055A  00EE               	movwf	main@dData^(0+128)
  1804                           
  1805                           ;main.c: 81: RB2 = 1;
  1806  055B  1283               	bcf	3,5	;RP0=0, select bank0
  1807  055C  1303               	bcf	3,6	;RP1=0, select bank0
  1808  055D  1506               	bsf	6,2	;volatile
  1809                           
  1810                           ;main.c: 82: _delay((unsigned long)((500)*(10000000/4000.0)));
  1811  055E  3007               	movlw	7
  1812  055F  1283               	bcf	3,5	;RP0=0, select bank0
  1813  0560  1303               	bcf	3,6	;RP1=0, select bank0
  1814  0561  00E8               	movwf	??_main+2
  1815  0562  3058               	movlw	88
  1816  0563  00E7               	movwf	??_main+1
  1817  0564  3059               	movlw	89
  1818  0565  00E6               	movwf	??_main
  1819  0566                     u3327:	
  1820  0566  0BE6               	decfsz	??_main,f
  1821  0567  2D66               	goto	u3327
  1822  0568  0BE7               	decfsz	??_main+1,f
  1823  0569  2D66               	goto	u3327
  1824  056A  0BE8               	decfsz	??_main+2,f
  1825  056B  2D66               	goto	u3327
  1826                           
  1827                           ;main.c: 83: RB2 = 0;
  1828  056C  1283               	bcf	3,5	;RP0=0, select bank0
  1829  056D  1303               	bcf	3,6	;RP1=0, select bank0
  1830  056E  1106               	bcf	6,2	;volatile
  1831                           
  1832                           ;main.c: 85: EEPROM_Write(0x50,0x10,0x00,dData);
  1833  056F  3010               	movlw	16
  1834  0570  00E6               	movwf	??_main
  1835  0571  0866               	movf	??_main,w
  1836  0572  00A2               	movwf	EEPROM_Write@high_address
  1837  0573  01A3               	clrf	EEPROM_Write@low_address
  1838  0574  1683               	bsf	3,5	;RP0=1, select bank1
  1839  0575  1303               	bcf	3,6	;RP1=0, select bank1
  1840  0576  086E               	movf	main@dData^(0+128),w
  1841  0577  1283               	bcf	3,5	;RP0=0, select bank0
  1842  0578  1303               	bcf	3,6	;RP1=0, select bank0
  1843  0579  00E7               	movwf	??_main+1
  1844  057A  0867               	movf	??_main+1,w
  1845  057B  00A4               	movwf	EEPROM_Write@data
  1846  057C  3050               	movlw	80
  1847  057D  120A  158A  249F  120A  118A  	fcall	_EEPROM_Write
  1848                           
  1849                           ;main.c: 86: _delay((unsigned long)((100)*(10000000/4000.0)));
  1850  0582  3002               	movlw	2
  1851  0583  1283               	bcf	3,5	;RP0=0, select bank0
  1852  0584  1303               	bcf	3,6	;RP1=0, select bank0
  1853  0585  00E8               	movwf	??_main+2
  1854  0586  3045               	movlw	69
  1855  0587  00E7               	movwf	??_main+1
  1856  0588  30A9               	movlw	169
  1857  0589  00E6               	movwf	??_main
  1858  058A                     u3337:	
  1859  058A  0BE6               	decfsz	??_main,f
  1860  058B  2D8A               	goto	u3337
  1861  058C  0BE7               	decfsz	??_main+1,f
  1862  058D  2D8A               	goto	u3337
  1863  058E  0BE8               	decfsz	??_main+2,f
  1864  058F  2D8A               	goto	u3337
  1865                           
  1866                           ;main.c: 90: UBYTE TXOBC_wad_header = 0x74;
  1867  0590  3074               	movlw	116
  1868  0591  1283               	bcf	3,5	;RP0=0, select bank0
  1869  0592  1303               	bcf	3,6	;RP1=0, select bank0
  1870  0593  00E6               	movwf	??_main
  1871  0594  0866               	movf	??_main,w
  1872  0595  1683               	bsf	3,5	;RP0=1, select bank1
  1873  0596  1303               	bcf	3,6	;RP1=0, select bank1
  1874  0597  00EC               	movwf	main@TXOBC_wad_header^(0+128)
  1875                           
  1876                           ;main.c: 91: TXOBC_waddress(TXOBC_wad_header, 0x10, 0x00);
  1877  0598  3010               	movlw	16
  1878  0599  1283               	bcf	3,5	;RP0=0, select bank0
  1879  059A  1303               	bcf	3,6	;RP1=0, select bank0
  1880  059B  00E6               	movwf	??_main
  1881  059C  0866               	movf	??_main,w
  1882  059D  00A1               	movwf	TXOBC_waddress@whigh_address
  1883  059E  01A2               	clrf	TXOBC_waddress@wlow_address
  1884  059F  1683               	bsf	3,5	;RP0=1, select bank1
  1885  05A0  1303               	bcf	3,6	;RP1=0, select bank1
  1886  05A1  086C               	movf	main@TXOBC_wad_header^(0+128),w
  1887  05A2  120A  118A  27AF  120A  118A  	fcall	_TXOBC_waddress
  1888                           
  1889                           ;main.c: 104: if(dData[0]=='n'){
  1890  05A7  1683               	bsf	3,5	;RP0=1, select bank1
  1891  05A8  1303               	bcf	3,6	;RP1=0, select bank1
  1892  05A9  086E               	movf	main@dData^(0+128),w
  1893  05AA  0084               	movwf	4
  1894  05AB  306E               	movlw	110
  1895  05AC  1783               	bsf	3,7	;select IRP bank2
  1896  05AD  0600               	xorwf	0,w
  1897  05AE  1D03               	btfss	3,2
  1898  05AF  2DC8               	goto	l3532
  1899                           
  1900                           ;main.c: 106: UBYTE NM_wad_header = 0x72;
  1901  05B0  3072               	movlw	114
  1902  05B1  1283               	bcf	3,5	;RP0=0, select bank0
  1903  05B2  1303               	bcf	3,6	;RP1=0, select bank0
  1904  05B3  00E6               	movwf	??_main
  1905  05B4  0866               	movf	??_main,w
  1906  05B5  1683               	bsf	3,5	;RP0=1, select bank1
  1907  05B6  1303               	bcf	3,6	;RP1=0, select bank1
  1908  05B7  00ED               	movwf	main@NM_wad_header^(0+128)
  1909                           
  1910                           ;main.c: 107: NM_waddress(NM_wad_header, 0x10, 0x00);
  1911  05B8  3010               	movlw	16
  1912  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  1913  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  1914  05BB  00E6               	movwf	??_main
  1915  05BC  0866               	movf	??_main,w
  1916  05BD  00A1               	movwf	NM_waddress@whigh_address
  1917  05BE  01A2               	clrf	NM_waddress@wlow_address
  1918  05BF  1683               	bsf	3,5	;RP0=1, select bank1
  1919  05C0  1303               	bcf	3,6	;RP1=0, select bank1
  1920  05C1  086D               	movf	main@NM_wad_header^(0+128),w
  1921  05C2  120A  158A  207D  120A  118A  	fcall	_NM_waddress
  1922                           
  1923                           ;main.c: 109: }else if(dData[0]=='p'){
  1924  05C7  2EB9               	goto	l302
  1925  05C8                     l3532:	
  1926  05C8  1683               	bsf	3,5	;RP0=1, select bank1
  1927  05C9  1303               	bcf	3,6	;RP1=0, select bank1
  1928  05CA  086E               	movf	main@dData^(0+128),w
  1929  05CB  0084               	movwf	4
  1930  05CC  3070               	movlw	112
  1931  05CD  1783               	bsf	3,7	;select IRP bank2
  1932  05CE  0600               	xorwf	0,w
  1933  05CF  1D03               	btfss	3,2
  1934  05D0  2EA4               	goto	l303
  1935                           
  1936                           ;main.c: 114: if(dData[2] == 'r'){
  1937  05D1  086E               	movf	main@dData^(0+128),w
  1938  05D2  3E02               	addlw	2
  1939  05D3  0084               	movwf	4
  1940  05D4  3072               	movlw	114
  1941  05D5  0600               	xorwf	0,w
  1942  05D6  1903               	btfsc	3,2
  1943  05D7  2E8C               	goto	l3560
  1944  05D8  2EB9               	goto	l302
  1945  05D9                     l3538:	
  1946                           ;main.c: 120: case 'E':
  1947                           
  1948                           ;main.c: 119: switch(dData[3]){
  1949                           
  1950                           
  1951                           ;main.c: 125: _delay((unsigned long)((5000)*(10000000/4000.0)));
  1952  05D9  3040               	movlw	64
  1953  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  1954  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  1955  05DC  00E8               	movwf	??_main+2
  1956  05DD  306A               	movlw	106
  1957  05DE  00E7               	movwf	??_main+1
  1958  05DF  3097               	movlw	151
  1959  05E0  00E6               	movwf	??_main
  1960  05E1                     u3347:	
  1961  05E1  0BE6               	decfsz	??_main,f
  1962  05E2  2DE1               	goto	u3347
  1963  05E3  0BE7               	decfsz	??_main+1,f
  1964  05E4  2DE1               	goto	u3347
  1965  05E5  0BE8               	decfsz	??_main+2,f
  1966  05E6  2DE1               	goto	u3347
  1967                           
  1968                           ;main.c: 126: Reset_EPS();
  1969  05E7  120A  158A  2095  120A  118A  	fcall	_Reset_EPS
  1970                           
  1971                           ;main.c: 127: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1972  05EC  300D               	movlw	13
  1973  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1974  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1975  05EF  00E8               	movwf	??_main+2
  1976  05F0  30AF               	movlw	175
  1977  05F1  00E7               	movwf	??_main+1
  1978  05F2  30B5               	movlw	181
  1979  05F3  00E6               	movwf	??_main
  1980  05F4                     u3357:	
  1981  05F4  0BE6               	decfsz	??_main,f
  1982  05F5  2DF4               	goto	u3357
  1983  05F6  0BE7               	decfsz	??_main+1,f
  1984  05F7  2DF4               	goto	u3357
  1985  05F8  0BE8               	decfsz	??_main+2,f
  1986  05F9  2DF4               	goto	u3357
  1987  05FA  2DFB               	nop2
  1988                           
  1989                           ;main.c: 130: int FMTX_Nprg[5] = {8,7,3,0,0};
  1990  05FB  30CE               	movlw	main@FMTX_Nprg& (0+255)
  1991  05FC  0084               	movwf	4
  1992  05FD  30A0               	movlw	low main@F1991
  1993  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  1994  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  1995  0600  00E6               	movwf	??_main
  1996  0601  0804               	movf	4,w
  1997  0602  00E7               	movwf	??_main+1
  1998  0603  300A               	movlw	10
  1999  0604  00E8               	movwf	??_main+2
  2000  0605                     u3270:	
  2001  0605  0866               	movf	??_main,w
  2002  0606  0084               	movwf	4
  2003  0607  1383               	bcf	3,7	;select IRP bank1
  2004  0608  0800               	movf	0,w
  2005  0609  00E9               	movwf	??_main+3
  2006  060A  0AE6               	incf	??_main,f
  2007  060B  0867               	movf	??_main+1,w
  2008  060C  0084               	movwf	4
  2009  060D  0869               	movf	??_main+3,w
  2010  060E  0080               	movwf	0
  2011  060F  0AE7               	incf	??_main+1,f
  2012  0610  0BE8               	decfsz	??_main+2,f
  2013  0611  2E05               	goto	u3270
  2014                           
  2015                           ;main.c: 131: int CWTX_Nprg[5] = {0,1,7,4,7};
  2016  0612  30D8               	movlw	main@CWTX_Nprg& (0+255)
  2017  0613  0084               	movwf	4
  2018  0614  30DC               	movlw	low main@F1993
  2019  0615  00E6               	movwf	??_main
  2020  0616  0804               	movf	4,w
  2021  0617  00E7               	movwf	??_main+1
  2022  0618  300A               	movlw	10
  2023  0619  00E8               	movwf	??_main+2
  2024  061A                     u3280:	
  2025  061A  0866               	movf	??_main,w
  2026  061B  0084               	movwf	4
  2027  061C  1783               	bsf	3,7	;select IRP bank3
  2028  061D  0800               	movf	0,w
  2029  061E  00E9               	movwf	??_main+3
  2030  061F  0AE6               	incf	??_main,f
  2031  0620  0867               	movf	??_main+1,w
  2032  0621  0084               	movwf	4
  2033  0622  1383               	bcf	3,7	;select IRP bank1
  2034  0623  0869               	movf	??_main+3,w
  2035  0624  0080               	movwf	0
  2036  0625  0AE7               	incf	??_main+1,f
  2037  0626  0BE8               	decfsz	??_main+2,f
  2038  0627  2E1A               	goto	u3280
  2039                           
  2040                           ;main.c: 132: int FMRX_Nprg[5] = {2,4,8,8,7};
  2041  0628  30E2               	movlw	main@FMRX_Nprg& (0+255)
  2042  0629  0084               	movwf	4
  2043  062A  30D2               	movlw	low main@F1995
  2044  062B  00E6               	movwf	??_main
  2045  062C  0804               	movf	4,w
  2046  062D  00E7               	movwf	??_main+1
  2047  062E  300A               	movlw	10
  2048  062F  00E8               	movwf	??_main+2
  2049  0630                     u3290:	
  2050  0630  0866               	movf	??_main,w
  2051  0631  0084               	movwf	4
  2052  0632  1783               	bsf	3,7	;select IRP bank3
  2053  0633  0800               	movf	0,w
  2054  0634  00E9               	movwf	??_main+3
  2055  0635  0AE6               	incf	??_main,f
  2056  0636  0867               	movf	??_main+1,w
  2057  0637  0084               	movwf	4
  2058  0638  1383               	bcf	3,7	;select IRP bank1
  2059  0639  0869               	movf	??_main+3,w
  2060  063A  0080               	movwf	0
  2061  063B  0AE7               	incf	??_main+1,f
  2062  063C  0BE8               	decfsz	??_main+2,f
  2063  063D  2E30               	goto	u3290
  2064                           
  2065                           ;main.c: 134: FMTX(FMTX_Nref, FMTX_Nprg);
  2066  063E  1683               	bsf	3,5	;RP0=1, select bank1
  2067  063F  1303               	bcf	3,6	;RP1=0, select bank1
  2068  0640  082F               	movf	(_FMTX_Nref+1)^(0+128),w
  2069  0641  1283               	bcf	3,5	;RP0=0, select bank0
  2070  0642  1303               	bcf	3,6	;RP1=0, select bank0
  2071  0643  00E1               	movwf	FMTX@Nref+1
  2072  0644  1683               	bsf	3,5	;RP0=1, select bank1
  2073  0645  1303               	bcf	3,6	;RP1=0, select bank1
  2074  0646  082E               	movf	_FMTX_Nref^(0+128),w
  2075  0647  1283               	bcf	3,5	;RP0=0, select bank0
  2076  0648  1303               	bcf	3,6	;RP1=0, select bank0
  2077  0649  00E0               	movwf	FMTX@Nref
  2078  064A  30CE               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2079  064B  00E6               	movwf	??_main
  2080  064C  0866               	movf	??_main,w
  2081  064D  00E2               	movwf	FMTX@Nprg
  2082  064E  120A  158A  217E  120A  118A  	fcall	_FMTX
  2083                           
  2084                           ;main.c: 135: CWTX(CWTX_Nref, CWTX_Nprg);
  2085  0653  1683               	bsf	3,5	;RP0=1, select bank1
  2086  0654  1303               	bcf	3,6	;RP1=0, select bank1
  2087  0655  082D               	movf	(_CWTX_Nref+1)^(0+128),w
  2088  0656  1283               	bcf	3,5	;RP0=0, select bank0
  2089  0657  1303               	bcf	3,6	;RP1=0, select bank0
  2090  0658  00E1               	movwf	CWTX@Nref+1
  2091  0659  1683               	bsf	3,5	;RP0=1, select bank1
  2092  065A  1303               	bcf	3,6	;RP1=0, select bank1
  2093  065B  082C               	movf	_CWTX_Nref^(0+128),w
  2094  065C  1283               	bcf	3,5	;RP0=0, select bank0
  2095  065D  1303               	bcf	3,6	;RP1=0, select bank0
  2096  065E  00E0               	movwf	CWTX@Nref
  2097  065F  30D8               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2098  0660  00E6               	movwf	??_main
  2099  0661  0866               	movf	??_main,w
  2100  0662  00E2               	movwf	CWTX@Nprg
  2101  0663  120A  158A  2126  120A  118A  	fcall	_CWTX
  2102                           
  2103                           ;main.c: 136: FMRX(FMRX_Nref, FMRX_Nprg);
  2104  0668  1683               	bsf	3,5	;RP0=1, select bank1
  2105  0669  1303               	bcf	3,6	;RP1=0, select bank1
  2106  066A  082B               	movf	(_FMRX_Nref+1)^(0+128),w
  2107  066B  1283               	bcf	3,5	;RP0=0, select bank0
  2108  066C  1303               	bcf	3,6	;RP1=0, select bank0
  2109  066D  00E1               	movwf	FMRX@Nref+1
  2110  066E  1683               	bsf	3,5	;RP0=1, select bank1
  2111  066F  1303               	bcf	3,6	;RP1=0, select bank1
  2112  0670  082A               	movf	_FMRX_Nref^(0+128),w
  2113  0671  1283               	bcf	3,5	;RP0=0, select bank0
  2114  0672  1303               	bcf	3,6	;RP1=0, select bank0
  2115  0673  00E0               	movwf	FMRX@Nref
  2116  0674  30E2               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2117  0675  00E6               	movwf	??_main
  2118  0676  0866               	movf	??_main,w
  2119  0677  00E2               	movwf	FMRX@Nprg
  2120  0678  120A  158A  2152  120A  118A  	fcall	_FMRX
  2121                           
  2122                           ;main.c: 138: _delay((unsigned long)((500)*(10000000/4000.0)));
  2123  067D  3007               	movlw	7
  2124  067E  1283               	bcf	3,5	;RP0=0, select bank0
  2125  067F  1303               	bcf	3,6	;RP1=0, select bank0
  2126  0680  00E8               	movwf	??_main+2
  2127  0681  3058               	movlw	88
  2128  0682  00E7               	movwf	??_main+1
  2129  0683  3059               	movlw	89
  2130  0684  00E6               	movwf	??_main
  2131  0685                     u3367:	
  2132  0685  0BE6               	decfsz	??_main,f
  2133  0686  2E85               	goto	u3367
  2134  0687  0BE7               	decfsz	??_main+1,f
  2135  0688  2E85               	goto	u3367
  2136  0689  0BE8               	decfsz	??_main+2,f
  2137  068A  2E85               	goto	u3367
  2138                           
  2139                           ;main.c: 155: }
  2140                           
  2141                           ;main.c: 154: break;
  2142                           
  2143                           ;main.c: 152: default:
  2144                           
  2145                           ;main.c: 151: break;
  2146                           
  2147                           ;main.c: 149: case 'T':
  2148                           
  2149                           ;main.c: 148: break;
  2150                           
  2151                           ;main.c: 146: case 'N':
  2152                           
  2153                           ;main.c: 145: break;
  2154                           
  2155                           ;main.c: 143: case '3':
  2156                           
  2157                           ;main.c: 142: break;
  2158                           
  2159                           ;main.c: 140: case 'I':
  2160                           
  2161                           ;main.c: 139: break;
  2162  068B  2EB9               	goto	l302
  2163  068C                     l3560:	
  2164  068C  1683               	bsf	3,5	;RP0=1, select bank1
  2165  068D  1303               	bcf	3,6	;RP1=0, select bank1
  2166  068E  086E               	movf	main@dData^(0+128),w
  2167  068F  3E03               	addlw	3
  2168  0690  0084               	movwf	4
  2169  0691  1783               	bsf	3,7	;select IRP bank2
  2170  0692  0800               	movf	0,w
  2171                           
  2172                           ; Switch size 1, requested type "space"
  2173                           ; Number of cases is 5, Range of values is 51 to 84
  2174                           ; switch strategies available:
  2175                           ; Name         Instructions Cycles
  2176                           ; simple_byte           16     9 (average)
  2177                           ; direct_byte          113    11 (fixed)
  2178                           ; jumptable            263     9 (fixed)
  2179                           ;	Chosen strategy is simple_byte
  2180  0693  3A33               	xorlw	51	; case 51
  2181  0694  1903               	skipnz
  2182  0695  2EB9               	goto	l302
  2183  0696  3A76               	xorlw	118	; case 69
  2184  0697  1903               	skipnz
  2185  0698  2DD9               	goto	l3538
  2186  0699  3A0C               	xorlw	12	; case 73
  2187  069A  1903               	skipnz
  2188  069B  2EB9               	goto	l302
  2189  069C  3A07               	xorlw	7	; case 78
  2190  069D  1903               	skipnz
  2191  069E  2EB9               	goto	l302
  2192  069F  3A1A               	xorlw	26	; case 84
  2193  06A0  1903               	skipnz
  2194  06A1  2EB9               	goto	l302
  2195  06A2  2EB9               	goto	l302
  2196                           
  2197                           ;main.c: 159: }
  2198                           ;main.c: 160: }else{
  2199                           
  2200                           ;main.c: 157: }else if(dData[2] == 't'){
  2201  06A3  2EB9               	goto	l302
  2202  06A4                     l303:	
  2203                           
  2204                           ;main.c: 161: RB2 = 1;
  2205  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  2206  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  2207  06A6  1506               	bsf	6,2	;volatile
  2208                           
  2209                           ;main.c: 162: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2210  06A7  300D               	movlw	13
  2211  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  2212  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  2213  06AA  00E8               	movwf	??_main+2
  2214  06AB  30AF               	movlw	175
  2215  06AC  00E7               	movwf	??_main+1
  2216  06AD  30B5               	movlw	181
  2217  06AE  00E6               	movwf	??_main
  2218  06AF                     u3377:	
  2219  06AF  0BE6               	decfsz	??_main,f
  2220  06B0  2EAF               	goto	u3377
  2221  06B1  0BE7               	decfsz	??_main+1,f
  2222  06B2  2EAF               	goto	u3377
  2223  06B3  0BE8               	decfsz	??_main+2,f
  2224  06B4  2EAF               	goto	u3377
  2225  06B5  2EB6               	nop2
  2226                           
  2227                           ;main.c: 163: RB2 = 0;
  2228  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  2229  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  2230  06B8  1106               	bcf	6,2	;volatile
  2231  06B9                     l302:	
  2232                           
  2233                           ;main.c: 164: }
  2234                           ;main.c: 208: _delay((unsigned long)((500)*(10000000/4000.0)));
  2235  06B9  3007               	movlw	7
  2236  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  2237  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  2238  06BC  00E8               	movwf	??_main+2
  2239  06BD  3058               	movlw	88
  2240  06BE  00E7               	movwf	??_main+1
  2241  06BF  3059               	movlw	89
  2242  06C0  00E6               	movwf	??_main
  2243  06C1                     u3387:	
  2244  06C1  0BE6               	decfsz	??_main,f
  2245  06C2  2EC1               	goto	u3387
  2246  06C3  0BE7               	decfsz	??_main+1,f
  2247  06C4  2EC1               	goto	u3387
  2248  06C5  0BE8               	decfsz	??_main+2,f
  2249  06C6  2EC1               	goto	u3387
  2250  06C7  2D4F               	goto	l3510
  2251  06C8                     __end_of_main:	
  2252                           ;main.c: 209: }
  2253                           ;main.c: 210: return;
  2254                           
  2255                           
  2256                           	psect	text1
  2257  07AF                     __ptext1:	
  2258 ;; *************** function _TXOBC_waddress *****************
  2259 ;; Defined at:
  2260 ;;		line 78 in file "UART.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  2263 ;;  whigh_addres    1    1[BANK0 ] unsigned char 
  2264 ;;  wlow_address    1    2[BANK0 ] unsigned char 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  TXOBC_wad_he    1    5[BANK0 ] unsigned char 
  2267 ;; Return value:  Size  Location     Type
  2268 ;;                  1    wreg      void 
  2269 ;; Registers used:
  2270 ;;		wreg, status,2, status,0, pclath, cstack
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2276 ;;      Params:         0       2       0       0       0
  2277 ;;      Locals:         0       1       0       0       0
  2278 ;;      Temps:          0       2       0       0       0
  2279 ;;      Totals:         0       5       0       0       0
  2280 ;;Total ram usage:        5 bytes
  2281 ;; Hardware stack levels used:    1
  2282 ;; Hardware stack levels required when called:    2
  2283 ;; This function calls:
  2284 ;;		_putch
  2285 ;; This function is called by:
  2286 ;;		_main
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290                           
  2291                           ;psect for function _TXOBC_waddress
  2292  07AF                     _TXOBC_waddress:	
  2293                           
  2294                           ;incstack = 0
  2295                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2296                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2297  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  2298  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  2299  07B1  00A5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2300                           
  2301                           ;UART.c: 79: RC5 = 1;
  2302  07B2  1687               	bsf	7,5	;volatile
  2303                           
  2304                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2305  07B3  30A3               	movlw	163
  2306  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  2307  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  2308  07B6  00A4               	movwf	??_TXOBC_waddress+1
  2309  07B7  3054               	movlw	84
  2310  07B8  00A3               	movwf	??_TXOBC_waddress
  2311  07B9                     u3397:	
  2312  07B9  0BA3               	decfsz	??_TXOBC_waddress,f
  2313  07BA  2FB9               	goto	u3397
  2314  07BB  0BA4               	decfsz	??_TXOBC_waddress+1,f
  2315  07BC  2FB9               	goto	u3397
  2316  07BD  0000               	nop
  2317                           
  2318                           ;UART.c: 81: putch(TXOBC_wad_header);
  2319  07BE  1283               	bcf	3,5	;RP0=0, select bank0
  2320  07BF  1303               	bcf	3,6	;RP1=0, select bank0
  2321  07C0  0825               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2322  07C1  120A  158A  203F  120A  118A  	fcall	_putch
  2323                           
  2324                           ;UART.c: 82: _delay((unsigned long)((50)*(10000000/4000.0)));
  2325  07C6  30A3               	movlw	163
  2326  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  2327  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  2328  07C9  00A4               	movwf	??_TXOBC_waddress+1
  2329  07CA  3054               	movlw	84
  2330  07CB  00A3               	movwf	??_TXOBC_waddress
  2331  07CC                     u3407:	
  2332  07CC  0BA3               	decfsz	??_TXOBC_waddress,f
  2333  07CD  2FCC               	goto	u3407
  2334  07CE  0BA4               	decfsz	??_TXOBC_waddress+1,f
  2335  07CF  2FCC               	goto	u3407
  2336  07D0  0000               	nop
  2337                           
  2338                           ;UART.c: 83: putch(whigh_address);
  2339  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  2340  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  2341  07D3  0821               	movf	TXOBC_waddress@whigh_address,w
  2342  07D4  120A  158A  203F  120A  118A  	fcall	_putch
  2343                           
  2344                           ;UART.c: 84: _delay((unsigned long)((50)*(10000000/4000.0)));
  2345  07D9  30A3               	movlw	163
  2346  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  2347  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  2348  07DC  00A4               	movwf	??_TXOBC_waddress+1
  2349  07DD  3054               	movlw	84
  2350  07DE  00A3               	movwf	??_TXOBC_waddress
  2351  07DF                     u3417:	
  2352  07DF  0BA3               	decfsz	??_TXOBC_waddress,f
  2353  07E0  2FDF               	goto	u3417
  2354  07E1  0BA4               	decfsz	??_TXOBC_waddress+1,f
  2355  07E2  2FDF               	goto	u3417
  2356  07E3  0000               	nop
  2357                           
  2358                           ;UART.c: 85: putch(wlow_address);
  2359  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  2360  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  2361  07E6  0822               	movf	TXOBC_waddress@wlow_address,w
  2362  07E7  120A  158A  203F  120A  118A  	fcall	_putch
  2363                           
  2364                           ;UART.c: 86: _delay((unsigned long)((50)*(10000000/4000.0)));
  2365  07EC  30A3               	movlw	163
  2366  07ED  1283               	bcf	3,5	;RP0=0, select bank0
  2367  07EE  1303               	bcf	3,6	;RP1=0, select bank0
  2368  07EF  00A4               	movwf	??_TXOBC_waddress+1
  2369  07F0  3054               	movlw	84
  2370  07F1  00A3               	movwf	??_TXOBC_waddress
  2371  07F2                     u3427:	
  2372  07F2  0BA3               	decfsz	??_TXOBC_waddress,f
  2373  07F3  2FF2               	goto	u3427
  2374  07F4  0BA4               	decfsz	??_TXOBC_waddress+1,f
  2375  07F5  2FF2               	goto	u3427
  2376  07F6  0000               	nop
  2377                           
  2378                           ;UART.c: 87: RC5 = 0;
  2379  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  2380  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  2381  07F9  1287               	bcf	7,5	;volatile
  2382  07FA  0008               	return
  2383  07FB                     __end_of_TXOBC_waddress:	
  2384                           
  2385                           	psect	text2
  2386  0895                     __ptext2:	
  2387 ;; *************** function _Reset_EPS *****************
  2388 ;; Defined at:
  2389 ;;		line 19 in file "EPS.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2403 ;;      Params:         0       0       0       0       0
  2404 ;;      Locals:         0       0       0       0       0
  2405 ;;      Temps:          0       3       0       0       0
  2406 ;;      Totals:         0       3       0       0       0
  2407 ;;Total ram usage:        3 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    1
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_main
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           
  2418                           ;psect for function _Reset_EPS
  2419  0895                     _Reset_EPS:	
  2420                           
  2421                           ;EPS.c: 20: RB4 = 1;
  2422                           
  2423                           ;incstack = 0
  2424                           ; Regs used in _Reset_EPS: [wreg]
  2425  0895  1283               	bcf	3,5	;RP0=0, select bank0
  2426  0896  1303               	bcf	3,6	;RP1=0, select bank0
  2427  0897  1606               	bsf	6,4	;volatile
  2428                           
  2429                           ;EPS.c: 21: RA1 = 1;
  2430  0898  1485               	bsf	5,1	;volatile
  2431                           
  2432                           ;EPS.c: 22: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2433  0899  300D               	movlw	13
  2434  089A  1283               	bcf	3,5	;RP0=0, select bank0
  2435  089B  1303               	bcf	3,6	;RP1=0, select bank0
  2436  089C  00A2               	movwf	??_Reset_EPS+2
  2437  089D  30AF               	movlw	175
  2438  089E  00A1               	movwf	??_Reset_EPS+1
  2439  089F  30B5               	movlw	181
  2440  08A0  00A0               	movwf	??_Reset_EPS
  2441  08A1                     u3437:	
  2442  08A1  0BA0               	decfsz	??_Reset_EPS,f
  2443  08A2  28A1               	goto	u3437
  2444  08A3  0BA1               	decfsz	??_Reset_EPS+1,f
  2445  08A4  28A1               	goto	u3437
  2446  08A5  0BA2               	decfsz	??_Reset_EPS+2,f
  2447  08A6  28A1               	goto	u3437
  2448  08A7  28A8               	nop2
  2449                           
  2450                           ;EPS.c: 23: RB4 = 0;
  2451  08A8  1283               	bcf	3,5	;RP0=0, select bank0
  2452  08A9  1303               	bcf	3,6	;RP1=0, select bank0
  2453  08AA  1206               	bcf	6,4	;volatile
  2454                           
  2455                           ;EPS.c: 24: RA1 = 0;
  2456  08AB  1085               	bcf	5,1	;volatile
  2457  08AC  0008               	return
  2458  08AD                     __end_of_Reset_EPS:	
  2459                           
  2460                           	psect	text3
  2461  0C3A                     __ptext3:	
  2462 ;; *************** function _ReceivePacket_data *****************
  2463 ;; Defined at:
  2464 ;;		line 359 in file "decode_AX25.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;		None
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;  i               2   43[BANK0 ] unsigned int 
  2469 ;;  fcschecker      2   41[BANK0 ] unsigned int 
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      PTR unsigned char 
  2472 ;; Registers used:
  2473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2479 ;;      Params:         0       0       0       0       0
  2480 ;;      Locals:         0       4       0       0       0
  2481 ;;      Temps:          0       2       0       0       0
  2482 ;;      Totals:         0       6       0       0       0
  2483 ;;Total ram usage:        6 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; Hardware stack levels required when called:    3
  2486 ;; This function calls:
  2487 ;;		_fcscheck
  2488 ;;		_getdata
  2489 ;;		_waitFlag
  2490 ;; This function is called by:
  2491 ;;		_main
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           
  2496                           ;psect for function _ReceivePacket_data
  2497  0C3A                     _ReceivePacket_data:	
  2498                           
  2499                           ;decode_AX25.c: 360: UINT fcschecker;
  2500                           ;decode_AX25.c: 363: waitFlag();
  2501                           
  2502                           ;incstack = 0
  2503                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2504  0C3A  120A  118A  2048  120A  158A  	fcall	_waitFlag
  2505                           
  2506                           ;decode_AX25.c: 365: getdata();
  2507  0C3F  120A  158A  23D9  120A  158A  	fcall	_getdata
  2508                           
  2509                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2510  0C44  120A  158A  250B  120A  158A  	fcall	_fcscheck
  2511  0C49  1283               	bcf	3,5	;RP0=0, select bank0
  2512  0C4A  1303               	bcf	3,6	;RP1=0, select bank0
  2513  0C4B  0821               	movf	?_fcscheck+1,w
  2514  0C4C  00CA               	movwf	ReceivePacket_data@fcschecker+1
  2515  0C4D  0820               	movf	?_fcscheck,w
  2516  0C4E  00C9               	movwf	ReceivePacket_data@fcschecker
  2517                           
  2518                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2519  0C4F  0349               	decf	ReceivePacket_data@fcschecker,w
  2520  0C50  044A               	iorwf	ReceivePacket_data@fcschecker+1,w
  2521  0C51  1D03               	btfss	3,2
  2522  0C52  2C99               	goto	l2934
  2523                           
  2524                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2525  0C53  01CB               	clrf	ReceivePacket_data@i
  2526  0C54  01CC               	clrf	ReceivePacket_data@i+1
  2527  0C55  3001               	movlw	low (_commandSize-__stringbase)
  2528  0C56  0084               	movwf	4
  2529  0C57  120A  158A  2000  120A  158A  	fcall	stringdir
  2530  0C5C  00C7               	movwf	??_ReceivePacket_data
  2531  0C5D  120A  158A  2000  120A  158A  	fcall	stringdir
  2532  0C62  00C8               	movwf	??_ReceivePacket_data+1
  2533  0C63  0848               	movf	??_ReceivePacket_data+1,w
  2534  0C64  024C               	subwf	ReceivePacket_data@i+1,w
  2535  0C65  1D03               	skipz
  2536  0C66  2C69               	goto	u2695
  2537  0C67  0847               	movf	??_ReceivePacket_data,w
  2538  0C68  024B               	subwf	ReceivePacket_data@i,w
  2539  0C69                     u2695:	
  2540  0C69  1803               	btfsc	3,0
  2541  0C6A  2C93               	goto	l2926
  2542  0C6B                     l2920:	
  2543                           
  2544                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2545  0C6B  084B               	movf	ReceivePacket_data@i,w
  2546  0C6C  3E14               	addlw	20
  2547  0C6D  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2548  0C6E  0084               	movwf	4
  2549  0C6F  1783               	bsf	3,7	;select IRP bank3
  2550  0C70  0800               	movf	0,w
  2551  0C71  00C7               	movwf	??_ReceivePacket_data
  2552  0C72  084B               	movf	ReceivePacket_data@i,w
  2553  0C73  3EC2               	addlw	(low (_dData| (0+256)))& (0+255)
  2554  0C74  0084               	movwf	4
  2555  0C75  0847               	movf	??_ReceivePacket_data,w
  2556  0C76  0080               	movwf	0
  2557  0C77  3001               	movlw	1
  2558  0C78  07CB               	addwf	ReceivePacket_data@i,f
  2559  0C79  1803               	skipnc
  2560  0C7A  0ACC               	incf	ReceivePacket_data@i+1,f
  2561  0C7B  3000               	movlw	0
  2562  0C7C  07CC               	addwf	ReceivePacket_data@i+1,f
  2563  0C7D  3001               	movlw	low (_commandSize-__stringbase)
  2564  0C7E  0084               	movwf	4
  2565  0C7F  120A  158A  2000  120A  158A  	fcall	stringdir
  2566  0C84  00C7               	movwf	??_ReceivePacket_data
  2567  0C85  120A  158A  2000  120A  158A  	fcall	stringdir
  2568  0C8A  00C8               	movwf	??_ReceivePacket_data+1
  2569  0C8B  0848               	movf	??_ReceivePacket_data+1,w
  2570  0C8C  024C               	subwf	ReceivePacket_data@i+1,w
  2571  0C8D  1D03               	skipz
  2572  0C8E  2C91               	goto	u2705
  2573  0C8F  0847               	movf	??_ReceivePacket_data,w
  2574  0C90  024B               	subwf	ReceivePacket_data@i,w
  2575  0C91                     u2705:	
  2576  0C91  1C03               	skipc
  2577  0C92  2C6B               	goto	l2920
  2578  0C93                     l2926:	
  2579                           
  2580                           ;decode_AX25.c: 372: }
  2581                           ;decode_AX25.c: 373: dPacketnum = 0;
  2582  0C93  01EA               	clrf	_dPacketnum
  2583  0C94  01EB               	clrf	_dPacketnum+1
  2584                           
  2585                           ;decode_AX25.c: 374: rcv_state = 0;
  2586  0C95  01EC               	clrf	_rcv_state
  2587  0C96  01ED               	clrf	_rcv_state+1
  2588                           
  2589                           ;decode_AX25.c: 375: return dData;
  2590  0C97  30C2               	movlw	(low (_dData| (0+256)))& (0+255)
  2591                           
  2592                           ;decode_AX25.c: 376: }else{
  2593  0C98  0008               	return
  2594  0C99                     l2934:	
  2595                           
  2596                           ;decode_AX25.c: 377: dPacketnum = 0;
  2597  0C99  01EA               	clrf	_dPacketnum
  2598  0C9A  01EB               	clrf	_dPacketnum+1
  2599                           
  2600                           ;decode_AX25.c: 378: rcv_state = 0;
  2601  0C9B  01EC               	clrf	_rcv_state
  2602  0C9C  01ED               	clrf	_rcv_state+1
  2603                           
  2604                           ;decode_AX25.c: 379: return 0x00;
  2605  0C9D  3000               	movlw	0
  2606  0C9E  0008               	return
  2607  0C9F                     __end_of_ReceivePacket_data:	
  2608                           
  2609                           	psect	text4
  2610  0048                     __ptext4:	
  2611 ;; *************** function _waitFlag *****************
  2612 ;; Defined at:
  2613 ;;		line 54 in file "decode_AX25.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;		None
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;  j               2   34[BANK0 ] unsigned int 
  2618 ;;  j               2   20[BANK0 ] unsigned int 
  2619 ;;  j               2   32[BANK0 ] unsigned int 
  2620 ;;  j               2   18[BANK0 ] unsigned int 
  2621 ;;  j               2   30[BANK0 ] unsigned int 
  2622 ;;  j               2   16[BANK0 ] unsigned int 
  2623 ;;  j               2   28[BANK0 ] unsigned int 
  2624 ;;  j               2   14[BANK0 ] unsigned int 
  2625 ;;  j               2   26[BANK0 ] unsigned int 
  2626 ;;  j               2   12[BANK0 ] unsigned int 
  2627 ;;  i               2   10[BANK0 ] unsigned int 
  2628 ;;  j               2   24[BANK0 ] unsigned int 
  2629 ;;  j               2   22[BANK0 ] unsigned int 
  2630 ;;  flag_judge      2   36[BANK0 ] unsigned int 
  2631 ;;  buf             1   38[BANK0 ] unsigned char 
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  1    wreg      void 
  2634 ;; Registers used:
  2635 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2636 ;; Tracked objects:
  2637 ;;		On entry : 0/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2641 ;;      Params:         0       0       0       0       0
  2642 ;;      Locals:         0      29       0       0       0
  2643 ;;      Temps:          0       4       0       0       0
  2644 ;;      Totals:         0      33       0       0       0
  2645 ;;Total ram usage:       33 bytes
  2646 ;; Hardware stack levels used:    1
  2647 ;; Hardware stack levels required when called:    2
  2648 ;; This function calls:
  2649 ;;		_getbit
  2650 ;; This function is called by:
  2651 ;;		_ReceivePacket_data
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           
  2656                           ;psect for function _waitFlag
  2657  0048                     _waitFlag:	
  2658                           
  2659                           ;decode_AX25.c: 55: UINT flag_judge;
  2660                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2661                           
  2662                           ;incstack = 0
  2663                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2664  0048  30FF               	movlw	255
  2665  0049  1283               	bcf	3,5	;RP0=0, select bank0
  2666  004A  1303               	bcf	3,6	;RP1=0, select bank0
  2667  004B  00A6               	movwf	??_waitFlag
  2668  004C  0826               	movf	??_waitFlag,w
  2669  004D  00C6               	movwf	waitFlag@buf
  2670  004E                     L6:	
  2671                           
  2672                           ;decode_AX25.c: 271: rcv_state = 0;
  2673  004E  01EC               	clrf	_rcv_state
  2674  004F  01ED               	clrf	_rcv_state+1
  2675  0050                     l2604:	
  2676  0050  3000               	movlw	0
  2677  0051  026D               	subwf	_rcv_state+1,w
  2678  0052  3002               	movlw	2
  2679  0053  1903               	skipnz
  2680  0054  026C               	subwf	_rcv_state,w
  2681  0055  1803               	btfsc	3,0
  2682  0056  0008               	return
  2683  0057                     l2238:	
  2684                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2685                           
  2686                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2687                           
  2688                           ;decode_AX25.c: 57: rcv_state = 0;
  2689                           
  2690  0057  307E               	movlw	126
  2691  0058  0646               	xorwf	waitFlag@buf,w
  2692  0059  1903               	btfsc	3,2
  2693  005A  28A7               	goto	l2260
  2694                           
  2695                           ;decode_AX25.c: 60: flag_judge = getbit();
  2696  005B  120A  158A  22D8  120A  118A  	fcall	_getbit
  2697  0060  1283               	bcf	3,5	;RP0=0, select bank0
  2698  0061  1303               	bcf	3,6	;RP1=0, select bank0
  2699  0062  0821               	movf	?_getbit+1,w
  2700  0063  00C5               	movwf	waitFlag@flag_judge+1
  2701  0064  0820               	movf	?_getbit,w
  2702  0065  00C4               	movwf	waitFlag@flag_judge
  2703                           
  2704                           ;decode_AX25.c: 61: buf = buf << 1;
  2705  0066  0846               	movf	waitFlag@buf,w
  2706  0067  00A6               	movwf	??_waitFlag
  2707  0068  0726               	addwf	??_waitFlag,w
  2708  0069  00A7               	movwf	??_waitFlag+1
  2709  006A  0827               	movf	??_waitFlag+1,w
  2710  006B  00C6               	movwf	waitFlag@buf
  2711                           
  2712                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2713  006C  0844               	movf	waitFlag@flag_judge,w
  2714  006D  0445               	iorwf	waitFlag@flag_judge+1,w
  2715  006E  1903               	btfsc	3,2
  2716  006F  2857               	goto	l2238
  2717                           
  2718                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2719                           
  2720                           ;decode_AX25.c: 64: }else{
  2721  0070  0846               	movf	waitFlag@buf,w
  2722  0071  3801               	iorlw	1
  2723  0072  00A6               	movwf	??_waitFlag
  2724  0073  0826               	movf	??_waitFlag,w
  2725  0074  00C6               	movwf	waitFlag@buf
  2726  0075  2857               	goto	l2238
  2727  0076                     l2240:	
  2728                           ;decode_AX25.c: 66: }
  2729                           ;decode_AX25.c: 67: }
  2730                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2731                           
  2732                           
  2733                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2734  0076  01AA               	clrf	waitFlag@i
  2735  0077  01AB               	clrf	waitFlag@i+1
  2736  0078  3000               	movlw	0
  2737  0079  022B               	subwf	waitFlag@i+1,w
  2738  007A  3008               	movlw	8
  2739  007B  1903               	skipnz
  2740  007C  022A               	subwf	waitFlag@i,w
  2741  007D  1803               	btfsc	3,0
  2742  007E  28A7               	goto	l2260
  2743  007F                     l2246:	
  2744                           
  2745                           ;decode_AX25.c: 73: flag_judge = getbit();
  2746  007F  120A  158A  22D8  120A  118A  	fcall	_getbit
  2747  0084  1283               	bcf	3,5	;RP0=0, select bank0
  2748  0085  1303               	bcf	3,6	;RP1=0, select bank0
  2749  0086  0821               	movf	?_getbit+1,w
  2750  0087  00C5               	movwf	waitFlag@flag_judge+1
  2751  0088  0820               	movf	?_getbit,w
  2752  0089  00C4               	movwf	waitFlag@flag_judge
  2753                           
  2754                           ;decode_AX25.c: 74: buf = buf >> 1;
  2755  008A  0846               	movf	waitFlag@buf,w
  2756  008B  00A6               	movwf	??_waitFlag
  2757  008C  1003               	clrc
  2758  008D  0C26               	rrf	??_waitFlag,w
  2759  008E  00A7               	movwf	??_waitFlag+1
  2760  008F  0827               	movf	??_waitFlag+1,w
  2761  0090  00C6               	movwf	waitFlag@buf
  2762                           
  2763                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2764  0091  0844               	movf	waitFlag@flag_judge,w
  2765  0092  0445               	iorwf	waitFlag@flag_judge+1,w
  2766  0093  1903               	btfsc	3,2
  2767  0094  289A               	goto	l2256
  2768                           
  2769                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2770                           
  2771                           ;decode_AX25.c: 77: }else{
  2772  0095  0846               	movf	waitFlag@buf,w
  2773  0096  3880               	iorlw	128
  2774  0097  00A6               	movwf	??_waitFlag
  2775  0098  0826               	movf	??_waitFlag,w
  2776  0099  00C6               	movwf	waitFlag@buf
  2777  009A                     l2256:	
  2778  009A  3001               	movlw	1
  2779  009B  07AA               	addwf	waitFlag@i,f
  2780  009C  1803               	skipnc
  2781  009D  0AAB               	incf	waitFlag@i+1,f
  2782  009E  3000               	movlw	0
  2783  009F  07AB               	addwf	waitFlag@i+1,f
  2784  00A0  3000               	movlw	0
  2785  00A1  022B               	subwf	waitFlag@i+1,w
  2786  00A2  3008               	movlw	8
  2787  00A3  1903               	skipnz
  2788  00A4  022A               	subwf	waitFlag@i,w
  2789  00A5  1C03               	skipc
  2790  00A6  287F               	goto	l2246
  2791  00A7                     l2260:	
  2792  00A7  307E               	movlw	126
  2793  00A8  0646               	xorwf	waitFlag@buf,w
  2794  00A9  1903               	btfsc	3,2
  2795  00AA  2876               	goto	l2240
  2796                           
  2797                           ;decode_AX25.c: 79: }
  2798                           ;decode_AX25.c: 80: }
  2799                           ;decode_AX25.c: 81: }
  2800                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2801  00AB  300A               	movlw	low (STR_1-__stringbase)
  2802  00AC  0084               	movwf	4
  2803  00AD  120A  158A  2000  120A  118A  	fcall	stringdir
  2804  00B2  00A6               	movwf	??_waitFlag
  2805  00B3  01A7               	clrf	??_waitFlag+1
  2806  00B4  1003               	clrc
  2807  00B5  0DA6               	rlf	??_waitFlag,f
  2808  00B6  0DA7               	rlf	??_waitFlag+1,f
  2809  00B7  0846               	movf	waitFlag@buf,w
  2810  00B8  00A8               	movwf	??_waitFlag+2
  2811  00B9  01A9               	clrf	??_waitFlag+3
  2812  00BA  0827               	movf	??_waitFlag+1,w
  2813  00BB  0629               	xorwf	??_waitFlag+3,w
  2814  00BC  1D03               	skipz
  2815  00BD  28C0               	goto	u1785
  2816  00BE  0826               	movf	??_waitFlag,w
  2817  00BF  0628               	xorwf	??_waitFlag+2,w
  2818  00C0                     u1785:	
  2819  00C0  1D03               	skipz
  2820  00C1  2A85               	goto	l2410
  2821                           
  2822                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2823  00C2  0846               	movf	waitFlag@buf,w
  2824  00C3  00A6               	movwf	??_waitFlag
  2825  00C4  086A               	movf	_dPacketnum,w
  2826  00C5  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2827  00C6  0084               	movwf	4
  2828  00C7  0826               	movf	??_waitFlag,w
  2829  00C8  1783               	bsf	3,7	;select IRP bank3
  2830  00C9  0080               	movwf	0
  2831                           
  2832                           ;decode_AX25.c: 84: dPacketnum ++;
  2833  00CA  3001               	movlw	1
  2834  00CB  07EA               	addwf	_dPacketnum,f
  2835  00CC  1803               	skipnc
  2836  00CD  0AEB               	incf	_dPacketnum+1,f
  2837  00CE  3000               	movlw	0
  2838  00CF  07EB               	addwf	_dPacketnum+1,f
  2839                           
  2840                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2841  00D0  01AC               	clrf	waitFlag@j
  2842  00D1  01AD               	clrf	waitFlag@j+1
  2843  00D2  3000               	movlw	0
  2844  00D3  022D               	subwf	waitFlag@j+1,w
  2845  00D4  3008               	movlw	8
  2846  00D5  1903               	skipnz
  2847  00D6  022C               	subwf	waitFlag@j,w
  2848  00D7  1803               	btfsc	3,0
  2849  00D8  2901               	goto	l2288
  2850  00D9                     l2274:	
  2851                           
  2852                           ;decode_AX25.c: 86: flag_judge = getbit();
  2853  00D9  120A  158A  22D8  120A  118A  	fcall	_getbit
  2854  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  2855  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  2856  00E0  0821               	movf	?_getbit+1,w
  2857  00E1  00C5               	movwf	waitFlag@flag_judge+1
  2858  00E2  0820               	movf	?_getbit,w
  2859  00E3  00C4               	movwf	waitFlag@flag_judge
  2860                           
  2861                           ;decode_AX25.c: 87: buf = buf >> 1;
  2862  00E4  0846               	movf	waitFlag@buf,w
  2863  00E5  00A6               	movwf	??_waitFlag
  2864  00E6  1003               	clrc
  2865  00E7  0C26               	rrf	??_waitFlag,w
  2866  00E8  00A7               	movwf	??_waitFlag+1
  2867  00E9  0827               	movf	??_waitFlag+1,w
  2868  00EA  00C6               	movwf	waitFlag@buf
  2869                           
  2870                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2871  00EB  0844               	movf	waitFlag@flag_judge,w
  2872  00EC  0445               	iorwf	waitFlag@flag_judge+1,w
  2873  00ED  1903               	btfsc	3,2
  2874  00EE  28F4               	goto	l2284
  2875                           
  2876                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2877                           
  2878                           ;decode_AX25.c: 90: }else{
  2879  00EF  0846               	movf	waitFlag@buf,w
  2880  00F0  3880               	iorlw	128
  2881  00F1  00A6               	movwf	??_waitFlag
  2882  00F2  0826               	movf	??_waitFlag,w
  2883  00F3  00C6               	movwf	waitFlag@buf
  2884  00F4                     l2284:	
  2885  00F4  3001               	movlw	1
  2886  00F5  07AC               	addwf	waitFlag@j,f
  2887  00F6  1803               	skipnc
  2888  00F7  0AAD               	incf	waitFlag@j+1,f
  2889  00F8  3000               	movlw	0
  2890  00F9  07AD               	addwf	waitFlag@j+1,f
  2891  00FA  3000               	movlw	0
  2892  00FB  022D               	subwf	waitFlag@j+1,w
  2893  00FC  3008               	movlw	8
  2894  00FD  1903               	skipnz
  2895  00FE  022C               	subwf	waitFlag@j,w
  2896  00FF  1C03               	skipc
  2897  0100  28D9               	goto	l2274
  2898  0101                     l2288:	
  2899                           
  2900                           ;decode_AX25.c: 92: }
  2901                           ;decode_AX25.c: 93: }
  2902                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  2903  0101  300B               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  2904  0102  0084               	movwf	4
  2905  0103  120A  158A  2000  120A  118A  	fcall	stringdir
  2906  0108  00A6               	movwf	??_waitFlag
  2907  0109  01A7               	clrf	??_waitFlag+1
  2908  010A  1003               	clrc
  2909  010B  0DA6               	rlf	??_waitFlag,f
  2910  010C  0DA7               	rlf	??_waitFlag+1,f
  2911  010D  0846               	movf	waitFlag@buf,w
  2912  010E  00A8               	movwf	??_waitFlag+2
  2913  010F  01A9               	clrf	??_waitFlag+3
  2914  0110  0827               	movf	??_waitFlag+1,w
  2915  0111  0629               	xorwf	??_waitFlag+3,w
  2916  0112  1D03               	skipz
  2917  0113  2916               	goto	u1825
  2918  0114  0826               	movf	??_waitFlag,w
  2919  0115  0628               	xorwf	??_waitFlag+2,w
  2920  0116                     u1825:	
  2921  0116  1D03               	skipz
  2922  0117  2A85               	goto	l2410
  2923                           
  2924                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  2925  0118  0846               	movf	waitFlag@buf,w
  2926  0119  00A6               	movwf	??_waitFlag
  2927  011A  086A               	movf	_dPacketnum,w
  2928  011B  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2929  011C  0084               	movwf	4
  2930  011D  0826               	movf	??_waitFlag,w
  2931  011E  1783               	bsf	3,7	;select IRP bank3
  2932  011F  0080               	movwf	0
  2933                           
  2934                           ;decode_AX25.c: 96: dPacketnum ++;
  2935  0120  3001               	movlw	1
  2936  0121  07EA               	addwf	_dPacketnum,f
  2937  0122  1803               	skipnc
  2938  0123  0AEB               	incf	_dPacketnum+1,f
  2939  0124  3000               	movlw	0
  2940  0125  07EB               	addwf	_dPacketnum+1,f
  2941                           
  2942                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  2943  0126  01AE               	clrf	waitFlag@j_101
  2944  0127  01AF               	clrf	waitFlag@j_101+1
  2945  0128  3000               	movlw	0
  2946  0129  022F               	subwf	waitFlag@j_101+1,w
  2947  012A  3008               	movlw	8
  2948  012B  1903               	skipnz
  2949  012C  022E               	subwf	waitFlag@j_101,w
  2950  012D  1803               	btfsc	3,0
  2951  012E  2957               	goto	l2314
  2952  012F                     l2300:	
  2953                           
  2954                           ;decode_AX25.c: 98: flag_judge = getbit();
  2955  012F  120A  158A  22D8  120A  118A  	fcall	_getbit
  2956  0134  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0135  1303               	bcf	3,6	;RP1=0, select bank0
  2958  0136  0821               	movf	?_getbit+1,w
  2959  0137  00C5               	movwf	waitFlag@flag_judge+1
  2960  0138  0820               	movf	?_getbit,w
  2961  0139  00C4               	movwf	waitFlag@flag_judge
  2962                           
  2963                           ;decode_AX25.c: 99: buf = buf >> 1;
  2964  013A  0846               	movf	waitFlag@buf,w
  2965  013B  00A6               	movwf	??_waitFlag
  2966  013C  1003               	clrc
  2967  013D  0C26               	rrf	??_waitFlag,w
  2968  013E  00A7               	movwf	??_waitFlag+1
  2969  013F  0827               	movf	??_waitFlag+1,w
  2970  0140  00C6               	movwf	waitFlag@buf
  2971                           
  2972                           ;decode_AX25.c: 101: buf = buf | 0x00;
  2973  0141  0844               	movf	waitFlag@flag_judge,w
  2974  0142  0445               	iorwf	waitFlag@flag_judge+1,w
  2975  0143  1903               	btfsc	3,2
  2976  0144  294A               	goto	l2310
  2977                           
  2978                           ;decode_AX25.c: 103: buf = buf | 0x80;
  2979                           
  2980                           ;decode_AX25.c: 102: }else{
  2981  0145  0846               	movf	waitFlag@buf,w
  2982  0146  3880               	iorlw	128
  2983  0147  00A6               	movwf	??_waitFlag
  2984  0148  0826               	movf	??_waitFlag,w
  2985  0149  00C6               	movwf	waitFlag@buf
  2986  014A                     l2310:	
  2987  014A  3001               	movlw	1
  2988  014B  07AE               	addwf	waitFlag@j_101,f
  2989  014C  1803               	skipnc
  2990  014D  0AAF               	incf	waitFlag@j_101+1,f
  2991  014E  3000               	movlw	0
  2992  014F  07AF               	addwf	waitFlag@j_101+1,f
  2993  0150  3000               	movlw	0
  2994  0151  022F               	subwf	waitFlag@j_101+1,w
  2995  0152  3008               	movlw	8
  2996  0153  1903               	skipnz
  2997  0154  022E               	subwf	waitFlag@j_101,w
  2998  0155  1C03               	skipc
  2999  0156  292F               	goto	l2300
  3000  0157                     l2314:	
  3001                           
  3002                           ;decode_AX25.c: 104: }
  3003                           ;decode_AX25.c: 105: }
  3004                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3005  0157  300C               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3006  0158  0084               	movwf	4
  3007  0159  120A  158A  2000  120A  118A  	fcall	stringdir
  3008  015E  00A6               	movwf	??_waitFlag
  3009  015F  01A7               	clrf	??_waitFlag+1
  3010  0160  1003               	clrc
  3011  0161  0DA6               	rlf	??_waitFlag,f
  3012  0162  0DA7               	rlf	??_waitFlag+1,f
  3013  0163  0846               	movf	waitFlag@buf,w
  3014  0164  00A8               	movwf	??_waitFlag+2
  3015  0165  01A9               	clrf	??_waitFlag+3
  3016  0166  0827               	movf	??_waitFlag+1,w
  3017  0167  0629               	xorwf	??_waitFlag+3,w
  3018  0168  1D03               	skipz
  3019  0169  296C               	goto	u1865
  3020  016A  0826               	movf	??_waitFlag,w
  3021  016B  0628               	xorwf	??_waitFlag+2,w
  3022  016C                     u1865:	
  3023  016C  1D03               	skipz
  3024  016D  2A85               	goto	l2410
  3025                           
  3026                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3027  016E  0846               	movf	waitFlag@buf,w
  3028  016F  00A6               	movwf	??_waitFlag
  3029  0170  086A               	movf	_dPacketnum,w
  3030  0171  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3031  0172  0084               	movwf	4
  3032  0173  0826               	movf	??_waitFlag,w
  3033  0174  1783               	bsf	3,7	;select IRP bank3
  3034  0175  0080               	movwf	0
  3035                           
  3036                           ;decode_AX25.c: 108: dPacketnum ++;
  3037  0176  3001               	movlw	1
  3038  0177  07EA               	addwf	_dPacketnum,f
  3039  0178  1803               	skipnc
  3040  0179  0AEB               	incf	_dPacketnum+1,f
  3041  017A  3000               	movlw	0
  3042  017B  07EB               	addwf	_dPacketnum+1,f
  3043                           
  3044                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3045  017C  01B0               	clrf	waitFlag@j_103
  3046  017D  01B1               	clrf	waitFlag@j_103+1
  3047  017E  3000               	movlw	0
  3048  017F  0231               	subwf	waitFlag@j_103+1,w
  3049  0180  3008               	movlw	8
  3050  0181  1903               	skipnz
  3051  0182  0230               	subwf	waitFlag@j_103,w
  3052  0183  1803               	btfsc	3,0
  3053  0184  29AD               	goto	l2340
  3054  0185                     l2326:	
  3055                           
  3056                           ;decode_AX25.c: 110: flag_judge = getbit();
  3057  0185  120A  158A  22D8  120A  118A  	fcall	_getbit
  3058  018A  1283               	bcf	3,5	;RP0=0, select bank0
  3059  018B  1303               	bcf	3,6	;RP1=0, select bank0
  3060  018C  0821               	movf	?_getbit+1,w
  3061  018D  00C5               	movwf	waitFlag@flag_judge+1
  3062  018E  0820               	movf	?_getbit,w
  3063  018F  00C4               	movwf	waitFlag@flag_judge
  3064                           
  3065                           ;decode_AX25.c: 111: buf = buf >> 1;
  3066  0190  0846               	movf	waitFlag@buf,w
  3067  0191  00A6               	movwf	??_waitFlag
  3068  0192  1003               	clrc
  3069  0193  0C26               	rrf	??_waitFlag,w
  3070  0194  00A7               	movwf	??_waitFlag+1
  3071  0195  0827               	movf	??_waitFlag+1,w
  3072  0196  00C6               	movwf	waitFlag@buf
  3073                           
  3074                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3075  0197  0844               	movf	waitFlag@flag_judge,w
  3076  0198  0445               	iorwf	waitFlag@flag_judge+1,w
  3077  0199  1903               	btfsc	3,2
  3078  019A  29A0               	goto	l2336
  3079                           
  3080                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3081                           
  3082                           ;decode_AX25.c: 114: }else{
  3083  019B  0846               	movf	waitFlag@buf,w
  3084  019C  3880               	iorlw	128
  3085  019D  00A6               	movwf	??_waitFlag
  3086  019E  0826               	movf	??_waitFlag,w
  3087  019F  00C6               	movwf	waitFlag@buf
  3088  01A0                     l2336:	
  3089  01A0  3001               	movlw	1
  3090  01A1  07B0               	addwf	waitFlag@j_103,f
  3091  01A2  1803               	skipnc
  3092  01A3  0AB1               	incf	waitFlag@j_103+1,f
  3093  01A4  3000               	movlw	0
  3094  01A5  07B1               	addwf	waitFlag@j_103+1,f
  3095  01A6  3000               	movlw	0
  3096  01A7  0231               	subwf	waitFlag@j_103+1,w
  3097  01A8  3008               	movlw	8
  3098  01A9  1903               	skipnz
  3099  01AA  0230               	subwf	waitFlag@j_103,w
  3100  01AB  1C03               	skipc
  3101  01AC  2985               	goto	l2326
  3102  01AD                     l2340:	
  3103                           
  3104                           ;decode_AX25.c: 116: }
  3105                           ;decode_AX25.c: 117: }
  3106                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3107  01AD  300D               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3108  01AE  0084               	movwf	4
  3109  01AF  120A  158A  2000  120A  118A  	fcall	stringdir
  3110  01B4  00A6               	movwf	??_waitFlag
  3111  01B5  01A7               	clrf	??_waitFlag+1
  3112  01B6  1003               	clrc
  3113  01B7  0DA6               	rlf	??_waitFlag,f
  3114  01B8  0DA7               	rlf	??_waitFlag+1,f
  3115  01B9  0846               	movf	waitFlag@buf,w
  3116  01BA  00A8               	movwf	??_waitFlag+2
  3117  01BB  01A9               	clrf	??_waitFlag+3
  3118  01BC  0827               	movf	??_waitFlag+1,w
  3119  01BD  0629               	xorwf	??_waitFlag+3,w
  3120  01BE  1D03               	skipz
  3121  01BF  29C2               	goto	u1905
  3122  01C0  0826               	movf	??_waitFlag,w
  3123  01C1  0628               	xorwf	??_waitFlag+2,w
  3124  01C2                     u1905:	
  3125  01C2  1D03               	skipz
  3126  01C3  2A85               	goto	l2410
  3127                           
  3128                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3129  01C4  0846               	movf	waitFlag@buf,w
  3130  01C5  00A6               	movwf	??_waitFlag
  3131  01C6  086A               	movf	_dPacketnum,w
  3132  01C7  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3133  01C8  0084               	movwf	4
  3134  01C9  0826               	movf	??_waitFlag,w
  3135  01CA  1783               	bsf	3,7	;select IRP bank3
  3136  01CB  0080               	movwf	0
  3137                           
  3138                           ;decode_AX25.c: 120: dPacketnum ++;
  3139  01CC  3001               	movlw	1
  3140  01CD  07EA               	addwf	_dPacketnum,f
  3141  01CE  1803               	skipnc
  3142  01CF  0AEB               	incf	_dPacketnum+1,f
  3143  01D0  3000               	movlw	0
  3144  01D1  07EB               	addwf	_dPacketnum+1,f
  3145                           
  3146                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3147  01D2  01B2               	clrf	waitFlag@j_105
  3148  01D3  01B3               	clrf	waitFlag@j_105+1
  3149  01D4  3000               	movlw	0
  3150  01D5  0233               	subwf	waitFlag@j_105+1,w
  3151  01D6  3008               	movlw	8
  3152  01D7  1903               	skipnz
  3153  01D8  0232               	subwf	waitFlag@j_105,w
  3154  01D9  1803               	btfsc	3,0
  3155  01DA  2A03               	goto	l2366
  3156  01DB                     l2352:	
  3157                           
  3158                           ;decode_AX25.c: 122: flag_judge = getbit();
  3159  01DB  120A  158A  22D8  120A  118A  	fcall	_getbit
  3160  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  3161  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  3162  01E2  0821               	movf	?_getbit+1,w
  3163  01E3  00C5               	movwf	waitFlag@flag_judge+1
  3164  01E4  0820               	movf	?_getbit,w
  3165  01E5  00C4               	movwf	waitFlag@flag_judge
  3166                           
  3167                           ;decode_AX25.c: 123: buf = buf >> 1;
  3168  01E6  0846               	movf	waitFlag@buf,w
  3169  01E7  00A6               	movwf	??_waitFlag
  3170  01E8  1003               	clrc
  3171  01E9  0C26               	rrf	??_waitFlag,w
  3172  01EA  00A7               	movwf	??_waitFlag+1
  3173  01EB  0827               	movf	??_waitFlag+1,w
  3174  01EC  00C6               	movwf	waitFlag@buf
  3175                           
  3176                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3177  01ED  0844               	movf	waitFlag@flag_judge,w
  3178  01EE  0445               	iorwf	waitFlag@flag_judge+1,w
  3179  01EF  1903               	btfsc	3,2
  3180  01F0  29F6               	goto	l2362
  3181                           
  3182                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3183                           
  3184                           ;decode_AX25.c: 126: }else{
  3185  01F1  0846               	movf	waitFlag@buf,w
  3186  01F2  3880               	iorlw	128
  3187  01F3  00A6               	movwf	??_waitFlag
  3188  01F4  0826               	movf	??_waitFlag,w
  3189  01F5  00C6               	movwf	waitFlag@buf
  3190  01F6                     l2362:	
  3191  01F6  3001               	movlw	1
  3192  01F7  07B2               	addwf	waitFlag@j_105,f
  3193  01F8  1803               	skipnc
  3194  01F9  0AB3               	incf	waitFlag@j_105+1,f
  3195  01FA  3000               	movlw	0
  3196  01FB  07B3               	addwf	waitFlag@j_105+1,f
  3197  01FC  3000               	movlw	0
  3198  01FD  0233               	subwf	waitFlag@j_105+1,w
  3199  01FE  3008               	movlw	8
  3200  01FF  1903               	skipnz
  3201  0200  0232               	subwf	waitFlag@j_105,w
  3202  0201  1C03               	skipc
  3203  0202  29DB               	goto	l2352
  3204  0203                     l2366:	
  3205                           
  3206                           ;decode_AX25.c: 128: }
  3207                           ;decode_AX25.c: 129: }
  3208                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3209  0203  300E               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3210  0204  0084               	movwf	4
  3211  0205  120A  158A  2000  120A  118A  	fcall	stringdir
  3212  020A  00A6               	movwf	??_waitFlag
  3213  020B  01A7               	clrf	??_waitFlag+1
  3214  020C  1003               	clrc
  3215  020D  0DA6               	rlf	??_waitFlag,f
  3216  020E  0DA7               	rlf	??_waitFlag+1,f
  3217  020F  0846               	movf	waitFlag@buf,w
  3218  0210  00A8               	movwf	??_waitFlag+2
  3219  0211  01A9               	clrf	??_waitFlag+3
  3220  0212  0827               	movf	??_waitFlag+1,w
  3221  0213  0629               	xorwf	??_waitFlag+3,w
  3222  0214  1D03               	skipz
  3223  0215  2A18               	goto	u1945
  3224  0216  0826               	movf	??_waitFlag,w
  3225  0217  0628               	xorwf	??_waitFlag+2,w
  3226  0218                     u1945:	
  3227  0218  1D03               	skipz
  3228  0219  2A85               	goto	l2410
  3229                           
  3230                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3231  021A  0846               	movf	waitFlag@buf,w
  3232  021B  00A6               	movwf	??_waitFlag
  3233  021C  086A               	movf	_dPacketnum,w
  3234  021D  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3235  021E  0084               	movwf	4
  3236  021F  0826               	movf	??_waitFlag,w
  3237  0220  1783               	bsf	3,7	;select IRP bank3
  3238  0221  0080               	movwf	0
  3239                           
  3240                           ;decode_AX25.c: 132: dPacketnum ++;
  3241  0222  3001               	movlw	1
  3242  0223  07EA               	addwf	_dPacketnum,f
  3243  0224  1803               	skipnc
  3244  0225  0AEB               	incf	_dPacketnum+1,f
  3245  0226  3000               	movlw	0
  3246  0227  07EB               	addwf	_dPacketnum+1,f
  3247                           
  3248                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3249  0228  01B4               	clrf	waitFlag@j_107
  3250  0229  01B5               	clrf	waitFlag@j_107+1
  3251  022A  3000               	movlw	0
  3252  022B  0235               	subwf	waitFlag@j_107+1,w
  3253  022C  3008               	movlw	8
  3254  022D  1903               	skipnz
  3255  022E  0234               	subwf	waitFlag@j_107,w
  3256  022F  1803               	btfsc	3,0
  3257  0230  2A59               	goto	l2392
  3258  0231                     l2378:	
  3259                           
  3260                           ;decode_AX25.c: 134: flag_judge = getbit();
  3261  0231  120A  158A  22D8  120A  118A  	fcall	_getbit
  3262  0236  1283               	bcf	3,5	;RP0=0, select bank0
  3263  0237  1303               	bcf	3,6	;RP1=0, select bank0
  3264  0238  0821               	movf	?_getbit+1,w
  3265  0239  00C5               	movwf	waitFlag@flag_judge+1
  3266  023A  0820               	movf	?_getbit,w
  3267  023B  00C4               	movwf	waitFlag@flag_judge
  3268                           
  3269                           ;decode_AX25.c: 135: buf = buf >> 1;
  3270  023C  0846               	movf	waitFlag@buf,w
  3271  023D  00A6               	movwf	??_waitFlag
  3272  023E  1003               	clrc
  3273  023F  0C26               	rrf	??_waitFlag,w
  3274  0240  00A7               	movwf	??_waitFlag+1
  3275  0241  0827               	movf	??_waitFlag+1,w
  3276  0242  00C6               	movwf	waitFlag@buf
  3277                           
  3278                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3279  0243  0844               	movf	waitFlag@flag_judge,w
  3280  0244  0445               	iorwf	waitFlag@flag_judge+1,w
  3281  0245  1903               	btfsc	3,2
  3282  0246  2A4C               	goto	l2388
  3283                           
  3284                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3285                           
  3286                           ;decode_AX25.c: 138: }else{
  3287  0247  0846               	movf	waitFlag@buf,w
  3288  0248  3880               	iorlw	128
  3289  0249  00A6               	movwf	??_waitFlag
  3290  024A  0826               	movf	??_waitFlag,w
  3291  024B  00C6               	movwf	waitFlag@buf
  3292  024C                     l2388:	
  3293  024C  3001               	movlw	1
  3294  024D  07B4               	addwf	waitFlag@j_107,f
  3295  024E  1803               	skipnc
  3296  024F  0AB5               	incf	waitFlag@j_107+1,f
  3297  0250  3000               	movlw	0
  3298  0251  07B5               	addwf	waitFlag@j_107+1,f
  3299  0252  3000               	movlw	0
  3300  0253  0235               	subwf	waitFlag@j_107+1,w
  3301  0254  3008               	movlw	8
  3302  0255  1903               	skipnz
  3303  0256  0234               	subwf	waitFlag@j_107,w
  3304  0257  1C03               	skipc
  3305  0258  2A31               	goto	l2378
  3306  0259                     l2392:	
  3307                           
  3308                           ;decode_AX25.c: 140: }
  3309                           ;decode_AX25.c: 141: }
  3310                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3311  0259  300F               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3312  025A  0084               	movwf	4
  3313  025B  120A  158A  2000  120A  118A  	fcall	stringdir
  3314  0260  00A6               	movwf	??_waitFlag
  3315  0261  01A7               	clrf	??_waitFlag+1
  3316  0262  1003               	clrc
  3317  0263  0DA6               	rlf	??_waitFlag,f
  3318  0264  0DA7               	rlf	??_waitFlag+1,f
  3319  0265  0846               	movf	waitFlag@buf,w
  3320  0266  00A8               	movwf	??_waitFlag+2
  3321  0267  01A9               	clrf	??_waitFlag+3
  3322  0268  0827               	movf	??_waitFlag+1,w
  3323  0269  0629               	xorwf	??_waitFlag+3,w
  3324  026A  1D03               	skipz
  3325  026B  2A6E               	goto	u1985
  3326  026C  0826               	movf	??_waitFlag,w
  3327  026D  0628               	xorwf	??_waitFlag+2,w
  3328  026E                     u1985:	
  3329  026E  1D03               	skipz
  3330  026F  2A85               	goto	l2410
  3331                           
  3332                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3333  0270  0846               	movf	waitFlag@buf,w
  3334  0271  00A6               	movwf	??_waitFlag
  3335  0272  086A               	movf	_dPacketnum,w
  3336  0273  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3337  0274  0084               	movwf	4
  3338  0275  0826               	movf	??_waitFlag,w
  3339  0276  1783               	bsf	3,7	;select IRP bank3
  3340  0277  0080               	movwf	0
  3341                           
  3342                           ;decode_AX25.c: 144: dPacketnum ++;
  3343  0278  3001               	movlw	1
  3344  0279  07EA               	addwf	_dPacketnum,f
  3345  027A  1803               	skipnc
  3346  027B  0AEB               	incf	_dPacketnum+1,f
  3347  027C  3000               	movlw	0
  3348  027D  07EB               	addwf	_dPacketnum+1,f
  3349                           
  3350                           ;decode_AX25.c: 145: rcv_state ++;
  3351  027E  3001               	movlw	1
  3352  027F  07EC               	addwf	_rcv_state,f
  3353  0280  1803               	skipnc
  3354  0281  0AED               	incf	_rcv_state+1,f
  3355  0282  3000               	movlw	0
  3356  0283  07ED               	addwf	_rcv_state+1,f
  3357                           
  3358                           ;decode_AX25.c: 146: }else{
  3359  0284  2A87               	goto	l171
  3360  0285                     l2410:	
  3361                           ;decode_AX25.c: 160: }
  3362                           ;decode_AX25.c: 161: }else{
  3363                           
  3364                           ;decode_AX25.c: 159: dPacketnum = 0;
  3365                           
  3366                           ;decode_AX25.c: 157: }
  3367                           ;decode_AX25.c: 158: }else{
  3368                           
  3369                           ;decode_AX25.c: 156: dPacketnum = 0;
  3370                           
  3371                           ;decode_AX25.c: 154: }
  3372                           ;decode_AX25.c: 155: }else{
  3373                           
  3374                           ;decode_AX25.c: 153: dPacketnum = 0;
  3375                           
  3376                           ;decode_AX25.c: 151: }
  3377                           ;decode_AX25.c: 152: }else{
  3378                           
  3379                           ;decode_AX25.c: 150: dPacketnum = 0;
  3380                           
  3381                           ;decode_AX25.c: 148: }
  3382                           ;decode_AX25.c: 149: }else{
  3383                           
  3384                           ;decode_AX25.c: 147: dPacketnum = 0;
  3385                           
  3386                           
  3387                           ;decode_AX25.c: 162: dPacketnum = 0;
  3388  0285  01EA               	clrf	_dPacketnum
  3389  0286  01EB               	clrf	_dPacketnum+1
  3390  0287                     l171:	
  3391                           
  3392                           ;decode_AX25.c: 163: }
  3393                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3394  0287  01B6               	clrf	waitFlag@j_109
  3395  0288  01B7               	clrf	waitFlag@j_109+1
  3396  0289  3000               	movlw	0
  3397  028A  0237               	subwf	waitFlag@j_109+1,w
  3398  028B  3008               	movlw	8
  3399  028C  1903               	skipnz
  3400  028D  0236               	subwf	waitFlag@j_109,w
  3401  028E  1803               	btfsc	3,0
  3402  028F  2AB8               	goto	l2430
  3403  0290                     l2416:	
  3404                           
  3405                           ;decode_AX25.c: 166: flag_judge = getbit();
  3406  0290  120A  158A  22D8  120A  118A  	fcall	_getbit
  3407  0295  1283               	bcf	3,5	;RP0=0, select bank0
  3408  0296  1303               	bcf	3,6	;RP1=0, select bank0
  3409  0297  0821               	movf	?_getbit+1,w
  3410  0298  00C5               	movwf	waitFlag@flag_judge+1
  3411  0299  0820               	movf	?_getbit,w
  3412  029A  00C4               	movwf	waitFlag@flag_judge
  3413                           
  3414                           ;decode_AX25.c: 167: buf = buf >> 1;
  3415  029B  0846               	movf	waitFlag@buf,w
  3416  029C  00A6               	movwf	??_waitFlag
  3417  029D  1003               	clrc
  3418  029E  0C26               	rrf	??_waitFlag,w
  3419  029F  00A7               	movwf	??_waitFlag+1
  3420  02A0  0827               	movf	??_waitFlag+1,w
  3421  02A1  00C6               	movwf	waitFlag@buf
  3422                           
  3423                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3424  02A2  0844               	movf	waitFlag@flag_judge,w
  3425  02A3  0445               	iorwf	waitFlag@flag_judge+1,w
  3426  02A4  1903               	btfsc	3,2
  3427  02A5  2AAB               	goto	l2426
  3428                           
  3429                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3430                           
  3431                           ;decode_AX25.c: 170: }else{
  3432  02A6  0846               	movf	waitFlag@buf,w
  3433  02A7  3880               	iorlw	128
  3434  02A8  00A6               	movwf	??_waitFlag
  3435  02A9  0826               	movf	??_waitFlag,w
  3436  02AA  00C6               	movwf	waitFlag@buf
  3437  02AB                     l2426:	
  3438  02AB  3001               	movlw	1
  3439  02AC  07B6               	addwf	waitFlag@j_109,f
  3440  02AD  1803               	skipnc
  3441  02AE  0AB7               	incf	waitFlag@j_109+1,f
  3442  02AF  3000               	movlw	0
  3443  02B0  07B7               	addwf	waitFlag@j_109+1,f
  3444  02B1  3000               	movlw	0
  3445  02B2  0237               	subwf	waitFlag@j_109+1,w
  3446  02B3  3008               	movlw	8
  3447  02B4  1903               	skipnz
  3448  02B5  0236               	subwf	waitFlag@j_109,w
  3449  02B6  1C03               	skipc
  3450  02B7  2A90               	goto	l2416
  3451  02B8                     l2430:	
  3452                           
  3453                           ;decode_AX25.c: 172: }
  3454                           ;decode_AX25.c: 173: }
  3455                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3456  02B8  0846               	movf	waitFlag@buf,w
  3457  02B9  00A6               	movwf	??_waitFlag
  3458  02BA  086A               	movf	_dPacketnum,w
  3459  02BB  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3460  02BC  0084               	movwf	4
  3461  02BD  0826               	movf	??_waitFlag,w
  3462  02BE  1783               	bsf	3,7	;select IRP bank3
  3463  02BF  0080               	movwf	0
  3464                           
  3465                           ;decode_AX25.c: 175: dPacketnum ++;
  3466  02C0  3001               	movlw	1
  3467  02C1  07EA               	addwf	_dPacketnum,f
  3468  02C2  1803               	skipnc
  3469  02C3  0AEB               	incf	_dPacketnum+1,f
  3470  02C4  3000               	movlw	0
  3471  02C5  07EB               	addwf	_dPacketnum+1,f
  3472                           
  3473                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3474  02C6  01B8               	clrf	waitFlag@j_110
  3475  02C7  01B9               	clrf	waitFlag@j_110+1
  3476  02C8  3000               	movlw	0
  3477  02C9  0239               	subwf	waitFlag@j_110+1,w
  3478  02CA  3008               	movlw	8
  3479  02CB  1903               	skipnz
  3480  02CC  0238               	subwf	waitFlag@j_110,w
  3481  02CD  1803               	btfsc	3,0
  3482  02CE  2AF7               	goto	l2454
  3483  02CF                     l2440:	
  3484                           
  3485                           ;decode_AX25.c: 177: flag_judge = getbit();
  3486  02CF  120A  158A  22D8  120A  118A  	fcall	_getbit
  3487  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  3488  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  3489  02D6  0821               	movf	?_getbit+1,w
  3490  02D7  00C5               	movwf	waitFlag@flag_judge+1
  3491  02D8  0820               	movf	?_getbit,w
  3492  02D9  00C4               	movwf	waitFlag@flag_judge
  3493                           
  3494                           ;decode_AX25.c: 178: buf = buf >> 1;
  3495  02DA  0846               	movf	waitFlag@buf,w
  3496  02DB  00A6               	movwf	??_waitFlag
  3497  02DC  1003               	clrc
  3498  02DD  0C26               	rrf	??_waitFlag,w
  3499  02DE  00A7               	movwf	??_waitFlag+1
  3500  02DF  0827               	movf	??_waitFlag+1,w
  3501  02E0  00C6               	movwf	waitFlag@buf
  3502                           
  3503                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3504  02E1  0844               	movf	waitFlag@flag_judge,w
  3505  02E2  0445               	iorwf	waitFlag@flag_judge+1,w
  3506  02E3  1903               	btfsc	3,2
  3507  02E4  2AEA               	goto	l2450
  3508                           
  3509                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3510                           
  3511                           ;decode_AX25.c: 181: }else{
  3512  02E5  0846               	movf	waitFlag@buf,w
  3513  02E6  3880               	iorlw	128
  3514  02E7  00A6               	movwf	??_waitFlag
  3515  02E8  0826               	movf	??_waitFlag,w
  3516  02E9  00C6               	movwf	waitFlag@buf
  3517  02EA                     l2450:	
  3518  02EA  3001               	movlw	1
  3519  02EB  07B8               	addwf	waitFlag@j_110,f
  3520  02EC  1803               	skipnc
  3521  02ED  0AB9               	incf	waitFlag@j_110+1,f
  3522  02EE  3000               	movlw	0
  3523  02EF  07B9               	addwf	waitFlag@j_110+1,f
  3524  02F0  3000               	movlw	0
  3525  02F1  0239               	subwf	waitFlag@j_110+1,w
  3526  02F2  3008               	movlw	8
  3527  02F3  1903               	skipnz
  3528  02F4  0238               	subwf	waitFlag@j_110,w
  3529  02F5  1C03               	skipc
  3530  02F6  2ACF               	goto	l2440
  3531  02F7                     l2454:	
  3532                           
  3533                           ;decode_AX25.c: 183: }
  3534                           ;decode_AX25.c: 184: }
  3535                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3536  02F7  3003               	movlw	low (STR_7-__stringbase)
  3537  02F8  0084               	movwf	4
  3538  02F9  120A  158A  2000  120A  118A  	fcall	stringdir
  3539  02FE  00A6               	movwf	??_waitFlag
  3540  02FF  01A7               	clrf	??_waitFlag+1
  3541  0300  1003               	clrc
  3542  0301  0DA6               	rlf	??_waitFlag,f
  3543  0302  0DA7               	rlf	??_waitFlag+1,f
  3544  0303  0846               	movf	waitFlag@buf,w
  3545  0304  00A8               	movwf	??_waitFlag+2
  3546  0305  01A9               	clrf	??_waitFlag+3
  3547  0306  0827               	movf	??_waitFlag+1,w
  3548  0307  0629               	xorwf	??_waitFlag+3,w
  3549  0308  1D03               	skipz
  3550  0309  2B0C               	goto	u2055
  3551  030A  0826               	movf	??_waitFlag,w
  3552  030B  0628               	xorwf	??_waitFlag+2,w
  3553  030C                     u2055:	
  3554  030C  1D03               	skipz
  3555  030D  2CD1               	goto	l2602
  3556                           
  3557                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3558  030E  0846               	movf	waitFlag@buf,w
  3559  030F  00A6               	movwf	??_waitFlag
  3560  0310  086A               	movf	_dPacketnum,w
  3561  0311  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3562  0312  0084               	movwf	4
  3563  0313  0826               	movf	??_waitFlag,w
  3564  0314  1783               	bsf	3,7	;select IRP bank3
  3565  0315  0080               	movwf	0
  3566                           
  3567                           ;decode_AX25.c: 187: dPacketnum ++;
  3568  0316  3001               	movlw	1
  3569  0317  07EA               	addwf	_dPacketnum,f
  3570  0318  1803               	skipnc
  3571  0319  0AEB               	incf	_dPacketnum+1,f
  3572  031A  3000               	movlw	0
  3573  031B  07EB               	addwf	_dPacketnum+1,f
  3574                           
  3575                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3576  031C  01BA               	clrf	waitFlag@j_112
  3577  031D  01BB               	clrf	waitFlag@j_112+1
  3578  031E  3000               	movlw	0
  3579  031F  023B               	subwf	waitFlag@j_112+1,w
  3580  0320  3008               	movlw	8
  3581  0321  1903               	skipnz
  3582  0322  023A               	subwf	waitFlag@j_112,w
  3583  0323  1803               	btfsc	3,0
  3584  0324  2B4D               	goto	l2480
  3585  0325                     l2466:	
  3586                           
  3587                           ;decode_AX25.c: 189: flag_judge = getbit();
  3588  0325  120A  158A  22D8  120A  118A  	fcall	_getbit
  3589  032A  1283               	bcf	3,5	;RP0=0, select bank0
  3590  032B  1303               	bcf	3,6	;RP1=0, select bank0
  3591  032C  0821               	movf	?_getbit+1,w
  3592  032D  00C5               	movwf	waitFlag@flag_judge+1
  3593  032E  0820               	movf	?_getbit,w
  3594  032F  00C4               	movwf	waitFlag@flag_judge
  3595                           
  3596                           ;decode_AX25.c: 190: buf = buf >> 1;
  3597  0330  0846               	movf	waitFlag@buf,w
  3598  0331  00A6               	movwf	??_waitFlag
  3599  0332  1003               	clrc
  3600  0333  0C26               	rrf	??_waitFlag,w
  3601  0334  00A7               	movwf	??_waitFlag+1
  3602  0335  0827               	movf	??_waitFlag+1,w
  3603  0336  00C6               	movwf	waitFlag@buf
  3604                           
  3605                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3606  0337  0844               	movf	waitFlag@flag_judge,w
  3607  0338  0445               	iorwf	waitFlag@flag_judge+1,w
  3608  0339  1903               	btfsc	3,2
  3609  033A  2B40               	goto	l2476
  3610                           
  3611                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3612                           
  3613                           ;decode_AX25.c: 193: }else{
  3614  033B  0846               	movf	waitFlag@buf,w
  3615  033C  3880               	iorlw	128
  3616  033D  00A6               	movwf	??_waitFlag
  3617  033E  0826               	movf	??_waitFlag,w
  3618  033F  00C6               	movwf	waitFlag@buf
  3619  0340                     l2476:	
  3620  0340  3001               	movlw	1
  3621  0341  07BA               	addwf	waitFlag@j_112,f
  3622  0342  1803               	skipnc
  3623  0343  0ABB               	incf	waitFlag@j_112+1,f
  3624  0344  3000               	movlw	0
  3625  0345  07BB               	addwf	waitFlag@j_112+1,f
  3626  0346  3000               	movlw	0
  3627  0347  023B               	subwf	waitFlag@j_112+1,w
  3628  0348  3008               	movlw	8
  3629  0349  1903               	skipnz
  3630  034A  023A               	subwf	waitFlag@j_112,w
  3631  034B  1C03               	skipc
  3632  034C  2B25               	goto	l2466
  3633  034D                     l2480:	
  3634                           
  3635                           ;decode_AX25.c: 195: }
  3636                           ;decode_AX25.c: 196: }
  3637                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3638  034D  3004               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3639  034E  0084               	movwf	4
  3640  034F  120A  158A  2000  120A  118A  	fcall	stringdir
  3641  0354  00A6               	movwf	??_waitFlag
  3642  0355  01A7               	clrf	??_waitFlag+1
  3643  0356  1003               	clrc
  3644  0357  0DA6               	rlf	??_waitFlag,f
  3645  0358  0DA7               	rlf	??_waitFlag+1,f
  3646  0359  0846               	movf	waitFlag@buf,w
  3647  035A  00A8               	movwf	??_waitFlag+2
  3648  035B  01A9               	clrf	??_waitFlag+3
  3649  035C  0827               	movf	??_waitFlag+1,w
  3650  035D  0629               	xorwf	??_waitFlag+3,w
  3651  035E  1D03               	skipz
  3652  035F  2B62               	goto	u2095
  3653  0360  0826               	movf	??_waitFlag,w
  3654  0361  0628               	xorwf	??_waitFlag+2,w
  3655  0362                     u2095:	
  3656  0362  1D03               	skipz
  3657  0363  2CD1               	goto	l2602
  3658                           
  3659                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3660  0364  0846               	movf	waitFlag@buf,w
  3661  0365  00A6               	movwf	??_waitFlag
  3662  0366  086A               	movf	_dPacketnum,w
  3663  0367  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3664  0368  0084               	movwf	4
  3665  0369  0826               	movf	??_waitFlag,w
  3666  036A  1783               	bsf	3,7	;select IRP bank3
  3667  036B  0080               	movwf	0
  3668                           
  3669                           ;decode_AX25.c: 199: dPacketnum ++;
  3670  036C  3001               	movlw	1
  3671  036D  07EA               	addwf	_dPacketnum,f
  3672  036E  1803               	skipnc
  3673  036F  0AEB               	incf	_dPacketnum+1,f
  3674  0370  3000               	movlw	0
  3675  0371  07EB               	addwf	_dPacketnum+1,f
  3676                           
  3677                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3678  0372  01BC               	clrf	waitFlag@j_114
  3679  0373  01BD               	clrf	waitFlag@j_114+1
  3680  0374  3000               	movlw	0
  3681  0375  023D               	subwf	waitFlag@j_114+1,w
  3682  0376  3008               	movlw	8
  3683  0377  1903               	skipnz
  3684  0378  023C               	subwf	waitFlag@j_114,w
  3685  0379  1803               	btfsc	3,0
  3686  037A  2BA3               	goto	l2506
  3687  037B                     l2492:	
  3688                           
  3689                           ;decode_AX25.c: 201: flag_judge = getbit();
  3690  037B  120A  158A  22D8  120A  118A  	fcall	_getbit
  3691  0380  1283               	bcf	3,5	;RP0=0, select bank0
  3692  0381  1303               	bcf	3,6	;RP1=0, select bank0
  3693  0382  0821               	movf	?_getbit+1,w
  3694  0383  00C5               	movwf	waitFlag@flag_judge+1
  3695  0384  0820               	movf	?_getbit,w
  3696  0385  00C4               	movwf	waitFlag@flag_judge
  3697                           
  3698                           ;decode_AX25.c: 202: buf = buf >> 1;
  3699  0386  0846               	movf	waitFlag@buf,w
  3700  0387  00A6               	movwf	??_waitFlag
  3701  0388  1003               	clrc
  3702  0389  0C26               	rrf	??_waitFlag,w
  3703  038A  00A7               	movwf	??_waitFlag+1
  3704  038B  0827               	movf	??_waitFlag+1,w
  3705  038C  00C6               	movwf	waitFlag@buf
  3706                           
  3707                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3708  038D  0844               	movf	waitFlag@flag_judge,w
  3709  038E  0445               	iorwf	waitFlag@flag_judge+1,w
  3710  038F  1903               	btfsc	3,2
  3711  0390  2B96               	goto	l2502
  3712                           
  3713                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3714                           
  3715                           ;decode_AX25.c: 205: }else{
  3716  0391  0846               	movf	waitFlag@buf,w
  3717  0392  3880               	iorlw	128
  3718  0393  00A6               	movwf	??_waitFlag
  3719  0394  0826               	movf	??_waitFlag,w
  3720  0395  00C6               	movwf	waitFlag@buf
  3721  0396                     l2502:	
  3722  0396  3001               	movlw	1
  3723  0397  07BC               	addwf	waitFlag@j_114,f
  3724  0398  1803               	skipnc
  3725  0399  0ABD               	incf	waitFlag@j_114+1,f
  3726  039A  3000               	movlw	0
  3727  039B  07BD               	addwf	waitFlag@j_114+1,f
  3728  039C  3000               	movlw	0
  3729  039D  023D               	subwf	waitFlag@j_114+1,w
  3730  039E  3008               	movlw	8
  3731  039F  1903               	skipnz
  3732  03A0  023C               	subwf	waitFlag@j_114,w
  3733  03A1  1C03               	skipc
  3734  03A2  2B7B               	goto	l2492
  3735  03A3                     l2506:	
  3736                           
  3737                           ;decode_AX25.c: 207: }
  3738                           ;decode_AX25.c: 208: }
  3739                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3740  03A3  3005               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3741  03A4  0084               	movwf	4
  3742  03A5  120A  158A  2000  120A  118A  	fcall	stringdir
  3743  03AA  00A6               	movwf	??_waitFlag
  3744  03AB  01A7               	clrf	??_waitFlag+1
  3745  03AC  1003               	clrc
  3746  03AD  0DA6               	rlf	??_waitFlag,f
  3747  03AE  0DA7               	rlf	??_waitFlag+1,f
  3748  03AF  0846               	movf	waitFlag@buf,w
  3749  03B0  00A8               	movwf	??_waitFlag+2
  3750  03B1  01A9               	clrf	??_waitFlag+3
  3751  03B2  0827               	movf	??_waitFlag+1,w
  3752  03B3  0629               	xorwf	??_waitFlag+3,w
  3753  03B4  1D03               	skipz
  3754  03B5  2BB8               	goto	u2135
  3755  03B6  0826               	movf	??_waitFlag,w
  3756  03B7  0628               	xorwf	??_waitFlag+2,w
  3757  03B8                     u2135:	
  3758  03B8  1D03               	skipz
  3759  03B9  2CD1               	goto	l2602
  3760                           
  3761                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3762  03BA  0846               	movf	waitFlag@buf,w
  3763  03BB  00A6               	movwf	??_waitFlag
  3764  03BC  086A               	movf	_dPacketnum,w
  3765  03BD  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3766  03BE  0084               	movwf	4
  3767  03BF  0826               	movf	??_waitFlag,w
  3768  03C0  1783               	bsf	3,7	;select IRP bank3
  3769  03C1  0080               	movwf	0
  3770                           
  3771                           ;decode_AX25.c: 211: dPacketnum ++;
  3772  03C2  3001               	movlw	1
  3773  03C3  07EA               	addwf	_dPacketnum,f
  3774  03C4  1803               	skipnc
  3775  03C5  0AEB               	incf	_dPacketnum+1,f
  3776  03C6  3000               	movlw	0
  3777  03C7  07EB               	addwf	_dPacketnum+1,f
  3778                           
  3779                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3780  03C8  01BE               	clrf	waitFlag@j_116
  3781  03C9  01BF               	clrf	waitFlag@j_116+1
  3782  03CA  3000               	movlw	0
  3783  03CB  023F               	subwf	waitFlag@j_116+1,w
  3784  03CC  3008               	movlw	8
  3785  03CD  1903               	skipnz
  3786  03CE  023E               	subwf	waitFlag@j_116,w
  3787  03CF  1803               	btfsc	3,0
  3788  03D0  2BF9               	goto	l2532
  3789  03D1                     l2518:	
  3790                           
  3791                           ;decode_AX25.c: 213: flag_judge = getbit();
  3792  03D1  120A  158A  22D8  120A  118A  	fcall	_getbit
  3793  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  3794  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  3795  03D8  0821               	movf	?_getbit+1,w
  3796  03D9  00C5               	movwf	waitFlag@flag_judge+1
  3797  03DA  0820               	movf	?_getbit,w
  3798  03DB  00C4               	movwf	waitFlag@flag_judge
  3799                           
  3800                           ;decode_AX25.c: 214: buf = buf >> 1;
  3801  03DC  0846               	movf	waitFlag@buf,w
  3802  03DD  00A6               	movwf	??_waitFlag
  3803  03DE  1003               	clrc
  3804  03DF  0C26               	rrf	??_waitFlag,w
  3805  03E0  00A7               	movwf	??_waitFlag+1
  3806  03E1  0827               	movf	??_waitFlag+1,w
  3807  03E2  00C6               	movwf	waitFlag@buf
  3808                           
  3809                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3810  03E3  0844               	movf	waitFlag@flag_judge,w
  3811  03E4  0445               	iorwf	waitFlag@flag_judge+1,w
  3812  03E5  1903               	btfsc	3,2
  3813  03E6  2BEC               	goto	l2528
  3814                           
  3815                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3816                           
  3817                           ;decode_AX25.c: 217: }else{
  3818  03E7  0846               	movf	waitFlag@buf,w
  3819  03E8  3880               	iorlw	128
  3820  03E9  00A6               	movwf	??_waitFlag
  3821  03EA  0826               	movf	??_waitFlag,w
  3822  03EB  00C6               	movwf	waitFlag@buf
  3823  03EC                     l2528:	
  3824  03EC  3001               	movlw	1
  3825  03ED  07BE               	addwf	waitFlag@j_116,f
  3826  03EE  1803               	skipnc
  3827  03EF  0ABF               	incf	waitFlag@j_116+1,f
  3828  03F0  3000               	movlw	0
  3829  03F1  07BF               	addwf	waitFlag@j_116+1,f
  3830  03F2  3000               	movlw	0
  3831  03F3  023F               	subwf	waitFlag@j_116+1,w
  3832  03F4  3008               	movlw	8
  3833  03F5  1903               	skipnz
  3834  03F6  023E               	subwf	waitFlag@j_116,w
  3835  03F7  1C03               	skipc
  3836  03F8  2BD1               	goto	l2518
  3837  03F9                     l2532:	
  3838                           
  3839                           ;decode_AX25.c: 219: }
  3840                           ;decode_AX25.c: 220: }
  3841                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3842  03F9  3006               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3843  03FA  0084               	movwf	4
  3844  03FB  120A  158A  2000  120A  118A  	fcall	stringdir
  3845  0400  00A6               	movwf	??_waitFlag
  3846  0401  01A7               	clrf	??_waitFlag+1
  3847  0402  1003               	clrc
  3848  0403  0DA6               	rlf	??_waitFlag,f
  3849  0404  0DA7               	rlf	??_waitFlag+1,f
  3850  0405  0846               	movf	waitFlag@buf,w
  3851  0406  00A8               	movwf	??_waitFlag+2
  3852  0407  01A9               	clrf	??_waitFlag+3
  3853  0408  0827               	movf	??_waitFlag+1,w
  3854  0409  0629               	xorwf	??_waitFlag+3,w
  3855  040A  1D03               	skipz
  3856  040B  2C0E               	goto	u2175
  3857  040C  0826               	movf	??_waitFlag,w
  3858  040D  0628               	xorwf	??_waitFlag+2,w
  3859  040E                     u2175:	
  3860  040E  1D03               	skipz
  3861  040F  2CD1               	goto	l2602
  3862                           
  3863                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3864  0410  0846               	movf	waitFlag@buf,w
  3865  0411  00A6               	movwf	??_waitFlag
  3866  0412  086A               	movf	_dPacketnum,w
  3867  0413  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3868  0414  0084               	movwf	4
  3869  0415  0826               	movf	??_waitFlag,w
  3870  0416  1783               	bsf	3,7	;select IRP bank3
  3871  0417  0080               	movwf	0
  3872                           
  3873                           ;decode_AX25.c: 223: dPacketnum ++;
  3874  0418  3001               	movlw	1
  3875  0419  07EA               	addwf	_dPacketnum,f
  3876  041A  1803               	skipnc
  3877  041B  0AEB               	incf	_dPacketnum+1,f
  3878  041C  3000               	movlw	0
  3879  041D  07EB               	addwf	_dPacketnum+1,f
  3880                           
  3881                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  3882  041E  01C0               	clrf	waitFlag@j_118
  3883  041F  01C1               	clrf	waitFlag@j_118+1
  3884  0420  3000               	movlw	0
  3885  0421  0241               	subwf	waitFlag@j_118+1,w
  3886  0422  3008               	movlw	8
  3887  0423  1903               	skipnz
  3888  0424  0240               	subwf	waitFlag@j_118,w
  3889  0425  1803               	btfsc	3,0
  3890  0426  2C4F               	goto	l2558
  3891  0427                     l2544:	
  3892                           
  3893                           ;decode_AX25.c: 225: flag_judge = getbit();
  3894  0427  120A  158A  22D8  120A  118A  	fcall	_getbit
  3895  042C  1283               	bcf	3,5	;RP0=0, select bank0
  3896  042D  1303               	bcf	3,6	;RP1=0, select bank0
  3897  042E  0821               	movf	?_getbit+1,w
  3898  042F  00C5               	movwf	waitFlag@flag_judge+1
  3899  0430  0820               	movf	?_getbit,w
  3900  0431  00C4               	movwf	waitFlag@flag_judge
  3901                           
  3902                           ;decode_AX25.c: 226: buf = buf >> 1;
  3903  0432  0846               	movf	waitFlag@buf,w
  3904  0433  00A6               	movwf	??_waitFlag
  3905  0434  1003               	clrc
  3906  0435  0C26               	rrf	??_waitFlag,w
  3907  0436  00A7               	movwf	??_waitFlag+1
  3908  0437  0827               	movf	??_waitFlag+1,w
  3909  0438  00C6               	movwf	waitFlag@buf
  3910                           
  3911                           ;decode_AX25.c: 228: buf = buf | 0x00;
  3912  0439  0844               	movf	waitFlag@flag_judge,w
  3913  043A  0445               	iorwf	waitFlag@flag_judge+1,w
  3914  043B  1903               	btfsc	3,2
  3915  043C  2C42               	goto	l2554
  3916                           
  3917                           ;decode_AX25.c: 230: buf = buf | 0x80;
  3918                           
  3919                           ;decode_AX25.c: 229: }else{
  3920  043D  0846               	movf	waitFlag@buf,w
  3921  043E  3880               	iorlw	128
  3922  043F  00A6               	movwf	??_waitFlag
  3923  0440  0826               	movf	??_waitFlag,w
  3924  0441  00C6               	movwf	waitFlag@buf
  3925  0442                     l2554:	
  3926  0442  3001               	movlw	1
  3927  0443  07C0               	addwf	waitFlag@j_118,f
  3928  0444  1803               	skipnc
  3929  0445  0AC1               	incf	waitFlag@j_118+1,f
  3930  0446  3000               	movlw	0
  3931  0447  07C1               	addwf	waitFlag@j_118+1,f
  3932  0448  3000               	movlw	0
  3933  0449  0241               	subwf	waitFlag@j_118+1,w
  3934  044A  3008               	movlw	8
  3935  044B  1903               	skipnz
  3936  044C  0240               	subwf	waitFlag@j_118,w
  3937  044D  1C03               	skipc
  3938  044E  2C27               	goto	l2544
  3939  044F                     l2558:	
  3940                           
  3941                           ;decode_AX25.c: 231: }
  3942                           ;decode_AX25.c: 232: }
  3943                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  3944  044F  3007               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  3945  0450  0084               	movwf	4
  3946  0451  120A  158A  2000  120A  118A  	fcall	stringdir
  3947  0456  00A6               	movwf	??_waitFlag
  3948  0457  01A7               	clrf	??_waitFlag+1
  3949  0458  1003               	clrc
  3950  0459  0DA6               	rlf	??_waitFlag,f
  3951  045A  0DA7               	rlf	??_waitFlag+1,f
  3952  045B  0846               	movf	waitFlag@buf,w
  3953  045C  00A8               	movwf	??_waitFlag+2
  3954  045D  01A9               	clrf	??_waitFlag+3
  3955  045E  0827               	movf	??_waitFlag+1,w
  3956  045F  0629               	xorwf	??_waitFlag+3,w
  3957  0460  1D03               	skipz
  3958  0461  2C64               	goto	u2215
  3959  0462  0826               	movf	??_waitFlag,w
  3960  0463  0628               	xorwf	??_waitFlag+2,w
  3961  0464                     u2215:	
  3962  0464  1D03               	skipz
  3963  0465  2CD1               	goto	l2602
  3964                           
  3965                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  3966  0466  0846               	movf	waitFlag@buf,w
  3967  0467  00A6               	movwf	??_waitFlag
  3968  0468  086A               	movf	_dPacketnum,w
  3969  0469  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3970  046A  0084               	movwf	4
  3971  046B  0826               	movf	??_waitFlag,w
  3972  046C  1783               	bsf	3,7	;select IRP bank3
  3973  046D  0080               	movwf	0
  3974                           
  3975                           ;decode_AX25.c: 235: dPacketnum ++;
  3976  046E  3001               	movlw	1
  3977  046F  07EA               	addwf	_dPacketnum,f
  3978  0470  1803               	skipnc
  3979  0471  0AEB               	incf	_dPacketnum+1,f
  3980  0472  3000               	movlw	0
  3981  0473  07EB               	addwf	_dPacketnum+1,f
  3982                           
  3983                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  3984  0474  01C2               	clrf	waitFlag@j_120
  3985  0475  01C3               	clrf	waitFlag@j_120+1
  3986  0476  3000               	movlw	0
  3987  0477  0243               	subwf	waitFlag@j_120+1,w
  3988  0478  3008               	movlw	8
  3989  0479  1903               	skipnz
  3990  047A  0242               	subwf	waitFlag@j_120,w
  3991  047B  1803               	btfsc	3,0
  3992  047C  2CA5               	goto	l2584
  3993  047D                     l2570:	
  3994                           
  3995                           ;decode_AX25.c: 237: flag_judge = getbit();
  3996  047D  120A  158A  22D8  120A  118A  	fcall	_getbit
  3997  0482  1283               	bcf	3,5	;RP0=0, select bank0
  3998  0483  1303               	bcf	3,6	;RP1=0, select bank0
  3999  0484  0821               	movf	?_getbit+1,w
  4000  0485  00C5               	movwf	waitFlag@flag_judge+1
  4001  0486  0820               	movf	?_getbit,w
  4002  0487  00C4               	movwf	waitFlag@flag_judge
  4003                           
  4004                           ;decode_AX25.c: 238: buf = buf >> 1;
  4005  0488  0846               	movf	waitFlag@buf,w
  4006  0489  00A6               	movwf	??_waitFlag
  4007  048A  1003               	clrc
  4008  048B  0C26               	rrf	??_waitFlag,w
  4009  048C  00A7               	movwf	??_waitFlag+1
  4010  048D  0827               	movf	??_waitFlag+1,w
  4011  048E  00C6               	movwf	waitFlag@buf
  4012                           
  4013                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4014  048F  0844               	movf	waitFlag@flag_judge,w
  4015  0490  0445               	iorwf	waitFlag@flag_judge+1,w
  4016  0491  1903               	btfsc	3,2
  4017  0492  2C98               	goto	l2580
  4018                           
  4019                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4020                           
  4021                           ;decode_AX25.c: 241: }else{
  4022  0493  0846               	movf	waitFlag@buf,w
  4023  0494  3880               	iorlw	128
  4024  0495  00A6               	movwf	??_waitFlag
  4025  0496  0826               	movf	??_waitFlag,w
  4026  0497  00C6               	movwf	waitFlag@buf
  4027  0498                     l2580:	
  4028  0498  3001               	movlw	1
  4029  0499  07C2               	addwf	waitFlag@j_120,f
  4030  049A  1803               	skipnc
  4031  049B  0AC3               	incf	waitFlag@j_120+1,f
  4032  049C  3000               	movlw	0
  4033  049D  07C3               	addwf	waitFlag@j_120+1,f
  4034  049E  3000               	movlw	0
  4035  049F  0243               	subwf	waitFlag@j_120+1,w
  4036  04A0  3008               	movlw	8
  4037  04A1  1903               	skipnz
  4038  04A2  0242               	subwf	waitFlag@j_120,w
  4039  04A3  1C03               	skipc
  4040  04A4  2C7D               	goto	l2570
  4041  04A5                     l2584:	
  4042                           
  4043                           ;decode_AX25.c: 243: }
  4044                           ;decode_AX25.c: 244: }
  4045                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4046  04A5  3008               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4047  04A6  0084               	movwf	4
  4048  04A7  120A  158A  2000  120A  118A  	fcall	stringdir
  4049  04AC  00A6               	movwf	??_waitFlag
  4050  04AD  01A7               	clrf	??_waitFlag+1
  4051  04AE  1003               	clrc
  4052  04AF  0DA6               	rlf	??_waitFlag,f
  4053  04B0  0DA7               	rlf	??_waitFlag+1,f
  4054  04B1  0846               	movf	waitFlag@buf,w
  4055  04B2  00A8               	movwf	??_waitFlag+2
  4056  04B3  01A9               	clrf	??_waitFlag+3
  4057  04B4  0827               	movf	??_waitFlag+1,w
  4058  04B5  0629               	xorwf	??_waitFlag+3,w
  4059  04B6  1D03               	skipz
  4060  04B7  2CBA               	goto	u2255
  4061  04B8  0826               	movf	??_waitFlag,w
  4062  04B9  0628               	xorwf	??_waitFlag+2,w
  4063  04BA                     u2255:	
  4064  04BA  1D03               	skipz
  4065  04BB  2CD1               	goto	l2602
  4066                           
  4067                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4068  04BC  0846               	movf	waitFlag@buf,w
  4069  04BD  00A6               	movwf	??_waitFlag
  4070  04BE  086A               	movf	_dPacketnum,w
  4071  04BF  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4072  04C0  0084               	movwf	4
  4073  04C1  0826               	movf	??_waitFlag,w
  4074  04C2  1783               	bsf	3,7	;select IRP bank3
  4075  04C3  0080               	movwf	0
  4076                           
  4077                           ;decode_AX25.c: 247: dPacketnum ++;
  4078  04C4  3001               	movlw	1
  4079  04C5  07EA               	addwf	_dPacketnum,f
  4080  04C6  1803               	skipnc
  4081  04C7  0AEB               	incf	_dPacketnum+1,f
  4082  04C8  3000               	movlw	0
  4083  04C9  07EB               	addwf	_dPacketnum+1,f
  4084                           
  4085                           ;decode_AX25.c: 248: rcv_state ++;
  4086  04CA  3001               	movlw	1
  4087  04CB  07EC               	addwf	_rcv_state,f
  4088  04CC  1803               	skipnc
  4089  04CD  0AED               	incf	_rcv_state+1,f
  4090  04CE  3000               	movlw	0
  4091  04CF  07ED               	addwf	_rcv_state+1,f
  4092                           
  4093                           ;decode_AX25.c: 249: }else{
  4094  04D0  2850               	goto	l2604
  4095  04D1                     l2602:	
  4096                           ;decode_AX25.c: 268: }
  4097                           ;decode_AX25.c: 269: }else{
  4098                           
  4099                           ;decode_AX25.c: 267: rcv_state = 0;
  4100                           
  4101                           ;decode_AX25.c: 266: dPacketnum = 0;
  4102                           
  4103                           ;decode_AX25.c: 264: }
  4104                           ;decode_AX25.c: 265: }else{
  4105                           
  4106                           ;decode_AX25.c: 263: rcv_state = 0;
  4107                           
  4108                           ;decode_AX25.c: 262: dPacketnum = 0;
  4109                           
  4110                           ;decode_AX25.c: 260: }
  4111                           ;decode_AX25.c: 261: }else{
  4112                           
  4113                           ;decode_AX25.c: 259: rcv_state = 0;
  4114                           
  4115                           ;decode_AX25.c: 258: dPacketnum = 0;
  4116                           
  4117                           ;decode_AX25.c: 256: }
  4118                           ;decode_AX25.c: 257: }else{
  4119                           
  4120                           ;decode_AX25.c: 255: rcv_state = 0;
  4121                           
  4122                           ;decode_AX25.c: 254: dPacketnum = 0;
  4123                           
  4124                           ;decode_AX25.c: 252: }
  4125                           ;decode_AX25.c: 253: }else{
  4126                           
  4127                           ;decode_AX25.c: 251: rcv_state = 0;
  4128                           
  4129                           ;decode_AX25.c: 250: dPacketnum = 0;
  4130                           
  4131                           
  4132                           ;decode_AX25.c: 270: dPacketnum = 0;
  4133  04D1  01EA               	clrf	_dPacketnum
  4134  04D2  01EB               	clrf	_dPacketnum+1
  4135  04D3  284E               	goto	L6
  4136  04D4                     __end_of_waitFlag:	
  4137                           
  4138                           	psect	text5
  4139  0BD9                     __ptext5:	
  4140 ;; *************** function _getdata *****************
  4141 ;; Defined at:
  4142 ;;		line 278 in file "decode_AX25.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;  dbitstatus      2   12[BANK0 ] unsigned int 
  4147 ;;  dstuff          2   10[BANK0 ] unsigned int 
  4148 ;;  bufstore_cou    2    8[BANK0 ] unsigned int 
  4149 ;;  buf             1   14[BANK0 ] unsigned char 
  4150 ;;  dammy_data      1    0        unsigned char 
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4160 ;;      Params:         0       0       0       0       0
  4161 ;;      Locals:         0       7       0       0       0
  4162 ;;      Temps:          0       2       0       0       0
  4163 ;;      Totals:         0       9       0       0       0
  4164 ;;Total ram usage:        9 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:    2
  4167 ;; This function calls:
  4168 ;;		_getbit
  4169 ;; This function is called by:
  4170 ;;		_ReceivePacket_data
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174                           
  4175                           ;psect for function _getdata
  4176  0BD9                     _getdata:	
  4177                           
  4178                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4179                           
  4180                           ;incstack = 0
  4181                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4182  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  4183  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  4184  0BDB  01AE               	clrf	getdata@buf
  4185                           
  4186                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4187  0BDC  01AA               	clrf	getdata@dstuff
  4188  0BDD  01AB               	clrf	getdata@dstuff+1
  4189                           
  4190                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4191                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4192  0BDE  01A8               	clrf	getdata@bufstore_counter
  4193  0BDF  01A9               	clrf	getdata@bufstore_counter+1
  4194                           
  4195                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4196  0BE0  01AC               	clrf	getdata@dbitstatus
  4197  0BE1  01AD               	clrf	getdata@dbitstatus+1
  4198  0BE2                     l2638:	
  4199                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4200                           
  4201  0BE2  3002               	movlw	2
  4202  0BE3  066C               	xorwf	_rcv_state,w
  4203  0BE4  046D               	iorwf	_rcv_state+1,w
  4204  0BE5  1D03               	btfss	3,2
  4205  0BE6  0008               	return
  4206                           
  4207                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4208  0BE7  120A  158A  22D8  120A  158A  	fcall	_getbit
  4209  0BEC  1283               	bcf	3,5	;RP0=0, select bank0
  4210  0BED  1303               	bcf	3,6	;RP1=0, select bank0
  4211  0BEE  0821               	movf	?_getbit+1,w
  4212  0BEF  00AD               	movwf	getdata@dbitstatus+1
  4213  0BF0  0820               	movf	?_getbit,w
  4214  0BF1  00AC               	movwf	getdata@dbitstatus
  4215                           
  4216                           ;decode_AX25.c: 287: if(dstuff == 5){
  4217  0BF2  3005               	movlw	5
  4218  0BF3  062A               	xorwf	getdata@dstuff,w
  4219  0BF4  042B               	iorwf	getdata@dstuff+1,w
  4220  0BF5  1D03               	btfss	3,2
  4221  0BF6  2C05               	goto	l2620
  4222                           
  4223                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4224  0BF7  032C               	decf	getdata@dbitstatus,w
  4225  0BF8  042D               	iorwf	getdata@dbitstatus+1,w
  4226  0BF9  1D03               	btfss	3,2
  4227  0BFA  2C02               	goto	l2618
  4228                           
  4229                           ;decode_AX25.c: 289: rcv_state ++;
  4230  0BFB  3001               	movlw	1
  4231  0BFC  07EC               	addwf	_rcv_state,f
  4232  0BFD  1803               	skipnc
  4233  0BFE  0AED               	incf	_rcv_state+1,f
  4234  0BFF  3000               	movlw	0
  4235  0C00  07ED               	addwf	_rcv_state+1,f
  4236                           
  4237                           ;decode_AX25.c: 290: break;
  4238  0C01  0008               	return
  4239  0C02                     l2618:	
  4240                           ;decode_AX25.c: 291: }else{
  4241                           
  4242                           
  4243                           ;decode_AX25.c: 292: dstuff = 0;
  4244  0C02  01AA               	clrf	getdata@dstuff
  4245  0C03  01AB               	clrf	getdata@dstuff+1
  4246                           
  4247                           ;decode_AX25.c: 293: }
  4248                           ;decode_AX25.c: 294: }else{
  4249  0C04  2BE2               	goto	l2638
  4250  0C05                     l2620:	
  4251                           
  4252                           ;decode_AX25.c: 295: buf = buf >> 1;
  4253  0C05  082E               	movf	getdata@buf,w
  4254  0C06  00A6               	movwf	??_getdata
  4255  0C07  1003               	clrc
  4256  0C08  0C26               	rrf	??_getdata,w
  4257  0C09  00A7               	movwf	??_getdata+1
  4258  0C0A  0827               	movf	??_getdata+1,w
  4259  0C0B  00AE               	movwf	getdata@buf
  4260                           
  4261                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4262  0C0C  082C               	movf	getdata@dbitstatus,w
  4263  0C0D  042D               	iorwf	getdata@dbitstatus+1,w
  4264  0C0E  1D03               	btfss	3,2
  4265  0C0F  2C13               	goto	l2624
  4266                           
  4267                           ;decode_AX25.c: 298: dstuff = 0;
  4268  0C10  01AA               	clrf	getdata@dstuff
  4269  0C11  01AB               	clrf	getdata@dstuff+1
  4270                           
  4271                           ;decode_AX25.c: 299: }else{
  4272  0C12  2C1E               	goto	l2628
  4273  0C13                     l2624:	
  4274                           
  4275                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4276  0C13  082E               	movf	getdata@buf,w
  4277  0C14  3880               	iorlw	128
  4278  0C15  00A6               	movwf	??_getdata
  4279  0C16  0826               	movf	??_getdata,w
  4280  0C17  00AE               	movwf	getdata@buf
  4281                           
  4282                           ;decode_AX25.c: 301: dstuff ++;
  4283  0C18  3001               	movlw	1
  4284  0C19  07AA               	addwf	getdata@dstuff,f
  4285  0C1A  1803               	skipnc
  4286  0C1B  0AAB               	incf	getdata@dstuff+1,f
  4287  0C1C  3000               	movlw	0
  4288  0C1D  07AB               	addwf	getdata@dstuff+1,f
  4289  0C1E                     l2628:	
  4290                           
  4291                           ;decode_AX25.c: 302: }
  4292                           ;decode_AX25.c: 303: bufstore_counter ++;
  4293  0C1E  3001               	movlw	1
  4294  0C1F  07A8               	addwf	getdata@bufstore_counter,f
  4295  0C20  1803               	skipnc
  4296  0C21  0AA9               	incf	getdata@bufstore_counter+1,f
  4297  0C22  3000               	movlw	0
  4298  0C23  07A9               	addwf	getdata@bufstore_counter+1,f
  4299                           
  4300                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4301  0C24  3008               	movlw	8
  4302  0C25  0628               	xorwf	getdata@bufstore_counter,w
  4303  0C26  0429               	iorwf	getdata@bufstore_counter+1,w
  4304  0C27  1D03               	btfss	3,2
  4305  0C28  2BE2               	goto	l2638
  4306                           
  4307                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4308  0C29  01A8               	clrf	getdata@bufstore_counter
  4309  0C2A  01A9               	clrf	getdata@bufstore_counter+1
  4310                           
  4311                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4312  0C2B  082E               	movf	getdata@buf,w
  4313  0C2C  00A6               	movwf	??_getdata
  4314  0C2D  086A               	movf	_dPacketnum,w
  4315  0C2E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4316  0C2F  0084               	movwf	4
  4317  0C30  0826               	movf	??_getdata,w
  4318  0C31  1783               	bsf	3,7	;select IRP bank3
  4319  0C32  0080               	movwf	0
  4320                           
  4321                           ;decode_AX25.c: 307: dPacketnum ++;
  4322  0C33  3001               	movlw	1
  4323  0C34  07EA               	addwf	_dPacketnum,f
  4324  0C35  1803               	skipnc
  4325  0C36  0AEB               	incf	_dPacketnum+1,f
  4326  0C37  3000               	movlw	0
  4327  0C38  07EB               	addwf	_dPacketnum+1,f
  4328  0C39  2BE2               	goto	l2638
  4329  0C3A                     __end_of_getdata:	
  4330                           
  4331                           	psect	text6
  4332  0AD8                     __ptext6:	
  4333 ;; *************** function _getbit *****************
  4334 ;; Defined at:
  4335 ;;		line 40 in file "decode_AX25.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  i               2    4[BANK0 ] unsigned int 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  2    0[BANK0 ] unsigned int 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4349 ;;      Params:         0       2       0       0       0
  4350 ;;      Locals:         0       2       0       0       0
  4351 ;;      Temps:          0       2       0       0       0
  4352 ;;      Totals:         0       6       0       0       0
  4353 ;;Total ram usage:        6 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    1
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_waitFlag
  4360 ;;		_getdata
  4361 ;;		_conv_DI_UARTRX
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           
  4366                           ;psect for function _getbit
  4367  0AD8                     _getbit:	
  4368                           
  4369                           ;decode_AX25.c: 41: static UINT oldbit;
  4370                           ;decode_AX25.c: 42: oldbit = RB5;
  4371                           
  4372                           ;incstack = 0
  4373                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4374  0AD8  1003               	clrc
  4375  0AD9  1283               	bcf	3,5	;RP0=0, select bank0
  4376  0ADA  1303               	bcf	3,6	;RP1=0, select bank0
  4377  0ADB  1A86               	btfsc	6,5	;volatile
  4378  0ADC  1403               	setc
  4379  0ADD  3000               	movlw	0
  4380  0ADE  1803               	skipnc
  4381  0ADF  3001               	movlw	1
  4382  0AE0  00A2               	movwf	??_getbit
  4383  0AE1  01A3               	clrf	??_getbit+1
  4384  0AE2  0822               	movf	??_getbit,w
  4385  0AE3  00FB               	movwf	getbit@oldbit
  4386  0AE4  0823               	movf	??_getbit+1,w
  4387  0AE5  00FC               	movwf	getbit@oldbit+1
  4388                           
  4389                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4390  0AE6  01A4               	clrf	getbit@i
  4391  0AE7  01A5               	clrf	getbit@i+1
  4392  0AE8  3000               	movlw	0
  4393  0AE9  0225               	subwf	getbit@i+1,w
  4394  0AEA  303E               	movlw	62
  4395  0AEB  1903               	skipnz
  4396  0AEC  0224               	subwf	getbit@i,w
  4397  0AED  1803               	btfsc	3,0
  4398  0AEE  2B19               	goto	l2084
  4399                           
  4400                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4401  0AEF  1003               	clrc
  4402  0AF0                     L7:	
  4403  0AF0  1A86               	btfsc	6,5	;volatile
  4404  0AF1  1403               	setc
  4405  0AF2  3000               	movlw	0
  4406  0AF3  1803               	skipnc
  4407  0AF4  3001               	movlw	1
  4408  0AF5  00A2               	movwf	??_getbit
  4409  0AF6  01A3               	clrf	??_getbit+1
  4410  0AF7  087C               	movf	getbit@oldbit+1,w
  4411  0AF8  0623               	xorwf	??_getbit+1,w
  4412  0AF9  1D03               	skipz
  4413  0AFA  2AFD               	goto	u1485
  4414  0AFB  087B               	movf	getbit@oldbit,w
  4415  0AFC  0622               	xorwf	??_getbit,w
  4416  0AFD                     u1485:	
  4417  0AFD  1903               	skipnz
  4418  0AFE  2B0C               	goto	l2082
  4419                           
  4420                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4421  0AFF  30C7               	movlw	199
  4422  0B00  1283               	bcf	3,5	;RP0=0, select bank0
  4423  0B01  1303               	bcf	3,6	;RP1=0, select bank0
  4424  0B02  00A2               	movwf	??_getbit
  4425  0B03                     u3447:	
  4426  0B03  2B04               	nop2
  4427  0B04  0BA2               	decfsz	??_getbit,f
  4428  0B05  2B03               	goto	u3447
  4429  0B06  2B07               	nop2
  4430                           
  4431                           ;decode_AX25.c: 47: return 0;
  4432  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  4433  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  4434  0B09  01A0               	clrf	?_getbit
  4435  0B0A  01A1               	clrf	?_getbit+1
  4436  0B0B  0008               	return
  4437  0B0C                     l2082:	
  4438  0B0C  3001               	movlw	1
  4439  0B0D  07A4               	addwf	getbit@i,f
  4440  0B0E  1803               	skipnc
  4441  0B0F  0AA5               	incf	getbit@i+1,f
  4442  0B10  3000               	movlw	0
  4443  0B11  07A5               	addwf	getbit@i+1,f
  4444  0B12  3000               	movlw	0
  4445  0B13  0225               	subwf	getbit@i+1,w
  4446  0B14  303E               	movlw	62
  4447  0B15  1903               	skipnz
  4448  0B16  0224               	subwf	getbit@i,w
  4449  0B17  1C03               	skipc
  4450  0B18  2AF0               	goto	L7
  4451  0B19                     l2084:	
  4452                           
  4453                           ;decode_AX25.c: 48: }
  4454                           ;decode_AX25.c: 49: }
  4455                           ;decode_AX25.c: 50: return 1;
  4456  0B19  3001               	movlw	1
  4457  0B1A  00A0               	movwf	?_getbit
  4458  0B1B  3000               	movlw	0
  4459  0B1C  00A1               	movwf	?_getbit+1
  4460  0B1D  0008               	return
  4461  0B1E                     __end_of_getbit:	
  4462                           
  4463                           	psect	text7
  4464  0D0B                     __ptext7:	
  4465 ;; *************** function _fcscheck *****************
  4466 ;; Defined at:
  4467 ;;		line 313 in file "decode_AX25.c"
  4468 ;; Parameters:    Size  Location     Type
  4469 ;;		None
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;  j               2    7[BANK0 ] unsigned int 
  4472 ;;  i               2    5[BANK0 ] unsigned int 
  4473 ;;  byte            1    9[BANK0 ] unsigned char 
  4474 ;;  bt              1    4[BANK0 ] unsigned char 
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  2    0[BANK0 ] unsigned int 
  4477 ;; Registers used:
  4478 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4484 ;;      Params:         0       2       0       0       0
  4485 ;;      Locals:         0       6       0       0       0
  4486 ;;      Temps:          0       2       0       0       0
  4487 ;;      Totals:         0      10       0       0       0
  4488 ;;Total ram usage:       10 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    1
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		_ReceivePacket_data
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           
  4499                           ;psect for function _fcscheck
  4500  0D0B                     _fcscheck:	
  4501                           
  4502                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4503                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4504                           
  4505                           ;incstack = 0
  4506                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4507  0D0B  30FF               	movlw	255
  4508  0D0C  1283               	bcf	3,5	;RP0=0, select bank0
  4509  0D0D  1303               	bcf	3,6	;RP1=0, select bank0
  4510  0D0E  00EF               	movwf	_dfcshi
  4511  0D0F  00A2               	movwf	??_fcscheck
  4512  0D10  0822               	movf	??_fcscheck,w
  4513  0D11  00EE               	movwf	_dfcslo
  4514                           
  4515                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4516  0D12  3003               	movlw	3
  4517  0D13  066C               	xorwf	_rcv_state,w
  4518  0D14  046D               	iorwf	_rcv_state+1,w
  4519  0D15  1D03               	btfss	3,2
  4520  0D16  0008               	return
  4521                           
  4522                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4523  0D17  01A5               	clrf	fcscheck@i
  4524  0D18  01A6               	clrf	fcscheck@i+1
  4525  0D19                     l2666:	
  4526  0D19  086A               	movf	_dPacketnum,w
  4527  0D1A  3EFE               	addlw	254
  4528  0D1B  00A2               	movwf	??_fcscheck
  4529  0D1C  086B               	movf	_dPacketnum+1,w
  4530  0D1D  1803               	skipnc
  4531  0D1E  3E01               	addlw	1
  4532  0D1F  3EFF               	addlw	255
  4533  0D20  00A3               	movwf	??_fcscheck+1
  4534  0D21  0823               	movf	??_fcscheck+1,w
  4535  0D22  0226               	subwf	fcscheck@i+1,w
  4536  0D23  1D03               	skipz
  4537  0D24  2D27               	goto	u2355
  4538  0D25  0822               	movf	??_fcscheck,w
  4539  0D26  0225               	subwf	fcscheck@i,w
  4540  0D27                     u2355:	
  4541  0D27  1803               	btfsc	3,0
  4542  0D28  2D72               	goto	l236
  4543                           
  4544                           ;decode_AX25.c: 318: byte = dPacket[i];
  4545  0D29  0825               	movf	fcscheck@i,w
  4546  0D2A  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4547  0D2B  0084               	movwf	4
  4548  0D2C  1783               	bsf	3,7	;select IRP bank3
  4549  0D2D  0800               	movf	0,w
  4550  0D2E  00A2               	movwf	??_fcscheck
  4551  0D2F  0822               	movf	??_fcscheck,w
  4552  0D30  00A9               	movwf	fcscheck@byte
  4553                           
  4554                           ;decode_AX25.c: 319: for(UINT j=0;j<8;j++){
  4555  0D31  01A7               	clrf	fcscheck@j
  4556  0D32  01A8               	clrf	fcscheck@j+1
  4557  0D33  3000               	movlw	0
  4558  0D34  0228               	subwf	fcscheck@j+1,w
  4559  0D35  3008               	movlw	8
  4560  0D36  1903               	skipnz
  4561  0D37  0227               	subwf	fcscheck@j,w
  4562  0D38  1803               	btfsc	3,0
  4563  0D39  2D6B               	goto	l2664
  4564  0D3A                     l2652:	
  4565                           
  4566                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4567  0D3A  0829               	movf	fcscheck@byte,w
  4568  0D3B  3901               	andlw	1
  4569  0D3C  00A2               	movwf	??_fcscheck
  4570  0D3D  0822               	movf	??_fcscheck,w
  4571  0D3E  00A4               	movwf	fcscheck@bt
  4572  0D3F  1003               	bcf	3,0	;# 
  4573  0D40  0CEF               	rrf	_dfcshi,f	;# 
  4574  0D41  0CEE               	rrf	_dfcslo,f	;# 
  4575                           
  4576                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4577  0D42  3001               	movlw	1
  4578  0D43  1283               	bcf	3,5	;RP0=0, select bank0
  4579  0D44  1303               	bcf	3,6	;RP1=0, select bank0
  4580  0D45  0503               	andwf	3,w	;volatile
  4581  0D46  00A2               	movwf	??_fcscheck
  4582  0D47  0824               	movf	fcscheck@bt,w
  4583  0D48  0622               	xorwf	??_fcscheck,w
  4584  0D49  00A3               	movwf	??_fcscheck+1
  4585  0D4A  0323               	decf	??_fcscheck+1,w
  4586  0D4B  1D03               	btfss	3,2
  4587  0D4C  2D57               	goto	l2658
  4588                           
  4589                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4590  0D4D  086F               	movf	_dfcshi,w
  4591  0D4E  3A84               	xorlw	132
  4592  0D4F  00A2               	movwf	??_fcscheck
  4593  0D50  0822               	movf	??_fcscheck,w
  4594  0D51  00EF               	movwf	_dfcshi
  4595                           
  4596                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4597  0D52  086E               	movf	_dfcslo,w
  4598  0D53  3A08               	xorlw	8
  4599  0D54  00A2               	movwf	??_fcscheck
  4600  0D55  0822               	movf	??_fcscheck,w
  4601  0D56  00EE               	movwf	_dfcslo
  4602  0D57                     l2658:	
  4603                           
  4604                           ;decode_AX25.c: 329: }
  4605                           ;decode_AX25.c: 330: byte = byte >> 1;
  4606  0D57  0829               	movf	fcscheck@byte,w
  4607  0D58  00A2               	movwf	??_fcscheck
  4608  0D59  1003               	clrc
  4609  0D5A  0C22               	rrf	??_fcscheck,w
  4610  0D5B  00A3               	movwf	??_fcscheck+1
  4611  0D5C  0823               	movf	??_fcscheck+1,w
  4612  0D5D  00A9               	movwf	fcscheck@byte
  4613  0D5E  3001               	movlw	1
  4614  0D5F  07A7               	addwf	fcscheck@j,f
  4615  0D60  1803               	skipnc
  4616  0D61  0AA8               	incf	fcscheck@j+1,f
  4617  0D62  3000               	movlw	0
  4618  0D63  07A8               	addwf	fcscheck@j+1,f
  4619  0D64  3000               	movlw	0
  4620  0D65  0228               	subwf	fcscheck@j+1,w
  4621  0D66  3008               	movlw	8
  4622  0D67  1903               	skipnz
  4623  0D68  0227               	subwf	fcscheck@j,w
  4624  0D69  1C03               	skipc
  4625  0D6A  2D3A               	goto	l2652
  4626  0D6B                     l2664:	
  4627  0D6B  3001               	movlw	1
  4628  0D6C  07A5               	addwf	fcscheck@i,f
  4629  0D6D  1803               	skipnc
  4630  0D6E  0AA6               	incf	fcscheck@i+1,f
  4631  0D6F  3000               	movlw	0
  4632  0D70  07A6               	addwf	fcscheck@i+1,f
  4633  0D71  2D19               	goto	l2666
  4634  0D72                     l236:	
  4635                           
  4636                           ;decode_AX25.c: 331: }
  4637                           ;decode_AX25.c: 332: }
  4638                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4639  0D72  09EE               	comf	_dfcslo,f
  4640                           
  4641                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4642  0D73  09EF               	comf	_dfcshi,f
  4643                           
  4644                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4645  0D74  086A               	movf	_dPacketnum,w
  4646  0D75  3EFE               	addlw	254
  4647  0D76  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4648  0D77  0084               	movwf	4
  4649  0D78  1783               	bsf	3,7	;select IRP bank3
  4650  0D79  0800               	movf	0,w
  4651  0D7A  066E               	xorwf	_dfcslo,w
  4652  0D7B  1D03               	skipz
  4653  0D7C  2D8A               	goto	l2678
  4654  0D7D  086A               	movf	_dPacketnum,w
  4655  0D7E  3EFF               	addlw	255
  4656  0D7F  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4657  0D80  0084               	movwf	4
  4658  0D81  0800               	movf	0,w
  4659  0D82  066F               	xorwf	_dfcshi,w
  4660  0D83  1D03               	skipz
  4661  0D84  2D8A               	goto	l2678
  4662                           
  4663                           ;decode_AX25.c: 342: return 1;
  4664  0D85  3001               	movlw	1
  4665  0D86  00A0               	movwf	?_fcscheck
  4666  0D87  3000               	movlw	0
  4667  0D88  00A1               	movwf	?_fcscheck+1
  4668  0D89  0008               	return
  4669  0D8A                     l2678:	
  4670                           ;decode_AX25.c: 343: }else{
  4671                           
  4672                           
  4673                           ;decode_AX25.c: 348: return 0;
  4674  0D8A  01A0               	clrf	?_fcscheck
  4675  0D8B  01A1               	clrf	?_fcscheck+1
  4676  0D8C  0008               	return
  4677  0D8D                     __end_of_fcscheck:	
  4678                           
  4679                           	psect	text8
  4680  087D                     __ptext8:	
  4681 ;; *************** function _NM_waddress *****************
  4682 ;; Defined at:
  4683 ;;		line 72 in file "UART.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;  NM_wad_heade    1    wreg     unsigned char 
  4686 ;;  whigh_addres    1    1[BANK0 ] unsigned char 
  4687 ;;  wlow_address    1    2[BANK0 ] unsigned char 
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;  NM_wad_heade    1    3[BANK0 ] unsigned char 
  4690 ;; Return value:  Size  Location     Type
  4691 ;;                  1    wreg      void 
  4692 ;; Registers used:
  4693 ;;		wreg, status,2, status,0, pclath, cstack
  4694 ;; Tracked objects:
  4695 ;;		On entry : 0/0
  4696 ;;		On exit  : 0/0
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4699 ;;      Params:         0       2       0       0       0
  4700 ;;      Locals:         0       1       0       0       0
  4701 ;;      Temps:          0       0       0       0       0
  4702 ;;      Totals:         0       3       0       0       0
  4703 ;;Total ram usage:        3 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; Hardware stack levels required when called:    2
  4706 ;; This function calls:
  4707 ;;		_putch
  4708 ;; This function is called by:
  4709 ;;		_main
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           
  4714                           ;psect for function _NM_waddress
  4715  087D                     _NM_waddress:	
  4716                           
  4717                           ;incstack = 0
  4718                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4719                           ;NM_waddress@NM_wad_header stored from wreg
  4720  087D  1283               	bcf	3,5	;RP0=0, select bank0
  4721  087E  1303               	bcf	3,6	;RP1=0, select bank0
  4722  087F  00A3               	movwf	NM_waddress@NM_wad_header
  4723                           
  4724                           ;UART.c: 73: putch(NM_wad_header);
  4725  0880  0823               	movf	NM_waddress@NM_wad_header,w
  4726  0881  120A  158A  203F  120A  158A  	fcall	_putch
  4727                           
  4728                           ;UART.c: 74: putch(whigh_address);
  4729  0886  1283               	bcf	3,5	;RP0=0, select bank0
  4730  0887  1303               	bcf	3,6	;RP1=0, select bank0
  4731  0888  0821               	movf	NM_waddress@whigh_address,w
  4732  0889  120A  158A  203F  120A  158A  	fcall	_putch
  4733                           
  4734                           ;UART.c: 75: putch(wlow_address);
  4735  088E  1283               	bcf	3,5	;RP0=0, select bank0
  4736  088F  1303               	bcf	3,6	;RP1=0, select bank0
  4737  0890  0822               	movf	NM_waddress@wlow_address,w
  4738  0891  120A  158A  203F   	fcall	_putch
  4739  0894  0008               	return
  4740  0895                     __end_of_NM_waddress:	
  4741                           
  4742                           	psect	text9
  4743  083F                     __ptext9:	
  4744 ;; *************** function _putch *****************
  4745 ;; Defined at:
  4746 ;;		line 39 in file "UART.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  byte            1    wreg     unsigned char 
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;  byte            1    0[BANK0 ] unsigned char 
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  1    wreg      void 
  4753 ;; Registers used:
  4754 ;;		wreg
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4760 ;;      Params:         0       0       0       0       0
  4761 ;;      Locals:         0       1       0       0       0
  4762 ;;      Temps:          0       0       0       0       0
  4763 ;;      Totals:         0       1       0       0       0
  4764 ;;Total ram usage:        1 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; Hardware stack levels required when called:    1
  4767 ;; This function calls:
  4768 ;;		Nothing
  4769 ;; This function is called by:
  4770 ;;		_NM_waddress
  4771 ;;		_TXOBC_waddress
  4772 ;;		_conv_DI_UARTRX
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           
  4777                           ;psect for function _putch
  4778  083F                     _putch:	
  4779                           
  4780                           ;incstack = 0
  4781                           ; Regs used in _putch: [wreg]
  4782                           ;putch@byte stored from wreg
  4783  083F  1283               	bcf	3,5	;RP0=0, select bank0
  4784  0840  1303               	bcf	3,6	;RP1=0, select bank0
  4785  0841  00A0               	movwf	putch@byte
  4786  0842                     l55:	
  4787                           ;UART.c: 40: while(!TXIF);
  4788                           
  4789  0842  1E0C               	btfss	12,4	;volatile
  4790  0843  2842               	goto	l55
  4791                           
  4792                           ;UART.c: 41: TXREG = byte;
  4793  0844  0820               	movf	putch@byte,w
  4794  0845  0099               	movwf	25	;volatile
  4795  0846  0008               	return
  4796  0847                     __end_of_putch:	
  4797                           
  4798                           	psect	text10
  4799  08C6                     __ptext10:	
  4800 ;; *************** function _Init_SERIAL *****************
  4801 ;; Defined at:
  4802 ;;		line 6 in file "UART.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4816 ;;      Params:         0       0       0       0       0
  4817 ;;      Locals:         0       0       0       0       0
  4818 ;;      Temps:          0       0       0       0       0
  4819 ;;      Totals:         0       0       0       0       0
  4820 ;;Total ram usage:        0 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    1
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		_main
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           
  4831                           ;psect for function _Init_SERIAL
  4832  08C6                     _Init_SERIAL:	
  4833                           
  4834                           ;UART.c: 7: SPBRG = 10;
  4835                           
  4836                           ;incstack = 0
  4837                           ; Regs used in _Init_SERIAL: [wreg]
  4838  08C6  300A               	movlw	10
  4839  08C7  1683               	bsf	3,5	;RP0=1, select bank1
  4840  08C8  1303               	bcf	3,6	;RP1=0, select bank1
  4841  08C9  0099               	movwf	25	;volatile
  4842                           
  4843                           ;UART.c: 8: BRGH = 0;
  4844  08CA  1118               	bcf	24,2	;volatile
  4845                           
  4846                           ;UART.c: 9: SYNC = 0;
  4847  08CB  1218               	bcf	24,4	;volatile
  4848                           
  4849                           ;UART.c: 10: SPEN = 1;
  4850  08CC  1283               	bcf	3,5	;RP0=0, select bank0
  4851  08CD  1303               	bcf	3,6	;RP1=0, select bank0
  4852  08CE  1798               	bsf	24,7	;volatile
  4853                           
  4854                           ;UART.c: 11: CREN = 1;
  4855  08CF  1618               	bsf	24,4	;volatile
  4856                           
  4857                           ;UART.c: 12: SREN = 0;
  4858  08D0  1298               	bcf	24,5	;volatile
  4859                           
  4860                           ;UART.c: 13: RCIF = 0;
  4861  08D1  128C               	bcf	12,5	;volatile
  4862                           
  4863                           ;UART.c: 14: TXIE = 0;
  4864  08D2  1683               	bsf	3,5	;RP0=1, select bank1
  4865  08D3  1303               	bcf	3,6	;RP1=0, select bank1
  4866  08D4  120C               	bcf	12,4	;volatile
  4867                           
  4868                           ;UART.c: 15: RCIE = 1;
  4869  08D5  168C               	bsf	12,5	;volatile
  4870                           
  4871                           ;UART.c: 16: TX9 = 0;
  4872  08D6  1318               	bcf	24,6	;volatile
  4873                           
  4874                           ;UART.c: 17: RX9 = 0;
  4875  08D7  1283               	bcf	3,5	;RP0=0, select bank0
  4876  08D8  1303               	bcf	3,6	;RP1=0, select bank0
  4877  08D9  1318               	bcf	24,6	;volatile
  4878                           
  4879                           ;UART.c: 18: TXEN = 0;
  4880  08DA  1683               	bsf	3,5	;RP0=1, select bank1
  4881  08DB  1303               	bcf	3,6	;RP1=0, select bank1
  4882  08DC  1298               	bcf	24,5	;volatile
  4883                           
  4884                           ;UART.c: 19: TXEN = 1;
  4885  08DD  1698               	bsf	24,5	;volatile
  4886  08DE  0008               	return
  4887  08DF                     __end_of_Init_SERIAL:	
  4888                           
  4889                           	psect	text11
  4890  08DF                     __ptext11:	
  4891 ;; *************** function _Init_MPU *****************
  4892 ;; Defined at:
  4893 ;;		line 8 in file "Init_MPU.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      void 
  4900 ;; Registers used:
  4901 ;;		wreg, status,2
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4907 ;;      Params:         0       0       0       0       0
  4908 ;;      Locals:         0       0       0       0       0
  4909 ;;      Temps:          0       0       0       0       0
  4910 ;;      Totals:         0       0       0       0       0
  4911 ;;Total ram usage:        0 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    1
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_main
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           
  4922                           ;psect for function _Init_MPU
  4923  08DF                     _Init_MPU:	
  4924                           
  4925                           ;Init_MPU.c: 11: PORTA = 0x00;
  4926                           
  4927                           ;incstack = 0
  4928                           ; Regs used in _Init_MPU: [wreg+status,2]
  4929  08DF  1283               	bcf	3,5	;RP0=0, select bank0
  4930  08E0  1303               	bcf	3,6	;RP1=0, select bank0
  4931  08E1  0185               	clrf	5	;volatile
  4932                           
  4933                           ;Init_MPU.c: 12: PORTB = 0x00;
  4934  08E2  0186               	clrf	6	;volatile
  4935                           
  4936                           ;Init_MPU.c: 13: PORTC = 0x00;
  4937  08E3  0187               	clrf	7	;volatile
  4938                           
  4939                           ;Init_MPU.c: 14: PORTD = 0x00;
  4940  08E4  0188               	clrf	8	;volatile
  4941                           
  4942                           ;Init_MPU.c: 15: PORTE = 0x00;
  4943  08E5  0189               	clrf	9	;volatile
  4944                           
  4945                           ;Init_MPU.c: 18: ANSEL = 0x00;
  4946  08E6  1683               	bsf	3,5	;RP0=1, select bank3
  4947  08E7  1703               	bsf	3,6	;RP1=1, select bank3
  4948  08E8  0188               	clrf	8	;volatile
  4949                           
  4950                           ;Init_MPU.c: 19: ANSELH = 0x00;
  4951  08E9  0189               	clrf	9	;volatile
  4952                           
  4953                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  4954  08EA  3080               	movlw	128
  4955  08EB  1683               	bsf	3,5	;RP0=1, select bank1
  4956  08EC  1303               	bcf	3,6	;RP1=0, select bank1
  4957  08ED  0085               	movwf	5	;volatile
  4958                           
  4959                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  4960  08EE  3020               	movlw	32
  4961  08EF  0086               	movwf	6	;volatile
  4962                           
  4963                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  4964  08F0  3098               	movlw	152
  4965  08F1  0087               	movwf	7	;volatile
  4966                           
  4967                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  4968  08F2  0188               	clrf	8	;volatile
  4969                           
  4970                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  4971  08F3  0189               	clrf	9	;volatile
  4972                           
  4973                           ;Init_MPU.c: 30: PORTA = 0x00;
  4974  08F4  1283               	bcf	3,5	;RP0=0, select bank0
  4975  08F5  1303               	bcf	3,6	;RP1=0, select bank0
  4976  08F6  0185               	clrf	5	;volatile
  4977                           
  4978                           ;Init_MPU.c: 31: PORTB = 0x00;
  4979  08F7  0186               	clrf	6	;volatile
  4980                           
  4981                           ;Init_MPU.c: 32: PORTC = 0x00;
  4982  08F8  0187               	clrf	7	;volatile
  4983                           
  4984                           ;Init_MPU.c: 33: PORTD = 0x00;
  4985  08F9  0188               	clrf	8	;volatile
  4986                           
  4987                           ;Init_MPU.c: 34: PORTE = 0x00;
  4988  08FA  0189               	clrf	9	;volatile
  4989  08FB  0008               	return
  4990  08FC                     __end_of_Init_MPU:	
  4991                           
  4992                           	psect	text12
  4993  09D8                     __ptext12:	
  4994 ;; *************** function _Init_I2C_M *****************
  4995 ;; Defined at:
  4996 ;;		line 8 in file "I2C.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  c               4   14[BANK0 ] const unsigned long 
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  1    wreg      void 
  5003 ;; Registers used:
  5004 ;;		wreg, status,2, status,0, pclath, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5010 ;;      Params:         0       4       0       0       0
  5011 ;;      Locals:         0       0       0       0       0
  5012 ;;      Temps:          0       4       0       0       0
  5013 ;;      Totals:         0       8       0       0       0
  5014 ;;Total ram usage:        8 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    2
  5017 ;; This function calls:
  5018 ;;		___lldiv
  5019 ;; This function is called by:
  5020 ;;		_main
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           
  5025                           ;psect for function _Init_I2C_M
  5026  09D8                     _Init_I2C_M:	
  5027                           
  5028                           ;I2C.c: 9: SSPCON = 0b00101000;
  5029                           
  5030                           ;incstack = 0
  5031                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5032  09D8  3028               	movlw	40
  5033  09D9  1283               	bcf	3,5	;RP0=0, select bank0
  5034  09DA  1303               	bcf	3,6	;RP1=0, select bank0
  5035  09DB  0094               	movwf	20	;volatile
  5036                           
  5037                           ;I2C.c: 10: SSPCON2 = 0;
  5038  09DC  1683               	bsf	3,5	;RP0=1, select bank1
  5039  09DD  1303               	bcf	3,6	;RP1=0, select bank1
  5040  09DE  0191               	clrf	17	;volatile
  5041                           
  5042                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5043  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  5044  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  5045  09E1  082E               	movf	Init_I2C_M@c,w
  5046  09E2  00B2               	movwf	??_Init_I2C_M
  5047  09E3  082F               	movf	Init_I2C_M@c+1,w
  5048  09E4  00B3               	movwf	??_Init_I2C_M+1
  5049  09E5  0830               	movf	Init_I2C_M@c+2,w
  5050  09E6  00B4               	movwf	??_Init_I2C_M+2
  5051  09E7  0831               	movf	Init_I2C_M@c+3,w
  5052  09E8  00B5               	movwf	??_Init_I2C_M+3
  5053  09E9  3002               	movlw	2
  5054  09EA                     u2715:	
  5055  09EA  1003               	clrc
  5056  09EB  0DB2               	rlf	??_Init_I2C_M,f
  5057  09EC  0DB3               	rlf	??_Init_I2C_M+1,f
  5058  09ED  0DB4               	rlf	??_Init_I2C_M+2,f
  5059  09EE  0DB5               	rlf	??_Init_I2C_M+3,f
  5060  09EF  3EFF               	addlw	-1
  5061  09F0  1D03               	skipz
  5062  09F1  29EA               	goto	u2715
  5063  09F2  0835               	movf	??_Init_I2C_M+3,w
  5064  09F3  00A3               	movwf	___lldiv@divisor+3
  5065  09F4  0834               	movf	??_Init_I2C_M+2,w
  5066  09F5  00A2               	movwf	___lldiv@divisor+2
  5067  09F6  0833               	movf	??_Init_I2C_M+1,w
  5068  09F7  00A1               	movwf	___lldiv@divisor+1
  5069  09F8  0832               	movf	??_Init_I2C_M,w
  5070  09F9  00A0               	movwf	___lldiv@divisor
  5071  09FA  3000               	movlw	0
  5072  09FB  00A7               	movwf	___lldiv@dividend+3
  5073  09FC  3098               	movlw	152
  5074  09FD  00A6               	movwf	___lldiv@dividend+2
  5075  09FE  3096               	movlw	150
  5076  09FF  00A5               	movwf	___lldiv@dividend+1
  5077  0A00  3080               	movlw	128
  5078  0A01  00A4               	movwf	___lldiv@dividend
  5079  0A02  120A  158A  2379   	fcall	___lldiv
  5080  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  5081  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  5082  0A07  0820               	movf	?___lldiv,w
  5083  0A08  3EFF               	addlw	255
  5084  0A09  1683               	bsf	3,5	;RP0=1, select bank1
  5085  0A0A  1303               	bcf	3,6	;RP1=0, select bank1
  5086  0A0B  0093               	movwf	19	;volatile
  5087                           
  5088                           ;I2C.c: 12: SSPSTAT = 0;
  5089  0A0C  0194               	clrf	20	;volatile
  5090  0A0D  0008               	return
  5091  0A0E                     __end_of_Init_I2C_M:	
  5092                           
  5093                           	psect	text13
  5094  0B79                     __ptext13:	
  5095 ;; *************** function ___lldiv *****************
  5096 ;; Defined at:
  5097 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;  divisor         4    0[BANK0 ] unsigned long 
  5100 ;;  dividend        4    4[BANK0 ] unsigned long 
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;  quotient        4    9[BANK0 ] unsigned long 
  5103 ;;  counter         1   13[BANK0 ] unsigned char 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  4    0[BANK0 ] unsigned long 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5113 ;;      Params:         0       8       0       0       0
  5114 ;;      Locals:         0       5       0       0       0
  5115 ;;      Temps:          0       1       0       0       0
  5116 ;;      Totals:         0      14       0       0       0
  5117 ;;Total ram usage:       14 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    1
  5120 ;; This function calls:
  5121 ;;		Nothing
  5122 ;; This function is called by:
  5123 ;;		_Init_I2C_M
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127                           
  5128                           ;psect for function ___lldiv
  5129  0B79                     ___lldiv:	
  5130                           
  5131                           ;incstack = 0
  5132                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5133  0B79  3000               	movlw	0
  5134  0B7A  1283               	bcf	3,5	;RP0=0, select bank0
  5135  0B7B  1303               	bcf	3,6	;RP1=0, select bank0
  5136  0B7C  00AC               	movwf	___lldiv@quotient+3
  5137  0B7D  3000               	movlw	0
  5138  0B7E  00AB               	movwf	___lldiv@quotient+2
  5139  0B7F  3000               	movlw	0
  5140  0B80  00AA               	movwf	___lldiv@quotient+1
  5141  0B81  3000               	movlw	0
  5142  0B82  00A9               	movwf	___lldiv@quotient
  5143  0B83  0823               	movf	___lldiv@divisor+3,w
  5144  0B84  0422               	iorwf	___lldiv@divisor+2,w
  5145  0B85  0421               	iorwf	___lldiv@divisor+1,w
  5146  0B86  0420               	iorwf	___lldiv@divisor,w
  5147  0B87  1903               	skipnz
  5148  0B88  2BD0               	goto	l2842
  5149  0B89  01AD               	clrf	___lldiv@counter
  5150  0B8A  0AAD               	incf	___lldiv@counter,f
  5151  0B8B                     l2828:	
  5152  0B8B  1BA3               	btfsc	___lldiv@divisor+3,7
  5153  0B8C  2B9B               	goto	l2830
  5154  0B8D  3001               	movlw	1
  5155  0B8E  00A8               	movwf	??___lldiv
  5156  0B8F                     u2625:	
  5157  0B8F  1003               	clrc
  5158  0B90  0DA0               	rlf	___lldiv@divisor,f
  5159  0B91  0DA1               	rlf	___lldiv@divisor+1,f
  5160  0B92  0DA2               	rlf	___lldiv@divisor+2,f
  5161  0B93  0DA3               	rlf	___lldiv@divisor+3,f
  5162  0B94  0BA8               	decfsz	??___lldiv,f
  5163  0B95  2B8F               	goto	u2625
  5164  0B96  3001               	movlw	1
  5165  0B97  00A8               	movwf	??___lldiv
  5166  0B98  0828               	movf	??___lldiv,w
  5167  0B99  07AD               	addwf	___lldiv@counter,f
  5168  0B9A  2B8B               	goto	l2828
  5169  0B9B                     l2830:	
  5170  0B9B  3001               	movlw	1
  5171  0B9C  00A8               	movwf	??___lldiv
  5172  0B9D                     u2645:	
  5173  0B9D  1003               	clrc
  5174  0B9E  0DA9               	rlf	___lldiv@quotient,f
  5175  0B9F  0DAA               	rlf	___lldiv@quotient+1,f
  5176  0BA0  0DAB               	rlf	___lldiv@quotient+2,f
  5177  0BA1  0DAC               	rlf	___lldiv@quotient+3,f
  5178  0BA2  0BA8               	decfsz	??___lldiv,f
  5179  0BA3  2B9D               	goto	u2645
  5180  0BA4  0823               	movf	___lldiv@divisor+3,w
  5181  0BA5  0227               	subwf	___lldiv@dividend+3,w
  5182  0BA6  1D03               	skipz
  5183  0BA7  2BB2               	goto	u2655
  5184  0BA8  0822               	movf	___lldiv@divisor+2,w
  5185  0BA9  0226               	subwf	___lldiv@dividend+2,w
  5186  0BAA  1D03               	skipz
  5187  0BAB  2BB2               	goto	u2655
  5188  0BAC  0821               	movf	___lldiv@divisor+1,w
  5189  0BAD  0225               	subwf	___lldiv@dividend+1,w
  5190  0BAE  1D03               	skipz
  5191  0BAF  2BB2               	goto	u2655
  5192  0BB0  0820               	movf	___lldiv@divisor,w
  5193  0BB1  0224               	subwf	___lldiv@dividend,w
  5194  0BB2                     u2655:	
  5195  0BB2  1C03               	skipc
  5196  0BB3  2BC3               	goto	l2838
  5197  0BB4  0820               	movf	___lldiv@divisor,w
  5198  0BB5  02A4               	subwf	___lldiv@dividend,f
  5199  0BB6  0821               	movf	___lldiv@divisor+1,w
  5200  0BB7  1C03               	skipc
  5201  0BB8  0F21               	incfsz	___lldiv@divisor+1,w
  5202  0BB9  02A5               	subwf	___lldiv@dividend+1,f
  5203  0BBA  0822               	movf	___lldiv@divisor+2,w
  5204  0BBB  1C03               	skipc
  5205  0BBC  0F22               	incfsz	___lldiv@divisor+2,w
  5206  0BBD  02A6               	subwf	___lldiv@dividend+2,f
  5207  0BBE  0823               	movf	___lldiv@divisor+3,w
  5208  0BBF  1C03               	skipc
  5209  0BC0  0F23               	incfsz	___lldiv@divisor+3,w
  5210  0BC1  02A7               	subwf	___lldiv@dividend+3,f
  5211  0BC2  1429               	bsf	___lldiv@quotient,0
  5212  0BC3                     l2838:	
  5213  0BC3  3001               	movlw	1
  5214  0BC4                     u2665:	
  5215  0BC4  1003               	clrc
  5216  0BC5  0CA3               	rrf	___lldiv@divisor+3,f
  5217  0BC6  0CA2               	rrf	___lldiv@divisor+2,f
  5218  0BC7  0CA1               	rrf	___lldiv@divisor+1,f
  5219  0BC8  0CA0               	rrf	___lldiv@divisor,f
  5220  0BC9  3EFF               	addlw	-1
  5221  0BCA  1D03               	skipz
  5222  0BCB  2BC4               	goto	u2665
  5223  0BCC  3001               	movlw	1
  5224  0BCD  02AD               	subwf	___lldiv@counter,f
  5225  0BCE  1D03               	btfss	3,2
  5226  0BCF  2B9B               	goto	l2830
  5227  0BD0                     l2842:	
  5228  0BD0  082C               	movf	___lldiv@quotient+3,w
  5229  0BD1  00A3               	movwf	?___lldiv+3
  5230  0BD2  082B               	movf	___lldiv@quotient+2,w
  5231  0BD3  00A2               	movwf	?___lldiv+2
  5232  0BD4  082A               	movf	___lldiv@quotient+1,w
  5233  0BD5  00A1               	movwf	?___lldiv+1
  5234  0BD6  0829               	movf	___lldiv@quotient,w
  5235  0BD7  00A0               	movwf	?___lldiv
  5236  0BD8  0008               	return
  5237  0BD9                     __end_of___lldiv:	
  5238                           
  5239                           	psect	text14
  5240  097E                     __ptext14:	
  5241 ;; *************** function _FMTX *****************
  5242 ;; Defined at:
  5243 ;;		line 270 in file "FMCW.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  Nref            2   64[BANK0 ] int 
  5246 ;;  Nprg            1   66[BANK0 ] PTR int 
  5247 ;;		 -> main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;  fmtx            2   68[BANK0 ] int 
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  1    wreg      void 
  5252 ;; Registers used:
  5253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5259 ;;      Params:         0       3       0       0       0
  5260 ;;      Locals:         0       2       0       0       0
  5261 ;;      Temps:          0       1       0       0       0
  5262 ;;      Totals:         0       6       0       0       0
  5263 ;;Total ram usage:        6 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    4
  5266 ;; This function calls:
  5267 ;;		_OPINIT
  5268 ;;		_OUTFQ
  5269 ;;		_RFDOUT
  5270 ;; This function is called by:
  5271 ;;		_main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _FMTX
  5277  097E                     _FMTX:	
  5278                           
  5279                           ;FMCW.c: 271: int fmtx = 1;
  5280                           
  5281                           ;incstack = 0
  5282                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5283  097E  3001               	movlw	1
  5284  097F  1283               	bcf	3,5	;RP0=0, select bank0
  5285  0980  1303               	bcf	3,6	;RP1=0, select bank0
  5286  0981  00E4               	movwf	FMTX@fmtx
  5287  0982  3000               	movlw	0
  5288  0983  00E5               	movwf	FMTX@fmtx+1
  5289                           
  5290                           ;FMCW.c: 272: OPINIT(fmtx);
  5291  0984  0865               	movf	FMTX@fmtx+1,w
  5292  0985  00A5               	movwf	OPINIT@fmcwtxrx+1
  5293  0986  0864               	movf	FMTX@fmtx,w
  5294  0987  00A4               	movwf	OPINIT@fmcwtxrx
  5295  0988  120A  158A  258D  120A  158A  	fcall	_OPINIT
  5296                           
  5297                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5298  098D  1283               	bcf	3,5	;RP0=0, select bank0
  5299  098E  1303               	bcf	3,6	;RP1=0, select bank0
  5300  098F  0865               	movf	FMTX@fmtx+1,w
  5301  0990  00AA               	movwf	RFDOUT@fmcwtxrx+1
  5302  0991  0864               	movf	FMTX@fmtx,w
  5303  0992  00A9               	movwf	RFDOUT@fmcwtxrx
  5304  0993  0861               	movf	FMTX@Nref+1,w
  5305  0994  00AC               	movwf	RFDOUT@Nref+1
  5306  0995  0860               	movf	FMTX@Nref,w
  5307  0996  00AB               	movwf	RFDOUT@Nref
  5308  0997  120A  118A  26C8  120A  158A  	fcall	_RFDOUT
  5309                           
  5310                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5311  099C  1283               	bcf	3,5	;RP0=0, select bank0
  5312  099D  1303               	bcf	3,6	;RP1=0, select bank0
  5313  099E  0865               	movf	FMTX@fmtx+1,w
  5314  099F  00AA               	movwf	OUTFQ@fmcwtxrx+1
  5315  09A0  0864               	movf	FMTX@fmtx,w
  5316  09A1  00A9               	movwf	OUTFQ@fmcwtxrx
  5317  09A2  0862               	movf	FMTX@Nprg,w
  5318  09A3  00E3               	movwf	??_FMTX
  5319  09A4  0863               	movf	??_FMTX,w
  5320  09A5  00AB               	movwf	OUTFQ@Nprg
  5321  09A6  120A  158A  2626   	fcall	_OUTFQ
  5322  09A9  0008               	return
  5323  09AA                     __end_of_FMTX:	
  5324                           
  5325                           	psect	text15
  5326  0952                     __ptext15:	
  5327 ;; *************** function _FMRX *****************
  5328 ;; Defined at:
  5329 ;;		line 298 in file "FMCW.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  Nref            2   64[BANK0 ] int 
  5332 ;;  Nprg            1   66[BANK0 ] PTR int 
  5333 ;;		 -> main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;  fmrx            2   68[BANK0 ] int 
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  1    wreg      void 
  5338 ;; Registers used:
  5339 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5345 ;;      Params:         0       3       0       0       0
  5346 ;;      Locals:         0       2       0       0       0
  5347 ;;      Temps:          0       1       0       0       0
  5348 ;;      Totals:         0       6       0       0       0
  5349 ;;Total ram usage:        6 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:    4
  5352 ;; This function calls:
  5353 ;;		_OPINIT
  5354 ;;		_OUTFQ
  5355 ;;		_RFDOUT
  5356 ;; This function is called by:
  5357 ;;		_main
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           
  5362                           ;psect for function _FMRX
  5363  0952                     _FMRX:	
  5364                           
  5365                           ;FMCW.c: 299: int fmrx = 3;
  5366                           
  5367                           ;incstack = 0
  5368                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5369  0952  3003               	movlw	3
  5370  0953  1283               	bcf	3,5	;RP0=0, select bank0
  5371  0954  1303               	bcf	3,6	;RP1=0, select bank0
  5372  0955  00E4               	movwf	FMRX@fmrx
  5373  0956  3000               	movlw	0
  5374  0957  00E5               	movwf	FMRX@fmrx+1
  5375                           
  5376                           ;FMCW.c: 300: OPINIT(fmrx);
  5377  0958  0865               	movf	FMRX@fmrx+1,w
  5378  0959  00A5               	movwf	OPINIT@fmcwtxrx+1
  5379  095A  0864               	movf	FMRX@fmrx,w
  5380  095B  00A4               	movwf	OPINIT@fmcwtxrx
  5381  095C  120A  158A  258D  120A  158A  	fcall	_OPINIT
  5382                           
  5383                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5384  0961  1283               	bcf	3,5	;RP0=0, select bank0
  5385  0962  1303               	bcf	3,6	;RP1=0, select bank0
  5386  0963  0865               	movf	FMRX@fmrx+1,w
  5387  0964  00AA               	movwf	RFDOUT@fmcwtxrx+1
  5388  0965  0864               	movf	FMRX@fmrx,w
  5389  0966  00A9               	movwf	RFDOUT@fmcwtxrx
  5390  0967  0861               	movf	FMRX@Nref+1,w
  5391  0968  00AC               	movwf	RFDOUT@Nref+1
  5392  0969  0860               	movf	FMRX@Nref,w
  5393  096A  00AB               	movwf	RFDOUT@Nref
  5394  096B  120A  118A  26C8  120A  158A  	fcall	_RFDOUT
  5395                           
  5396                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5397  0970  1283               	bcf	3,5	;RP0=0, select bank0
  5398  0971  1303               	bcf	3,6	;RP1=0, select bank0
  5399  0972  0865               	movf	FMRX@fmrx+1,w
  5400  0973  00AA               	movwf	OUTFQ@fmcwtxrx+1
  5401  0974  0864               	movf	FMRX@fmrx,w
  5402  0975  00A9               	movwf	OUTFQ@fmcwtxrx
  5403  0976  0862               	movf	FMRX@Nprg,w
  5404  0977  00E3               	movwf	??_FMRX
  5405  0978  0863               	movf	??_FMRX,w
  5406  0979  00AB               	movwf	OUTFQ@Nprg
  5407  097A  120A  158A  2626   	fcall	_OUTFQ
  5408  097D  0008               	return
  5409  097E                     __end_of_FMRX:	
  5410                           
  5411                           	psect	text16
  5412  0C9F                     __ptext16:	
  5413 ;; *************** function _EEPROM_Write *****************
  5414 ;; Defined at:
  5415 ;;		line 51 in file "I2C.c"
  5416 ;; Parameters:    Size  Location     Type
  5417 ;;  EEPROM_addre    1    wreg     unsigned char 
  5418 ;;  high_address    1    2[BANK0 ] unsigned char 
  5419 ;;  low_address     1    3[BANK0 ] unsigned char 
  5420 ;;  data            1    4[BANK0 ] PTR unsigned char 
  5421 ;;		 -> NULL(0), dData(16), 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  EEPROM_addre    1    8[BANK0 ] unsigned char 
  5424 ;;  Address         1    9[BANK0 ] unsigned char 
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  1    wreg      void 
  5427 ;; Registers used:
  5428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5434 ;;      Params:         0       3       0       0       0
  5435 ;;      Locals:         0       2       0       0       0
  5436 ;;      Temps:          0       3       0       0       0
  5437 ;;      Totals:         0       8       0       0       0
  5438 ;;Total ram usage:        8 bytes
  5439 ;; Hardware stack levels used:    1
  5440 ;; Hardware stack levels required when called:    3
  5441 ;; This function calls:
  5442 ;;		_I2C_Master_Start
  5443 ;;		_I2C_Master_Stop
  5444 ;;		_I2C_Master_Write
  5445 ;; This function is called by:
  5446 ;;		_main
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           
  5451                           ;psect for function _EEPROM_Write
  5452  0C9F                     _EEPROM_Write:	
  5453                           
  5454                           ;incstack = 0
  5455                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5456                           ;EEPROM_Write@EEPROM_address stored from wreg
  5457  0C9F  1283               	bcf	3,5	;RP0=0, select bank0
  5458  0CA0  1303               	bcf	3,6	;RP1=0, select bank0
  5459  0CA1  00A8               	movwf	EEPROM_Write@EEPROM_address
  5460                           
  5461                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5462  0CA2  0828               	movf	EEPROM_Write@EEPROM_address,w
  5463  0CA3  00A5               	movwf	??_EEPROM_Write
  5464  0CA4  0725               	addwf	??_EEPROM_Write,w
  5465  0CA5  00A6               	movwf	??_EEPROM_Write+1
  5466  0CA6  0826               	movf	??_EEPROM_Write+1,w
  5467  0CA7  00A9               	movwf	EEPROM_Write@Address
  5468                           
  5469                           ;I2C.c: 55: I2C_Master_Start();
  5470  0CA8  120A  158A  2029  120A  158A  	fcall	_I2C_Master_Start
  5471                           
  5472                           ;I2C.c: 56: I2C_Master_Write(Address);
  5473  0CAD  1283               	bcf	3,5	;RP0=0, select bank0
  5474  0CAE  1303               	bcf	3,6	;RP1=0, select bank0
  5475  0CAF  0829               	movf	EEPROM_Write@Address,w
  5476  0CB0  00A5               	movwf	??_EEPROM_Write
  5477  0CB1  01A6               	clrf	??_EEPROM_Write+1
  5478  0CB2  0825               	movf	??_EEPROM_Write,w
  5479  0CB3  00A0               	movwf	I2C_Master_Write@d
  5480  0CB4  0826               	movf	??_EEPROM_Write+1,w
  5481  0CB5  00A1               	movwf	I2C_Master_Write@d+1
  5482  0CB6  120A  158A  2037  120A  158A  	fcall	_I2C_Master_Write
  5483                           
  5484                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5485  0CBB  1283               	bcf	3,5	;RP0=0, select bank0
  5486  0CBC  1303               	bcf	3,6	;RP1=0, select bank0
  5487  0CBD  0822               	movf	EEPROM_Write@high_address,w
  5488  0CBE  00A5               	movwf	??_EEPROM_Write
  5489  0CBF  01A6               	clrf	??_EEPROM_Write+1
  5490  0CC0  0825               	movf	??_EEPROM_Write,w
  5491  0CC1  00A0               	movwf	I2C_Master_Write@d
  5492  0CC2  0826               	movf	??_EEPROM_Write+1,w
  5493  0CC3  00A1               	movwf	I2C_Master_Write@d+1
  5494  0CC4  120A  158A  2037  120A  158A  	fcall	_I2C_Master_Write
  5495                           
  5496                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5497  0CC9  1283               	bcf	3,5	;RP0=0, select bank0
  5498  0CCA  1303               	bcf	3,6	;RP1=0, select bank0
  5499  0CCB  0823               	movf	EEPROM_Write@low_address,w
  5500  0CCC  00A5               	movwf	??_EEPROM_Write
  5501  0CCD  01A6               	clrf	??_EEPROM_Write+1
  5502  0CCE  0825               	movf	??_EEPROM_Write,w
  5503  0CCF  00A0               	movwf	I2C_Master_Write@d
  5504  0CD0  0826               	movf	??_EEPROM_Write+1,w
  5505  0CD1  00A1               	movwf	I2C_Master_Write@d+1
  5506  0CD2  120A  158A  2037  120A  158A  	fcall	_I2C_Master_Write
  5507  0CD7                     l3452:	
  5508                           ;I2C.c: 59: while(*data){
  5509                           
  5510  0CD7  1283               	bcf	3,5	;RP0=0, select bank0
  5511  0CD8  1303               	bcf	3,6	;RP1=0, select bank0
  5512  0CD9  0824               	movf	EEPROM_Write@data,w
  5513  0CDA  0084               	movwf	4
  5514  0CDB  1783               	bsf	3,7	;select IRP bank2
  5515  0CDC  0800               	movf	0,w
  5516  0CDD  1903               	btfsc	3,2
  5517  0CDE  2CF7               	goto	l3454
  5518                           
  5519                           ;I2C.c: 60: I2C_Master_Write(*data);
  5520  0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  5521  0CE0  1303               	bcf	3,6	;RP1=0, select bank0
  5522  0CE1  0824               	movf	EEPROM_Write@data,w
  5523  0CE2  0084               	movwf	4
  5524  0CE3  1783               	bsf	3,7	;select IRP bank2
  5525  0CE4  0800               	movf	0,w
  5526  0CE5  00A5               	movwf	??_EEPROM_Write
  5527  0CE6  01A6               	clrf	??_EEPROM_Write+1
  5528  0CE7  0825               	movf	??_EEPROM_Write,w
  5529  0CE8  00A0               	movwf	I2C_Master_Write@d
  5530  0CE9  0826               	movf	??_EEPROM_Write+1,w
  5531  0CEA  00A1               	movwf	I2C_Master_Write@d+1
  5532  0CEB  120A  158A  2037  120A  158A  	fcall	_I2C_Master_Write
  5533                           
  5534                           ;I2C.c: 61: ++data;
  5535  0CF0  3001               	movlw	1
  5536  0CF1  1283               	bcf	3,5	;RP0=0, select bank0
  5537  0CF2  1303               	bcf	3,6	;RP1=0, select bank0
  5538  0CF3  00A5               	movwf	??_EEPROM_Write
  5539  0CF4  0825               	movf	??_EEPROM_Write,w
  5540  0CF5  07A4               	addwf	EEPROM_Write@data,f
  5541  0CF6  2CD7               	goto	l3452
  5542  0CF7                     l3454:	
  5543                           
  5544                           ;I2C.c: 62: }
  5545                           ;I2C.c: 63: I2C_Master_Stop();
  5546  0CF7  120A  158A  2030  120A  158A  	fcall	_I2C_Master_Stop
  5547                           
  5548                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5549  0CFC  3003               	movlw	3
  5550  0CFD  1283               	bcf	3,5	;RP0=0, select bank0
  5551  0CFE  1303               	bcf	3,6	;RP1=0, select bank0
  5552  0CFF  00A7               	movwf	??_EEPROM_Write+2
  5553  0D00  308A               	movlw	138
  5554  0D01  00A6               	movwf	??_EEPROM_Write+1
  5555  0D02  3055               	movlw	85
  5556  0D03  00A5               	movwf	??_EEPROM_Write
  5557  0D04                     u3457:	
  5558  0D04  0BA5               	decfsz	??_EEPROM_Write,f
  5559  0D05  2D04               	goto	u3457
  5560  0D06  0BA6               	decfsz	??_EEPROM_Write+1,f
  5561  0D07  2D04               	goto	u3457
  5562  0D08  0BA7               	decfsz	??_EEPROM_Write+2,f
  5563  0D09  2D04               	goto	u3457
  5564  0D0A  0008               	return
  5565  0D0B                     __end_of_EEPROM_Write:	
  5566                           
  5567                           	psect	text17
  5568  0837                     __ptext17:	
  5569 ;; *************** function _I2C_Master_Write *****************
  5570 ;; Defined at:
  5571 ;;		line 34 in file "I2C.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;  d               2    0[BANK0 ] unsigned int 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;		None
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  1    wreg      void 
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0, pclath, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5585 ;;      Params:         0       2       0       0       0
  5586 ;;      Locals:         0       0       0       0       0
  5587 ;;      Temps:          0       0       0       0       0
  5588 ;;      Totals:         0       2       0       0       0
  5589 ;;Total ram usage:        2 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    2
  5592 ;; This function calls:
  5593 ;;		_I2C_Master_Wait
  5594 ;; This function is called by:
  5595 ;;		_EEPROM_Write
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           
  5600                           ;psect for function _I2C_Master_Write
  5601  0837                     _I2C_Master_Write:	
  5602                           
  5603                           ;I2C.c: 35: I2C_Master_Wait();
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5607  0837  120A  158A  204F   	fcall	_I2C_Master_Wait
  5608                           
  5609                           ;I2C.c: 36: SSPBUF = d;
  5610  083A  1283               	bcf	3,5	;RP0=0, select bank0
  5611  083B  1303               	bcf	3,6	;RP1=0, select bank0
  5612  083C  0820               	movf	I2C_Master_Write@d,w
  5613  083D  0093               	movwf	19	;volatile
  5614  083E  0008               	return
  5615  083F                     __end_of_I2C_Master_Write:	
  5616                           
  5617                           	psect	text18
  5618  0830                     __ptext18:	
  5619 ;; *************** function _I2C_Master_Stop *****************
  5620 ;; Defined at:
  5621 ;;		line 29 in file "I2C.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;		None
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;		None
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      void 
  5628 ;; Registers used:
  5629 ;;		wreg, status,2, status,0, pclath, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5635 ;;      Params:         0       0       0       0       0
  5636 ;;      Locals:         0       0       0       0       0
  5637 ;;      Temps:          0       0       0       0       0
  5638 ;;      Totals:         0       0       0       0       0
  5639 ;;Total ram usage:        0 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    2
  5642 ;; This function calls:
  5643 ;;		_I2C_Master_Wait
  5644 ;; This function is called by:
  5645 ;;		_EEPROM_Write
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           
  5650                           ;psect for function _I2C_Master_Stop
  5651  0830                     _I2C_Master_Stop:	
  5652                           
  5653                           ;I2C.c: 30: I2C_Master_Wait();
  5654                           
  5655                           ;incstack = 0
  5656                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5657  0830  120A  158A  204F   	fcall	_I2C_Master_Wait
  5658                           
  5659                           ;I2C.c: 31: PEN = 1;
  5660  0833  1683               	bsf	3,5	;RP0=1, select bank1
  5661  0834  1303               	bcf	3,6	;RP1=0, select bank1
  5662  0835  1511               	bsf	17,2	;volatile
  5663  0836  0008               	return
  5664  0837                     __end_of_I2C_Master_Stop:	
  5665                           
  5666                           	psect	text19
  5667  0829                     __ptext19:	
  5668 ;; *************** function _I2C_Master_Start *****************
  5669 ;; Defined at:
  5670 ;;		line 19 in file "I2C.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;		None
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;		None
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      void 
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0, pclath, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5684 ;;      Params:         0       0       0       0       0
  5685 ;;      Locals:         0       0       0       0       0
  5686 ;;      Temps:          0       0       0       0       0
  5687 ;;      Totals:         0       0       0       0       0
  5688 ;;Total ram usage:        0 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    2
  5691 ;; This function calls:
  5692 ;;		_I2C_Master_Wait
  5693 ;; This function is called by:
  5694 ;;		_EEPROM_Write
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           
  5699                           ;psect for function _I2C_Master_Start
  5700  0829                     _I2C_Master_Start:	
  5701                           
  5702                           ;I2C.c: 20: I2C_Master_Wait();
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5706  0829  120A  158A  204F   	fcall	_I2C_Master_Wait
  5707                           
  5708                           ;I2C.c: 21: SEN = 1;
  5709  082C  1683               	bsf	3,5	;RP0=1, select bank1
  5710  082D  1303               	bcf	3,6	;RP1=0, select bank1
  5711  082E  1411               	bsf	17,0	;volatile
  5712  082F  0008               	return
  5713  0830                     __end_of_I2C_Master_Start:	
  5714                           
  5715                           	psect	text20
  5716  084F                     __ptext20:	
  5717 ;; *************** function _I2C_Master_Wait *****************
  5718 ;; Defined at:
  5719 ;;		line 15 in file "I2C.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;		None
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;		None
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      void 
  5726 ;; Registers used:
  5727 ;;		wreg, status,2
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5733 ;;      Params:         0       0       0       0       0
  5734 ;;      Locals:         0       0       0       0       0
  5735 ;;      Temps:          0       0       0       0       0
  5736 ;;      Totals:         0       0       0       0       0
  5737 ;;Total ram usage:        0 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    1
  5740 ;; This function calls:
  5741 ;;		Nothing
  5742 ;; This function is called by:
  5743 ;;		_I2C_Master_Start
  5744 ;;		_I2C_Master_Stop
  5745 ;;		_I2C_Master_Write
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           
  5750                           ;psect for function _I2C_Master_Wait
  5751  084F                     _I2C_Master_Wait:	
  5752  084F                     l346:	
  5753                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5754                           
  5755                           ;incstack = 0
  5756                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5757                           
  5758  084F  1683               	bsf	3,5	;RP0=1, select bank1
  5759  0850  1303               	bcf	3,6	;RP1=0, select bank1
  5760  0851  1914               	btfsc	20,2	;volatile
  5761  0852  284F               	goto	l346
  5762  0853  0811               	movf	17,w	;volatile
  5763  0854  391F               	andlw	31
  5764  0855  1903               	btfsc	3,2
  5765  0856  0008               	return
  5766  0857  284F               	goto	l346
  5767  0858                     __end_of_I2C_Master_Wait:	
  5768                           
  5769                           	psect	text21
  5770  0926                     __ptext21:	
  5771 ;; *************** function _CWTX *****************
  5772 ;; Defined at:
  5773 ;;		line 284 in file "FMCW.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  Nref            2   64[BANK0 ] int 
  5776 ;;  Nprg            1   66[BANK0 ] PTR int 
  5777 ;;		 -> main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;  cwtx            2   68[BANK0 ] int 
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5789 ;;      Params:         0       3       0       0       0
  5790 ;;      Locals:         0       2       0       0       0
  5791 ;;      Temps:          0       1       0       0       0
  5792 ;;      Totals:         0       6       0       0       0
  5793 ;;Total ram usage:        6 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    4
  5796 ;; This function calls:
  5797 ;;		_OPINIT
  5798 ;;		_OUTFQ
  5799 ;;		_RFDOUT
  5800 ;; This function is called by:
  5801 ;;		_main
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           
  5806                           ;psect for function _CWTX
  5807  0926                     _CWTX:	
  5808                           
  5809                           ;FMCW.c: 285: int cwtx = 2;
  5810                           
  5811                           ;incstack = 0
  5812                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5813  0926  3002               	movlw	2
  5814  0927  1283               	bcf	3,5	;RP0=0, select bank0
  5815  0928  1303               	bcf	3,6	;RP1=0, select bank0
  5816  0929  00E4               	movwf	CWTX@cwtx
  5817  092A  3000               	movlw	0
  5818  092B  00E5               	movwf	CWTX@cwtx+1
  5819                           
  5820                           ;FMCW.c: 286: OPINIT(cwtx);
  5821  092C  0865               	movf	CWTX@cwtx+1,w
  5822  092D  00A5               	movwf	OPINIT@fmcwtxrx+1
  5823  092E  0864               	movf	CWTX@cwtx,w
  5824  092F  00A4               	movwf	OPINIT@fmcwtxrx
  5825  0930  120A  158A  258D  120A  158A  	fcall	_OPINIT
  5826                           
  5827                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5828  0935  1283               	bcf	3,5	;RP0=0, select bank0
  5829  0936  1303               	bcf	3,6	;RP1=0, select bank0
  5830  0937  0865               	movf	CWTX@cwtx+1,w
  5831  0938  00AA               	movwf	RFDOUT@fmcwtxrx+1
  5832  0939  0864               	movf	CWTX@cwtx,w
  5833  093A  00A9               	movwf	RFDOUT@fmcwtxrx
  5834  093B  0861               	movf	CWTX@Nref+1,w
  5835  093C  00AC               	movwf	RFDOUT@Nref+1
  5836  093D  0860               	movf	CWTX@Nref,w
  5837  093E  00AB               	movwf	RFDOUT@Nref
  5838  093F  120A  118A  26C8  120A  158A  	fcall	_RFDOUT
  5839                           
  5840                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5841  0944  1283               	bcf	3,5	;RP0=0, select bank0
  5842  0945  1303               	bcf	3,6	;RP1=0, select bank0
  5843  0946  0865               	movf	CWTX@cwtx+1,w
  5844  0947  00AA               	movwf	OUTFQ@fmcwtxrx+1
  5845  0948  0864               	movf	CWTX@cwtx,w
  5846  0949  00A9               	movwf	OUTFQ@fmcwtxrx
  5847  094A  0862               	movf	CWTX@Nprg,w
  5848  094B  00E3               	movwf	??_CWTX
  5849  094C  0863               	movf	??_CWTX,w
  5850  094D  00AB               	movwf	OUTFQ@Nprg
  5851  094E  120A  158A  2626   	fcall	_OUTFQ
  5852  0951  0008               	return
  5853  0952                     __end_of_CWTX:	
  5854                           
  5855                           	psect	text22
  5856  06C8                     __ptext22:	
  5857 ;; *************** function _RFDOUT *****************
  5858 ;; Defined at:
  5859 ;;		line 200 in file "FMCW.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;  fmcwtxrx        2    9[BANK0 ] int 
  5862 ;;  Nref            2   11[BANK0 ] int 
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;  i               2   44[BANK0 ] int 
  5865 ;;  i               2   40[BANK0 ] int 
  5866 ;;  i               2   42[BANK0 ] int 
  5867 ;;  Nref_b         24   16[BANK0 ] int [12]
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  1    wreg      void 
  5870 ;; Registers used:
  5871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5877 ;;      Params:         0       4       0       0       0
  5878 ;;      Locals:         0      30       0       0       0
  5879 ;;      Temps:          0       3       0       0       0
  5880 ;;      Totals:         0      37       0       0       0
  5881 ;;Total ram usage:       37 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:    3
  5884 ;; This function calls:
  5885 ;;		_H_OUT
  5886 ;;		_L_OUT
  5887 ;;		_STBOUT
  5888 ;;		___awdiv
  5889 ;; This function is called by:
  5890 ;;		_FMTX
  5891 ;;		_CWTX
  5892 ;;		_FMRX
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           
  5897                           ;psect for function _RFDOUT
  5898  06C8                     _RFDOUT:	
  5899                           
  5900                           ;FMCW.c: 201: int Nref_b[12];
  5901                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  5902                           
  5903                           ;incstack = 0
  5904                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5905  06C8  1283               	bcf	3,5	;RP0=0, select bank0
  5906  06C9  1303               	bcf	3,6	;RP1=0, select bank0
  5907  06CA  01CA               	clrf	RFDOUT@i
  5908  06CB  01CB               	clrf	RFDOUT@i+1
  5909  06CC  084B               	movf	RFDOUT@i+1,w
  5910  06CD  3A80               	xorlw	128
  5911  06CE  00FF               	movwf	127
  5912  06CF  3080               	movlw	128
  5913  06D0  027F               	subwf	127,w
  5914  06D1  1D03               	skipz
  5915  06D2  2ED5               	goto	u3115
  5916  06D3  300C               	movlw	12
  5917  06D4  024A               	subwf	RFDOUT@i,w
  5918  06D5                     u3115:	
  5919  06D5  1803               	btfsc	3,0
  5920  06D6  2EF3               	goto	l3314
  5921  06D7                     l3308:	
  5922                           
  5923                           ;FMCW.c: 204: Nref_b[i] = 0;
  5924  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  5925  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  5926  06D9  084A               	movf	RFDOUT@i,w
  5927  06DA  00AD               	movwf	??_RFDOUT
  5928  06DB  072D               	addwf	??_RFDOUT,w
  5929  06DC  3E30               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5930  06DD  0084               	movwf	4
  5931  06DE  1383               	bcf	3,7	;select IRP bank0
  5932  06DF  0180               	clrf	0
  5933  06E0  0A84               	incf	4,f
  5934  06E1  0180               	clrf	0
  5935  06E2  3001               	movlw	1
  5936  06E3  07CA               	addwf	RFDOUT@i,f
  5937  06E4  1803               	skipnc
  5938  06E5  0ACB               	incf	RFDOUT@i+1,f
  5939  06E6  3000               	movlw	0
  5940  06E7  07CB               	addwf	RFDOUT@i+1,f
  5941  06E8  084B               	movf	RFDOUT@i+1,w
  5942  06E9  3A80               	xorlw	128
  5943  06EA  00FF               	movwf	127
  5944  06EB  3080               	movlw	128
  5945  06EC  027F               	subwf	127,w
  5946  06ED  1D03               	skipz
  5947  06EE  2EF1               	goto	u3125
  5948  06EF  300C               	movlw	12
  5949  06F0  024A               	subwf	RFDOUT@i,w
  5950  06F1                     u3125:	
  5951  06F1  1C03               	skipc
  5952  06F2  2ED7               	goto	l3308
  5953  06F3                     l3314:	
  5954                           
  5955                           ;FMCW.c: 205: }
  5956                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  5957  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  5958  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  5959  06F5  01C8               	clrf	RFDOUT@i_349
  5960  06F6  01C9               	clrf	RFDOUT@i_349+1
  5961  06F7  082C               	movf	RFDOUT@Nref+1,w
  5962  06F8  3A80               	xorlw	128
  5963  06F9  00FF               	movwf	127
  5964  06FA  3080               	movlw	128
  5965  06FB  027F               	subwf	127,w
  5966  06FC  1D03               	skipz
  5967  06FD  2F00               	goto	u3135
  5968  06FE  3001               	movlw	1
  5969  06FF  022B               	subwf	RFDOUT@Nref,w
  5970  0700                     u3135:	
  5971  0700  1C03               	btfss	3,0
  5972  0701  2F39               	goto	l3328
  5973  0702                     l3320:	
  5974                           
  5975                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  5976  0702  3001               	movlw	1
  5977  0703  1283               	bcf	3,5	;RP0=0, select bank0
  5978  0704  1303               	bcf	3,6	;RP1=0, select bank0
  5979  0705  052B               	andwf	RFDOUT@Nref,w
  5980  0706  00AD               	movwf	??_RFDOUT
  5981  0707  3000               	movlw	0
  5982  0708  052C               	andwf	RFDOUT@Nref+1,w
  5983  0709  00AE               	movwf	??_RFDOUT+1
  5984  070A  0848               	movf	RFDOUT@i_349,w
  5985  070B  00AF               	movwf	??_RFDOUT+2
  5986  070C  072F               	addwf	??_RFDOUT+2,w
  5987  070D  3E30               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5988  070E  0084               	movwf	4
  5989  070F  082D               	movf	??_RFDOUT,w
  5990  0710  1383               	bcf	3,7	;select IRP bank0
  5991  0711  0080               	movwf	0
  5992  0712  0A84               	incf	4,f
  5993  0713  082E               	movf	??_RFDOUT+1,w
  5994  0714  0080               	movwf	0
  5995                           
  5996                           ;FMCW.c: 210: Nref = Nref / 2;
  5997  0715  3002               	movlw	2
  5998  0716  00A0               	movwf	___awdiv@divisor
  5999  0717  3000               	movlw	0
  6000  0718  00A1               	movwf	___awdiv@divisor+1
  6001  0719  082C               	movf	RFDOUT@Nref+1,w
  6002  071A  00A3               	movwf	___awdiv@dividend+1
  6003  071B  082B               	movf	RFDOUT@Nref,w
  6004  071C  00A2               	movwf	___awdiv@dividend
  6005  071D  120A  158A  231E  120A  118A  	fcall	___awdiv
  6006  0722  1283               	bcf	3,5	;RP0=0, select bank0
  6007  0723  1303               	bcf	3,6	;RP1=0, select bank0
  6008  0724  0821               	movf	?___awdiv+1,w
  6009  0725  00AC               	movwf	RFDOUT@Nref+1
  6010  0726  0820               	movf	?___awdiv,w
  6011  0727  00AB               	movwf	RFDOUT@Nref
  6012  0728  3001               	movlw	1
  6013  0729  07C8               	addwf	RFDOUT@i_349,f
  6014  072A  1803               	skipnc
  6015  072B  0AC9               	incf	RFDOUT@i_349+1,f
  6016  072C  3000               	movlw	0
  6017  072D  07C9               	addwf	RFDOUT@i_349+1,f
  6018  072E  082C               	movf	RFDOUT@Nref+1,w
  6019  072F  3A80               	xorlw	128
  6020  0730  00FF               	movwf	127
  6021  0731  3080               	movlw	128
  6022  0732  027F               	subwf	127,w
  6023  0733  1D03               	skipz
  6024  0734  2F37               	goto	u3145
  6025  0735  3001               	movlw	1
  6026  0736  022B               	subwf	RFDOUT@Nref,w
  6027  0737                     u3145:	
  6028  0737  1803               	skipnc
  6029  0738  2F02               	goto	l3320
  6030  0739                     l3328:	
  6031                           
  6032                           ;FMCW.c: 211: }
  6033                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6034  0739  1283               	bcf	3,5	;RP0=0, select bank0
  6035  073A  1303               	bcf	3,6	;RP1=0, select bank0
  6036  073B  01CC               	clrf	RFDOUT@i_350
  6037  073C  01CD               	clrf	RFDOUT@i_350+1
  6038  073D  084D               	movf	RFDOUT@i_350+1,w
  6039  073E  3A80               	xorlw	128
  6040  073F  00FF               	movwf	127
  6041  0740  3080               	movlw	128
  6042  0741  027F               	subwf	127,w
  6043  0742  1D03               	skipz
  6044  0743  2F46               	goto	u3155
  6045  0744  300C               	movlw	12
  6046  0745  024C               	subwf	RFDOUT@i_350,w
  6047  0746                     u3155:	
  6048  0746  1803               	btfsc	3,0
  6049  0747  2F8F               	goto	l3346
  6050  0748                     l3334:	
  6051                           
  6052                           ;FMCW.c: 215: {
  6053                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6054  0748  1283               	bcf	3,5	;RP0=0, select bank0
  6055  0749  1303               	bcf	3,6	;RP1=0, select bank0
  6056  074A  084C               	movf	RFDOUT@i_350,w
  6057  074B  00AD               	movwf	??_RFDOUT
  6058  074C  072D               	addwf	??_RFDOUT,w
  6059  074D  3E30               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6060  074E  0084               	movwf	4
  6061  074F  1383               	bcf	3,7	;select IRP bank0
  6062  0750  0800               	movf	0,w
  6063  0751  00AE               	movwf	??_RFDOUT+1
  6064  0752  0A84               	incf	4,f
  6065  0753  0800               	movf	0,w
  6066  0754  00AF               	movwf	??_RFDOUT+2
  6067  0755  082E               	movf	??_RFDOUT+1,w
  6068  0756  042F               	iorwf	??_RFDOUT+2,w
  6069  0757  1D03               	btfss	3,2
  6070  0758  2F62               	goto	l3338
  6071                           
  6072                           ;FMCW.c: 217: {
  6073                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6074  0759  082A               	movf	RFDOUT@fmcwtxrx+1,w
  6075  075A  00A3               	movwf	L_OUT@fmcwtxrx+1
  6076  075B  0829               	movf	RFDOUT@fmcwtxrx,w
  6077  075C  00A2               	movwf	L_OUT@fmcwtxrx
  6078  075D  120A  158A  2250  120A  118A  	fcall	_L_OUT
  6079  0762                     l3338:	
  6080                           
  6081                           ;FMCW.c: 219: }
  6082                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6083  0762  1283               	bcf	3,5	;RP0=0, select bank0
  6084  0763  1303               	bcf	3,6	;RP1=0, select bank0
  6085  0764  084C               	movf	RFDOUT@i_350,w
  6086  0765  00AD               	movwf	??_RFDOUT
  6087  0766  072D               	addwf	??_RFDOUT,w
  6088  0767  3E30               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6089  0768  0084               	movwf	4
  6090  0769  1383               	bcf	3,7	;select IRP bank0
  6091  076A  0800               	movf	0,w
  6092  076B  00AE               	movwf	??_RFDOUT+1
  6093  076C  0A84               	incf	4,f
  6094  076D  0800               	movf	0,w
  6095  076E  00AF               	movwf	??_RFDOUT+2
  6096  076F  032E               	decf	??_RFDOUT+1,w
  6097  0770  042F               	iorwf	??_RFDOUT+2,w
  6098  0771  1D03               	btfss	3,2
  6099  0772  2F7C               	goto	l3342
  6100                           
  6101                           ;FMCW.c: 221: {
  6102                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6103  0773  082A               	movf	RFDOUT@fmcwtxrx+1,w
  6104  0774  00A3               	movwf	H_OUT@fmcwtxrx+1
  6105  0775  0829               	movf	RFDOUT@fmcwtxrx,w
  6106  0776  00A2               	movwf	H_OUT@fmcwtxrx
  6107  0777  120A  158A  220E  120A  118A  	fcall	_H_OUT
  6108  077C                     l3342:	
  6109  077C  3001               	movlw	1
  6110  077D  1283               	bcf	3,5	;RP0=0, select bank0
  6111  077E  1303               	bcf	3,6	;RP1=0, select bank0
  6112  077F  07CC               	addwf	RFDOUT@i_350,f
  6113  0780  1803               	skipnc
  6114  0781  0ACD               	incf	RFDOUT@i_350+1,f
  6115  0782  3000               	movlw	0
  6116  0783  07CD               	addwf	RFDOUT@i_350+1,f
  6117  0784  084D               	movf	RFDOUT@i_350+1,w
  6118  0785  3A80               	xorlw	128
  6119  0786  00FF               	movwf	127
  6120  0787  3080               	movlw	128
  6121  0788  027F               	subwf	127,w
  6122  0789  1D03               	skipz
  6123  078A  2F8D               	goto	u3185
  6124  078B  300C               	movlw	12
  6125  078C  024C               	subwf	RFDOUT@i_350,w
  6126  078D                     u3185:	
  6127  078D  1C03               	skipc
  6128  078E  2F48               	goto	l3334
  6129  078F                     l3346:	
  6130                           
  6131                           ;FMCW.c: 223: }
  6132                           ;FMCW.c: 224: }
  6133                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6134  078F  1283               	bcf	3,5	;RP0=0, select bank0
  6135  0790  1303               	bcf	3,6	;RP1=0, select bank0
  6136  0791  082A               	movf	RFDOUT@fmcwtxrx+1,w
  6137  0792  00A3               	movwf	H_OUT@fmcwtxrx+1
  6138  0793  0829               	movf	RFDOUT@fmcwtxrx,w
  6139  0794  00A2               	movwf	H_OUT@fmcwtxrx
  6140  0795  120A  158A  220E  120A  118A  	fcall	_H_OUT
  6141                           
  6142                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6143  079A  1283               	bcf	3,5	;RP0=0, select bank0
  6144  079B  1303               	bcf	3,6	;RP1=0, select bank0
  6145  079C  082A               	movf	RFDOUT@fmcwtxrx+1,w
  6146  079D  00A3               	movwf	H_OUT@fmcwtxrx+1
  6147  079E  0829               	movf	RFDOUT@fmcwtxrx,w
  6148  079F  00A2               	movwf	H_OUT@fmcwtxrx
  6149  07A0  120A  158A  220E  120A  118A  	fcall	_H_OUT
  6150                           
  6151                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6152  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  6153  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  6154  07A7  082A               	movf	RFDOUT@fmcwtxrx+1,w
  6155  07A8  00A3               	movwf	STBOUT@fmcwtxrx+1
  6156  07A9  0829               	movf	RFDOUT@fmcwtxrx,w
  6157  07AA  00A2               	movwf	STBOUT@fmcwtxrx
  6158  07AB  120A  158A  20FC   	fcall	_STBOUT
  6159  07AE  0008               	return
  6160  07AF                     __end_of_RFDOUT:	
  6161                           
  6162                           	psect	text23
  6163  0E26                     __ptext23:	
  6164 ;; *************** function _OUTFQ *****************
  6165 ;; Defined at:
  6166 ;;		line 136 in file "FMCW.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  fmcwtxrx        2    9[BANK0 ] int 
  6169 ;;  Nprg            1   11[BANK0 ] PTR int 
  6170 ;;		 -> main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), FMRX_Nprg(10), 
  6171 ;;		 -> CWTX_Nprg(10), FMTX_Nprg(10), 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  j               2   62[BANK0 ] int 
  6174 ;;  i               2   60[BANK0 ] int 
  6175 ;;  i               2   54[BANK0 ] int 
  6176 ;;  i               2   58[BANK0 ] int 
  6177 ;;  Nprg_b         34   20[BANK0 ] int [17]
  6178 ;;  count           2   56[BANK0 ] int 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6188 ;;      Params:         0       3       0       0       0
  6189 ;;      Locals:         0      44       0       0       0
  6190 ;;      Temps:          0       8       0       0       0
  6191 ;;      Totals:         0      55       0       0       0
  6192 ;;Total ram usage:       55 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    3
  6195 ;; This function calls:
  6196 ;;		_H_OUT
  6197 ;;		_L_OUT
  6198 ;;		_STBOUT
  6199 ;;		___awdiv
  6200 ;; This function is called by:
  6201 ;;		_FMTX
  6202 ;;		_CWTX
  6203 ;;		_FMRX
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207                           
  6208                           ;psect for function _OUTFQ
  6209  0E26                     _OUTFQ:	
  6210                           
  6211                           ;FMCW.c: 137: int count = 0;
  6212                           
  6213                           ;incstack = 0
  6214                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6215  0E26  1283               	bcf	3,5	;RP0=0, select bank0
  6216  0E27  1303               	bcf	3,6	;RP1=0, select bank0
  6217  0E28  01D8               	clrf	OUTFQ@count
  6218  0E29  01D9               	clrf	OUTFQ@count+1
  6219                           
  6220                           ;FMCW.c: 138: int Nprg_b[17];
  6221                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6222  0E2A  01DA               	clrf	OUTFQ@i
  6223  0E2B  01DB               	clrf	OUTFQ@i+1
  6224  0E2C  085B               	movf	OUTFQ@i+1,w
  6225  0E2D  3A80               	xorlw	128
  6226  0E2E  00FF               	movwf	127
  6227  0E2F  3080               	movlw	128
  6228  0E30  027F               	subwf	127,w
  6229  0E31  1D03               	skipz
  6230  0E32  2E35               	goto	u2975
  6231  0E33  3011               	movlw	17
  6232  0E34  025A               	subwf	OUTFQ@i,w
  6233  0E35                     u2975:	
  6234  0E35  1803               	btfsc	3,0
  6235  0E36  2E53               	goto	l3236
  6236  0E37                     l3230:	
  6237                           
  6238                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6239  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  6240  0E38  1303               	bcf	3,6	;RP1=0, select bank0
  6241  0E39  085A               	movf	OUTFQ@i,w
  6242  0E3A  00AC               	movwf	??_OUTFQ
  6243  0E3B  072C               	addwf	??_OUTFQ,w
  6244  0E3C  3E34               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6245  0E3D  0084               	movwf	4
  6246  0E3E  1383               	bcf	3,7	;select IRP bank0
  6247  0E3F  0180               	clrf	0
  6248  0E40  0A84               	incf	4,f
  6249  0E41  0180               	clrf	0
  6250  0E42  3001               	movlw	1
  6251  0E43  07DA               	addwf	OUTFQ@i,f
  6252  0E44  1803               	skipnc
  6253  0E45  0ADB               	incf	OUTFQ@i+1,f
  6254  0E46  3000               	movlw	0
  6255  0E47  07DB               	addwf	OUTFQ@i+1,f
  6256  0E48  085B               	movf	OUTFQ@i+1,w
  6257  0E49  3A80               	xorlw	128
  6258  0E4A  00FF               	movwf	127
  6259  0E4B  3080               	movlw	128
  6260  0E4C  027F               	subwf	127,w
  6261  0E4D  1D03               	skipz
  6262  0E4E  2E51               	goto	u2985
  6263  0E4F  3011               	movlw	17
  6264  0E50  025A               	subwf	OUTFQ@i,w
  6265  0E51                     u2985:	
  6266  0E51  1C03               	skipc
  6267  0E52  2E37               	goto	l3230
  6268  0E53                     l3236:	
  6269                           
  6270                           ;FMCW.c: 142: }
  6271                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6272  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  6273  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  6274  0E55  01D6               	clrf	OUTFQ@i_338
  6275  0E56  01D7               	clrf	OUTFQ@i_338+1
  6276  0E57  0857               	movf	OUTFQ@i_338+1,w
  6277  0E58  3A80               	xorlw	128
  6278  0E59  00FF               	movwf	127
  6279  0E5A  3080               	movlw	128
  6280  0E5B  027F               	subwf	127,w
  6281  0E5C  1D03               	skipz
  6282  0E5D  2E60               	goto	u2995
  6283  0E5E  3011               	movlw	17
  6284  0E5F  0256               	subwf	OUTFQ@i_338,w
  6285  0E60                     u2995:	
  6286  0E60  1803               	btfsc	3,0
  6287  0E61  2F8A               	goto	l3282
  6288  0E62                     l3242:	
  6289                           
  6290                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6291  0E62  1283               	bcf	3,5	;RP0=0, select bank0
  6292  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  6293  0E64  01DE               	clrf	OUTFQ@j
  6294  0E65  01DF               	clrf	OUTFQ@j+1
  6295  0E66  085F               	movf	OUTFQ@j+1,w
  6296  0E67  3A80               	xorlw	128
  6297  0E68  00FF               	movwf	127
  6298  0E69  3080               	movlw	128
  6299  0E6A  027F               	subwf	127,w
  6300  0E6B  1D03               	skipz
  6301  0E6C  2E6F               	goto	u3005
  6302  0E6D  3005               	movlw	5
  6303  0E6E  025E               	subwf	OUTFQ@j,w
  6304  0E6F                     u3005:	
  6305  0E6F  1803               	btfsc	3,0
  6306  0E70  2F77               	goto	l3278
  6307  0E71                     l3248:	
  6308                           
  6309                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6310  0E71  1283               	bcf	3,5	;RP0=0, select bank0
  6311  0E72  1303               	bcf	3,6	;RP1=0, select bank0
  6312  0E73  085E               	movf	OUTFQ@j,w
  6313  0E74  00AC               	movwf	??_OUTFQ
  6314  0E75  072C               	addwf	??_OUTFQ,w
  6315  0E76  072B               	addwf	OUTFQ@Nprg,w
  6316  0E77  00AD               	movwf	??_OUTFQ+1
  6317  0E78  082D               	movf	??_OUTFQ+1,w
  6318  0E79  0084               	movwf	4
  6319  0E7A  1383               	bcf	3,7	;select IRP bank0
  6320  0E7B  0800               	movf	0,w
  6321  0E7C  00AE               	movwf	??_OUTFQ+2
  6322  0E7D  0A84               	incf	4,f
  6323  0E7E  0800               	movf	0,w
  6324  0E7F  00AF               	movwf	??_OUTFQ+3
  6325  0E80  182E               	btfsc	??_OUTFQ+2,0
  6326  0E81  2ED8               	goto	l3260
  6327                           
  6328                           ;FMCW.c: 148: if(j == 4){
  6329  0E82  3004               	movlw	4
  6330  0E83  065E               	xorwf	OUTFQ@j,w
  6331  0E84  045F               	iorwf	OUTFQ@j+1,w
  6332  0E85  1D03               	btfss	3,2
  6333  0E86  2EB4               	goto	l3258
  6334                           
  6335                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6336  0E87  3002               	movlw	2
  6337  0E88  00A0               	movwf	___awdiv@divisor
  6338  0E89  3000               	movlw	0
  6339  0E8A  00A1               	movwf	___awdiv@divisor+1
  6340  0E8B  085E               	movf	OUTFQ@j,w
  6341  0E8C  00AC               	movwf	??_OUTFQ
  6342  0E8D  072C               	addwf	??_OUTFQ,w
  6343  0E8E  072B               	addwf	OUTFQ@Nprg,w
  6344  0E8F  00AD               	movwf	??_OUTFQ+1
  6345  0E90  082D               	movf	??_OUTFQ+1,w
  6346  0E91  0084               	movwf	4
  6347  0E92  0800               	movf	0,w
  6348  0E93  00A2               	movwf	___awdiv@dividend
  6349  0E94  0A84               	incf	4,f
  6350  0E95  0800               	movf	0,w
  6351  0E96  00A3               	movwf	___awdiv@dividend+1
  6352  0E97  120A  158A  231E  120A  158A  	fcall	___awdiv
  6353  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  6354  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  6355  0E9E  085E               	movf	OUTFQ@j,w
  6356  0E9F  00AE               	movwf	??_OUTFQ+2
  6357  0EA0  072E               	addwf	??_OUTFQ+2,w
  6358  0EA1  072B               	addwf	OUTFQ@Nprg,w
  6359  0EA2  00AF               	movwf	??_OUTFQ+3
  6360  0EA3  082F               	movf	??_OUTFQ+3,w
  6361  0EA4  0084               	movwf	4
  6362  0EA5  0820               	movf	?___awdiv,w
  6363  0EA6  1383               	bcf	3,7	;select IRP bank0
  6364  0EA7  0080               	movwf	0
  6365  0EA8  0A84               	incf	4,f
  6366  0EA9  0821               	movf	?___awdiv+1,w
  6367  0EAA  0080               	movwf	0
  6368                           
  6369                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6370  0EAB  0858               	movf	OUTFQ@count,w
  6371  0EAC  00AC               	movwf	??_OUTFQ
  6372  0EAD  072C               	addwf	??_OUTFQ,w
  6373  0EAE  3E34               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6374  0EAF  0084               	movwf	4
  6375  0EB0  0180               	clrf	0
  6376  0EB1  0A84               	incf	4,f
  6377  0EB2  0180               	clrf	0
  6378  0EB3  2F19               	goto	l3268
  6379  0EB4                     l3258:	
  6380                           ;FMCW.c: 152: }
  6381                           
  6382                           ;FMCW.c: 151: count++;
  6383                           
  6384                           
  6385                           ;FMCW.c: 153: else{
  6386                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6387  0EB4  3002               	movlw	2
  6388  0EB5  00A0               	movwf	___awdiv@divisor
  6389  0EB6  3000               	movlw	0
  6390  0EB7  00A1               	movwf	___awdiv@divisor+1
  6391  0EB8  085E               	movf	OUTFQ@j,w
  6392  0EB9  00AC               	movwf	??_OUTFQ
  6393  0EBA  072C               	addwf	??_OUTFQ,w
  6394  0EBB  072B               	addwf	OUTFQ@Nprg,w
  6395  0EBC  00AD               	movwf	??_OUTFQ+1
  6396  0EBD  082D               	movf	??_OUTFQ+1,w
  6397  0EBE  0084               	movwf	4
  6398  0EBF  0800               	movf	0,w
  6399  0EC0  00A2               	movwf	___awdiv@dividend
  6400  0EC1  0A84               	incf	4,f
  6401  0EC2  0800               	movf	0,w
  6402  0EC3  00A3               	movwf	___awdiv@dividend+1
  6403  0EC4  120A  158A  231E  120A  158A  	fcall	___awdiv
  6404  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  6405  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  6406  0ECB  085E               	movf	OUTFQ@j,w
  6407  0ECC  00AE               	movwf	??_OUTFQ+2
  6408  0ECD  072E               	addwf	??_OUTFQ+2,w
  6409  0ECE  072B               	addwf	OUTFQ@Nprg,w
  6410  0ECF  00AF               	movwf	??_OUTFQ+3
  6411  0ED0  082F               	movf	??_OUTFQ+3,w
  6412  0ED1  0084               	movwf	4
  6413  0ED2  0820               	movf	?___awdiv,w
  6414  0ED3  1383               	bcf	3,7	;select IRP bank0
  6415  0ED4  0080               	movwf	0
  6416  0ED5  0A84               	incf	4,f
  6417  0ED6  0821               	movf	?___awdiv+1,w
  6418  0ED7  2F65               	goto	L8
  6419  0ED8                     l3260:	
  6420                           ;FMCW.c: 155: }
  6421                           ;FMCW.c: 156: }
  6422                           
  6423                           
  6424                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6425  0ED8  085E               	movf	OUTFQ@j,w
  6426  0ED9  00AC               	movwf	??_OUTFQ
  6427  0EDA  072C               	addwf	??_OUTFQ,w
  6428  0EDB  072B               	addwf	OUTFQ@Nprg,w
  6429  0EDC  00AD               	movwf	??_OUTFQ+1
  6430  0EDD  082D               	movf	??_OUTFQ+1,w
  6431  0EDE  0084               	movwf	4
  6432  0EDF  0800               	movf	0,w
  6433  0EE0  00AE               	movwf	??_OUTFQ+2
  6434  0EE1  0A84               	incf	4,f
  6435  0EE2  0800               	movf	0,w
  6436  0EE3  00AF               	movwf	??_OUTFQ+3
  6437  0EE4  1C2E               	btfss	??_OUTFQ+2,0
  6438  0EE5  2F66               	goto	l3274
  6439                           
  6440                           ;FMCW.c: 158: if(j == 4){
  6441  0EE6  3004               	movlw	4
  6442  0EE7  065E               	xorwf	OUTFQ@j,w
  6443  0EE8  045F               	iorwf	OUTFQ@j+1,w
  6444  0EE9  1D03               	btfss	3,2
  6445  0EEA  2F20               	goto	l3270
  6446                           
  6447                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6448  0EEB  3002               	movlw	2
  6449  0EEC  00A0               	movwf	___awdiv@divisor
  6450  0EED  3000               	movlw	0
  6451  0EEE  00A1               	movwf	___awdiv@divisor+1
  6452  0EEF  085E               	movf	OUTFQ@j,w
  6453  0EF0  00AC               	movwf	??_OUTFQ
  6454  0EF1  072C               	addwf	??_OUTFQ,w
  6455  0EF2  072B               	addwf	OUTFQ@Nprg,w
  6456  0EF3  00AD               	movwf	??_OUTFQ+1
  6457  0EF4  082D               	movf	??_OUTFQ+1,w
  6458  0EF5  0084               	movwf	4
  6459  0EF6  0800               	movf	0,w
  6460  0EF7  00A2               	movwf	___awdiv@dividend
  6461  0EF8  0A84               	incf	4,f
  6462  0EF9  0800               	movf	0,w
  6463  0EFA  00A3               	movwf	___awdiv@dividend+1
  6464  0EFB  120A  158A  231E  120A  158A  	fcall	___awdiv
  6465  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  6466  0F01  1303               	bcf	3,6	;RP1=0, select bank0
  6467  0F02  085E               	movf	OUTFQ@j,w
  6468  0F03  00AE               	movwf	??_OUTFQ+2
  6469  0F04  072E               	addwf	??_OUTFQ+2,w
  6470  0F05  072B               	addwf	OUTFQ@Nprg,w
  6471  0F06  00AF               	movwf	??_OUTFQ+3
  6472  0F07  082F               	movf	??_OUTFQ+3,w
  6473  0F08  0084               	movwf	4
  6474  0F09  0820               	movf	?___awdiv,w
  6475  0F0A  1383               	bcf	3,7	;select IRP bank0
  6476  0F0B  0080               	movwf	0
  6477  0F0C  0A84               	incf	4,f
  6478  0F0D  0821               	movf	?___awdiv+1,w
  6479  0F0E  0080               	movwf	0
  6480                           
  6481                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6482  0F0F  0858               	movf	OUTFQ@count,w
  6483  0F10  00AC               	movwf	??_OUTFQ
  6484  0F11  072C               	addwf	??_OUTFQ,w
  6485  0F12  3E34               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6486  0F13  0084               	movwf	4
  6487  0F14  3001               	movlw	1
  6488  0F15  0080               	movwf	0
  6489  0F16  0A84               	incf	4,f
  6490  0F17  3000               	movlw	0
  6491  0F18  0080               	movwf	0
  6492  0F19                     l3268:	
  6493                           
  6494                           ;FMCW.c: 161: count++;
  6495  0F19  3001               	movlw	1
  6496  0F1A  07D8               	addwf	OUTFQ@count,f
  6497  0F1B  1803               	skipnc
  6498  0F1C  0AD9               	incf	OUTFQ@count+1,f
  6499  0F1D  3000               	movlw	0
  6500  0F1E  07D9               	addwf	OUTFQ@count+1,f
  6501                           
  6502                           ;FMCW.c: 162: }
  6503  0F1F  2F66               	goto	l3274
  6504  0F20                     l3270:	
  6505                           
  6506                           ;FMCW.c: 163: else{
  6507                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6508  0F20  3002               	movlw	2
  6509  0F21  00A0               	movwf	___awdiv@divisor
  6510  0F22  3000               	movlw	0
  6511  0F23  00A1               	movwf	___awdiv@divisor+1
  6512  0F24  085E               	movf	OUTFQ@j,w
  6513  0F25  00AC               	movwf	??_OUTFQ
  6514  0F26  072C               	addwf	??_OUTFQ,w
  6515  0F27  072B               	addwf	OUTFQ@Nprg,w
  6516  0F28  00AD               	movwf	??_OUTFQ+1
  6517  0F29  082D               	movf	??_OUTFQ+1,w
  6518  0F2A  0084               	movwf	4
  6519  0F2B  0800               	movf	0,w
  6520  0F2C  00A2               	movwf	___awdiv@dividend
  6521  0F2D  0A84               	incf	4,f
  6522  0F2E  0800               	movf	0,w
  6523  0F2F  00A3               	movwf	___awdiv@dividend+1
  6524  0F30  120A  158A  231E  120A  158A  	fcall	___awdiv
  6525  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  6526  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  6527  0F37  085E               	movf	OUTFQ@j,w
  6528  0F38  00AE               	movwf	??_OUTFQ+2
  6529  0F39  072E               	addwf	??_OUTFQ+2,w
  6530  0F3A  072B               	addwf	OUTFQ@Nprg,w
  6531  0F3B  00AF               	movwf	??_OUTFQ+3
  6532  0F3C  082F               	movf	??_OUTFQ+3,w
  6533  0F3D  0084               	movwf	4
  6534  0F3E  0820               	movf	?___awdiv,w
  6535  0F3F  1383               	bcf	3,7	;select IRP bank0
  6536  0F40  0080               	movwf	0
  6537  0F41  0A84               	incf	4,f
  6538  0F42  0821               	movf	?___awdiv+1,w
  6539  0F43  0080               	movwf	0
  6540                           
  6541                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6542  0F44  085E               	movf	OUTFQ@j,w
  6543  0F45  00AC               	movwf	??_OUTFQ
  6544  0F46  072C               	addwf	??_OUTFQ,w
  6545  0F47  3E02               	addlw	2
  6546  0F48  072B               	addwf	OUTFQ@Nprg,w
  6547  0F49  00AD               	movwf	??_OUTFQ+1
  6548  0F4A  082D               	movf	??_OUTFQ+1,w
  6549  0F4B  0084               	movwf	4
  6550  0F4C  0800               	movf	0,w
  6551  0F4D  00AE               	movwf	??_OUTFQ+2
  6552  0F4E  0A84               	incf	4,f
  6553  0F4F  0800               	movf	0,w
  6554  0F50  00AF               	movwf	??_OUTFQ+3
  6555  0F51  082E               	movf	??_OUTFQ+2,w
  6556  0F52  3E0A               	addlw	10
  6557  0F53  00B0               	movwf	??_OUTFQ+4
  6558  0F54  082F               	movf	??_OUTFQ+3,w
  6559  0F55  1803               	skipnc
  6560  0F56  3E01               	addlw	1
  6561  0F57  3E00               	addlw	0
  6562  0F58  00B1               	movwf	??_OUTFQ+5
  6563  0F59  085E               	movf	OUTFQ@j,w
  6564  0F5A  00B2               	movwf	??_OUTFQ+6
  6565  0F5B  0732               	addwf	??_OUTFQ+6,w
  6566  0F5C  3E02               	addlw	2
  6567  0F5D  072B               	addwf	OUTFQ@Nprg,w
  6568  0F5E  00B3               	movwf	??_OUTFQ+7
  6569  0F5F  0833               	movf	??_OUTFQ+7,w
  6570  0F60  0084               	movwf	4
  6571  0F61  0830               	movf	??_OUTFQ+4,w
  6572  0F62  0080               	movwf	0
  6573  0F63  0A84               	incf	4,f
  6574  0F64  0831               	movf	??_OUTFQ+5,w
  6575  0F65                     L8:	
  6576  0F65  0080               	movwf	0
  6577  0F66                     l3274:	
  6578  0F66  3001               	movlw	1
  6579  0F67  07DE               	addwf	OUTFQ@j,f
  6580  0F68  1803               	skipnc
  6581  0F69  0ADF               	incf	OUTFQ@j+1,f
  6582  0F6A  3000               	movlw	0
  6583  0F6B  07DF               	addwf	OUTFQ@j+1,f
  6584  0F6C  085F               	movf	OUTFQ@j+1,w
  6585  0F6D  3A80               	xorlw	128
  6586  0F6E  00FF               	movwf	127
  6587  0F6F  3080               	movlw	128
  6588  0F70  027F               	subwf	127,w
  6589  0F71  1D03               	skipz
  6590  0F72  2F75               	goto	u3055
  6591  0F73  3005               	movlw	5
  6592  0F74  025E               	subwf	OUTFQ@j,w
  6593  0F75                     u3055:	
  6594  0F75  1C03               	skipc
  6595  0F76  2E71               	goto	l3248
  6596  0F77                     l3278:	
  6597  0F77  3001               	movlw	1
  6598  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  6599  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  6600  0F7A  07D6               	addwf	OUTFQ@i_338,f
  6601  0F7B  1803               	skipnc
  6602  0F7C  0AD7               	incf	OUTFQ@i_338+1,f
  6603  0F7D  3000               	movlw	0
  6604  0F7E  07D7               	addwf	OUTFQ@i_338+1,f
  6605  0F7F  0857               	movf	OUTFQ@i_338+1,w
  6606  0F80  3A80               	xorlw	128
  6607  0F81  00FF               	movwf	127
  6608  0F82  3080               	movlw	128
  6609  0F83  027F               	subwf	127,w
  6610  0F84  1D03               	skipz
  6611  0F85  2F88               	goto	u3065
  6612  0F86  3011               	movlw	17
  6613  0F87  0256               	subwf	OUTFQ@i_338,w
  6614  0F88                     u3065:	
  6615  0F88  1C03               	skipc
  6616  0F89  2E62               	goto	l3242
  6617  0F8A                     l3282:	
  6618                           
  6619                           ;FMCW.c: 166: }
  6620                           ;FMCW.c: 167: }
  6621                           ;FMCW.c: 168: }
  6622                           ;FMCW.c: 169: }
  6623                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6624  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  6625  0F8B  1303               	bcf	3,6	;RP1=0, select bank0
  6626  0F8C  01DC               	clrf	OUTFQ@i_340
  6627  0F8D  01DD               	clrf	OUTFQ@i_340+1
  6628  0F8E  085D               	movf	OUTFQ@i_340+1,w
  6629  0F8F  3A80               	xorlw	128
  6630  0F90  00FF               	movwf	127
  6631  0F91  3080               	movlw	128
  6632  0F92  027F               	subwf	127,w
  6633  0F93  1D03               	skipz
  6634  0F94  2F97               	goto	u3075
  6635  0F95  3011               	movlw	17
  6636  0F96  025C               	subwf	OUTFQ@i_340,w
  6637  0F97                     u3075:	
  6638  0F97  1803               	btfsc	3,0
  6639  0F98  2FE0               	goto	l3300
  6640  0F99                     l3288:	
  6641                           
  6642                           ;FMCW.c: 173: {
  6643                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6644  0F99  1283               	bcf	3,5	;RP0=0, select bank0
  6645  0F9A  1303               	bcf	3,6	;RP1=0, select bank0
  6646  0F9B  085C               	movf	OUTFQ@i_340,w
  6647  0F9C  00AC               	movwf	??_OUTFQ
  6648  0F9D  072C               	addwf	??_OUTFQ,w
  6649  0F9E  3E34               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6650  0F9F  0084               	movwf	4
  6651  0FA0  1383               	bcf	3,7	;select IRP bank0
  6652  0FA1  0800               	movf	0,w
  6653  0FA2  00AD               	movwf	??_OUTFQ+1
  6654  0FA3  0A84               	incf	4,f
  6655  0FA4  0800               	movf	0,w
  6656  0FA5  00AE               	movwf	??_OUTFQ+2
  6657  0FA6  082D               	movf	??_OUTFQ+1,w
  6658  0FA7  042E               	iorwf	??_OUTFQ+2,w
  6659  0FA8  1D03               	btfss	3,2
  6660  0FA9  2FB3               	goto	l3292
  6661                           
  6662                           ;FMCW.c: 175: {
  6663                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6664  0FAA  082A               	movf	OUTFQ@fmcwtxrx+1,w
  6665  0FAB  00A3               	movwf	L_OUT@fmcwtxrx+1
  6666  0FAC  0829               	movf	OUTFQ@fmcwtxrx,w
  6667  0FAD  00A2               	movwf	L_OUT@fmcwtxrx
  6668  0FAE  120A  158A  2250  120A  158A  	fcall	_L_OUT
  6669  0FB3                     l3292:	
  6670                           
  6671                           ;FMCW.c: 177: }
  6672                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6673  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  6674  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  6675  0FB5  085C               	movf	OUTFQ@i_340,w
  6676  0FB6  00AC               	movwf	??_OUTFQ
  6677  0FB7  072C               	addwf	??_OUTFQ,w
  6678  0FB8  3E34               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6679  0FB9  0084               	movwf	4
  6680  0FBA  1383               	bcf	3,7	;select IRP bank0
  6681  0FBB  0800               	movf	0,w
  6682  0FBC  00AD               	movwf	??_OUTFQ+1
  6683  0FBD  0A84               	incf	4,f
  6684  0FBE  0800               	movf	0,w
  6685  0FBF  00AE               	movwf	??_OUTFQ+2
  6686  0FC0  032D               	decf	??_OUTFQ+1,w
  6687  0FC1  042E               	iorwf	??_OUTFQ+2,w
  6688  0FC2  1D03               	btfss	3,2
  6689  0FC3  2FCD               	goto	l3296
  6690                           
  6691                           ;FMCW.c: 179: {
  6692                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6693  0FC4  082A               	movf	OUTFQ@fmcwtxrx+1,w
  6694  0FC5  00A3               	movwf	H_OUT@fmcwtxrx+1
  6695  0FC6  0829               	movf	OUTFQ@fmcwtxrx,w
  6696  0FC7  00A2               	movwf	H_OUT@fmcwtxrx
  6697  0FC8  120A  158A  220E  120A  158A  	fcall	_H_OUT
  6698  0FCD                     l3296:	
  6699  0FCD  3001               	movlw	1
  6700  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  6701  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  6702  0FD0  07DC               	addwf	OUTFQ@i_340,f
  6703  0FD1  1803               	skipnc
  6704  0FD2  0ADD               	incf	OUTFQ@i_340+1,f
  6705  0FD3  3000               	movlw	0
  6706  0FD4  07DD               	addwf	OUTFQ@i_340+1,f
  6707  0FD5  085D               	movf	OUTFQ@i_340+1,w
  6708  0FD6  3A80               	xorlw	128
  6709  0FD7  00FF               	movwf	127
  6710  0FD8  3080               	movlw	128
  6711  0FD9  027F               	subwf	127,w
  6712  0FDA  1D03               	skipz
  6713  0FDB  2FDE               	goto	u3105
  6714  0FDC  3011               	movlw	17
  6715  0FDD  025C               	subwf	OUTFQ@i_340,w
  6716  0FDE                     u3105:	
  6717  0FDE  1C03               	skipc
  6718  0FDF  2F99               	goto	l3288
  6719  0FE0                     l3300:	
  6720                           
  6721                           ;FMCW.c: 181: }
  6722                           ;FMCW.c: 182: }
  6723                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6724  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  6725  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  6726  0FE2  082A               	movf	OUTFQ@fmcwtxrx+1,w
  6727  0FE3  00A3               	movwf	H_OUT@fmcwtxrx+1
  6728  0FE4  0829               	movf	OUTFQ@fmcwtxrx,w
  6729  0FE5  00A2               	movwf	H_OUT@fmcwtxrx
  6730  0FE6  120A  158A  220E  120A  158A  	fcall	_H_OUT
  6731                           
  6732                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  6733  0FEB  1283               	bcf	3,5	;RP0=0, select bank0
  6734  0FEC  1303               	bcf	3,6	;RP1=0, select bank0
  6735  0FED  082A               	movf	OUTFQ@fmcwtxrx+1,w
  6736  0FEE  00A3               	movwf	L_OUT@fmcwtxrx+1
  6737  0FEF  0829               	movf	OUTFQ@fmcwtxrx,w
  6738  0FF0  00A2               	movwf	L_OUT@fmcwtxrx
  6739  0FF1  120A  158A  2250  120A  158A  	fcall	_L_OUT
  6740                           
  6741                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  6742  0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  6743  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  6744  0FF8  082A               	movf	OUTFQ@fmcwtxrx+1,w
  6745  0FF9  00A3               	movwf	STBOUT@fmcwtxrx+1
  6746  0FFA  0829               	movf	OUTFQ@fmcwtxrx,w
  6747  0FFB  00A2               	movwf	STBOUT@fmcwtxrx
  6748  0FFC  120A  158A  20FC   	fcall	_STBOUT
  6749  0FFF  0008               	return
  6750  1000                     __end_of_OUTFQ:	
  6751                           
  6752                           	psect	text24
  6753  0B1E                     __ptext24:	
  6754 ;; *************** function ___awdiv *****************
  6755 ;; Defined at:
  6756 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;  divisor         2    0[BANK0 ] int 
  6759 ;;  dividend        2    2[BANK0 ] int 
  6760 ;; Auto vars:     Size  Location     Type
  6761 ;;  quotient        2    7[BANK0 ] int 
  6762 ;;  sign            1    6[BANK0 ] unsigned char 
  6763 ;;  counter         1    5[BANK0 ] unsigned char 
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  2    0[BANK0 ] int 
  6766 ;; Registers used:
  6767 ;;		wreg, status,2, status,0
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6773 ;;      Params:         0       4       0       0       0
  6774 ;;      Locals:         0       4       0       0       0
  6775 ;;      Temps:          0       1       0       0       0
  6776 ;;      Totals:         0       9       0       0       0
  6777 ;;Total ram usage:        9 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    1
  6780 ;; This function calls:
  6781 ;;		Nothing
  6782 ;; This function is called by:
  6783 ;;		_OUTFQ
  6784 ;;		_RFDOUT
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           
  6789                           ;psect for function ___awdiv
  6790  0B1E                     ___awdiv:	
  6791                           
  6792                           ;incstack = 0
  6793                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6794  0B1E  1283               	bcf	3,5	;RP0=0, select bank0
  6795  0B1F  1303               	bcf	3,6	;RP1=0, select bank0
  6796  0B20  01A6               	clrf	___awdiv@sign
  6797  0B21  1FA1               	btfss	___awdiv@divisor+1,7
  6798  0B22  2B2A               	goto	l2184
  6799  0B23  09A0               	comf	___awdiv@divisor,f
  6800  0B24  09A1               	comf	___awdiv@divisor+1,f
  6801  0B25  0AA0               	incf	___awdiv@divisor,f
  6802  0B26  1903               	skipnz
  6803  0B27  0AA1               	incf	___awdiv@divisor+1,f
  6804  0B28  01A6               	clrf	___awdiv@sign
  6805  0B29  0AA6               	incf	___awdiv@sign,f
  6806  0B2A                     l2184:	
  6807  0B2A  1FA3               	btfss	___awdiv@dividend+1,7
  6808  0B2B  2B35               	goto	l2190
  6809  0B2C  09A2               	comf	___awdiv@dividend,f
  6810  0B2D  09A3               	comf	___awdiv@dividend+1,f
  6811  0B2E  0AA2               	incf	___awdiv@dividend,f
  6812  0B2F  1903               	skipnz
  6813  0B30  0AA3               	incf	___awdiv@dividend+1,f
  6814  0B31  3001               	movlw	1
  6815  0B32  00A4               	movwf	??___awdiv
  6816  0B33  0824               	movf	??___awdiv,w
  6817  0B34  06A6               	xorwf	___awdiv@sign,f
  6818  0B35                     l2190:	
  6819  0B35  01A7               	clrf	___awdiv@quotient
  6820  0B36  01A8               	clrf	___awdiv@quotient+1
  6821  0B37  0820               	movf	___awdiv@divisor,w
  6822  0B38  0421               	iorwf	___awdiv@divisor+1,w
  6823  0B39  1903               	btfsc	3,2
  6824  0B3A  2B6C               	goto	l2212
  6825  0B3B  01A5               	clrf	___awdiv@counter
  6826  0B3C  0AA5               	incf	___awdiv@counter,f
  6827  0B3D                     l2200:	
  6828  0B3D  1BA1               	btfsc	___awdiv@divisor+1,7
  6829  0B3E  2B4B               	goto	l2202
  6830  0B3F  3001               	movlw	1
  6831  0B40                     u1645:	
  6832  0B40  1003               	clrc
  6833  0B41  0DA0               	rlf	___awdiv@divisor,f
  6834  0B42  0DA1               	rlf	___awdiv@divisor+1,f
  6835  0B43  3EFF               	addlw	-1
  6836  0B44  1D03               	skipz
  6837  0B45  2B40               	goto	u1645
  6838  0B46  3001               	movlw	1
  6839  0B47  00A4               	movwf	??___awdiv
  6840  0B48  0824               	movf	??___awdiv,w
  6841  0B49  07A5               	addwf	___awdiv@counter,f
  6842  0B4A  2B3D               	goto	l2200
  6843  0B4B                     l2202:	
  6844  0B4B  3001               	movlw	1
  6845  0B4C                     u1665:	
  6846  0B4C  1003               	clrc
  6847  0B4D  0DA7               	rlf	___awdiv@quotient,f
  6848  0B4E  0DA8               	rlf	___awdiv@quotient+1,f
  6849  0B4F  3EFF               	addlw	-1
  6850  0B50  1D03               	skipz
  6851  0B51  2B4C               	goto	u1665
  6852  0B52  0821               	movf	___awdiv@divisor+1,w
  6853  0B53  0223               	subwf	___awdiv@dividend+1,w
  6854  0B54  1D03               	skipz
  6855  0B55  2B58               	goto	u1675
  6856  0B56  0820               	movf	___awdiv@divisor,w
  6857  0B57  0222               	subwf	___awdiv@dividend,w
  6858  0B58                     u1675:	
  6859  0B58  1C03               	skipc
  6860  0B59  2B61               	goto	l2208
  6861  0B5A  0820               	movf	___awdiv@divisor,w
  6862  0B5B  02A2               	subwf	___awdiv@dividend,f
  6863  0B5C  0821               	movf	___awdiv@divisor+1,w
  6864  0B5D  1C03               	skipc
  6865  0B5E  03A3               	decf	___awdiv@dividend+1,f
  6866  0B5F  02A3               	subwf	___awdiv@dividend+1,f
  6867  0B60  1427               	bsf	___awdiv@quotient,0
  6868  0B61                     l2208:	
  6869  0B61  3001               	movlw	1
  6870  0B62                     u1685:	
  6871  0B62  1003               	clrc
  6872  0B63  0CA1               	rrf	___awdiv@divisor+1,f
  6873  0B64  0CA0               	rrf	___awdiv@divisor,f
  6874  0B65  3EFF               	addlw	-1
  6875  0B66  1D03               	skipz
  6876  0B67  2B62               	goto	u1685
  6877  0B68  3001               	movlw	1
  6878  0B69  02A5               	subwf	___awdiv@counter,f
  6879  0B6A  1D03               	btfss	3,2
  6880  0B6B  2B4B               	goto	l2202
  6881  0B6C                     l2212:	
  6882  0B6C  0826               	movf	___awdiv@sign,w
  6883  0B6D  1903               	btfsc	3,2
  6884  0B6E  2B74               	goto	l2216
  6885  0B6F  09A7               	comf	___awdiv@quotient,f
  6886  0B70  09A8               	comf	___awdiv@quotient+1,f
  6887  0B71  0AA7               	incf	___awdiv@quotient,f
  6888  0B72  1903               	skipnz
  6889  0B73  0AA8               	incf	___awdiv@quotient+1,f
  6890  0B74                     l2216:	
  6891  0B74  0828               	movf	___awdiv@quotient+1,w
  6892  0B75  00A1               	movwf	?___awdiv+1
  6893  0B76  0827               	movf	___awdiv@quotient,w
  6894  0B77  00A0               	movwf	?___awdiv
  6895  0B78  0008               	return
  6896  0B79                     __end_of___awdiv:	
  6897                           
  6898                           	psect	text25
  6899  0D8D                     __ptext25:	
  6900 ;; *************** function _OPINIT *****************
  6901 ;; Defined at:
  6902 ;;		line 241 in file "FMCW.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;  fmcwtxrx        2    4[BANK0 ] int 
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;		None
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6916 ;;      Params:         0       2       0       0       0
  6917 ;;      Locals:         0       0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0
  6919 ;;      Totals:         0       2       0       0       0
  6920 ;;Total ram usage:        2 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    3
  6923 ;; This function calls:
  6924 ;;		_H_OUT
  6925 ;;		_L_OUT
  6926 ;;		_STBOUT
  6927 ;; This function is called by:
  6928 ;;		_FMTX
  6929 ;;		_CWTX
  6930 ;;		_FMRX
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           
  6935                           ;psect for function _OPINIT
  6936  0D8D                     _OPINIT:	
  6937                           
  6938                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  6939                           
  6940                           ;incstack = 0
  6941                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6942  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  6943  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  6944  0D8F  0825               	movf	OPINIT@fmcwtxrx+1,w
  6945  0D90  00A3               	movwf	L_OUT@fmcwtxrx+1
  6946  0D91  0824               	movf	OPINIT@fmcwtxrx,w
  6947  0D92  00A2               	movwf	L_OUT@fmcwtxrx
  6948  0D93  120A  158A  2250  120A  158A  	fcall	_L_OUT
  6949                           
  6950                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  6951  0D98  1283               	bcf	3,5	;RP0=0, select bank0
  6952  0D99  1303               	bcf	3,6	;RP1=0, select bank0
  6953  0D9A  0825               	movf	OPINIT@fmcwtxrx+1,w
  6954  0D9B  00A3               	movwf	L_OUT@fmcwtxrx+1
  6955  0D9C  0824               	movf	OPINIT@fmcwtxrx,w
  6956  0D9D  00A2               	movwf	L_OUT@fmcwtxrx
  6957  0D9E  120A  158A  2250  120A  158A  	fcall	_L_OUT
  6958                           
  6959                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  6960  0DA3  1283               	bcf	3,5	;RP0=0, select bank0
  6961  0DA4  1303               	bcf	3,6	;RP1=0, select bank0
  6962  0DA5  0825               	movf	OPINIT@fmcwtxrx+1,w
  6963  0DA6  00A3               	movwf	L_OUT@fmcwtxrx+1
  6964  0DA7  0824               	movf	OPINIT@fmcwtxrx,w
  6965  0DA8  00A2               	movwf	L_OUT@fmcwtxrx
  6966  0DA9  120A  158A  2250  120A  158A  	fcall	_L_OUT
  6967                           
  6968                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  6969  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  6970  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  6971  0DB0  0825               	movf	OPINIT@fmcwtxrx+1,w
  6972  0DB1  00A3               	movwf	H_OUT@fmcwtxrx+1
  6973  0DB2  0824               	movf	OPINIT@fmcwtxrx,w
  6974  0DB3  00A2               	movwf	H_OUT@fmcwtxrx
  6975  0DB4  120A  158A  220E  120A  158A  	fcall	_H_OUT
  6976                           
  6977                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  6978  0DB9  1283               	bcf	3,5	;RP0=0, select bank0
  6979  0DBA  1303               	bcf	3,6	;RP1=0, select bank0
  6980  0DBB  0825               	movf	OPINIT@fmcwtxrx+1,w
  6981  0DBC  00A3               	movwf	H_OUT@fmcwtxrx+1
  6982  0DBD  0824               	movf	OPINIT@fmcwtxrx,w
  6983  0DBE  00A2               	movwf	H_OUT@fmcwtxrx
  6984  0DBF  120A  158A  220E  120A  158A  	fcall	_H_OUT
  6985                           
  6986                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  6987  0DC4  1283               	bcf	3,5	;RP0=0, select bank0
  6988  0DC5  1303               	bcf	3,6	;RP1=0, select bank0
  6989  0DC6  0825               	movf	OPINIT@fmcwtxrx+1,w
  6990  0DC7  00A3               	movwf	L_OUT@fmcwtxrx+1
  6991  0DC8  0824               	movf	OPINIT@fmcwtxrx,w
  6992  0DC9  00A2               	movwf	L_OUT@fmcwtxrx
  6993  0DCA  120A  158A  2250  120A  158A  	fcall	_L_OUT
  6994                           
  6995                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  6996  0DCF  1283               	bcf	3,5	;RP0=0, select bank0
  6997  0DD0  1303               	bcf	3,6	;RP1=0, select bank0
  6998  0DD1  0825               	movf	OPINIT@fmcwtxrx+1,w
  6999  0DD2  00A3               	movwf	L_OUT@fmcwtxrx+1
  7000  0DD3  0824               	movf	OPINIT@fmcwtxrx,w
  7001  0DD4  00A2               	movwf	L_OUT@fmcwtxrx
  7002  0DD5  120A  158A  2250  120A  158A  	fcall	_L_OUT
  7003                           
  7004                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7005  0DDA  1283               	bcf	3,5	;RP0=0, select bank0
  7006  0DDB  1303               	bcf	3,6	;RP1=0, select bank0
  7007  0DDC  0825               	movf	OPINIT@fmcwtxrx+1,w
  7008  0DDD  00A3               	movwf	L_OUT@fmcwtxrx+1
  7009  0DDE  0824               	movf	OPINIT@fmcwtxrx,w
  7010  0DDF  00A2               	movwf	L_OUT@fmcwtxrx
  7011  0DE0  120A  158A  2250  120A  158A  	fcall	_L_OUT
  7012                           
  7013                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7014  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  7015  0DE6  1303               	bcf	3,6	;RP1=0, select bank0
  7016  0DE7  0825               	movf	OPINIT@fmcwtxrx+1,w
  7017  0DE8  00A3               	movwf	L_OUT@fmcwtxrx+1
  7018  0DE9  0824               	movf	OPINIT@fmcwtxrx,w
  7019  0DEA  00A2               	movwf	L_OUT@fmcwtxrx
  7020  0DEB  120A  158A  2250  120A  158A  	fcall	_L_OUT
  7021                           
  7022                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7023  0DF0  1283               	bcf	3,5	;RP0=0, select bank0
  7024  0DF1  1303               	bcf	3,6	;RP1=0, select bank0
  7025  0DF2  0825               	movf	OPINIT@fmcwtxrx+1,w
  7026  0DF3  00A3               	movwf	L_OUT@fmcwtxrx+1
  7027  0DF4  0824               	movf	OPINIT@fmcwtxrx,w
  7028  0DF5  00A2               	movwf	L_OUT@fmcwtxrx
  7029  0DF6  120A  158A  2250  120A  158A  	fcall	_L_OUT
  7030                           
  7031                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7032  0DFB  1283               	bcf	3,5	;RP0=0, select bank0
  7033  0DFC  1303               	bcf	3,6	;RP1=0, select bank0
  7034  0DFD  0825               	movf	OPINIT@fmcwtxrx+1,w
  7035  0DFE  00A3               	movwf	H_OUT@fmcwtxrx+1
  7036  0DFF  0824               	movf	OPINIT@fmcwtxrx,w
  7037  0E00  00A2               	movwf	H_OUT@fmcwtxrx
  7038  0E01  120A  158A  220E  120A  158A  	fcall	_H_OUT
  7039                           
  7040                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7041  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  7042  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  7043  0E08  0825               	movf	OPINIT@fmcwtxrx+1,w
  7044  0E09  00A3               	movwf	L_OUT@fmcwtxrx+1
  7045  0E0A  0824               	movf	OPINIT@fmcwtxrx,w
  7046  0E0B  00A2               	movwf	L_OUT@fmcwtxrx
  7047  0E0C  120A  158A  2250  120A  158A  	fcall	_L_OUT
  7048                           
  7049                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7050  0E11  1283               	bcf	3,5	;RP0=0, select bank0
  7051  0E12  1303               	bcf	3,6	;RP1=0, select bank0
  7052  0E13  0825               	movf	OPINIT@fmcwtxrx+1,w
  7053  0E14  00A3               	movwf	L_OUT@fmcwtxrx+1
  7054  0E15  0824               	movf	OPINIT@fmcwtxrx,w
  7055  0E16  00A2               	movwf	L_OUT@fmcwtxrx
  7056  0E17  120A  158A  2250  120A  158A  	fcall	_L_OUT
  7057                           
  7058                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7059  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  7060  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  7061  0E1E  0825               	movf	OPINIT@fmcwtxrx+1,w
  7062  0E1F  00A3               	movwf	STBOUT@fmcwtxrx+1
  7063  0E20  0824               	movf	OPINIT@fmcwtxrx,w
  7064  0E21  00A2               	movwf	STBOUT@fmcwtxrx
  7065  0E22  120A  158A  20FC   	fcall	_STBOUT
  7066  0E25  0008               	return
  7067  0E26                     __end_of_OPINIT:	
  7068                           
  7069                           	psect	text26
  7070  08FC                     __ptext26:	
  7071 ;; *************** function _STBOUT *****************
  7072 ;; Defined at:
  7073 ;;		line 107 in file "FMCW.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  fmcwtxrx        2    2[BANK0 ] int 
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;		None
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      void 
  7080 ;; Registers used:
  7081 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7087 ;;      Params:         0       2       0       0       0
  7088 ;;      Locals:         0       0       0       0       0
  7089 ;;      Temps:          0       0       0       0       0
  7090 ;;      Totals:         0       2       0       0       0
  7091 ;;Total ram usage:        2 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    2
  7094 ;; This function calls:
  7095 ;;		__NOP
  7096 ;; This function is called by:
  7097 ;;		_OUTFQ
  7098 ;;		_RFDOUT
  7099 ;;		_OPINIT
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           
  7104                           ;psect for function _STBOUT
  7105  08FC                     _STBOUT:	
  7106                           
  7107                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7108                           
  7109                           ;incstack = 0
  7110                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7111  08FC  1283               	bcf	3,5	;RP0=0, select bank0
  7112  08FD  1303               	bcf	3,6	;RP1=0, select bank0
  7113  08FE  0322               	decf	STBOUT@fmcwtxrx,w
  7114  08FF  0423               	iorwf	STBOUT@fmcwtxrx+1,w
  7115  0900  1D03               	btfss	3,2
  7116  0901  290B               	goto	l3192
  7117                           
  7118                           ;FMCW.c: 109: {
  7119                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7120  0902  1685               	bsf	5,5	;volatile
  7121                           
  7122                           ;FMCW.c: 111: _NOP();
  7123  0903  120A  158A  20AD  120A  158A  	fcall	__NOP
  7124                           
  7125                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7126  0908  1283               	bcf	3,5	;RP0=0, select bank0
  7127  0909  1303               	bcf	3,6	;RP1=0, select bank0
  7128  090A  1285               	bcf	5,5	;volatile
  7129  090B                     l3192:	
  7130                           
  7131                           ;FMCW.c: 113: }
  7132                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7133  090B  3002               	movlw	2
  7134  090C  0622               	xorwf	STBOUT@fmcwtxrx,w
  7135  090D  0423               	iorwf	STBOUT@fmcwtxrx+1,w
  7136  090E  1D03               	btfss	3,2
  7137  090F  2919               	goto	l3200
  7138                           
  7139                           ;FMCW.c: 115: {
  7140                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7141  0910  1408               	bsf	8,0	;volatile
  7142                           
  7143                           ;FMCW.c: 117: _NOP();
  7144  0911  120A  158A  20AD  120A  158A  	fcall	__NOP
  7145                           
  7146                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7147  0916  1283               	bcf	3,5	;RP0=0, select bank0
  7148  0917  1303               	bcf	3,6	;RP1=0, select bank0
  7149  0918  1008               	bcf	8,0	;volatile
  7150  0919                     l3200:	
  7151                           
  7152                           ;FMCW.c: 119: }
  7153                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7154  0919  3003               	movlw	3
  7155  091A  0622               	xorwf	STBOUT@fmcwtxrx,w
  7156  091B  0423               	iorwf	STBOUT@fmcwtxrx+1,w
  7157  091C  1D03               	btfss	3,2
  7158  091D  0008               	return
  7159                           
  7160                           ;FMCW.c: 121: {
  7161                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7162  091E  1605               	bsf	5,4	;volatile
  7163                           
  7164                           ;FMCW.c: 123: _NOP();
  7165  091F  120A  158A  20AD   	fcall	__NOP
  7166                           
  7167                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7168  0922  1283               	bcf	3,5	;RP0=0, select bank0
  7169  0923  1303               	bcf	3,6	;RP1=0, select bank0
  7170  0924  1205               	bcf	5,4	;volatile
  7171  0925  0008               	return
  7172  0926                     __end_of_STBOUT:	
  7173                           
  7174                           	psect	text27
  7175  0A50                     __ptext27:	
  7176 ;; *************** function _L_OUT *****************
  7177 ;; Defined at:
  7178 ;;		line 40 in file "FMCW.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;  fmcwtxrx        2    2[BANK0 ] int 
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;		None
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  1    wreg      void 
  7185 ;; Registers used:
  7186 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7187 ;; Tracked objects:
  7188 ;;		On entry : 0/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7192 ;;      Params:         0       2       0       0       0
  7193 ;;      Locals:         0       0       0       0       0
  7194 ;;      Temps:          0       0       0       0       0
  7195 ;;      Totals:         0       2       0       0       0
  7196 ;;Total ram usage:        2 bytes
  7197 ;; Hardware stack levels used:    1
  7198 ;; Hardware stack levels required when called:    2
  7199 ;; This function calls:
  7200 ;;		__NOP
  7201 ;; This function is called by:
  7202 ;;		_OUTFQ
  7203 ;;		_RFDOUT
  7204 ;;		_OPINIT
  7205 ;; This function uses a non-reentrant model
  7206 ;;
  7207                           
  7208                           
  7209                           ;psect for function _L_OUT
  7210  0A50                     _L_OUT:	
  7211                           
  7212                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7213                           
  7214                           ;incstack = 0
  7215                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7216  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  7217  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  7218  0A52  0322               	decf	L_OUT@fmcwtxrx,w
  7219  0A53  0423               	iorwf	L_OUT@fmcwtxrx+1,w
  7220  0A54  1D03               	btfss	3,2
  7221  0A55  2A67               	goto	l3134
  7222                           
  7223                           ;FMCW.c: 42: {
  7224                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7225  0A56  1009               	bcf	9,0	;volatile
  7226                           
  7227                           ;FMCW.c: 44: _NOP();
  7228  0A57  120A  158A  20AD  120A  158A  	fcall	__NOP
  7229                           
  7230                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7231  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  7232  0A5D  1303               	bcf	3,6	;RP1=0, select bank0
  7233  0A5E  1489               	bsf	9,1	;volatile
  7234                           
  7235                           ;FMCW.c: 46: _NOP();
  7236  0A5F  120A  158A  20AD  120A  158A  	fcall	__NOP
  7237                           
  7238                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7239  0A64  1283               	bcf	3,5	;RP0=0, select bank0
  7240  0A65  1303               	bcf	3,6	;RP1=0, select bank0
  7241  0A66  1089               	bcf	9,1	;volatile
  7242  0A67                     l3134:	
  7243                           
  7244                           ;FMCW.c: 48: }
  7245                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7246  0A67  3002               	movlw	2
  7247  0A68  0622               	xorwf	L_OUT@fmcwtxrx,w
  7248  0A69  0423               	iorwf	L_OUT@fmcwtxrx+1,w
  7249  0A6A  1D03               	btfss	3,2
  7250  0A6B  2A7D               	goto	l3144
  7251                           
  7252                           ;FMCW.c: 50: {
  7253                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7254  0A6C  1088               	bcf	8,1	;volatile
  7255                           
  7256                           ;FMCW.c: 52: _NOP();
  7257  0A6D  120A  158A  20AD  120A  158A  	fcall	__NOP
  7258                           
  7259                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7260  0A72  1283               	bcf	3,5	;RP0=0, select bank0
  7261  0A73  1303               	bcf	3,6	;RP1=0, select bank0
  7262  0A74  1508               	bsf	8,2	;volatile
  7263                           
  7264                           ;FMCW.c: 54: _NOP();
  7265  0A75  120A  158A  20AD  120A  158A  	fcall	__NOP
  7266                           
  7267                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7268  0A7A  1283               	bcf	3,5	;RP0=0, select bank0
  7269  0A7B  1303               	bcf	3,6	;RP1=0, select bank0
  7270  0A7C  1108               	bcf	8,2	;volatile
  7271  0A7D                     l3144:	
  7272                           
  7273                           ;FMCW.c: 56: }
  7274                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7275  0A7D  3003               	movlw	3
  7276  0A7E  0622               	xorwf	L_OUT@fmcwtxrx,w
  7277  0A7F  0423               	iorwf	L_OUT@fmcwtxrx+1,w
  7278  0A80  1D03               	btfss	3,2
  7279  0A81  0008               	return
  7280                           
  7281                           ;FMCW.c: 58: {
  7282                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7283  0A82  1185               	bcf	5,3	;volatile
  7284                           
  7285                           ;FMCW.c: 60: _NOP();
  7286  0A83  120A  158A  20AD  120A  158A  	fcall	__NOP
  7287                           
  7288                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7289  0A88  1283               	bcf	3,5	;RP0=0, select bank0
  7290  0A89  1303               	bcf	3,6	;RP1=0, select bank0
  7291  0A8A  1505               	bsf	5,2	;volatile
  7292                           
  7293                           ;FMCW.c: 62: _NOP();
  7294  0A8B  120A  158A  20AD   	fcall	__NOP
  7295                           
  7296                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7297  0A8E  1283               	bcf	3,5	;RP0=0, select bank0
  7298  0A8F  1303               	bcf	3,6	;RP1=0, select bank0
  7299  0A90  1105               	bcf	5,2	;volatile
  7300  0A91  0008               	return
  7301  0A92                     __end_of_L_OUT:	
  7302                           
  7303                           	psect	text28
  7304  0A0E                     __ptext28:	
  7305 ;; *************** function _H_OUT *****************
  7306 ;; Defined at:
  7307 ;;		line 74 in file "FMCW.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  fmcwtxrx        2    2[BANK0 ] int 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;		None
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      void 
  7314 ;; Registers used:
  7315 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7321 ;;      Params:         0       2       0       0       0
  7322 ;;      Locals:         0       0       0       0       0
  7323 ;;      Temps:          0       0       0       0       0
  7324 ;;      Totals:         0       2       0       0       0
  7325 ;;Total ram usage:        2 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; Hardware stack levels required when called:    2
  7328 ;; This function calls:
  7329 ;;		__NOP
  7330 ;; This function is called by:
  7331 ;;		_OUTFQ
  7332 ;;		_RFDOUT
  7333 ;;		_OPINIT
  7334 ;; This function uses a non-reentrant model
  7335 ;;
  7336                           
  7337                           
  7338                           ;psect for function _H_OUT
  7339  0A0E                     _H_OUT:	
  7340                           
  7341                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7342                           
  7343                           ;incstack = 0
  7344                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7345  0A0E  1283               	bcf	3,5	;RP0=0, select bank0
  7346  0A0F  1303               	bcf	3,6	;RP1=0, select bank0
  7347  0A10  0322               	decf	H_OUT@fmcwtxrx,w
  7348  0A11  0423               	iorwf	H_OUT@fmcwtxrx+1,w
  7349  0A12  1D03               	btfss	3,2
  7350  0A13  2A25               	goto	l3164
  7351                           
  7352                           ;FMCW.c: 76: {
  7353                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7354  0A14  1409               	bsf	9,0	;volatile
  7355                           
  7356                           ;FMCW.c: 78: _NOP();
  7357  0A15  120A  158A  20AD  120A  158A  	fcall	__NOP
  7358                           
  7359                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7360  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  7361  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  7362  0A1C  1489               	bsf	9,1	;volatile
  7363                           
  7364                           ;FMCW.c: 80: _NOP();
  7365  0A1D  120A  158A  20AD  120A  158A  	fcall	__NOP
  7366                           
  7367                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7368  0A22  1283               	bcf	3,5	;RP0=0, select bank0
  7369  0A23  1303               	bcf	3,6	;RP1=0, select bank0
  7370  0A24  1089               	bcf	9,1	;volatile
  7371  0A25                     l3164:	
  7372                           
  7373                           ;FMCW.c: 82: }
  7374                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7375  0A25  3002               	movlw	2
  7376  0A26  0622               	xorwf	H_OUT@fmcwtxrx,w
  7377  0A27  0423               	iorwf	H_OUT@fmcwtxrx+1,w
  7378  0A28  1D03               	btfss	3,2
  7379  0A29  2A3B               	goto	l3174
  7380                           
  7381                           ;FMCW.c: 84: {
  7382                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7383  0A2A  1488               	bsf	8,1	;volatile
  7384                           
  7385                           ;FMCW.c: 86: _NOP();
  7386  0A2B  120A  158A  20AD  120A  158A  	fcall	__NOP
  7387                           
  7388                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7389  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  7390  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  7391  0A32  1508               	bsf	8,2	;volatile
  7392                           
  7393                           ;FMCW.c: 88: _NOP();
  7394  0A33  120A  158A  20AD  120A  158A  	fcall	__NOP
  7395                           
  7396                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7397  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  7398  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  7399  0A3A  1108               	bcf	8,2	;volatile
  7400  0A3B                     l3174:	
  7401                           
  7402                           ;FMCW.c: 90: }
  7403                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7404  0A3B  3003               	movlw	3
  7405  0A3C  0622               	xorwf	H_OUT@fmcwtxrx,w
  7406  0A3D  0423               	iorwf	H_OUT@fmcwtxrx+1,w
  7407  0A3E  1D03               	btfss	3,2
  7408  0A3F  0008               	return
  7409                           
  7410                           ;FMCW.c: 92: {
  7411                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7412  0A40  1585               	bsf	5,3	;volatile
  7413                           
  7414                           ;FMCW.c: 94: _NOP();
  7415  0A41  120A  158A  20AD  120A  158A  	fcall	__NOP
  7416                           
  7417                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7418  0A46  1283               	bcf	3,5	;RP0=0, select bank0
  7419  0A47  1303               	bcf	3,6	;RP1=0, select bank0
  7420  0A48  1505               	bsf	5,2	;volatile
  7421                           
  7422                           ;FMCW.c: 96: _NOP();
  7423  0A49  120A  158A  20AD   	fcall	__NOP
  7424                           
  7425                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7426  0A4C  1283               	bcf	3,5	;RP0=0, select bank0
  7427  0A4D  1303               	bcf	3,6	;RP1=0, select bank0
  7428  0A4E  1105               	bcf	5,2	;volatile
  7429  0A4F  0008               	return
  7430  0A50                     __end_of_H_OUT:	
  7431                           
  7432                           	psect	text29
  7433  08AD                     __ptext29:	
  7434 ;; *************** function __NOP *****************
  7435 ;; Defined at:
  7436 ;;		line 360 in file "FMCW.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;		None
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;  i               2    0[BANK0 ] int 
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      void 
  7443 ;; Registers used:
  7444 ;;		wreg, status,2, btemp+1
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7450 ;;      Params:         0       0       0       0       0
  7451 ;;      Locals:         0       2       0       0       0
  7452 ;;      Temps:          0       0       0       0       0
  7453 ;;      Totals:         0       2       0       0       0
  7454 ;;Total ram usage:        2 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:    1
  7457 ;; This function calls:
  7458 ;;		Nothing
  7459 ;; This function is called by:
  7460 ;;		_L_OUT
  7461 ;;		_H_OUT
  7462 ;;		_STBOUT
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           
  7467                           ;psect for function __NOP
  7468  08AD                     __NOP:	
  7469                           
  7470                           ;FMCW.c: 361: for(int i=0; i<5; i++){
  7471                           
  7472                           ;incstack = 0
  7473                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7474  08AD  1283               	bcf	3,5	;RP0=0, select bank0
  7475  08AE  1303               	bcf	3,6	;RP1=0, select bank0
  7476  08AF  01A0               	clrf	__NOP@i
  7477  08B0  01A1               	clrf	__NOP@i+1
  7478  08B1                     L9:	
  7479  08B1  0821               	movf	__NOP@i+1,w
  7480  08B2  3A80               	xorlw	128
  7481  08B3  00FF               	movwf	127
  7482  08B4  3080               	movlw	128
  7483  08B5  027F               	subwf	127,w
  7484  08B6  1D03               	skipz
  7485  08B7  28BA               	goto	u2835
  7486  08B8  3005               	movlw	5
  7487  08B9  0220               	subwf	__NOP@i,w
  7488  08BA                     u2835:	
  7489  08BA  1803               	btfsc	3,0
  7490  08BB  0008               	return
  7491                           
  7492                           ;FMCW.c: 362: __nop();
  7493  08BC  0000               	nop
  7494  08BD  3001               	movlw	1
  7495  08BE  1283               	bcf	3,5	;RP0=0, select bank0
  7496  08BF  1303               	bcf	3,6	;RP1=0, select bank0
  7497  08C0  07A0               	addwf	__NOP@i,f
  7498  08C1  1803               	skipnc
  7499  08C2  0AA1               	incf	__NOP@i+1,f
  7500  08C3  3000               	movlw	0
  7501  08C4  07A1               	addwf	__NOP@i+1,f
  7502  08C5  28B1               	goto	L9
  7503  08C6                     __end_of__NOP:	
  7504                           
  7505                           	psect	text30
  7506  0A92                     __ptext30:	
  7507 ;; *************** function _InterReceiver *****************
  7508 ;; Defined at:
  7509 ;;		line 27 in file "WDT.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;		None
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;		None
  7514 ;; Return value:  Size  Location     Type
  7515 ;;                  1    wreg      void 
  7516 ;; Registers used:
  7517 ;;		wreg, status,2, btemp+1
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7523 ;;      Params:         0       0       0       0       0
  7524 ;;      Locals:         0       0       0       0       0
  7525 ;;      Temps:          7       0       0       0       0
  7526 ;;      Totals:         7       0       0       0       0
  7527 ;;Total ram usage:        7 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; This function calls:
  7530 ;;		Nothing
  7531 ;; This function is called by:
  7532 ;;		Interrupt level 1
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           
  7537                           ;psect for function _InterReceiver
  7538  0A92                     _InterReceiver:	
  7539                           
  7540                           ;WDT.c: 28: volatile static int intr_counter;
  7541                           ;WDT.c: 29: volatile static int intr_counter_H;
  7542                           ;WDT.c: 30: if(PIR1bits.TMR1IF == 1){
  7543  0A92  1C0C               	btfss	12,0	;volatile
  7544  0A93  2ACD               	goto	i1l502
  7545                           
  7546                           ;WDT.c: 31: TMR1 = (0xffff - 62500);
  7547  0A94  300B               	movlw	11
  7548  0A95  008F               	movwf	15	;volatile
  7549  0A96  30DB               	movlw	219
  7550  0A97  008E               	movwf	14	;volatile
  7551                           
  7552                           ;WDT.c: 33: intr_counter++;
  7553  0A98  3001               	movlw	1
  7554  0A99  07F9               	addwf	InterReceiver@intr_counter,f	;volatile
  7555  0A9A  1803               	skipnc
  7556  0A9B  0AFA               	incf	InterReceiver@intr_counter+1,f	;volatile
  7557  0A9C  3000               	movlw	0
  7558  0A9D  07FA               	addwf	InterReceiver@intr_counter+1,f	;volatile
  7559                           
  7560                           ;WDT.c: 34: if (intr_counter >= 2) {
  7561  0A9E  087A               	movf	InterReceiver@intr_counter+1,w	;volatile
  7562  0A9F  3A80               	xorlw	128
  7563  0AA0  00FF               	movwf	127
  7564  0AA1  3080               	movlw	128
  7565  0AA2  027F               	subwf	127,w
  7566  0AA3  1D03               	skipz
  7567  0AA4  2AA7               	goto	u143_25
  7568  0AA5  3002               	movlw	2
  7569  0AA6  0279               	subwf	InterReceiver@intr_counter,w	;volatile
  7570  0AA7                     u143_25:	
  7571  0AA7  1C03               	skipc
  7572  0AA8  2ACA               	goto	i1l2054
  7573  0AA9  0064               	clrwdt	;# 
  7574                           
  7575                           ;WDT.c: 36: intr_counter = 0;
  7576  0AAA  01F9               	clrf	InterReceiver@intr_counter	;volatile
  7577  0AAB  01FA               	clrf	InterReceiver@intr_counter+1	;volatile
  7578                           
  7579                           ;WDT.c: 37: intr_counter_H ++;
  7580  0AAC  3001               	movlw	1
  7581  0AAD  07F7               	addwf	InterReceiver@intr_counter_H,f	;volatile
  7582  0AAE  1803               	skipnc
  7583  0AAF  0AF8               	incf	InterReceiver@intr_counter_H+1,f	;volatile
  7584  0AB0  3000               	movlw	0
  7585  0AB1  07F8               	addwf	InterReceiver@intr_counter_H+1,f	;volatile
  7586                           
  7587                           ;WDT.c: 38: if (intr_counter_H >= 60) {
  7588  0AB2  0878               	movf	InterReceiver@intr_counter_H+1,w	;volatile
  7589  0AB3  3A80               	xorlw	128
  7590  0AB4  00FF               	movwf	127
  7591  0AB5  3080               	movlw	128
  7592  0AB6  027F               	subwf	127,w
  7593  0AB7  1D03               	skipz
  7594  0AB8  2ABB               	goto	u144_25
  7595  0AB9  303C               	movlw	60
  7596  0ABA  0277               	subwf	InterReceiver@intr_counter_H,w	;volatile
  7597  0ABB                     u144_25:	
  7598  0ABB  1C03               	skipc
  7599  0ABC  2ACA               	goto	i1l2054
  7600                           
  7601                           ;WDT.c: 47: _delay((unsigned long)((500)*(10000000/4000.0)));
  7602  0ABD  3007               	movlw	7
  7603  0ABE  00F2               	movwf	??_InterReceiver+2
  7604  0ABF  3058               	movlw	88
  7605  0AC0  00F1               	movwf	??_InterReceiver+1
  7606  0AC1  3059               	movlw	89
  7607  0AC2  00F0               	movwf	??_InterReceiver
  7608  0AC3                     u346_27:	
  7609  0AC3  0BF0               	decfsz	??_InterReceiver,f
  7610  0AC4  2AC3               	goto	u346_27
  7611  0AC5  0BF1               	decfsz	??_InterReceiver+1,f
  7612  0AC6  2AC3               	goto	u346_27
  7613  0AC7  0BF2               	decfsz	??_InterReceiver+2,f
  7614  0AC8  2AC3               	goto	u346_27
  7615  0AC9  2ACA               	nop2
  7616  0ACA                     i1l2054:	
  7617                           
  7618                           ;WDT.c: 48: }
  7619                           ;WDT.c: 49: }
  7620                           ;WDT.c: 51: PIR1bits.TMR1IF = 0;
  7621  0ACA  1283               	bcf	3,5	;RP0=0, select bank0
  7622  0ACB  1303               	bcf	3,6	;RP1=0, select bank0
  7623  0ACC  100C               	bcf	12,0	;volatile
  7624  0ACD                     i1l502:	
  7625  0ACD  0876               	movf	??_InterReceiver+6,w
  7626  0ACE  00FF               	movwf	127
  7627  0ACF  0875               	movf	??_InterReceiver+5,w
  7628  0AD0  008A               	movwf	10
  7629  0AD1  0874               	movf	??_InterReceiver+4,w
  7630  0AD2  0084               	movwf	4
  7631  0AD3  0E73               	swapf	(??_InterReceiver+3)^(0+-128),w
  7632  0AD4  0083               	movwf	3
  7633  0AD5  0EFE               	swapf	126,f
  7634  0AD6  0E7E               	swapf	126,w
  7635  0AD7  0009               	retfie
  7636  0AD8                     __end_of_InterReceiver:	
  7637  007E                     btemp	set	126	;btemp
  7638  007E                     wtemp0	set	126
  7639                           
  7640                           	psect	intentry
  7641  0004                     __pintentry:	
  7642                           ;incstack = 0
  7643                           ; Regs used in _InterReceiver: [wreg+status,2+btemp+1]
  7644                           
  7645  0004                     interrupt_function:	
  7646  007E                     saved_w	set	btemp
  7647  0004  00FE               	movwf	btemp
  7648  0005  0E03               	swapf	3,w
  7649  0006  00F3               	movwf	??_InterReceiver+3
  7650  0007  0804               	movf	4,w
  7651  0008  00F4               	movwf	??_InterReceiver+4
  7652  0009  080A               	movf	10,w
  7653  000A  00F5               	movwf	??_InterReceiver+5
  7654  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7655  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7656  000D  087F               	movf	btemp+1,w
  7657  000E  00F6               	movwf	??_InterReceiver+6
  7658  000F  120A  158A  2A92   	ljmp	_InterReceiver


Data Sizes:
    Strings     14
    Constant    2
    Data        66
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      13
    BANK0            80     74      80
    BANK1            80     33      79
    BANK3            96      0      86
    BANK2            96      0       0

Pointer List with Targets:

    FMRX@Nprg	PTR int  size(1) Largest target is 10
		 -> main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK1[10]), 

    CWTX@Nprg	PTR int  size(1) Largest target is 10
		 -> main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(1) Largest target is 10
		 -> main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(1) Largest target is 10
		 -> main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), FMRX_Nprg(BANK1[10]), 
		 -> CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _InterReceiver in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _TXOBC_waddress->_putch
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _InterReceiver in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterReceiver in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _InterReceiver in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterReceiver in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   40378
                                             70 BANK0      4     4      0
                                              0 BANK1     33    33      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                     _TXOBC_waddress
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     254
                                              1 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             39 BANK0      6     6      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 BANK0     33    33      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 BANK0      9     9      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     254
                                              1 BANK0      3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                             14 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     3      3   11882
                                             64 BANK0      6     3      3
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     3      3   11882
                                             64 BANK0      6     3      3
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     678
                                              2 BANK0      8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     291
                                              0 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     3      3   11882
                                             64 BANK0      6     3      3
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3953
                                              9 BANK0     37    33      4
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               55    52      3    4839
                                              9 BANK0     55    52      3
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2672
                                              4 BANK0      2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     356
                                              2 BANK0      2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2    1006
                                              2 BANK0      2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     681
                                              2 BANK0      2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _InterReceiver                                        7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _TXOBC_waddress
     _putch

 _InterReceiver (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      56       9       89.6%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     21      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4A      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     102      12        0.0%
ABS                  0      0     102       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 23 19:51:27 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l55 0842  
                  ___awdiv@sign 0026                              fsr 0004                             l302 06B9  
                           l303 06A4                             l171 0287                             l236 0D72  
                           l346 084F                             _RA1 0029                             _RB2 0032  
                           _RB4 0034                             _RB5 0035                             _RC5 003D  
                           _PEN 048A                    __CFG_CPD$OFF 0000                             _SEN 0488  
                           _RX9 00C6                             _TX9 04C6                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                    __CFG_LVP$OFF 0000  
                          l2200 0B3D                            l2202 0B4B                            l2212 0B6C  
                          l2300 012F                            l2310 014A                            l3200 0919  
                          l2216 0B74                            l2208 0B61                            l2240 0076  
                          l2082 0B0C                            l2314 0157                            l2410 0285  
                          l3300 0FE0                            l2084 0B19                            l2340 01AD  
                          l2260 00A7                            l3134 0A67                            l2190 0B35  
                          l3230 0E37                            l2502 0396                            l2430 02B8  
                          l2326 0185                            l2246 007F                            l2238 0057  
                          l3144 0A7D                            l2184 0B2A                            l3320 0702  
                          l2440 02CF                            l2416 0290                            l2352 01DB  
                          l2336 01A0                            l2256 009A                            l3242 0E62  
                          l3314 06F3                            l2506 03A3                            l2602 04D1  
                          l2450 02EA                            l2426 02AB                            l2362 01F6  
                          l2274 00D9                            l3164 0A25                            l3260 0ED8  
                          l3236 0E53                            l3308 06D7                            l2620 0C05  
                          l2532 03F9                            l2284 00F4                            l2604 0050  
                          l3174 0A3B                            l3270 0F20                            l3342 077C  
                          l3334 0748                            l2518 03D1                            l2454 02F7  
                          l2366 0203                            l3510 054F                            l3192 090B  
                          l3248 0E71                            l3328 0739                            l2624 0C13  
                          l2544 0427                            l2528 03EC                            l2480 034D  
                          l2392 0259                            l2288 0101                            l3274 0F66  
                          l3258 0EB4                            l3282 0F8A                            l3338 0762  
                          l3346 078F                            l2618 0C02                            l2570 047D  
                          l2554 0442                            l2466 0325                            l2378 0231  
                          l3292 0FB3                            l3268 0F19                            l3452 0CD7  
                          l2652 0D3A                            l2628 0C1E                            l2580 0498  
                          l2492 037B                            l2476 0340                            l2388 024C  
                          l3532 05C8                            l3278 0F77                            l3454 0CF7  
                          l2830 0B9B                            l2638 0BE2                            l2558 044F  
                          l3296 0FCD                            l3288 0F99                            l2664 0D6B  
                          l2584 04A5                            l2920 0C6B                            l3560 068C  
                          l2842 0BD0                            l2658 0D57                            l2666 0D19  
                          l3538 05D9                            l2828 0B8B                            l2838 0BC3  
                          l2678 0D8A                            l2926 0C93                            l2934 0C99  
                          STR_1 080F                            STR_2 080F                            STR_3 080F  
                          STR_4 080F                            STR_5 080F                            STR_6 080F  
                          STR_7 0808                            STR_8 0808                            STR_9 0808  
                          _BRGH 04C2                            _CREN 00C4                            _FERR 00C2  
                          u3005 0E6F                            u2215 0464                            u2135 03B8  
                          u2055 030C                            u3105 0FDE                            u3115 06D5  
                          u3125 06F1                            u3055 0F75                            u3135 0700  
                          u2255 04BA                            u2175 040E                            u2095 0362  
                          u3065 0F88                            u3145 0737                            u3075 0F97  
                          u3155 0746                            u2355 0D27                            u3307 04DC  
                          u1645 0B40                            u1485 0AFD                            u3317 0506  
                          u3270 0605                            u3407 07CC                            u3327 0566  
                          u3280 061A                            _FMRX 0952                            u1665 0B4C  
                          u3185 078D                            u2625 0B8F                            u1905 01C2  
                          u1825 0116                            u2705 0C91                            u3417 07DF  
                          u3337 058A                            u3290 0630                            u1675 0B58  
                          u2715 09EA                            u3427 07F2                            u3347 05E1  
                          _FMTX 097E                            u1685 0B62                            u2645 0B9D  
                          u3437 08A1                            u3357 05F4                            u2655 0BB2  
                          u3447 0B03                            u3367 0685                            u3457 0D04  
                          u2665 0BC4                            u1945 0218                            u1865 016C  
                          u1785 00C0                            u3377 06AF                            u2835 08BA  
                          u3387 06C1                            u3397 07B9                            u2695 0C69  
                          u1985 026E                            _RCIE 0465                            _RCIF 0065  
                          _CWTX 0926                            u2975 0E35                            u2985 0E51  
                          u2995 0E60                            _OERR 00C1                            _TMR1 000E  
                          _SPEN 00C7                            _SREN 00C5                            _TXIE 0464  
                          _TXEN 04C5                            _TXIF 0064                            _SYNC 04C4  
                          __NOP 08AD  TXOBC_waddress@TXOBC_wad_header 0025                    __CFG_WRT$OFF 0000  
                          _main 04D4                     _NM_waddress 087D                   ??_Init_SERIAL 0020  
                          btemp 007E                   __CFG_BOREN$ON 0000                    getbit@oldbit 007B  
                   Init_I2C_M@c 002E                            start 0012    ReceivePacket_data@fcschecker 0049  
                 __CFG_IESO$OFF 0000                   __CFG_MCLRE$ON 0000            __end_of_EEPROM_Write 0D0B  
                         ?_FMRX 0060                           ?_FMTX 0060                           ?_CWTX 0060  
              ?_I2C_Master_Wait 0070                ?_I2C_Master_Stop 0070                           ?__NOP 0070  
                         ?_main 0070                 __end_of___awdiv 0B79                           STR_10 0808  
                         STR_11 0808                           STR_12 0808                   __CFG_WDTE$OFF 0000  
                         _ANSEL 0188                 __end_of___lldiv 0BD9                 ___awdiv@divisor 0020  
       __size_of_TXOBC_waddress 004C                           i1l502 0ACD                 ___awdiv@counter 0025  
                         _RCREG 001A                           _SPBRG 0099                           _PORTA 0005  
                         _PORTB 0006                           _PORTC 0007                           _PORTD 0008  
                         _PORTE 0009                           _H_OUT 0A0E                           _OUTFQ 0E26  
                         _TRISA 0085                           _TRISB 0086                           _TRISC 0087  
                         _TRISD 0088                           _TRISE 0089                           _L_OUT 0A50  
                         _TXREG 0019                   __CFG_PWRTE$ON 0000                  __CFG_FCMEN$OFF 0000  
                         _dData 01C2                 __end_of_getdata 0C3A                   getdata@dstuff 002A  
                         _putch 083F                           pclath 000A                           status 0003  
                         wtemp0 007E          __size_of_InterReceiver 0046                      _Init_I2C_M 09D8  
              EEPROM_Write@data 0024      __end_of_ReceivePacket_data 0C9F                    __end_of_FMRX 097E  
                  __end_of_FMTX 09AA                    __end_of_CWTX 0952                    __end_of__NOP 08C6  
               __initialization 0015                    __end_of_main 06C8             __end_of_Init_SERIAL 08DF  
              __end_of_Init_MPU 08FC                          ??_FMRX 0063                          ??_FMTX 0063  
                        ??_CWTX 0063                          ??__NOP 0020                          ??_main 0066  
                        ?_H_OUT 0022        EEPROM_Write@high_address 0022                          ?_OUTFQ 0029  
                        ?_L_OUT 0022               ?_I2C_Master_Start 0070               ?_I2C_Master_Write 0020  
                        OUTFQ@i 005A              ??_I2C_Master_Start 0020                          OUTFQ@j 005E  
            ??_I2C_Master_Write 0022                ___awdiv@dividend 0022                          ?_putch 0070  
                        _ANSELH 0189                          i1l2054 0ACA                          u143_25 0AA7  
                        u144_25 0ABB                          u346_27 0AC3                          _RFDOUT 06C8  
                        _OPINIT 0D8D                          _SSPADD 0093                          _STBOUT 08FC  
                        _STATUS 0003                          _SSPCON 0014                          _SSPBUF 0013  
                        __NOP@i 0020                __end_of_fcscheck 0D8D                       ??___awdiv 0024  
                        _dfcshi 006F                       ??___lldiv 0028                          _dfcslo 006E  
                        _getbit 0AD8              __size_of_Reset_EPS 0018                ___awdiv@quotient 0027  
                    _dPacketnum 006A                       ??_getdata 0026                   _InterReceiver 0A92  
                   RFDOUT@i_350 004C                     RFDOUT@i_349 0048                __end_of_waitFlag 04D4  
                        saved_w 007E      EEPROM_Write@EEPROM_address 0028         __end_of__initialization 0044  
       EEPROM_Write@low_address 0023                     ?_Init_I2C_M 002E                     _Init_SERIAL 08C6  
         __size_of_EEPROM_Write 006C                   __end_of_H_OUT 0A50                   __end_of_OUTFQ 1000  
                 __end_of_L_OUT 0A92                   L_OUT@fmcwtxrx 0022                  __pcstackCOMMON 0070  
                  __pidataBANK1 09AA                    __pidataBANK3 0869                   __end_of_putch 0847  
                ?_InterReceiver 0070                  _TXOBC_waddress 07AF                         ??_H_OUT 0024  
                       ??_OUTFQ 002C                  _OPTION_REGbits 0081                         ??_L_OUT 0024  
                       ??_putch 0020                    _EEPROM_Write 0C9F                      __pbssBANK0 006A  
                    __pbssBANK3 0190               __end_of_Reset_EPS 08AD                       ?_Init_MPU 0070  
                       ?_RFDOUT 0029                         ?_OPINIT 0024                    ?_NM_waddress 0021  
                       ?_STBOUT 0022                         RFDOUT@i 004A                      __pmaintext 04D4  
                    __pintentry 0004                         ?_getbit 0020          __end_of_TXOBC_waddress 07FB  
   TXOBC_waddress@whigh_address 0021             __size_of_Init_I2C_M 0036                       OUTFQ@Nprg 002B  
                     ?_fcscheck 0020                         _SSPCON2 0091                         _SSPSTAT 0094  
                    __stringtab 0800                      ??_Init_MPU 0020                 __size_of_RFDOUT 00E7  
               __size_of_OPINIT 0099                 __size_of_STBOUT 002A                       ?_waitFlag 0070  
                       _dPacket 0190                         ___awdiv 0B1E                         ___lldiv 0B79  
               ??_InterReceiver 0070                 __size_of_getbit 0046                     waitFlag@buf 0046  
               ?_TXOBC_waddress 0021                         __ptext1 07AF                         __ptext2 0895  
                       __ptext3 0C3A                         __ptext4 0048                         __ptext5 0BD9  
                       __ptext6 0AD8                         __ptext7 0D0B                         __ptext8 087D  
                       __ptext9 083F                         _getdata 0BD9              _ReceivePacket_data 0C3A  
                     _T1CONbits 0010        __size_of_I2C_Master_Wait 0009        __size_of_I2C_Master_Stop 0007  
                    ??_fcscheck 0022             ?_ReceivePacket_data 0070                         getbit@i 0024  
                       clrloop0 0848            end_of_initialization 0044                    RFDOUT@Nref_b 0030  
                     _FMRX_Nref 00AA                       _FMRX_Nprg 00B0                       _FMTX_Nref 00AE  
                     _FMTX_Nprg 00C4                       _CWTX_Nref 00AC                       _CWTX_Nprg 00BA  
                   OUTFQ@Nprg_b 0034       __size_of_I2C_Master_Start 0007       __size_of_I2C_Master_Write 0008  
               ___lldiv@divisor 0020                 ___lldiv@counter 002D                      ??_waitFlag 0026  
          ??_ReceivePacket_data 0047                      fcscheck@bt 0024                  OPINIT@fmcwtxrx 0024  
     InterReceiver@intr_counter 0079                       _PORTAbits 0005                       _PORTDbits 0008  
                     _PORTEbits 0009     InterReceiver@intr_counter_H 0077                      getdata@buf 002E  
                  ??_Init_I2C_M 0032                    ?_Init_SERIAL 0070                  __end_of_RFDOUT 07AF  
                __end_of_OPINIT 0E26                  __end_of_STBOUT 0926            __size_of_NM_waddress 0018  
                __end_of_getbit 0B1E      TXOBC_waddress@wlow_address 0022             start_initialization 0015  
            __end_of_Init_I2C_M 0A0E                        ??_RFDOUT 002D                        ??_OPINIT 0026  
             ??_I2C_Master_Wait 0020               ??_I2C_Master_Stop 0020                        ??_STBOUT 0024  
             __size_of_Init_MPU 001D                       _Reset_EPS 0895               getdata@dbitstatus 002C  
                    init_fetch0 0858                        ??_getbit 0022                     __pdataBANK1 00A0  
                   __pdataBANK3 01D2                      RFDOUT@Nref 002B             __end_of_commandSize 0808  
      NM_waddress@whigh_address 0021                     __pbssCOMMON 0077                       ___latbits 0002  
                 __pcstackBANK0 0020                   __pcstackBANK1 00CE                        FMRX@Nref 0060  
                      FMRX@Nprg 0062                        FMTX@Nref 0060                        FMTX@Nprg 0062  
                      FMRX@fmrx 0064                        FMTX@fmtx 0064                        CWTX@Nref 0060  
                      CWTX@Nprg 0062               __size_of_fcscheck 0082                   waitFlag@j_101 002E  
                 waitFlag@j_110 0038                   waitFlag@j_103 0030                   waitFlag@j_120 0042  
                 waitFlag@j_112 003A                   waitFlag@j_105 0032                   waitFlag@j_114 003C  
                 waitFlag@j_107 0034                   waitFlag@j_116 003E                   waitFlag@j_109 0036  
                 waitFlag@j_118 0040                        CWTX@cwtx 0064                _I2C_Master_Start 0829  
                    ?_Reset_EPS 0070                _I2C_Master_Write 0837                ??_TXOBC_waddress 0023  
       getdata@bufstore_counter 0028                        ?___awdiv 0020                        ?___lldiv 0020  
             __size_of_waitFlag 048C                       __pstrings 0800                        ?_getdata 0070  
                __size_of_H_OUT 0042                  __size_of_OUTFQ 01DA                  __size_of_L_OUT 0042  
                __size_of_putch 0008               interrupt_function 0004                   H_OUT@fmcwtxrx 0022  
                     clear_ram0 0847                        _PIE1bits 008C                      OUTFQ@i_340 005C  
                    OUTFQ@i_338 0056                       _rcv_state 006C            __size_of_Init_SERIAL 0019  
                      _PIR1bits 000C                      OUTFQ@count 0058                     _commandSize 0806  
                     fcscheck@i 0025                       fcscheck@j 0027                       main@F1991 00A0  
                     main@F1993 01DC                       main@F1995 01D2           __end_of_InterReceiver 0AD8  
                   __stringbase 0805                       main@dData 00EE                        _Init_MPU 08DF  
                   ??_Reset_EPS 0020     __size_of_ReceivePacket_data 0065                __size_of___awdiv 005B  
              __size_of___lldiv 0060              __end_of__stringtab 0806                __size_of_getdata 0061  
               _I2C_Master_Wait 084F                 _I2C_Master_Stop 0830                  RFDOUT@fmcwtxrx 0029  
                      _fcscheck 0D0B                        __ptext10 08C6                        __ptext11 08DF  
                      __ptext20 084F                        __ptext12 09D8                        __ptext21 0926  
                      __ptext13 0B79                        __ptext30 0A92                        __ptext22 06C8  
                      __ptext14 097E                        __ptext23 0E26                        __ptext15 0952  
                      __ptext24 0B1E                        __ptext16 0C9F                        __ptext25 0D8D  
                      __ptext17 0837                        __ptext26 08FC                        __ptext18 0830  
                      __ptext27 0A50                        __ptext19 0829                        __ptext28 0A0E  
                      __ptext29 08AD               __CFG_BOR4V$BOR21V 0000                   ?_EEPROM_Write 0022  
                 __size_of_FMRX 002C                   __size_of_FMTX 002C                   __size_of_CWTX 002C  
                 __size_of__NOP 0019                   ??_NM_waddress 0023                       waitFlag@i 002A  
                     waitFlag@j 002C                   __size_of_main 01F4                  STBOUT@fmcwtxrx 0022  
                      _waitFlag 0048        NM_waddress@NM_wad_header 0023                   OUTFQ@fmcwtxrx 0029  
      __end_of_I2C_Master_Start 0830                       putch@byte 0020        __end_of_I2C_Master_Write 083F  
                    _INTCONbits 000B                        init_ram0 085C                    fcscheck@byte 0029  
                ??_EEPROM_Write 0025              waitFlag@flag_judge 0044                        intlevel1 0000  
              ___lldiv@dividend 0024                       stringcode 0800                   main@FMRX_Nprg 00E2  
             main@NM_wad_header 00ED                   main@FMTX_Nprg 00CE             __end_of_NM_waddress 0895  
                 main@CWTX_Nprg 00D8         __end_of_I2C_Master_Wait 0858         __end_of_I2C_Master_Stop 0837  
              ___lldiv@quotient 0029               I2C_Master_Write@d 0020             EEPROM_Write@Address 0029  
                      stringdir 0800                        stringtab 0800             ReceivePacket_data@i 004B  
       NM_waddress@wlow_address 0022            main@TXOBC_wad_header 00EC  
