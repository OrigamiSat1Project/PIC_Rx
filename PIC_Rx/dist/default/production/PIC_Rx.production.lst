

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Feb 24 14:23:07 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16F887 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  0008                     	;# 
    95  0009                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  000D                     	;# 
   100  000E                     	;# 
   101  000E                     	;# 
   102  000F                     	;# 
   103  0010                     	;# 
   104  0011                     	;# 
   105  0012                     	;# 
   106  0013                     	;# 
   107  0014                     	;# 
   108  0015                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0017                     	;# 
   112  0018                     	;# 
   113  0019                     	;# 
   114  001A                     	;# 
   115  001B                     	;# 
   116  001B                     	;# 
   117  001C                     	;# 
   118  001D                     	;# 
   119  001E                     	;# 
   120  001F                     	;# 
   121  0081                     	;# 
   122  0085                     	;# 
   123  0086                     	;# 
   124  0087                     	;# 
   125  0088                     	;# 
   126  0089                     	;# 
   127  008C                     	;# 
   128  008D                     	;# 
   129  008E                     	;# 
   130  008F                     	;# 
   131  0090                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0093                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0095                     	;# 
   139  0096                     	;# 
   140  0097                     	;# 
   141  0098                     	;# 
   142  0099                     	;# 
   143  009A                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  009F                     	;# 
   149  0105                     	;# 
   150  0107                     	;# 
   151  0108                     	;# 
   152  0109                     	;# 
   153  010C                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  0185                     	;# 
   159  0187                     	;# 
   160  0188                     	;# 
   161  0189                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  000E                     	;# 
   180  000F                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0013                     	;# 
   185  0014                     	;# 
   186  0015                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  0081                     	;# 
   200  0085                     	;# 
   201  0086                     	;# 
   202  0087                     	;# 
   203  0088                     	;# 
   204  0089                     	;# 
   205  008C                     	;# 
   206  008D                     	;# 
   207  008E                     	;# 
   208  008F                     	;# 
   209  0090                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0093                     	;# 
   213  0093                     	;# 
   214  0093                     	;# 
   215  0094                     	;# 
   216  0095                     	;# 
   217  0096                     	;# 
   218  0097                     	;# 
   219  0098                     	;# 
   220  0099                     	;# 
   221  009A                     	;# 
   222  009B                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  009F                     	;# 
   227  0105                     	;# 
   228  0107                     	;# 
   229  0108                     	;# 
   230  0109                     	;# 
   231  010C                     	;# 
   232  010C                     	;# 
   233  010D                     	;# 
   234  010E                     	;# 
   235  010F                     	;# 
   236  0185                     	;# 
   237  0187                     	;# 
   238  0188                     	;# 
   239  0189                     	;# 
   240  018C                     	;# 
   241  018D                     	;# 
   242  0000                     	;# 
   243  0001                     	;# 
   244  0002                     	;# 
   245  0003                     	;# 
   246  0004                     	;# 
   247  0005                     	;# 
   248  0006                     	;# 
   249  0007                     	;# 
   250  0008                     	;# 
   251  0009                     	;# 
   252  000A                     	;# 
   253  000B                     	;# 
   254  000C                     	;# 
   255  000D                     	;# 
   256  000E                     	;# 
   257  000E                     	;# 
   258  000F                     	;# 
   259  0010                     	;# 
   260  0011                     	;# 
   261  0012                     	;# 
   262  0013                     	;# 
   263  0014                     	;# 
   264  0015                     	;# 
   265  0015                     	;# 
   266  0016                     	;# 
   267  0017                     	;# 
   268  0018                     	;# 
   269  0019                     	;# 
   270  001A                     	;# 
   271  001B                     	;# 
   272  001B                     	;# 
   273  001C                     	;# 
   274  001D                     	;# 
   275  001E                     	;# 
   276  001F                     	;# 
   277  0081                     	;# 
   278  0085                     	;# 
   279  0086                     	;# 
   280  0087                     	;# 
   281  0088                     	;# 
   282  0089                     	;# 
   283  008C                     	;# 
   284  008D                     	;# 
   285  008E                     	;# 
   286  008F                     	;# 
   287  0090                     	;# 
   288  0091                     	;# 
   289  0092                     	;# 
   290  0093                     	;# 
   291  0093                     	;# 
   292  0093                     	;# 
   293  0094                     	;# 
   294  0095                     	;# 
   295  0096                     	;# 
   296  0097                     	;# 
   297  0098                     	;# 
   298  0099                     	;# 
   299  009A                     	;# 
   300  009B                     	;# 
   301  009C                     	;# 
   302  009D                     	;# 
   303  009E                     	;# 
   304  009F                     	;# 
   305  0105                     	;# 
   306  0107                     	;# 
   307  0108                     	;# 
   308  0109                     	;# 
   309  010C                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  010F                     	;# 
   314  0185                     	;# 
   315  0187                     	;# 
   316  0188                     	;# 
   317  0189                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320  0000                     	;# 
   321  0001                     	;# 
   322  0002                     	;# 
   323  0003                     	;# 
   324  0004                     	;# 
   325  0005                     	;# 
   326  0006                     	;# 
   327  0007                     	;# 
   328  0008                     	;# 
   329  0009                     	;# 
   330  000A                     	;# 
   331  000B                     	;# 
   332  000C                     	;# 
   333  000D                     	;# 
   334  000E                     	;# 
   335  000E                     	;# 
   336  000F                     	;# 
   337  0010                     	;# 
   338  0011                     	;# 
   339  0012                     	;# 
   340  0013                     	;# 
   341  0014                     	;# 
   342  0015                     	;# 
   343  0015                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001B                     	;# 
   351  001C                     	;# 
   352  001D                     	;# 
   353  001E                     	;# 
   354  001F                     	;# 
   355  0081                     	;# 
   356  0085                     	;# 
   357  0086                     	;# 
   358  0087                     	;# 
   359  0088                     	;# 
   360  0089                     	;# 
   361  008C                     	;# 
   362  008D                     	;# 
   363  008E                     	;# 
   364  008F                     	;# 
   365  0090                     	;# 
   366  0091                     	;# 
   367  0092                     	;# 
   368  0093                     	;# 
   369  0093                     	;# 
   370  0093                     	;# 
   371  0094                     	;# 
   372  0095                     	;# 
   373  0096                     	;# 
   374  0097                     	;# 
   375  0098                     	;# 
   376  0099                     	;# 
   377  009A                     	;# 
   378  009B                     	;# 
   379  009C                     	;# 
   380  009D                     	;# 
   381  009E                     	;# 
   382  009F                     	;# 
   383  0105                     	;# 
   384  0107                     	;# 
   385  0108                     	;# 
   386  0109                     	;# 
   387  010C                     	;# 
   388  010C                     	;# 
   389  010D                     	;# 
   390  010E                     	;# 
   391  010F                     	;# 
   392  0185                     	;# 
   393  0187                     	;# 
   394  0188                     	;# 
   395  0189                     	;# 
   396  018C                     	;# 
   397  018D                     	;# 
   398  0000                     	;# 
   399  0001                     	;# 
   400  0002                     	;# 
   401  0003                     	;# 
   402  0004                     	;# 
   403  0005                     	;# 
   404  0006                     	;# 
   405  0007                     	;# 
   406  0008                     	;# 
   407  0009                     	;# 
   408  000A                     	;# 
   409  000B                     	;# 
   410  000C                     	;# 
   411  000D                     	;# 
   412  000E                     	;# 
   413  000E                     	;# 
   414  000F                     	;# 
   415  0010                     	;# 
   416  0011                     	;# 
   417  0012                     	;# 
   418  0013                     	;# 
   419  0014                     	;# 
   420  0015                     	;# 
   421  0015                     	;# 
   422  0016                     	;# 
   423  0017                     	;# 
   424  0018                     	;# 
   425  0019                     	;# 
   426  001A                     	;# 
   427  001B                     	;# 
   428  001B                     	;# 
   429  001C                     	;# 
   430  001D                     	;# 
   431  001E                     	;# 
   432  001F                     	;# 
   433  0081                     	;# 
   434  0085                     	;# 
   435  0086                     	;# 
   436  0087                     	;# 
   437  0088                     	;# 
   438  0089                     	;# 
   439  008C                     	;# 
   440  008D                     	;# 
   441  008E                     	;# 
   442  008F                     	;# 
   443  0090                     	;# 
   444  0091                     	;# 
   445  0092                     	;# 
   446  0093                     	;# 
   447  0093                     	;# 
   448  0093                     	;# 
   449  0094                     	;# 
   450  0095                     	;# 
   451  0096                     	;# 
   452  0097                     	;# 
   453  0098                     	;# 
   454  0099                     	;# 
   455  009A                     	;# 
   456  009B                     	;# 
   457  009C                     	;# 
   458  009D                     	;# 
   459  009E                     	;# 
   460  009F                     	;# 
   461  0105                     	;# 
   462  0107                     	;# 
   463  0108                     	;# 
   464  0109                     	;# 
   465  010C                     	;# 
   466  010C                     	;# 
   467  010D                     	;# 
   468  010E                     	;# 
   469  010F                     	;# 
   470  0185                     	;# 
   471  0187                     	;# 
   472  0188                     	;# 
   473  0189                     	;# 
   474  018C                     	;# 
   475  018D                     	;# 
   476  0000                     	;# 
   477  0001                     	;# 
   478  0002                     	;# 
   479  0003                     	;# 
   480  0004                     	;# 
   481  0005                     	;# 
   482  0006                     	;# 
   483  0007                     	;# 
   484  0008                     	;# 
   485  0009                     	;# 
   486  000A                     	;# 
   487  000B                     	;# 
   488  000C                     	;# 
   489  000D                     	;# 
   490  000E                     	;# 
   491  000E                     	;# 
   492  000F                     	;# 
   493  0010                     	;# 
   494  0011                     	;# 
   495  0012                     	;# 
   496  0013                     	;# 
   497  0014                     	;# 
   498  0015                     	;# 
   499  0015                     	;# 
   500  0016                     	;# 
   501  0017                     	;# 
   502  0018                     	;# 
   503  0019                     	;# 
   504  001A                     	;# 
   505  001B                     	;# 
   506  001B                     	;# 
   507  001C                     	;# 
   508  001D                     	;# 
   509  001E                     	;# 
   510  001F                     	;# 
   511  0081                     	;# 
   512  0085                     	;# 
   513  0086                     	;# 
   514  0087                     	;# 
   515  0088                     	;# 
   516  0089                     	;# 
   517  008C                     	;# 
   518  008D                     	;# 
   519  008E                     	;# 
   520  008F                     	;# 
   521  0090                     	;# 
   522  0091                     	;# 
   523  0092                     	;# 
   524  0093                     	;# 
   525  0093                     	;# 
   526  0093                     	;# 
   527  0094                     	;# 
   528  0095                     	;# 
   529  0096                     	;# 
   530  0097                     	;# 
   531  0098                     	;# 
   532  0099                     	;# 
   533  009A                     	;# 
   534  009B                     	;# 
   535  009C                     	;# 
   536  009D                     	;# 
   537  009E                     	;# 
   538  009F                     	;# 
   539  0105                     	;# 
   540  0107                     	;# 
   541  0108                     	;# 
   542  0109                     	;# 
   543  010C                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  010F                     	;# 
   548  0185                     	;# 
   549  0187                     	;# 
   550  0188                     	;# 
   551  0189                     	;# 
   552  018C                     	;# 
   553  018D                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000D                     	;# 
   568  000E                     	;# 
   569  000E                     	;# 
   570  000F                     	;# 
   571  0010                     	;# 
   572  0011                     	;# 
   573  0012                     	;# 
   574  0013                     	;# 
   575  0014                     	;# 
   576  0015                     	;# 
   577  0015                     	;# 
   578  0016                     	;# 
   579  0017                     	;# 
   580  0018                     	;# 
   581  0019                     	;# 
   582  001A                     	;# 
   583  001B                     	;# 
   584  001B                     	;# 
   585  001C                     	;# 
   586  001D                     	;# 
   587  001E                     	;# 
   588  001F                     	;# 
   589  0081                     	;# 
   590  0085                     	;# 
   591  0086                     	;# 
   592  0087                     	;# 
   593  0088                     	;# 
   594  0089                     	;# 
   595  008C                     	;# 
   596  008D                     	;# 
   597  008E                     	;# 
   598  008F                     	;# 
   599  0090                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0093                     	;# 
   603  0093                     	;# 
   604  0093                     	;# 
   605  0094                     	;# 
   606  0095                     	;# 
   607  0096                     	;# 
   608  0097                     	;# 
   609  0098                     	;# 
   610  0099                     	;# 
   611  009A                     	;# 
   612  009B                     	;# 
   613  009C                     	;# 
   614  009D                     	;# 
   615  009E                     	;# 
   616  009F                     	;# 
   617  0105                     	;# 
   618  0107                     	;# 
   619  0108                     	;# 
   620  0109                     	;# 
   621  010C                     	;# 
   622  010C                     	;# 
   623  010D                     	;# 
   624  010E                     	;# 
   625  010F                     	;# 
   626  0185                     	;# 
   627  0187                     	;# 
   628  0188                     	;# 
   629  0189                     	;# 
   630  018C                     	;# 
   631  018D                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0008                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  000E                     	;# 
   648  000F                     	;# 
   649  0010                     	;# 
   650  0011                     	;# 
   651  0012                     	;# 
   652  0013                     	;# 
   653  0014                     	;# 
   654  0015                     	;# 
   655  0015                     	;# 
   656  0016                     	;# 
   657  0017                     	;# 
   658  0018                     	;# 
   659  0019                     	;# 
   660  001A                     	;# 
   661  001B                     	;# 
   662  001B                     	;# 
   663  001C                     	;# 
   664  001D                     	;# 
   665  001E                     	;# 
   666  001F                     	;# 
   667  0081                     	;# 
   668  0085                     	;# 
   669  0086                     	;# 
   670  0087                     	;# 
   671  0088                     	;# 
   672  0089                     	;# 
   673  008C                     	;# 
   674  008D                     	;# 
   675  008E                     	;# 
   676  008F                     	;# 
   677  0090                     	;# 
   678  0091                     	;# 
   679  0092                     	;# 
   680  0093                     	;# 
   681  0093                     	;# 
   682  0093                     	;# 
   683  0094                     	;# 
   684  0095                     	;# 
   685  0096                     	;# 
   686  0097                     	;# 
   687  0098                     	;# 
   688  0099                     	;# 
   689  009A                     	;# 
   690  009B                     	;# 
   691  009C                     	;# 
   692  009D                     	;# 
   693  009E                     	;# 
   694  009F                     	;# 
   695  0105                     	;# 
   696  0107                     	;# 
   697  0108                     	;# 
   698  0109                     	;# 
   699  010C                     	;# 
   700  010C                     	;# 
   701  010D                     	;# 
   702  010E                     	;# 
   703  010F                     	;# 
   704  0185                     	;# 
   705  0187                     	;# 
   706  0188                     	;# 
   707  0189                     	;# 
   708  018C                     	;# 
   709  018D                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0008                     	;# 
   719  0009                     	;# 
   720  000A                     	;# 
   721  000B                     	;# 
   722  000C                     	;# 
   723  000D                     	;# 
   724  000E                     	;# 
   725  000E                     	;# 
   726  000F                     	;# 
   727  0010                     	;# 
   728  0011                     	;# 
   729  0012                     	;# 
   730  0013                     	;# 
   731  0014                     	;# 
   732  0015                     	;# 
   733  0015                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001B                     	;# 
   741  001C                     	;# 
   742  001D                     	;# 
   743  001E                     	;# 
   744  001F                     	;# 
   745  0081                     	;# 
   746  0085                     	;# 
   747  0086                     	;# 
   748  0087                     	;# 
   749  0088                     	;# 
   750  0089                     	;# 
   751  008C                     	;# 
   752  008D                     	;# 
   753  008E                     	;# 
   754  008F                     	;# 
   755  0090                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0093                     	;# 
   760  0093                     	;# 
   761  0094                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0097                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  009F                     	;# 
   773  0105                     	;# 
   774  0107                     	;# 
   775  0108                     	;# 
   776  0109                     	;# 
   777  010C                     	;# 
   778  010C                     	;# 
   779  010D                     	;# 
   780  010E                     	;# 
   781  010F                     	;# 
   782  0185                     	;# 
   783  0187                     	;# 
   784  0188                     	;# 
   785  0189                     	;# 
   786  018C                     	;# 
   787  018D                     	;# 
   788  0000                     	;# 
   789  0001                     	;# 
   790  0002                     	;# 
   791  0003                     	;# 
   792  0004                     	;# 
   793  0005                     	;# 
   794  0006                     	;# 
   795  0007                     	;# 
   796  0008                     	;# 
   797  0009                     	;# 
   798  000A                     	;# 
   799  000B                     	;# 
   800  000C                     	;# 
   801  000D                     	;# 
   802  000E                     	;# 
   803  000E                     	;# 
   804  000F                     	;# 
   805  0010                     	;# 
   806  0011                     	;# 
   807  0012                     	;# 
   808  0013                     	;# 
   809  0014                     	;# 
   810  0015                     	;# 
   811  0015                     	;# 
   812  0016                     	;# 
   813  0017                     	;# 
   814  0018                     	;# 
   815  0019                     	;# 
   816  001A                     	;# 
   817  001B                     	;# 
   818  001B                     	;# 
   819  001C                     	;# 
   820  001D                     	;# 
   821  001E                     	;# 
   822  001F                     	;# 
   823  0081                     	;# 
   824  0085                     	;# 
   825  0086                     	;# 
   826  0087                     	;# 
   827  0088                     	;# 
   828  0089                     	;# 
   829  008C                     	;# 
   830  008D                     	;# 
   831  008E                     	;# 
   832  008F                     	;# 
   833  0090                     	;# 
   834  0091                     	;# 
   835  0092                     	;# 
   836  0093                     	;# 
   837  0093                     	;# 
   838  0093                     	;# 
   839  0094                     	;# 
   840  0095                     	;# 
   841  0096                     	;# 
   842  0097                     	;# 
   843  0098                     	;# 
   844  0099                     	;# 
   845  009A                     	;# 
   846  009B                     	;# 
   847  009C                     	;# 
   848  009D                     	;# 
   849  009E                     	;# 
   850  009F                     	;# 
   851  0105                     	;# 
   852  0107                     	;# 
   853  0108                     	;# 
   854  0109                     	;# 
   855  010C                     	;# 
   856  010C                     	;# 
   857  010D                     	;# 
   858  010E                     	;# 
   859  010F                     	;# 
   860  0185                     	;# 
   861  0187                     	;# 
   862  0188                     	;# 
   863  0189                     	;# 
   864  018C                     	;# 
   865  018D                     	;# 
   866                           
   867                           	psect	idataBANK1
   868  0999                     __pidataBANK1:	
   869                           
   870                           ;initializer for _FMRX_Nref
   871  0999  3400               	retlw	0
   872  099A  340A               	retlw	10
   873                           
   874                           ;initializer for _CWTX_Nref
   875  099B  34A0               	retlw	160
   876  099C  3400               	retlw	0
   877                           
   878                           ;initializer for _FMTX_Nref
   879  099D  3400               	retlw	0
   880  099E  340A               	retlw	10
   881                           
   882                           ;initializer for _FMRX_Nprg
   883  099F  3402               	retlw	2
   884  09A0  3400               	retlw	0
   885  09A1  3404               	retlw	4
   886  09A2  3400               	retlw	0
   887  09A3  3408               	retlw	8
   888  09A4  3400               	retlw	0
   889  09A5  3408               	retlw	8
   890  09A6  3400               	retlw	0
   891  09A7  3407               	retlw	7
   892  09A8  3400               	retlw	0
   893                           
   894                           ;initializer for _CWTX_Nprg
   895  09A9  3400               	retlw	0
   896  09AA  3400               	retlw	0
   897  09AB  3401               	retlw	1
   898  09AC  3400               	retlw	0
   899  09AD  3407               	retlw	7
   900  09AE  3400               	retlw	0
   901  09AF  3404               	retlw	4
   902  09B0  3400               	retlw	0
   903  09B1  3407               	retlw	7
   904  09B2  3400               	retlw	0
   905                           
   906                           ;initializer for _FMTX_Nprg
   907  09B3  3408               	retlw	8
   908  09B4  3400               	retlw	0
   909  09B5  3407               	retlw	7
   910  09B6  3400               	retlw	0
   911  09B7  3403               	retlw	3
   912  09B8  3400               	retlw	0
   913  09B9  3400               	retlw	0
   914  09BA  3400               	retlw	0
   915  09BB  3400               	retlw	0
   916  09BC  3400               	retlw	0
   917                           
   918                           	psect	idataBANK2
   919  0922                     __pidataBANK2:	
   920                           
   921                           ;initializer for _eDataField
   922  0922  3448               	retlw	72
   923  0923  3465               	retlw	101
   924  0924  346C               	retlw	108
   925  0925  346C               	retlw	108
   926  0926  346F               	retlw	111
   927  0927  3421               	retlw	33
   928  0928  3420               	retlw	32
   929  0929  3449               	retlw	73
   930  092A  3427               	retlw	39
   931  092B  346D               	retlw	109
   932  092C  3420               	retlw	32
   933  092D  344F               	retlw	79
   934  092E  3472               	retlw	114
   935  092F  3469               	retlw	105
   936  0930  3467               	retlw	103
   937  0931  3461               	retlw	97
   938  0932  346D               	retlw	109
   939  0933  3469               	retlw	105
   940  0934  3453               	retlw	83
   941  0935  3461               	retlw	97
   942  0936  3474               	retlw	116
   943  0937  3431               	retlw	49
   944  0938  3421               	retlw	33
   945  0939  3421               	retlw	33
   946  093A  3400               	retlw	0
   947                           
   948                           	psect	idataBANK3
   949  0958                     __pidataBANK3:	
   950                           
   951                           ;initializer for main@F1993
   952  0958  3402               	retlw	2
   953  0959  3400               	retlw	0
   954  095A  3404               	retlw	4
   955  095B  3400               	retlw	0
   956  095C  3408               	retlw	8
   957  095D  3400               	retlw	0
   958  095E  3408               	retlw	8
   959  095F  3400               	retlw	0
   960  0960  3407               	retlw	7
   961  0961  3400               	retlw	0
   962                           
   963                           ;initializer for main@F1991
   964  0962  3400               	retlw	0
   965  0963  3400               	retlw	0
   966  0964  3401               	retlw	1
   967  0965  3400               	retlw	0
   968  0966  3407               	retlw	7
   969  0967  3400               	retlw	0
   970  0968  3404               	retlw	4
   971  0969  3400               	retlw	0
   972  096A  3407               	retlw	7
   973  096B  3400               	retlw	0
   974                           
   975                           ;initializer for main@F1989
   976  096C  3408               	retlw	8
   977  096D  3400               	retlw	0
   978  096E  3407               	retlw	7
   979  096F  3400               	retlw	0
   980  0970  3403               	retlw	3
   981  0971  3400               	retlw	0
   982  0972  3400               	retlw	0
   983  0973  3400               	retlw	0
   984  0974  3400               	retlw	0
   985  0975  3400               	retlw	0
   986                           
   987                           	psect	strings
   988  0800                     __pstrings:	
   989  0800                     stringtab:	
   990  0800                     __stringtab:	
   991  0800                     stringcode:	
   992                           ;	String table - string pointers are 1 byte each
   993                           
   994  0800                     stringdir:	
   995  0800  3008               	movlw	high stringdir
   996  0801  008A               	movwf	10
   997  0802  0804               	movf	4,w
   998  0803  0A84               	incf	4,f
   999  0804  0782               	addwf	2,f
  1000  0805                     __stringbase:	
  1001  0805  3400               	retlw	0
  1002  0806                     __end_of__stringtab:	
  1003  0806                     _commandSize:	
  1004  0806  3420               	retlw	32
  1005  0807  3400               	retlw	0
  1006  0808                     __end_of_commandSize:	
  1007  000E                     _TMR1	set	14
  1008  0010                     _T1CONbits	set	16
  1009  000C                     _PIR1bits	set	12
  1010  000B                     _INTCONbits	set	11
  1011  0005                     _PORTAbits	set	5
  1012  0008                     _PORTDbits	set	8
  1013  0009                     _PORTEbits	set	9
  1014  0013                     _SSPBUF	set	19
  1015  0014                     _SSPCON	set	20
  1016  0003                     _STATUS	set	3
  1017  0009                     _PORTE	set	9
  1018  0008                     _PORTD	set	8
  1019  0007                     _PORTC	set	7
  1020  0006                     _PORTB	set	6
  1021  0005                     _PORTA	set	5
  1022  0019                     _TXREG	set	25
  1023  001A                     _RCREG	set	26
  1024  0029                     _RA1	set	41
  1025  0034                     _RB4	set	52
  1026  0032                     _RB2	set	50
  1027  003A                     _RC2	set	58
  1028  0035                     _RB5	set	53
  1029  003D                     _RC5	set	61
  1030  0064                     _TXIF	set	100
  1031  00C1                     _OERR	set	193
  1032  00C2                     _FERR	set	194
  1033  00C6                     _RX9	set	198
  1034  0065                     _RCIF	set	101
  1035  00C5                     _SREN	set	197
  1036  00C4                     _CREN	set	196
  1037  00C7                     _SPEN	set	199
  1038  008C                     _PIE1bits	set	140
  1039  0094                     _SSPSTAT	set	148
  1040  0093                     _SSPADD	set	147
  1041  0091                     _SSPCON2	set	145
  1042  0089                     _TRISE	set	137
  1043  0088                     _TRISD	set	136
  1044  0087                     _TRISC	set	135
  1045  0086                     _TRISB	set	134
  1046  0085                     _TRISA	set	133
  1047  0099                     _SPBRG	set	153
  1048  048C                     _ACKEN	set	1164
  1049  048D                     _ACKDT	set	1165
  1050  048B                     _RCEN	set	1163
  1051  048A                     _PEN	set	1162
  1052  0489                     _RSEN	set	1161
  1053  0488                     _SEN	set	1160
  1054  04C5                     _TXEN	set	1221
  1055  04C6                     _TX9	set	1222
  1056  0465                     _RCIE	set	1125
  1057  0464                     _TXIE	set	1124
  1058  04C4                     _SYNC	set	1220
  1059  04C2                     _BRGH	set	1218
  1060  0189                     _ANSELH	set	393
  1061  0188                     _ANSEL	set	392
  1062  0808                     STR_7:	
  1063  0808  344A               	retlw	74	;'J'
  1064  0809  3451               	retlw	81	;'Q'
  1065  080A  3431               	retlw	49	;'1'
  1066  080B  345A               	retlw	90	;'Z'
  1067  080C  3448               	retlw	72	;'H'
  1068  080D  3458               	retlw	88	;'X'
  1069  080E  3400               	retlw	0
  1070  080F                     STR_1:	
  1071  080F  344A               	retlw	74	;'J'
  1072  0810  3451               	retlw	81	;'Q'
  1073  0811  3431               	retlw	49	;'1'
  1074  0812  3459               	retlw	89	;'Y'
  1075  0813  3443               	retlw	67	;'C'
  1076  0814  345A               	retlw	90	;'Z'
  1077  0815  3400               	retlw	0
  1078  0808                     
  1079                           ; #config settings
  1080  0000                     
  1081                           	psect	cinit
  1082  07BC                     start_initialization:	
  1083  07BC                     __initialization:	
  1084                           
  1085                           ; Initialize objects allocated to BANK3
  1086  07BC  1783               	bsf	3,7	;select IRP bank2
  1087  07BD  30F0               	movlw	low (__pdataBANK3+30)
  1088  07BE  00FD               	movwf	btemp+-1
  1089  07BF  3009               	movlw	high __pidataBANK3
  1090  07C0  00FE               	movwf	btemp
  1091  07C1  3058               	movlw	low __pidataBANK3
  1092  07C2  00FF               	movwf	btemp+1
  1093  07C3  30D2               	movlw	low __pdataBANK3
  1094  07C4  0084               	movwf	4
  1095  07C5  120A  158A  20D5  120A  118A  	fcall	init_ram0
  1096                           
  1097                           ; Initialize objects allocated to BANK2
  1098  07CA  3029               	movlw	low (__pdataBANK2+25)
  1099  07CB  00FD               	movwf	btemp+-1
  1100  07CC  3009               	movlw	high __pidataBANK2
  1101  07CD  00FE               	movwf	btemp
  1102  07CE  3022               	movlw	low __pidataBANK2
  1103  07CF  00FF               	movwf	btemp+1
  1104  07D0  3010               	movlw	low __pdataBANK2
  1105  07D1  0084               	movwf	4
  1106  07D2  120A  158A  20D5  120A  118A  	fcall	init_ram0
  1107                           
  1108                           ; Initialize objects allocated to BANK1
  1109  07D7  1383               	bcf	3,7	;select IRP bank0
  1110  07D8  30C4               	movlw	low (__pdataBANK1+36)
  1111  07D9  00FD               	movwf	btemp+-1
  1112  07DA  3009               	movlw	high __pidataBANK1
  1113  07DB  00FE               	movwf	btemp
  1114  07DC  3099               	movlw	low __pidataBANK1
  1115  07DD  00FF               	movwf	btemp+1
  1116  07DE  30A0               	movlw	low __pdataBANK1
  1117  07DF  0084               	movwf	4
  1118  07E0  120A  158A  20D5  120A  118A  	fcall	init_ram0
  1119                           
  1120                           ; Clear objects allocated to BANK3
  1121  07E5  1783               	bsf	3,7	;select IRP bank2
  1122  07E6  3090               	movlw	low __pbssBANK3
  1123  07E7  0084               	movwf	4
  1124  07E8  30D2               	movlw	low (__pbssBANK3+66)
  1125  07E9  120A  158A  20C0  120A  118A  	fcall	clear_ram0
  1126                           
  1127                           ; Clear objects allocated to BANK1
  1128  07EE  1683               	bsf	3,5	;RP0=1, select bank1
  1129  07EF  1303               	bcf	3,6	;RP1=0, select bank1
  1130  07F0  01E5               	clrf	__pbssBANK1& (0+127)
  1131  07F1  01E6               	clrf	(__pbssBANK1+1)& (0+127)
  1132  07F2  01E7               	clrf	(__pbssBANK1+2)& (0+127)
  1133  07F3  01E8               	clrf	(__pbssBANK1+3)& (0+127)
  1134  07F4  01E9               	clrf	(__pbssBANK1+4)& (0+127)
  1135                           
  1136                           ; Clear objects allocated to BANK0
  1137  07F5  1383               	bcf	3,7	;select IRP bank0
  1138  07F6  305D               	movlw	low __pbssBANK0
  1139  07F7  0084               	movwf	4
  1140  07F8  306F               	movlw	low (__pbssBANK0+18)
  1141  07F9  120A  158A  20C0   	fcall	clear_ram0
  1142  07FC                     end_of_initialization:	
  1143                           ;End of C runtime variable initialization code
  1144                           
  1145  07FC                     __end_of__initialization:	
  1146  07FC  0183               	clrf	3
  1147  07FD  120A  118A  2941   	ljmp	_main	;jump to C main() function
  1148                           
  1149                           	psect	bssBANK0
  1150  005D                     __pbssBANK0:	
  1151  005D                     _ebitstatus:	
  1152  005D                     	ds	2
  1153  005F                     _estuff:	
  1154  005F                     	ds	2
  1155  0061                     _efcsflag:	
  1156  0061                     	ds	2
  1157  0063                     _eflag:	
  1158  0063                     	ds	2
  1159  0065                     getbit@oldbit:	
  1160  0065                     	ds	2
  1161  0067                     _dPacketnum:	
  1162  0067                     	ds	2
  1163  0069                     _rcv_state:	
  1164  0069                     	ds	2
  1165  006B                     _efcshi:	
  1166  006B                     	ds	1
  1167  006C                     _efcslo:	
  1168  006C                     	ds	1
  1169  006D                     _dfcslo:	
  1170  006D                     	ds	1
  1171  006E                     _dfcshi:	
  1172  006E                     	ds	1
  1173                           
  1174                           	psect	bssBANK1
  1175  00E5                     __pbssBANK1:	
  1176  00E5                     _ePacket:	
  1177  00E5                     	ds	5
  1178                           
  1179                           	psect	dataBANK1
  1180  00A0                     __pdataBANK1:	
  1181  00A0                     _FMRX_Nref:	
  1182  00A0                     	ds	2
  1183  00A2                     _CWTX_Nref:	
  1184  00A2                     	ds	2
  1185  00A4                     _FMTX_Nref:	
  1186  00A4                     	ds	2
  1187  00A6                     _FMRX_Nprg:	
  1188  00A6                     	ds	10
  1189  00B0                     _CWTX_Nprg:	
  1190  00B0                     	ds	10
  1191  00BA                     _FMTX_Nprg:	
  1192  00BA                     	ds	10
  1193                           
  1194                           	psect	bssBANK3
  1195  0190                     __pbssBANK3:	
  1196  0190                     _dPacket:	
  1197  0190                     	ds	50
  1198  01C2                     _dData:	
  1199  01C2                     	ds	16
  1200                           
  1201                           	psect	dataBANK3
  1202  01D2                     __pdataBANK3:	
  1203  01D2                     main@F1993:	
  1204  01D2                     	ds	10
  1205  01DC                     main@F1991:	
  1206  01DC                     	ds	10
  1207  01E6                     main@F1989:	
  1208  01E6                     	ds	10
  1209                           
  1210                           	psect	dataBANK2
  1211  0110                     __pdataBANK2:	
  1212  0110                     _eDataField:	
  1213  0110                     	ds	25
  1214                           
  1215                           	psect	inittext
  1216  08D1                     init_fetch0:	
  1217                           ;	Called with low address in FSR and high address in W
  1218                           
  1219  08D1  087E               	movf	126,w
  1220  08D2  008A               	movwf	10
  1221  08D3  087F               	movf	127,w
  1222  08D4  0082               	movwf	2
  1223  08D5                     init_ram0:	
  1224                           ;Called with:
  1225                           ;	high address of idata address in btemp 
  1226                           ;	low address of idata address in btemp+1 
  1227                           ;	low address of data in FSR
  1228                           ;	high address + 1 of data in btemp-1
  1229                           
  1230  08D5  20D1  120A  158A   	fcall	init_fetch0
  1231  08D8  0080               	movwf	0
  1232  08D9  0A84               	incf	4,f
  1233  08DA  0804               	movf	4,w
  1234  08DB  067D               	xorwf	125,w
  1235  08DC  1903               	btfsc	3,2
  1236  08DD  3400               	retlw	0
  1237  08DE  0AFF               	incf	127,f
  1238  08DF  1903               	btfsc	3,2
  1239  08E0  0AFE               	incf	126,f
  1240  08E1  28D5               	goto	init_ram0
  1241                           
  1242                           	psect	clrtext
  1243  08C0                     clear_ram0:	
  1244                           ;	Called with FSR containing the base address, and
  1245                           ;	W with the last address+1
  1246                           
  1247  08C0  0064               	clrwdt	;clear the watchdog before getting into this loop
  1248  08C1                     clrloop0:	
  1249  08C1  0180               	clrf	0	;clear RAM location pointed to by FSR
  1250  08C2  0A84               	incf	4,f	;increment pointer
  1251  08C3  0604               	xorwf	4,w	;XOR with final address
  1252  08C4  1903               	btfsc	3,2	;have we reached the end yet?
  1253  08C5  3400               	retlw	0	;all done for this memory range, return
  1254  08C6  0604               	xorwf	4,w	;XOR again to restore value
  1255  08C7  28C1               	goto	clrloop0	;do the next byte
  1256                           
  1257                           	psect	cstackBANK1
  1258  00C4                     __pcstackBANK1:	
  1259  00C4                     main@FMTX_Nprg:	
  1260                           
  1261                           ; 10 bytes @ 0x0
  1262  00C4                     	ds	10
  1263  00CE                     main@CWTX_Nprg:	
  1264                           
  1265                           ; 10 bytes @ 0xA
  1266  00CE                     	ds	10
  1267  00D8                     main@FMRX_Nprg:	
  1268                           
  1269                           ; 10 bytes @ 0x14
  1270  00D8                     	ds	10
  1271  00E2                     main@TXOBC_wad_header:	
  1272                           
  1273                           ; 1 bytes @ 0x1E
  1274  00E2                     	ds	1
  1275  00E3                     main@NM_wad_header:	
  1276                           
  1277                           ; 1 bytes @ 0x1F
  1278  00E3                     	ds	1
  1279  00E4                     main@dData:	
  1280                           
  1281                           ; 1 bytes @ 0x20
  1282  00E4                     	ds	1
  1283                           
  1284                           	psect	cstackCOMMON
  1285  0070                     __pcstackCOMMON:	
  1286  0070                     ?_ReceivePacket_data:	
  1287  0070                     ?_Reset_EPS:	
  1288                           ; 1 bytes @ 0x0
  1289                           
  1290  0070                     ??_Reset_EPS:	
  1291                           ; 1 bytes @ 0x0
  1292                           
  1293  0070                     ?__NOP:	
  1294                           ; 1 bytes @ 0x0
  1295                           
  1296  0070                     ??__NOP:	
  1297                           ; 1 bytes @ 0x0
  1298                           
  1299  0070                     ?_Init_SERIAL:	
  1300                           ; 1 bytes @ 0x0
  1301                           
  1302  0070                     ??_Init_SERIAL:	
  1303                           ; 1 bytes @ 0x0
  1304                           
  1305  0070                     ?_putch:	
  1306                           ; 1 bytes @ 0x0
  1307                           
  1308  0070                     ??_putch:	
  1309                           ; 1 bytes @ 0x0
  1310                           
  1311  0070                     ?_Init_MPU:	
  1312                           ; 1 bytes @ 0x0
  1313                           
  1314  0070                     ??_Init_MPU:	
  1315                           ; 1 bytes @ 0x0
  1316                           
  1317  0070                     ?_waitFlag:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0070                     ?_getdata:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0070                     ?_main:	
  1324                           ; 1 bytes @ 0x0
  1325                           
  1326  0070                     ?_I2C_Master_Wait:	
  1327                           ; 1 bytes @ 0x0
  1328                           
  1329  0070                     ??_I2C_Master_Wait:	
  1330                           ; 1 bytes @ 0x0
  1331                           
  1332  0070                     ?_I2C_Master_Start:	
  1333                           ; 1 bytes @ 0x0
  1334                           
  1335  0070                     ??_I2C_Master_Start:	
  1336                           ; 1 bytes @ 0x0
  1337                           
  1338  0070                     ?_I2C_Master_Stop:	
  1339                           ; 1 bytes @ 0x0
  1340                           
  1341  0070                     ??_I2C_Master_Stop:	
  1342                           ; 1 bytes @ 0x0
  1343                           
  1344  0070                     ?_I2C_Master_Write:	
  1345                           ; 1 bytes @ 0x0
  1346                           
  1347  0070                     ?_getbit:	
  1348                           ; 1 bytes @ 0x0
  1349                           
  1350  0070                     ?_fcscheck:	
  1351                           ; 2 bytes @ 0x0
  1352                           
  1353  0070                     ?___awdiv:	
  1354                           ; 2 bytes @ 0x0
  1355                           
  1356  0070                     ?___lldiv:	
  1357                           ; 2 bytes @ 0x0
  1358                           
  1359  0070                     putch@byte:	
  1360                           ; 4 bytes @ 0x0
  1361                           
  1362  0070                     I2C_Master_Write@d:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365  0070                     __NOP@i:	
  1366                           ; 2 bytes @ 0x0
  1367                           
  1368  0070                     ___awdiv@divisor:	
  1369                           ; 2 bytes @ 0x0
  1370                           
  1371  0070                     ___lldiv@divisor:	
  1372                           ; 2 bytes @ 0x0
  1373                           
  1374                           
  1375                           ; 4 bytes @ 0x0
  1376  0070                     	ds	1
  1377  0071                     ?_NM_waddress:	
  1378  0071                     ?_TXOBC_waddress:	
  1379                           ; 1 bytes @ 0x1
  1380                           
  1381  0071                     NM_waddress@whigh_address:	
  1382                           ; 1 bytes @ 0x1
  1383                           
  1384  0071                     TXOBC_waddress@whigh_address:	
  1385                           ; 1 bytes @ 0x1
  1386                           
  1387                           
  1388                           ; 1 bytes @ 0x1
  1389  0071                     	ds	1
  1390  0072                     ?_EEPROM_Write:	
  1391  0072                     ??_getbit:	
  1392                           ; 1 bytes @ 0x2
  1393                           
  1394  0072                     ??_fcscheck:	
  1395                           ; 1 bytes @ 0x2
  1396                           
  1397  0072                     ??_I2C_Master_Write:	
  1398                           ; 1 bytes @ 0x2
  1399                           
  1400  0072                     ?_L_OUT:	
  1401                           ; 1 bytes @ 0x2
  1402                           
  1403  0072                     ?_H_OUT:	
  1404                           ; 1 bytes @ 0x2
  1405                           
  1406  0072                     ?_STBOUT:	
  1407                           ; 1 bytes @ 0x2
  1408                           
  1409  0072                     NM_waddress@wlow_address:	
  1410                           ; 1 bytes @ 0x2
  1411                           
  1412  0072                     TXOBC_waddress@wlow_address:	
  1413                           ; 1 bytes @ 0x2
  1414                           
  1415  0072                     EEPROM_Write@high_address:	
  1416                           ; 1 bytes @ 0x2
  1417                           
  1418  0072                     L_OUT@fmcwtxrx:	
  1419                           ; 1 bytes @ 0x2
  1420                           
  1421  0072                     H_OUT@fmcwtxrx:	
  1422                           ; 2 bytes @ 0x2
  1423                           
  1424  0072                     STBOUT@fmcwtxrx:	
  1425                           ; 2 bytes @ 0x2
  1426                           
  1427  0072                     ___awdiv@dividend:	
  1428                           ; 2 bytes @ 0x2
  1429                           
  1430                           
  1431                           ; 2 bytes @ 0x2
  1432  0072                     	ds	1
  1433  0073                     ??_NM_waddress:	
  1434  0073                     ??_TXOBC_waddress:	
  1435                           ; 1 bytes @ 0x3
  1436                           
  1437  0073                     NM_waddress@NM_wad_header:	
  1438                           ; 1 bytes @ 0x3
  1439                           
  1440  0073                     EEPROM_Write@low_address:	
  1441                           ; 1 bytes @ 0x3
  1442                           
  1443                           
  1444                           ; 1 bytes @ 0x3
  1445  0073                     	ds	1
  1446  0074                     ??_L_OUT:	
  1447  0074                     ??_H_OUT:	
  1448                           ; 1 bytes @ 0x4
  1449                           
  1450  0074                     ??_STBOUT:	
  1451                           ; 1 bytes @ 0x4
  1452                           
  1453  0074                     ?_OPINIT:	
  1454                           ; 1 bytes @ 0x4
  1455                           
  1456  0074                     ??___awdiv:	
  1457                           ; 1 bytes @ 0x4
  1458                           
  1459  0074                     fcscheck@bt:	
  1460                           ; 1 bytes @ 0x4
  1461                           
  1462  0074                     EEPROM_Write@data:	
  1463                           ; 1 bytes @ 0x4
  1464                           
  1465  0074                     getbit@i:	
  1466                           ; 1 bytes @ 0x4
  1467                           
  1468  0074                     OPINIT@fmcwtxrx:	
  1469                           ; 2 bytes @ 0x4
  1470                           
  1471  0074                     ___lldiv@dividend:	
  1472                           ; 2 bytes @ 0x4
  1473                           
  1474                           
  1475                           ; 4 bytes @ 0x4
  1476  0074                     	ds	1
  1477  0075                     ??_EEPROM_Write:	
  1478  0075                     TXOBC_waddress@TXOBC_wad_header:	
  1479                           ; 1 bytes @ 0x5
  1480                           
  1481  0075                     ___awdiv@counter:	
  1482                           ; 1 bytes @ 0x5
  1483                           
  1484  0075                     fcscheck@i:	
  1485                           ; 1 bytes @ 0x5
  1486                           
  1487                           
  1488                           ; 2 bytes @ 0x5
  1489  0075                     	ds	1
  1490  0076                     ??_waitFlag:	
  1491  0076                     ??_getdata:	
  1492                           ; 1 bytes @ 0x6
  1493                           
  1494  0076                     ??_OPINIT:	
  1495                           ; 1 bytes @ 0x6
  1496                           
  1497  0076                     ___awdiv@sign:	
  1498                           ; 1 bytes @ 0x6
  1499                           
  1500                           
  1501                           ; 1 bytes @ 0x6
  1502  0076                     	ds	1
  1503  0077                     fcscheck@i_135:	
  1504  0077                     ___awdiv@quotient:	
  1505                           ; 2 bytes @ 0x7
  1506                           
  1507                           
  1508                           ; 2 bytes @ 0x7
  1509  0077                     	ds	1
  1510  0078                     ??___lldiv:	
  1511  0078                     EEPROM_Write@EEPROM_address:	
  1512                           ; 1 bytes @ 0x8
  1513                           
  1514                           
  1515                           ; 1 bytes @ 0x8
  1516  0078                     	ds	1
  1517  0079                     ?_OUTFQ:	
  1518  0079                     ?_RFDOUT:	
  1519                           ; 1 bytes @ 0x9
  1520                           
  1521  0079                     fcscheck@byte:	
  1522                           ; 1 bytes @ 0x9
  1523                           
  1524  0079                     EEPROM_Write@Address:	
  1525                           ; 1 bytes @ 0x9
  1526                           
  1527  0079                     OUTFQ@fmcwtxrx:	
  1528                           ; 1 bytes @ 0x9
  1529                           
  1530  0079                     RFDOUT@fmcwtxrx:	
  1531                           ; 2 bytes @ 0x9
  1532                           
  1533  0079                     ___lldiv@quotient:	
  1534                           ; 2 bytes @ 0x9
  1535                           
  1536                           
  1537                           ; 4 bytes @ 0x9
  1538  0079                     	ds	1
  1539  007A                     ??_ReceivePacket_data:	
  1540                           
  1541                           ; 1 bytes @ 0xA
  1542  007A                     	ds	1
  1543  007B                     OUTFQ@Nprg:	
  1544  007B                     RFDOUT@Nref:	
  1545                           ; 1 bytes @ 0xB
  1546                           
  1547                           
  1548                           ; 2 bytes @ 0xB
  1549  007B                     	ds	2
  1550  007D                     ??_FMTX:	
  1551  007D                     ??_CWTX:	
  1552                           ; 1 bytes @ 0xD
  1553                           
  1554  007D                     ??_FMRX:	
  1555                           ; 1 bytes @ 0xD
  1556                           
  1557  007D                     ___lldiv@counter:	
  1558                           ; 1 bytes @ 0xD
  1559                           
  1560                           
  1561                           ; 1 bytes @ 0xD
  1562  007D                     	ds	1
  1563                           
  1564                           	psect	cstackBANK0
  1565  0020                     __pcstackBANK0:	
  1566  0020                     ?_Init_I2C_M:	
  1567  0020                     ??_OUTFQ:	
  1568                           ; 1 bytes @ 0x0
  1569                           
  1570  0020                     ??_RFDOUT:	
  1571                           ; 1 bytes @ 0x0
  1572                           
  1573  0020                     waitFlag@i:	
  1574                           ; 1 bytes @ 0x0
  1575                           
  1576  0020                     getdata@bufstore_counter:	
  1577                           ; 2 bytes @ 0x0
  1578                           
  1579  0020                     Init_I2C_M@c:	
  1580                           ; 2 bytes @ 0x0
  1581                           
  1582                           
  1583                           ; 4 bytes @ 0x0
  1584  0020                     	ds	2
  1585  0022                     waitFlag@j:	
  1586  0022                     getdata@dstuff:	
  1587                           ; 2 bytes @ 0x2
  1588                           
  1589                           
  1590                           ; 2 bytes @ 0x2
  1591  0022                     	ds	1
  1592  0023                     RFDOUT@Nref_b:	
  1593                           
  1594                           ; 24 bytes @ 0x3
  1595  0023                     	ds	1
  1596  0024                     ??_Init_I2C_M:	
  1597  0024                     waitFlag@j_104:	
  1598                           ; 1 bytes @ 0x4
  1599                           
  1600  0024                     getdata@dbitstatus:	
  1601                           ; 2 bytes @ 0x4
  1602                           
  1603                           
  1604                           ; 2 bytes @ 0x4
  1605  0024                     	ds	2
  1606  0026                     getdata@buf:	
  1607  0026                     waitFlag@j_106:	
  1608                           ; 1 bytes @ 0x6
  1609                           
  1610                           
  1611                           ; 2 bytes @ 0x6
  1612  0026                     	ds	2
  1613  0028                     waitFlag@j_108:	
  1614  0028                     OUTFQ@Nprg_b:	
  1615                           ; 2 bytes @ 0x8
  1616                           
  1617                           
  1618                           ; 34 bytes @ 0x8
  1619  0028                     	ds	2
  1620  002A                     waitFlag@j_110:	
  1621                           
  1622                           ; 2 bytes @ 0xA
  1623  002A                     	ds	2
  1624  002C                     waitFlag@j_112:	
  1625                           
  1626                           ; 2 bytes @ 0xC
  1627  002C                     	ds	2
  1628  002E                     waitFlag@j_113:	
  1629                           
  1630                           ; 2 bytes @ 0xE
  1631  002E                     	ds	2
  1632  0030                     waitFlag@j_115:	
  1633                           
  1634                           ; 2 bytes @ 0x10
  1635  0030                     	ds	2
  1636  0032                     waitFlag@j_117:	
  1637                           
  1638                           ; 2 bytes @ 0x12
  1639  0032                     	ds	2
  1640  0034                     waitFlag@j_119:	
  1641                           
  1642                           ; 2 bytes @ 0x14
  1643  0034                     	ds	2
  1644  0036                     waitFlag@j_121:	
  1645                           
  1646                           ; 2 bytes @ 0x16
  1647  0036                     	ds	2
  1648  0038                     waitFlag@j_123:	
  1649                           
  1650                           ; 2 bytes @ 0x18
  1651  0038                     	ds	2
  1652  003A                     waitFlag@flag_judge:	
  1653                           
  1654                           ; 2 bytes @ 0x1A
  1655  003A                     	ds	1
  1656  003B                     RFDOUT@i_421:	
  1657                           
  1658                           ; 2 bytes @ 0x1B
  1659  003B                     	ds	1
  1660  003C                     waitFlag@buf:	
  1661                           
  1662                           ; 1 bytes @ 0x1C
  1663  003C                     	ds	1
  1664  003D                     ReceivePacket_data@fcschecker:	
  1665  003D                     RFDOUT@i:	
  1666                           ; 2 bytes @ 0x1D
  1667                           
  1668                           
  1669                           ; 2 bytes @ 0x1D
  1670  003D                     	ds	2
  1671  003F                     ReceivePacket_data@i:	
  1672  003F                     RFDOUT@i_422:	
  1673                           ; 2 bytes @ 0x1F
  1674                           
  1675                           
  1676                           ; 2 bytes @ 0x1F
  1677  003F                     	ds	11
  1678  004A                     OUTFQ@i_410:	
  1679                           
  1680                           ; 2 bytes @ 0x2A
  1681  004A                     	ds	2
  1682  004C                     OUTFQ@count:	
  1683                           
  1684                           ; 2 bytes @ 0x2C
  1685  004C                     	ds	2
  1686  004E                     OUTFQ@i:	
  1687                           
  1688                           ; 2 bytes @ 0x2E
  1689  004E                     	ds	2
  1690  0050                     OUTFQ@i_412:	
  1691                           
  1692                           ; 2 bytes @ 0x30
  1693  0050                     	ds	2
  1694  0052                     OUTFQ@j:	
  1695                           
  1696                           ; 2 bytes @ 0x32
  1697  0052                     	ds	2
  1698  0054                     ?_FMTX:	
  1699  0054                     ?_CWTX:	
  1700                           ; 1 bytes @ 0x34
  1701                           
  1702  0054                     ?_FMRX:	
  1703                           ; 1 bytes @ 0x34
  1704                           
  1705  0054                     FMTX@Nref:	
  1706                           ; 1 bytes @ 0x34
  1707                           
  1708  0054                     CWTX@Nref:	
  1709                           ; 2 bytes @ 0x34
  1710                           
  1711  0054                     FMRX@Nref:	
  1712                           ; 2 bytes @ 0x34
  1713                           
  1714                           
  1715                           ; 2 bytes @ 0x34
  1716  0054                     	ds	2
  1717  0056                     FMTX@Nprg:	
  1718  0056                     CWTX@Nprg:	
  1719                           ; 1 bytes @ 0x36
  1720                           
  1721  0056                     FMRX@Nprg:	
  1722                           ; 1 bytes @ 0x36
  1723                           
  1724                           
  1725                           ; 1 bytes @ 0x36
  1726  0056                     	ds	1
  1727  0057                     FMTX@fmtx:	
  1728  0057                     CWTX@cwtx:	
  1729                           ; 2 bytes @ 0x37
  1730                           
  1731  0057                     FMRX@fmrx:	
  1732                           ; 2 bytes @ 0x37
  1733                           
  1734                           
  1735                           ; 2 bytes @ 0x37
  1736  0057                     	ds	2
  1737  0059                     ??_main:	
  1738                           
  1739                           ; 1 bytes @ 0x39
  1740  0059                     	ds	4
  1741                           
  1742                           	psect	maintext
  1743  0141                     __pmaintext:	
  1744 ;;
  1745 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1746 ;;
  1747 ;; *************** function _main *****************
  1748 ;; Defined at:
  1749 ;;		line 38 in file "main.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;		None
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  FMRX_Nprg      10   20[BANK1 ] int [5]
  1754 ;;  CWTX_Nprg      10   10[BANK1 ] int [5]
  1755 ;;  FMTX_Nprg      10    0[BANK1 ] int [5]
  1756 ;;  NM_wad_heade    1   31[BANK1 ] unsigned char 
  1757 ;;  dData           1   32[BANK1 ] PTR unsigned char 
  1758 ;;		 -> NULL(0), dData(16), 
  1759 ;;  TXOBC_wad_he    1   30[BANK1 ] unsigned char 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : B00/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1769 ;;      Params:         0       0       0       0       0
  1770 ;;      Locals:         0       0      33       0       0
  1771 ;;      Temps:          0       4       0       0       0
  1772 ;;      Totals:         0       4      33       0       0
  1773 ;;Total ram usage:       37 bytes
  1774 ;; Hardware stack levels required when called:    4
  1775 ;; This function calls:
  1776 ;;		_CWTX
  1777 ;;		_EEPROM_Write
  1778 ;;		_FMRX
  1779 ;;		_FMTX
  1780 ;;		_Init_I2C_M
  1781 ;;		_Init_MPU
  1782 ;;		_Init_SERIAL
  1783 ;;		_NM_waddress
  1784 ;;		_ReceivePacket_data
  1785 ;;		_Reset_EPS
  1786 ;;		_TXOBC_waddress
  1787 ;; This function is called by:
  1788 ;;		Startup code after reset
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           
  1793                           ;psect for function _main
  1794  0141                     _main:	
  1795                           
  1796                           ;main.c: 43: _delay((unsigned long)((200)*(10000000/4000.0)));
  1797                           
  1798                           ;incstack = 0
  1799                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1800  0141  3003               	movlw	3
  1801  0142  1283               	bcf	3,5	;RP0=0, select bank0
  1802  0143  1303               	bcf	3,6	;RP1=0, select bank0
  1803  0144  00DB               	movwf	??_main+2
  1804  0145  308A               	movlw	138
  1805  0146  00DA               	movwf	??_main+1
  1806  0147  3055               	movlw	85
  1807  0148  00D9               	movwf	??_main
  1808  0149                     u3477:	
  1809  0149  0BD9               	decfsz	??_main,f
  1810  014A  2949               	goto	u3477
  1811  014B  0BDA               	decfsz	??_main+1,f
  1812  014C  2949               	goto	u3477
  1813  014D  0BDB               	decfsz	??_main+2,f
  1814  014E  2949               	goto	u3477
  1815                           
  1816                           ;main.c: 45: Init_SERIAL();
  1817  014F  120A  158A  2109  120A  118A  	fcall	_Init_SERIAL
  1818                           
  1819                           ;main.c: 46: Init_MPU();
  1820  0154  120A  158A  213B  120A  118A  	fcall	_Init_MPU
  1821                           
  1822                           ;main.c: 47: Init_I2C_M(400000);
  1823  0159  3000               	movlw	0
  1824  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1825  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1826  015C  00A3               	movwf	Init_I2C_M@c+3
  1827  015D  3006               	movlw	6
  1828  015E  00A2               	movwf	Init_I2C_M@c+2
  1829  015F  301A               	movlw	26
  1830  0160  00A1               	movwf	Init_I2C_M@c+1
  1831  0161  3080               	movlw	128
  1832  0162  00A0               	movwf	Init_I2C_M@c
  1833  0163  120A  158A  226F  120A  118A  	fcall	_Init_I2C_M
  1834                           
  1835                           ;main.c: 54: RB2 = 1;
  1836  0168  1283               	bcf	3,5	;RP0=0, select bank0
  1837  0169  1303               	bcf	3,6	;RP1=0, select bank0
  1838  016A  1506               	bsf	6,2	;volatile
  1839                           
  1840                           ;main.c: 55: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1841  016B  300D               	movlw	13
  1842  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1843  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1844  016E  00DB               	movwf	??_main+2
  1845  016F  30AF               	movlw	175
  1846  0170  00DA               	movwf	??_main+1
  1847  0171  30B5               	movlw	181
  1848  0172  00D9               	movwf	??_main
  1849  0173                     u3487:	
  1850  0173  0BD9               	decfsz	??_main,f
  1851  0174  2973               	goto	u3487
  1852  0175  0BDA               	decfsz	??_main+1,f
  1853  0176  2973               	goto	u3487
  1854  0177  0BDB               	decfsz	??_main+2,f
  1855  0178  2973               	goto	u3487
  1856  0179  297A               	nop2
  1857                           
  1858                           ;main.c: 57: FMTX(FMTX_Nref, FMTX_Nprg);
  1859  017A  1683               	bsf	3,5	;RP0=1, select bank1
  1860  017B  1303               	bcf	3,6	;RP1=0, select bank1
  1861  017C  0825               	movf	(_FMTX_Nref+1)^(0+128),w
  1862  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1863  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1864  017F  00D5               	movwf	FMTX@Nref+1
  1865  0180  1683               	bsf	3,5	;RP0=1, select bank1
  1866  0181  1303               	bcf	3,6	;RP1=0, select bank1
  1867  0182  0824               	movf	_FMTX_Nref^(0+128),w
  1868  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1869  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1870  0185  00D4               	movwf	FMTX@Nref
  1871  0186  30BA               	movlw	(low (_FMTX_Nprg| 0))& (0+255)
  1872  0187  00D9               	movwf	??_main
  1873  0188  0859               	movf	??_main,w
  1874  0189  00D6               	movwf	FMTX@Nprg
  1875  018A  120A  158A  2215  120A  118A  	fcall	_FMTX
  1876                           
  1877                           ;main.c: 58: CWTX(CWTX_Nref, CWTX_Nprg);
  1878  018F  1683               	bsf	3,5	;RP0=1, select bank1
  1879  0190  1303               	bcf	3,6	;RP1=0, select bank1
  1880  0191  0823               	movf	(_CWTX_Nref+1)^(0+128),w
  1881  0192  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0193  1303               	bcf	3,6	;RP1=0, select bank0
  1883  0194  00D5               	movwf	CWTX@Nref+1
  1884  0195  1683               	bsf	3,5	;RP0=1, select bank1
  1885  0196  1303               	bcf	3,6	;RP1=0, select bank1
  1886  0197  0822               	movf	_CWTX_Nref^(0+128),w
  1887  0198  1283               	bcf	3,5	;RP0=0, select bank0
  1888  0199  1303               	bcf	3,6	;RP1=0, select bank0
  1889  019A  00D4               	movwf	CWTX@Nref
  1890  019B  30B0               	movlw	(low (_CWTX_Nprg| 0))& (0+255)
  1891  019C  00D9               	movwf	??_main
  1892  019D  0859               	movf	??_main,w
  1893  019E  00D6               	movwf	CWTX@Nprg
  1894  019F  120A  158A  21BD  120A  118A  	fcall	_CWTX
  1895                           
  1896                           ;main.c: 59: FMRX(FMRX_Nref, FMRX_Nprg);
  1897  01A4  1683               	bsf	3,5	;RP0=1, select bank1
  1898  01A5  1303               	bcf	3,6	;RP1=0, select bank1
  1899  01A6  0821               	movf	(_FMRX_Nref+1)^(0+128),w
  1900  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  1901  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  1902  01A9  00D5               	movwf	FMRX@Nref+1
  1903  01AA  1683               	bsf	3,5	;RP0=1, select bank1
  1904  01AB  1303               	bcf	3,6	;RP1=0, select bank1
  1905  01AC  0820               	movf	_FMRX_Nref^(0+128),w
  1906  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1907  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1908  01AF  00D4               	movwf	FMRX@Nref
  1909  01B0  30A6               	movlw	(low (_FMRX_Nprg| 0))& (0+255)
  1910  01B1  00D9               	movwf	??_main
  1911  01B2  0859               	movf	??_main,w
  1912  01B3  00D6               	movwf	FMRX@Nprg
  1913  01B4  120A  158A  21E9  120A  118A  	fcall	_FMRX
  1914                           
  1915                           ;main.c: 60: RB2 = 0;
  1916  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  1917  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  1918  01BB  1106               	bcf	6,2	;volatile
  1919  01BC                     l3587:	
  1920                           ;main.c: 63: while(1){
  1921                           
  1922                           
  1923                           ;main.c: 78: UBYTE *dData;
  1924                           ;main.c: 79: dData = ReceivePacket_data();
  1925  01BC  120A  158A  24C8  120A  118A  	fcall	_ReceivePacket_data
  1926  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1927  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  1928  01C3  00D9               	movwf	??_main
  1929  01C4  0859               	movf	??_main,w
  1930  01C5  1683               	bsf	3,5	;RP0=1, select bank1
  1931  01C6  1303               	bcf	3,6	;RP1=0, select bank1
  1932  01C7  00E4               	movwf	main@dData^(0+128)
  1933                           
  1934                           ;main.c: 80: RB2 = 1;
  1935  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1936  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1937  01CA  1506               	bsf	6,2	;volatile
  1938                           
  1939                           ;main.c: 81: _delay((unsigned long)((500)*(10000000/4000.0)));
  1940  01CB  3007               	movlw	7
  1941  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1942  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1943  01CE  00DB               	movwf	??_main+2
  1944  01CF  3058               	movlw	88
  1945  01D0  00DA               	movwf	??_main+1
  1946  01D1  3059               	movlw	89
  1947  01D2  00D9               	movwf	??_main
  1948  01D3                     u3497:	
  1949  01D3  0BD9               	decfsz	??_main,f
  1950  01D4  29D3               	goto	u3497
  1951  01D5  0BDA               	decfsz	??_main+1,f
  1952  01D6  29D3               	goto	u3497
  1953  01D7  0BDB               	decfsz	??_main+2,f
  1954  01D8  29D3               	goto	u3497
  1955                           
  1956                           ;main.c: 82: RB2 = 0;
  1957  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1958  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1959  01DB  1106               	bcf	6,2	;volatile
  1960                           
  1961                           ;main.c: 84: EEPROM_Write(0x50,0x30,0x30,dData);
  1962  01DC  3030               	movlw	48
  1963  01DD  00D9               	movwf	??_main
  1964  01DE  0859               	movf	??_main,w
  1965  01DF  00F2               	movwf	EEPROM_Write@high_address
  1966  01E0  3030               	movlw	48
  1967  01E1  00DA               	movwf	??_main+1
  1968  01E2  085A               	movf	??_main+1,w
  1969  01E3  00F3               	movwf	EEPROM_Write@low_address
  1970  01E4  1683               	bsf	3,5	;RP0=1, select bank1
  1971  01E5  1303               	bcf	3,6	;RP1=0, select bank1
  1972  01E6  0864               	movf	main@dData^(0+128),w
  1973  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  1974  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  1975  01E9  00DB               	movwf	??_main+2
  1976  01EA  085B               	movf	??_main+2,w
  1977  01EB  00F4               	movwf	EEPROM_Write@data
  1978  01EC  3050               	movlw	80
  1979  01ED  120A  118A  2003  120A  118A  	fcall	_EEPROM_Write
  1980                           
  1981                           ;main.c: 85: _delay((unsigned long)((100)*(10000000/4000.0)));
  1982  01F2  3002               	movlw	2
  1983  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  1984  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  1985  01F5  00DB               	movwf	??_main+2
  1986  01F6  3045               	movlw	69
  1987  01F7  00DA               	movwf	??_main+1
  1988  01F8  30A9               	movlw	169
  1989  01F9  00D9               	movwf	??_main
  1990  01FA                     u3507:	
  1991  01FA  0BD9               	decfsz	??_main,f
  1992  01FB  29FA               	goto	u3507
  1993  01FC  0BDA               	decfsz	??_main+1,f
  1994  01FD  29FA               	goto	u3507
  1995  01FE  0BDB               	decfsz	??_main+2,f
  1996  01FF  29FA               	goto	u3507
  1997                           
  1998                           ;main.c: 89: UBYTE TXOBC_wad_header = 0x74;
  1999  0200  3074               	movlw	116
  2000  0201  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0202  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0203  00D9               	movwf	??_main
  2003  0204  0859               	movf	??_main,w
  2004  0205  1683               	bsf	3,5	;RP0=1, select bank1
  2005  0206  1303               	bcf	3,6	;RP1=0, select bank1
  2006  0207  00E2               	movwf	main@TXOBC_wad_header^(0+128)
  2007                           
  2008                           ;main.c: 90: TXOBC_waddress(TXOBC_wad_header, 0x30, 0x30);
  2009  0208  3030               	movlw	48
  2010  0209  1283               	bcf	3,5	;RP0=0, select bank0
  2011  020A  1303               	bcf	3,6	;RP1=0, select bank0
  2012  020B  00D9               	movwf	??_main
  2013  020C  0859               	movf	??_main,w
  2014  020D  00F1               	movwf	TXOBC_waddress@whigh_address
  2015  020E  3030               	movlw	48
  2016  020F  00DA               	movwf	??_main+1
  2017  0210  085A               	movf	??_main+1,w
  2018  0211  00F2               	movwf	TXOBC_waddress@wlow_address
  2019  0212  1683               	bsf	3,5	;RP0=1, select bank1
  2020  0213  1303               	bcf	3,6	;RP1=0, select bank1
  2021  0214  0862               	movf	main@TXOBC_wad_header^(0+128),w
  2022  0215  120A  158A  22A3  120A  118A  	fcall	_TXOBC_waddress
  2023                           
  2024                           ;main.c: 103: if(dData[0]=='n'){
  2025  021A  1683               	bsf	3,5	;RP0=1, select bank1
  2026  021B  1303               	bcf	3,6	;RP1=0, select bank1
  2027  021C  0864               	movf	main@dData^(0+128),w
  2028  021D  0084               	movwf	4
  2029  021E  306E               	movlw	110
  2030  021F  1783               	bsf	3,7	;select IRP bank2
  2031  0220  0600               	xorwf	0,w
  2032  0221  1D03               	btfss	3,2
  2033  0222  2A3E               	goto	l3609
  2034                           
  2035                           ;main.c: 105: UBYTE NM_wad_header = 0x72;
  2036  0223  3072               	movlw	114
  2037  0224  1283               	bcf	3,5	;RP0=0, select bank0
  2038  0225  1303               	bcf	3,6	;RP1=0, select bank0
  2039  0226  00D9               	movwf	??_main
  2040  0227  0859               	movf	??_main,w
  2041  0228  1683               	bsf	3,5	;RP0=1, select bank1
  2042  0229  1303               	bcf	3,6	;RP1=0, select bank1
  2043  022A  00E3               	movwf	main@NM_wad_header^(0+128)
  2044                           
  2045                           ;main.c: 106: NM_waddress(NM_wad_header, 0x30, 0x30);
  2046  022B  3030               	movlw	48
  2047  022C  1283               	bcf	3,5	;RP0=0, select bank0
  2048  022D  1303               	bcf	3,6	;RP1=0, select bank0
  2049  022E  00D9               	movwf	??_main
  2050  022F  0859               	movf	??_main,w
  2051  0230  00F1               	movwf	NM_waddress@whigh_address
  2052  0231  3030               	movlw	48
  2053  0232  00DA               	movwf	??_main+1
  2054  0233  085A               	movf	??_main+1,w
  2055  0234  00F2               	movwf	NM_waddress@wlow_address
  2056  0235  1683               	bsf	3,5	;RP0=1, select bank1
  2057  0236  1303               	bcf	3,6	;RP1=0, select bank1
  2058  0237  0863               	movf	main@NM_wad_header^(0+128),w
  2059  0238  120A  158A  20E2  120A  118A  	fcall	_NM_waddress
  2060                           
  2061                           ;main.c: 108: }else if(dData[0]=='p'){
  2062  023D  2B21               	goto	l407
  2063  023E                     l3609:	
  2064  023E  1683               	bsf	3,5	;RP0=1, select bank1
  2065  023F  1303               	bcf	3,6	;RP1=0, select bank1
  2066  0240  0864               	movf	main@dData^(0+128),w
  2067  0241  0084               	movwf	4
  2068  0242  3070               	movlw	112
  2069  0243  1783               	bsf	3,7	;select IRP bank2
  2070  0244  0600               	xorwf	0,w
  2071  0245  1D03               	btfss	3,2
  2072  0246  2B0C               	goto	l408
  2073                           
  2074                           ;main.c: 113: if(dData[2] == 'r'){
  2075  0247  0864               	movf	main@dData^(0+128),w
  2076  0248  3E02               	addlw	2
  2077  0249  0084               	movwf	4
  2078  024A  3072               	movlw	114
  2079  024B  0600               	xorwf	0,w
  2080  024C  1903               	btfsc	3,2
  2081  024D  2AF4               	goto	l3635
  2082  024E  2B21               	goto	l407
  2083  024F                     l3615:	
  2084                           ;main.c: 119: case 'E':
  2085                           
  2086                           ;main.c: 118: switch(dData[3]){
  2087                           
  2088                           
  2089                           ;main.c: 124: Reset_EPS();
  2090  024F  120A  158A  2176  120A  118A  	fcall	_Reset_EPS
  2091                           
  2092                           ;main.c: 125: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2093  0254  3040               	movlw	64
  2094  0255  1283               	bcf	3,5	;RP0=0, select bank0
  2095  0256  1303               	bcf	3,6	;RP1=0, select bank0
  2096  0257  00DB               	movwf	??_main+2
  2097  0258  306A               	movlw	106
  2098  0259  00DA               	movwf	??_main+1
  2099  025A  3097               	movlw	151
  2100  025B  00D9               	movwf	??_main
  2101  025C                     u3517:	
  2102  025C  0BD9               	decfsz	??_main,f
  2103  025D  2A5C               	goto	u3517
  2104  025E  0BDA               	decfsz	??_main+1,f
  2105  025F  2A5C               	goto	u3517
  2106  0260  0BDB               	decfsz	??_main+2,f
  2107  0261  2A5C               	goto	u3517
  2108                           
  2109                           ;main.c: 128: int FMTX_Nprg[5] = {8,7,3,0,0};
  2110  0262  30C4               	movlw	main@FMTX_Nprg& (0+255)
  2111  0263  0084               	movwf	4
  2112  0264  30E6               	movlw	low main@F1989
  2113  0265  1283               	bcf	3,5	;RP0=0, select bank0
  2114  0266  1303               	bcf	3,6	;RP1=0, select bank0
  2115  0267  00D9               	movwf	??_main
  2116  0268  0804               	movf	4,w
  2117  0269  00DA               	movwf	??_main+1
  2118  026A  300A               	movlw	10
  2119  026B  00DB               	movwf	??_main+2
  2120  026C                     u3420:	
  2121  026C  0859               	movf	??_main,w
  2122  026D  0084               	movwf	4
  2123  026E  1783               	bsf	3,7	;select IRP bank3
  2124  026F  0800               	movf	0,w
  2125  0270  00DC               	movwf	??_main+3
  2126  0271  0AD9               	incf	??_main,f
  2127  0272  085A               	movf	??_main+1,w
  2128  0273  0084               	movwf	4
  2129  0274  1383               	bcf	3,7	;select IRP bank1
  2130  0275  085C               	movf	??_main+3,w
  2131  0276  0080               	movwf	0
  2132  0277  0ADA               	incf	??_main+1,f
  2133  0278  0BDB               	decfsz	??_main+2,f
  2134  0279  2A6C               	goto	u3420
  2135                           
  2136                           ;main.c: 129: int CWTX_Nprg[5] = {0,1,7,4,7};
  2137  027A  30CE               	movlw	main@CWTX_Nprg& (0+255)
  2138  027B  0084               	movwf	4
  2139  027C  30DC               	movlw	low main@F1991
  2140  027D  00D9               	movwf	??_main
  2141  027E  0804               	movf	4,w
  2142  027F  00DA               	movwf	??_main+1
  2143  0280  300A               	movlw	10
  2144  0281  00DB               	movwf	??_main+2
  2145  0282                     u3430:	
  2146  0282  0859               	movf	??_main,w
  2147  0283  0084               	movwf	4
  2148  0284  1783               	bsf	3,7	;select IRP bank3
  2149  0285  0800               	movf	0,w
  2150  0286  00DC               	movwf	??_main+3
  2151  0287  0AD9               	incf	??_main,f
  2152  0288  085A               	movf	??_main+1,w
  2153  0289  0084               	movwf	4
  2154  028A  1383               	bcf	3,7	;select IRP bank1
  2155  028B  085C               	movf	??_main+3,w
  2156  028C  0080               	movwf	0
  2157  028D  0ADA               	incf	??_main+1,f
  2158  028E  0BDB               	decfsz	??_main+2,f
  2159  028F  2A82               	goto	u3430
  2160                           
  2161                           ;main.c: 130: int FMRX_Nprg[5] = {2,4,8,8,7};
  2162  0290  30D8               	movlw	main@FMRX_Nprg& (0+255)
  2163  0291  0084               	movwf	4
  2164  0292  30D2               	movlw	low main@F1993
  2165  0293  00D9               	movwf	??_main
  2166  0294  0804               	movf	4,w
  2167  0295  00DA               	movwf	??_main+1
  2168  0296  300A               	movlw	10
  2169  0297  00DB               	movwf	??_main+2
  2170  0298                     u3440:	
  2171  0298  0859               	movf	??_main,w
  2172  0299  0084               	movwf	4
  2173  029A  1783               	bsf	3,7	;select IRP bank3
  2174  029B  0800               	movf	0,w
  2175  029C  00DC               	movwf	??_main+3
  2176  029D  0AD9               	incf	??_main,f
  2177  029E  085A               	movf	??_main+1,w
  2178  029F  0084               	movwf	4
  2179  02A0  1383               	bcf	3,7	;select IRP bank1
  2180  02A1  085C               	movf	??_main+3,w
  2181  02A2  0080               	movwf	0
  2182  02A3  0ADA               	incf	??_main+1,f
  2183  02A4  0BDB               	decfsz	??_main+2,f
  2184  02A5  2A98               	goto	u3440
  2185                           
  2186                           ;main.c: 132: FMTX(FMTX_Nref, FMTX_Nprg);
  2187  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  2188  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  2189  02A8  0825               	movf	(_FMTX_Nref+1)^(0+128),w
  2190  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  2191  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  2192  02AB  00D5               	movwf	FMTX@Nref+1
  2193  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  2194  02AD  1303               	bcf	3,6	;RP1=0, select bank1
  2195  02AE  0824               	movf	_FMTX_Nref^(0+128),w
  2196  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2197  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2198  02B1  00D4               	movwf	FMTX@Nref
  2199  02B2  30C4               	movlw	(low (main@FMTX_Nprg| 0))& (0+255)
  2200  02B3  00D9               	movwf	??_main
  2201  02B4  0859               	movf	??_main,w
  2202  02B5  00D6               	movwf	FMTX@Nprg
  2203  02B6  120A  158A  2215  120A  118A  	fcall	_FMTX
  2204                           
  2205                           ;main.c: 133: CWTX(CWTX_Nref, CWTX_Nprg);
  2206  02BB  1683               	bsf	3,5	;RP0=1, select bank1
  2207  02BC  1303               	bcf	3,6	;RP1=0, select bank1
  2208  02BD  0823               	movf	(_CWTX_Nref+1)^(0+128),w
  2209  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  2210  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  2211  02C0  00D5               	movwf	CWTX@Nref+1
  2212  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  2213  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  2214  02C3  0822               	movf	_CWTX_Nref^(0+128),w
  2215  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  2216  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  2217  02C6  00D4               	movwf	CWTX@Nref
  2218  02C7  30CE               	movlw	(low (main@CWTX_Nprg| 0))& (0+255)
  2219  02C8  00D9               	movwf	??_main
  2220  02C9  0859               	movf	??_main,w
  2221  02CA  00D6               	movwf	CWTX@Nprg
  2222  02CB  120A  158A  21BD  120A  118A  	fcall	_CWTX
  2223                           
  2224                           ;main.c: 134: FMRX(FMRX_Nref, FMRX_Nprg);
  2225  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  2226  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  2227  02D2  0821               	movf	(_FMRX_Nref+1)^(0+128),w
  2228  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  2229  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  2230  02D5  00D5               	movwf	FMRX@Nref+1
  2231  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  2232  02D7  1303               	bcf	3,6	;RP1=0, select bank1
  2233  02D8  0820               	movf	_FMRX_Nref^(0+128),w
  2234  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  2235  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  2236  02DB  00D4               	movwf	FMRX@Nref
  2237  02DC  30D8               	movlw	(low (main@FMRX_Nprg| 0))& (0+255)
  2238  02DD  00D9               	movwf	??_main
  2239  02DE  0859               	movf	??_main,w
  2240  02DF  00D6               	movwf	FMRX@Nprg
  2241  02E0  120A  158A  21E9  120A  118A  	fcall	_FMRX
  2242                           
  2243                           ;main.c: 135: _delay((unsigned long)((500)*(10000000/4000.0)));
  2244  02E5  3007               	movlw	7
  2245  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  2246  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  2247  02E8  00DB               	movwf	??_main+2
  2248  02E9  3058               	movlw	88
  2249  02EA  00DA               	movwf	??_main+1
  2250  02EB  3059               	movlw	89
  2251  02EC  00D9               	movwf	??_main
  2252  02ED                     u3527:	
  2253  02ED  0BD9               	decfsz	??_main,f
  2254  02EE  2AED               	goto	u3527
  2255  02EF  0BDA               	decfsz	??_main+1,f
  2256  02F0  2AED               	goto	u3527
  2257  02F1  0BDB               	decfsz	??_main+2,f
  2258  02F2  2AED               	goto	u3527
  2259                           
  2260                           ;main.c: 152: }
  2261                           
  2262                           ;main.c: 151: break;
  2263                           
  2264                           ;main.c: 149: default:
  2265                           
  2266                           ;main.c: 148: break;
  2267                           
  2268                           ;main.c: 146: case 'T':
  2269                           
  2270                           ;main.c: 145: break;
  2271                           
  2272                           ;main.c: 143: case 'N':
  2273                           
  2274                           ;main.c: 142: break;
  2275                           
  2276                           ;main.c: 140: case '3':
  2277                           
  2278                           ;main.c: 139: break;
  2279                           
  2280                           ;main.c: 137: case 'I':
  2281                           
  2282                           ;main.c: 136: break;
  2283  02F3  2B21               	goto	l407
  2284  02F4                     l3635:	
  2285  02F4  1683               	bsf	3,5	;RP0=1, select bank1
  2286  02F5  1303               	bcf	3,6	;RP1=0, select bank1
  2287  02F6  0864               	movf	main@dData^(0+128),w
  2288  02F7  3E03               	addlw	3
  2289  02F8  0084               	movwf	4
  2290  02F9  1783               	bsf	3,7	;select IRP bank2
  2291  02FA  0800               	movf	0,w
  2292                           
  2293                           ; Switch size 1, requested type "space"
  2294                           ; Number of cases is 5, Range of values is 51 to 84
  2295                           ; switch strategies available:
  2296                           ; Name         Instructions Cycles
  2297                           ; simple_byte           16     9 (average)
  2298                           ; direct_byte          113    11 (fixed)
  2299                           ; jumptable            263     9 (fixed)
  2300                           ;	Chosen strategy is simple_byte
  2301  02FB  3A33               	xorlw	51	; case 51
  2302  02FC  1903               	skipnz
  2303  02FD  2B21               	goto	l407
  2304  02FE  3A76               	xorlw	118	; case 69
  2305  02FF  1903               	skipnz
  2306  0300  2A4F               	goto	l3615
  2307  0301  3A0C               	xorlw	12	; case 73
  2308  0302  1903               	skipnz
  2309  0303  2B21               	goto	l407
  2310  0304  3A07               	xorlw	7	; case 78
  2311  0305  1903               	skipnz
  2312  0306  2B21               	goto	l407
  2313  0307  3A1A               	xorlw	26	; case 84
  2314  0308  1903               	skipnz
  2315  0309  2B21               	goto	l407
  2316  030A  2B21               	goto	l407
  2317                           
  2318                           ;main.c: 156: }
  2319                           ;main.c: 157: }else{
  2320                           
  2321                           ;main.c: 154: }else if(dData[2] == 't'){
  2322  030B  2B21               	goto	l407
  2323  030C                     l408:	
  2324                           
  2325                           ;main.c: 158: RB2 = 1;
  2326  030C  1283               	bcf	3,5	;RP0=0, select bank0
  2327  030D  1303               	bcf	3,6	;RP1=0, select bank0
  2328  030E  1506               	bsf	6,2	;volatile
  2329                           
  2330                           ;main.c: 159: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2331  030F  300D               	movlw	13
  2332  0310  1283               	bcf	3,5	;RP0=0, select bank0
  2333  0311  1303               	bcf	3,6	;RP1=0, select bank0
  2334  0312  00DB               	movwf	??_main+2
  2335  0313  30AF               	movlw	175
  2336  0314  00DA               	movwf	??_main+1
  2337  0315  30B5               	movlw	181
  2338  0316  00D9               	movwf	??_main
  2339  0317                     u3537:	
  2340  0317  0BD9               	decfsz	??_main,f
  2341  0318  2B17               	goto	u3537
  2342  0319  0BDA               	decfsz	??_main+1,f
  2343  031A  2B17               	goto	u3537
  2344  031B  0BDB               	decfsz	??_main+2,f
  2345  031C  2B17               	goto	u3537
  2346  031D  2B1E               	nop2
  2347                           
  2348                           ;main.c: 160: RB2 = 0;
  2349  031E  1283               	bcf	3,5	;RP0=0, select bank0
  2350  031F  1303               	bcf	3,6	;RP1=0, select bank0
  2351  0320  1106               	bcf	6,2	;volatile
  2352  0321                     l407:	
  2353                           
  2354                           ;main.c: 161: }
  2355                           ;main.c: 205: _delay((unsigned long)((500)*(10000000/4000.0)));
  2356  0321  3007               	movlw	7
  2357  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2358  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2359  0324  00DB               	movwf	??_main+2
  2360  0325  3058               	movlw	88
  2361  0326  00DA               	movwf	??_main+1
  2362  0327  3059               	movlw	89
  2363  0328  00D9               	movwf	??_main
  2364  0329                     u3547:	
  2365  0329  0BD9               	decfsz	??_main,f
  2366  032A  2B29               	goto	u3547
  2367  032B  0BDA               	decfsz	??_main+1,f
  2368  032C  2B29               	goto	u3547
  2369  032D  0BDB               	decfsz	??_main+2,f
  2370  032E  2B29               	goto	u3547
  2371  032F  29BC               	goto	l3587
  2372  0330                     __end_of_main:	
  2373                           ;main.c: 206: }
  2374                           ;main.c: 207: return;
  2375                           
  2376                           
  2377                           	psect	text1
  2378  0AA3                     __ptext1:	
  2379 ;; *************** function _TXOBC_waddress *****************
  2380 ;; Defined at:
  2381 ;;		line 78 in file "UART.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  2384 ;;  whigh_addres    1    1[COMMON] unsigned char 
  2385 ;;  wlow_address    1    2[COMMON] unsigned char 
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;  TXOBC_wad_he    1    5[COMMON] unsigned char 
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  1    wreg      void 
  2390 ;; Registers used:
  2391 ;;		wreg, status,2, status,0, pclath, cstack
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2397 ;;      Params:         2       0       0       0       0
  2398 ;;      Locals:         1       0       0       0       0
  2399 ;;      Temps:          2       0       0       0       0
  2400 ;;      Totals:         5       0       0       0       0
  2401 ;;Total ram usage:        5 bytes
  2402 ;; Hardware stack levels used:    1
  2403 ;; Hardware stack levels required when called:    1
  2404 ;; This function calls:
  2405 ;;		_putch
  2406 ;; This function is called by:
  2407 ;;		_main
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           
  2412                           ;psect for function _TXOBC_waddress
  2413  0AA3                     _TXOBC_waddress:	
  2414                           
  2415                           ;incstack = 0
  2416                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2417                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2418  0AA3  00F5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2419                           
  2420                           ;UART.c: 79: RC5 = 1;
  2421  0AA4  1283               	bcf	3,5	;RP0=0, select bank0
  2422  0AA5  1303               	bcf	3,6	;RP1=0, select bank0
  2423  0AA6  1687               	bsf	7,5	;volatile
  2424                           
  2425                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2426  0AA7  30A3               	movlw	163
  2427  0AA8  00F4               	movwf	??_TXOBC_waddress+1
  2428  0AA9  3055               	movlw	85
  2429  0AAA  00F3               	movwf	??_TXOBC_waddress
  2430  0AAB                     u3557:	
  2431  0AAB  0BF3               	decfsz	??_TXOBC_waddress,f
  2432  0AAC  2AAB               	goto	u3557
  2433  0AAD  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2434  0AAE  2AAB               	goto	u3557
  2435                           
  2436                           ;UART.c: 81: putch(TXOBC_wad_header);
  2437  0AAF  0875               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2438  0AB0  120A  158A  20B8  120A  158A  	fcall	_putch
  2439                           
  2440                           ;UART.c: 82: _delay((unsigned long)((50)*(10000000/4000.0)));
  2441  0AB5  30A3               	movlw	163
  2442  0AB6  00F4               	movwf	??_TXOBC_waddress+1
  2443  0AB7  3055               	movlw	85
  2444  0AB8  00F3               	movwf	??_TXOBC_waddress
  2445  0AB9                     u3567:	
  2446  0AB9  0BF3               	decfsz	??_TXOBC_waddress,f
  2447  0ABA  2AB9               	goto	u3567
  2448  0ABB  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2449  0ABC  2AB9               	goto	u3567
  2450                           
  2451                           ;UART.c: 83: putch(whigh_address);
  2452  0ABD  0871               	movf	TXOBC_waddress@whigh_address,w
  2453  0ABE  120A  158A  20B8  120A  158A  	fcall	_putch
  2454                           
  2455                           ;UART.c: 84: _delay((unsigned long)((50)*(10000000/4000.0)));
  2456  0AC3  30A3               	movlw	163
  2457  0AC4  00F4               	movwf	??_TXOBC_waddress+1
  2458  0AC5  3055               	movlw	85
  2459  0AC6  00F3               	movwf	??_TXOBC_waddress
  2460  0AC7                     u3577:	
  2461  0AC7  0BF3               	decfsz	??_TXOBC_waddress,f
  2462  0AC8  2AC7               	goto	u3577
  2463  0AC9  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2464  0ACA  2AC7               	goto	u3577
  2465                           
  2466                           ;UART.c: 85: putch(wlow_address);
  2467  0ACB  0872               	movf	TXOBC_waddress@wlow_address,w
  2468  0ACC  120A  158A  20B8  120A  158A  	fcall	_putch
  2469                           
  2470                           ;UART.c: 86: _delay((unsigned long)((50)*(10000000/4000.0)));
  2471  0AD1  30A3               	movlw	163
  2472  0AD2  00F4               	movwf	??_TXOBC_waddress+1
  2473  0AD3  3055               	movlw	85
  2474  0AD4  00F3               	movwf	??_TXOBC_waddress
  2475  0AD5                     u3587:	
  2476  0AD5  0BF3               	decfsz	??_TXOBC_waddress,f
  2477  0AD6  2AD5               	goto	u3587
  2478  0AD7  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2479  0AD8  2AD5               	goto	u3587
  2480                           
  2481                           ;UART.c: 87: RC5 = 0;
  2482  0AD9  1283               	bcf	3,5	;RP0=0, select bank0
  2483  0ADA  1303               	bcf	3,6	;RP1=0, select bank0
  2484  0ADB  1287               	bcf	7,5	;volatile
  2485  0ADC  0008               	return
  2486  0ADD                     __end_of_TXOBC_waddress:	
  2487                           
  2488                           	psect	text2
  2489  0976                     __ptext2:	
  2490 ;; *************** function _Reset_EPS *****************
  2491 ;; Defined at:
  2492 ;;		line 19 in file "EPS.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;		None
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;		None
  2497 ;; Return value:  Size  Location     Type
  2498 ;;                  1    wreg      void 
  2499 ;; Registers used:
  2500 ;;		wreg
  2501 ;; Tracked objects:
  2502 ;;		On entry : 0/0
  2503 ;;		On exit  : 0/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2506 ;;      Params:         0       0       0       0       0
  2507 ;;      Locals:         0       0       0       0       0
  2508 ;;      Temps:          3       0       0       0       0
  2509 ;;      Totals:         3       0       0       0       0
  2510 ;;Total ram usage:        3 bytes
  2511 ;; Hardware stack levels used:    1
  2512 ;; This function calls:
  2513 ;;		Nothing
  2514 ;; This function is called by:
  2515 ;;		_main
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           
  2520                           ;psect for function _Reset_EPS
  2521  0976                     _Reset_EPS:	
  2522                           
  2523                           ;EPS.c: 20: RB4 = 1;
  2524                           
  2525                           ;incstack = 0
  2526                           ; Regs used in _Reset_EPS: [wreg]
  2527  0976  1283               	bcf	3,5	;RP0=0, select bank0
  2528  0977  1303               	bcf	3,6	;RP1=0, select bank0
  2529  0978  1606               	bsf	6,4	;volatile
  2530                           
  2531                           ;EPS.c: 21: RA1 = 1;
  2532  0979  1485               	bsf	5,1	;volatile
  2533                           
  2534                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2535  097A  3040               	movlw	64
  2536  097B  00F2               	movwf	??_Reset_EPS+2
  2537  097C  306A               	movlw	106
  2538  097D  00F1               	movwf	??_Reset_EPS+1
  2539  097E  3097               	movlw	151
  2540  097F  00F0               	movwf	??_Reset_EPS
  2541  0980                     u3597:	
  2542  0980  0BF0               	decfsz	??_Reset_EPS,f
  2543  0981  2980               	goto	u3597
  2544  0982  0BF1               	decfsz	??_Reset_EPS+1,f
  2545  0983  2980               	goto	u3597
  2546  0984  0BF2               	decfsz	??_Reset_EPS+2,f
  2547  0985  2980               	goto	u3597
  2548  0986  2987               	nop2
  2549                           
  2550                           ;EPS.c: 23: RB4 = 0;
  2551  0987  1283               	bcf	3,5	;RP0=0, select bank0
  2552  0988  1303               	bcf	3,6	;RP1=0, select bank0
  2553  0989  1206               	bcf	6,4	;volatile
  2554                           
  2555                           ;EPS.c: 24: RA1 = 0;
  2556  098A  1085               	bcf	5,1	;volatile
  2557                           
  2558                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2559  098B  3007               	movlw	7
  2560  098C  00F2               	movwf	??_Reset_EPS+2
  2561  098D  3058               	movlw	88
  2562  098E  00F1               	movwf	??_Reset_EPS+1
  2563  098F  3059               	movlw	89
  2564  0990  00F0               	movwf	??_Reset_EPS
  2565  0991                     u3607:	
  2566  0991  0BF0               	decfsz	??_Reset_EPS,f
  2567  0992  2991               	goto	u3607
  2568  0993  0BF1               	decfsz	??_Reset_EPS+1,f
  2569  0994  2991               	goto	u3607
  2570  0995  0BF2               	decfsz	??_Reset_EPS+2,f
  2571  0996  2991               	goto	u3607
  2572  0997  2998               	nop2
  2573  0998  0008               	return
  2574  0999                     __end_of_Reset_EPS:	
  2575                           
  2576                           	psect	text3
  2577  0CC8                     __ptext3:	
  2578 ;; *************** function _ReceivePacket_data *****************
  2579 ;; Defined at:
  2580 ;;		line 359 in file "decode_AX25.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;		None
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;  i               2   31[BANK0 ] unsigned int 
  2585 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      PTR unsigned char 
  2588 ;; Registers used:
  2589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2595 ;;      Params:         0       0       0       0       0
  2596 ;;      Locals:         0       4       0       0       0
  2597 ;;      Temps:          2       0       0       0       0
  2598 ;;      Totals:         2       4       0       0       0
  2599 ;;Total ram usage:        6 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    2
  2602 ;; This function calls:
  2603 ;;		_fcscheck
  2604 ;;		_getdata
  2605 ;;		_waitFlag
  2606 ;; This function is called by:
  2607 ;;		_main
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           
  2612                           ;psect for function _ReceivePacket_data
  2613  0CC8                     _ReceivePacket_data:	
  2614                           
  2615                           ;decode_AX25.c: 360: UINT fcschecker;
  2616                           ;decode_AX25.c: 363: waitFlag();
  2617                           
  2618                           ;incstack = 0
  2619                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2620  0CC8  120A  118A  2330  120A  158A  	fcall	_waitFlag
  2621                           
  2622                           ;decode_AX25.c: 365: getdata();
  2623  0CCD  120A  158A  2467  120A  158A  	fcall	_getdata
  2624                           
  2625                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2626  0CD2  120A  158A  25AA  120A  158A  	fcall	_fcscheck
  2627  0CD7  0871               	movf	?_fcscheck+1,w
  2628  0CD8  1283               	bcf	3,5	;RP0=0, select bank0
  2629  0CD9  1303               	bcf	3,6	;RP1=0, select bank0
  2630  0CDA  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2631  0CDB  0870               	movf	?_fcscheck,w
  2632  0CDC  00BD               	movwf	ReceivePacket_data@fcschecker
  2633                           
  2634                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2635  0CDD  033D               	decf	ReceivePacket_data@fcschecker,w
  2636  0CDE  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2637  0CDF  1D03               	btfss	3,2
  2638  0CE0  2D27               	goto	l3247
  2639                           
  2640                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2641  0CE1  01BF               	clrf	ReceivePacket_data@i
  2642  0CE2  01C0               	clrf	ReceivePacket_data@i+1
  2643  0CE3  3001               	movlw	low (_commandSize-__stringbase)
  2644  0CE4  0084               	movwf	4
  2645  0CE5  120A  158A  2000  120A  158A  	fcall	stringdir
  2646  0CEA  00FA               	movwf	??_ReceivePacket_data
  2647  0CEB  120A  158A  2000  120A  158A  	fcall	stringdir
  2648  0CF0  00FB               	movwf	??_ReceivePacket_data+1
  2649  0CF1  087B               	movf	??_ReceivePacket_data+1,w
  2650  0CF2  0240               	subwf	ReceivePacket_data@i+1,w
  2651  0CF3  1D03               	skipz
  2652  0CF4  2CF7               	goto	u3025
  2653  0CF5  087A               	movf	??_ReceivePacket_data,w
  2654  0CF6  023F               	subwf	ReceivePacket_data@i,w
  2655  0CF7                     u3025:	
  2656  0CF7  1803               	btfsc	3,0
  2657  0CF8  2D21               	goto	l3239
  2658  0CF9                     l3233:	
  2659                           
  2660                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2661  0CF9  083F               	movf	ReceivePacket_data@i,w
  2662  0CFA  3E14               	addlw	20
  2663  0CFB  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2664  0CFC  0084               	movwf	4
  2665  0CFD  1783               	bsf	3,7	;select IRP bank3
  2666  0CFE  0800               	movf	0,w
  2667  0CFF  00FA               	movwf	??_ReceivePacket_data
  2668  0D00  083F               	movf	ReceivePacket_data@i,w
  2669  0D01  3EC2               	addlw	(low (_dData| (0+256)))& (0+255)
  2670  0D02  0084               	movwf	4
  2671  0D03  087A               	movf	??_ReceivePacket_data,w
  2672  0D04  0080               	movwf	0
  2673  0D05  3001               	movlw	1
  2674  0D06  07BF               	addwf	ReceivePacket_data@i,f
  2675  0D07  1803               	skipnc
  2676  0D08  0AC0               	incf	ReceivePacket_data@i+1,f
  2677  0D09  3000               	movlw	0
  2678  0D0A  07C0               	addwf	ReceivePacket_data@i+1,f
  2679  0D0B  3001               	movlw	low (_commandSize-__stringbase)
  2680  0D0C  0084               	movwf	4
  2681  0D0D  120A  158A  2000  120A  158A  	fcall	stringdir
  2682  0D12  00FA               	movwf	??_ReceivePacket_data
  2683  0D13  120A  158A  2000  120A  158A  	fcall	stringdir
  2684  0D18  00FB               	movwf	??_ReceivePacket_data+1
  2685  0D19  087B               	movf	??_ReceivePacket_data+1,w
  2686  0D1A  0240               	subwf	ReceivePacket_data@i+1,w
  2687  0D1B  1D03               	skipz
  2688  0D1C  2D1F               	goto	u3035
  2689  0D1D  087A               	movf	??_ReceivePacket_data,w
  2690  0D1E  023F               	subwf	ReceivePacket_data@i,w
  2691  0D1F                     u3035:	
  2692  0D1F  1C03               	skipc
  2693  0D20  2CF9               	goto	l3233
  2694  0D21                     l3239:	
  2695                           
  2696                           ;decode_AX25.c: 372: }
  2697                           ;decode_AX25.c: 373: dPacketnum = 0;
  2698  0D21  01E7               	clrf	_dPacketnum
  2699  0D22  01E8               	clrf	_dPacketnum+1
  2700                           
  2701                           ;decode_AX25.c: 374: rcv_state = 0;
  2702  0D23  01E9               	clrf	_rcv_state
  2703  0D24  01EA               	clrf	_rcv_state+1
  2704                           
  2705                           ;decode_AX25.c: 375: return dData;
  2706  0D25  30C2               	movlw	(low (_dData| (0+256)))& (0+255)
  2707                           
  2708                           ;decode_AX25.c: 376: }else{
  2709  0D26  0008               	return
  2710  0D27                     l3247:	
  2711                           
  2712                           ;decode_AX25.c: 377: dPacketnum = 0;
  2713  0D27  01E7               	clrf	_dPacketnum
  2714  0D28  01E8               	clrf	_dPacketnum+1
  2715                           
  2716                           ;decode_AX25.c: 378: rcv_state = 0;
  2717  0D29  01E9               	clrf	_rcv_state
  2718  0D2A  01EA               	clrf	_rcv_state+1
  2719                           
  2720                           ;decode_AX25.c: 379: return 0x00;
  2721  0D2B  3000               	movlw	0
  2722  0D2C  0008               	return
  2723  0D2D                     __end_of_ReceivePacket_data:	
  2724                           
  2725                           	psect	text4
  2726  0330                     __ptext4:	
  2727 ;; *************** function _waitFlag *****************
  2728 ;; Defined at:
  2729 ;;		line 54 in file "decode_AX25.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;		None
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  j               2   24[BANK0 ] unsigned int 
  2734 ;;  j               2   10[BANK0 ] unsigned int 
  2735 ;;  j               2   22[BANK0 ] unsigned int 
  2736 ;;  j               2    8[BANK0 ] unsigned int 
  2737 ;;  j               2   20[BANK0 ] unsigned int 
  2738 ;;  j               2    6[BANK0 ] unsigned int 
  2739 ;;  j               2   18[BANK0 ] unsigned int 
  2740 ;;  j               2    4[BANK0 ] unsigned int 
  2741 ;;  j               2   16[BANK0 ] unsigned int 
  2742 ;;  j               2    2[BANK0 ] unsigned int 
  2743 ;;  i               2    0[BANK0 ] unsigned int 
  2744 ;;  j               2   14[BANK0 ] unsigned int 
  2745 ;;  j               2   12[BANK0 ] unsigned int 
  2746 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2747 ;;  buf             1   28[BANK0 ] unsigned char 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2757 ;;      Params:         0       0       0       0       0
  2758 ;;      Locals:         0      29       0       0       0
  2759 ;;      Temps:          4       0       0       0       0
  2760 ;;      Totals:         4      29       0       0       0
  2761 ;;Total ram usage:       33 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    1
  2764 ;; This function calls:
  2765 ;;		_getbit
  2766 ;; This function is called by:
  2767 ;;		_ReceivePacket_data
  2768 ;;		_ReceivePacket
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           
  2773                           ;psect for function _waitFlag
  2774  0330                     _waitFlag:	
  2775                           
  2776                           ;decode_AX25.c: 55: UINT flag_judge;
  2777                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2778                           
  2779                           ;incstack = 0
  2780                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2781  0330  30FF               	movlw	255
  2782  0331  00F6               	movwf	??_waitFlag
  2783  0332  0876               	movf	??_waitFlag,w
  2784  0333  1283               	bcf	3,5	;RP0=0, select bank0
  2785  0334  1303               	bcf	3,6	;RP1=0, select bank0
  2786  0335  00BC               	movwf	waitFlag@buf
  2787  0336                     L6:	
  2788                           
  2789                           ;decode_AX25.c: 271: rcv_state = 0;
  2790  0336  01E9               	clrf	_rcv_state
  2791  0337  01EA               	clrf	_rcv_state+1
  2792  0338                     l2917:	
  2793  0338  3000               	movlw	0
  2794  0339  026A               	subwf	_rcv_state+1,w
  2795  033A  3002               	movlw	2
  2796  033B  1903               	skipnz
  2797  033C  0269               	subwf	_rcv_state,w
  2798  033D  1803               	btfsc	3,0
  2799  033E  0008               	return
  2800  033F                     l2551:	
  2801                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2802                           
  2803                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2804                           
  2805                           ;decode_AX25.c: 57: rcv_state = 0;
  2806                           
  2807  033F  307E               	movlw	126
  2808  0340  063C               	xorwf	waitFlag@buf,w
  2809  0341  1903               	btfsc	3,2
  2810  0342  2B8F               	goto	l2573
  2811                           
  2812                           ;decode_AX25.c: 60: flag_judge = getbit();
  2813  0343  120A  158A  2369  120A  118A  	fcall	_getbit
  2814  0348  0871               	movf	?_getbit+1,w
  2815  0349  1283               	bcf	3,5	;RP0=0, select bank0
  2816  034A  1303               	bcf	3,6	;RP1=0, select bank0
  2817  034B  00BB               	movwf	waitFlag@flag_judge+1
  2818  034C  0870               	movf	?_getbit,w
  2819  034D  00BA               	movwf	waitFlag@flag_judge
  2820                           
  2821                           ;decode_AX25.c: 61: buf = buf << 1;
  2822  034E  083C               	movf	waitFlag@buf,w
  2823  034F  00F6               	movwf	??_waitFlag
  2824  0350  0776               	addwf	??_waitFlag,w
  2825  0351  00F7               	movwf	??_waitFlag+1
  2826  0352  0877               	movf	??_waitFlag+1,w
  2827  0353  00BC               	movwf	waitFlag@buf
  2828                           
  2829                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2830  0354  083A               	movf	waitFlag@flag_judge,w
  2831  0355  043B               	iorwf	waitFlag@flag_judge+1,w
  2832  0356  1903               	btfsc	3,2
  2833  0357  2B3F               	goto	l2551
  2834                           
  2835                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2836                           
  2837                           ;decode_AX25.c: 64: }else{
  2838  0358  083C               	movf	waitFlag@buf,w
  2839  0359  3801               	iorlw	1
  2840  035A  00F6               	movwf	??_waitFlag
  2841  035B  0876               	movf	??_waitFlag,w
  2842  035C  00BC               	movwf	waitFlag@buf
  2843  035D  2B3F               	goto	l2551
  2844  035E                     l2553:	
  2845                           ;decode_AX25.c: 66: }
  2846                           ;decode_AX25.c: 67: }
  2847                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2848                           
  2849                           
  2850                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2851  035E  01A0               	clrf	waitFlag@i
  2852  035F  01A1               	clrf	waitFlag@i+1
  2853  0360  3000               	movlw	0
  2854  0361  0221               	subwf	waitFlag@i+1,w
  2855  0362  3008               	movlw	8
  2856  0363  1903               	skipnz
  2857  0364  0220               	subwf	waitFlag@i,w
  2858  0365  1803               	btfsc	3,0
  2859  0366  2B8F               	goto	l2573
  2860  0367                     l2559:	
  2861                           
  2862                           ;decode_AX25.c: 73: flag_judge = getbit();
  2863  0367  120A  158A  2369  120A  118A  	fcall	_getbit
  2864  036C  0871               	movf	?_getbit+1,w
  2865  036D  1283               	bcf	3,5	;RP0=0, select bank0
  2866  036E  1303               	bcf	3,6	;RP1=0, select bank0
  2867  036F  00BB               	movwf	waitFlag@flag_judge+1
  2868  0370  0870               	movf	?_getbit,w
  2869  0371  00BA               	movwf	waitFlag@flag_judge
  2870                           
  2871                           ;decode_AX25.c: 74: buf = buf >> 1;
  2872  0372  083C               	movf	waitFlag@buf,w
  2873  0373  00F6               	movwf	??_waitFlag
  2874  0374  1003               	clrc
  2875  0375  0C76               	rrf	??_waitFlag,w
  2876  0376  00F7               	movwf	??_waitFlag+1
  2877  0377  0877               	movf	??_waitFlag+1,w
  2878  0378  00BC               	movwf	waitFlag@buf
  2879                           
  2880                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2881  0379  083A               	movf	waitFlag@flag_judge,w
  2882  037A  043B               	iorwf	waitFlag@flag_judge+1,w
  2883  037B  1903               	btfsc	3,2
  2884  037C  2B82               	goto	l2569
  2885                           
  2886                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2887                           
  2888                           ;decode_AX25.c: 77: }else{
  2889  037D  083C               	movf	waitFlag@buf,w
  2890  037E  3880               	iorlw	128
  2891  037F  00F6               	movwf	??_waitFlag
  2892  0380  0876               	movf	??_waitFlag,w
  2893  0381  00BC               	movwf	waitFlag@buf
  2894  0382                     l2569:	
  2895  0382  3001               	movlw	1
  2896  0383  07A0               	addwf	waitFlag@i,f
  2897  0384  1803               	skipnc
  2898  0385  0AA1               	incf	waitFlag@i+1,f
  2899  0386  3000               	movlw	0
  2900  0387  07A1               	addwf	waitFlag@i+1,f
  2901  0388  3000               	movlw	0
  2902  0389  0221               	subwf	waitFlag@i+1,w
  2903  038A  3008               	movlw	8
  2904  038B  1903               	skipnz
  2905  038C  0220               	subwf	waitFlag@i,w
  2906  038D  1C03               	skipc
  2907  038E  2B67               	goto	l2559
  2908  038F                     l2573:	
  2909  038F  307E               	movlw	126
  2910  0390  063C               	xorwf	waitFlag@buf,w
  2911  0391  1903               	btfsc	3,2
  2912  0392  2B5E               	goto	l2553
  2913                           
  2914                           ;decode_AX25.c: 79: }
  2915                           ;decode_AX25.c: 80: }
  2916                           ;decode_AX25.c: 81: }
  2917                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2918  0393  300A               	movlw	low (STR_1-__stringbase)
  2919  0394  0084               	movwf	4
  2920  0395  120A  158A  2000  120A  118A  	fcall	stringdir
  2921  039A  00F6               	movwf	??_waitFlag
  2922  039B  01F7               	clrf	??_waitFlag+1
  2923  039C  1003               	clrc
  2924  039D  0DF6               	rlf	??_waitFlag,f
  2925  039E  0DF7               	rlf	??_waitFlag+1,f
  2926  039F  083C               	movf	waitFlag@buf,w
  2927  03A0  00F8               	movwf	??_waitFlag+2
  2928  03A1  01F9               	clrf	??_waitFlag+3
  2929  03A2  0877               	movf	??_waitFlag+1,w
  2930  03A3  0679               	xorwf	??_waitFlag+3,w
  2931  03A4  1D03               	skipz
  2932  03A5  2BA8               	goto	u2115
  2933  03A6  0876               	movf	??_waitFlag,w
  2934  03A7  0678               	xorwf	??_waitFlag+2,w
  2935  03A8                     u2115:	
  2936  03A8  1D03               	skipz
  2937  03A9  2D6D               	goto	l2723
  2938                           
  2939                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2940  03AA  083C               	movf	waitFlag@buf,w
  2941  03AB  00F6               	movwf	??_waitFlag
  2942  03AC  0867               	movf	_dPacketnum,w
  2943  03AD  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  2944  03AE  0084               	movwf	4
  2945  03AF  0876               	movf	??_waitFlag,w
  2946  03B0  1783               	bsf	3,7	;select IRP bank3
  2947  03B1  0080               	movwf	0
  2948                           
  2949                           ;decode_AX25.c: 84: dPacketnum ++;
  2950  03B2  3001               	movlw	1
  2951  03B3  07E7               	addwf	_dPacketnum,f
  2952  03B4  1803               	skipnc
  2953  03B5  0AE8               	incf	_dPacketnum+1,f
  2954  03B6  3000               	movlw	0
  2955  03B7  07E8               	addwf	_dPacketnum+1,f
  2956                           
  2957                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2958  03B8  01A2               	clrf	waitFlag@j
  2959  03B9  01A3               	clrf	waitFlag@j+1
  2960  03BA  3000               	movlw	0
  2961  03BB  0223               	subwf	waitFlag@j+1,w
  2962  03BC  3008               	movlw	8
  2963  03BD  1903               	skipnz
  2964  03BE  0222               	subwf	waitFlag@j,w
  2965  03BF  1803               	btfsc	3,0
  2966  03C0  2BE9               	goto	l2601
  2967  03C1                     l2587:	
  2968                           
  2969                           ;decode_AX25.c: 86: flag_judge = getbit();
  2970  03C1  120A  158A  2369  120A  118A  	fcall	_getbit
  2971  03C6  0871               	movf	?_getbit+1,w
  2972  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  2973  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  2974  03C9  00BB               	movwf	waitFlag@flag_judge+1
  2975  03CA  0870               	movf	?_getbit,w
  2976  03CB  00BA               	movwf	waitFlag@flag_judge
  2977                           
  2978                           ;decode_AX25.c: 87: buf = buf >> 1;
  2979  03CC  083C               	movf	waitFlag@buf,w
  2980  03CD  00F6               	movwf	??_waitFlag
  2981  03CE  1003               	clrc
  2982  03CF  0C76               	rrf	??_waitFlag,w
  2983  03D0  00F7               	movwf	??_waitFlag+1
  2984  03D1  0877               	movf	??_waitFlag+1,w
  2985  03D2  00BC               	movwf	waitFlag@buf
  2986                           
  2987                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2988  03D3  083A               	movf	waitFlag@flag_judge,w
  2989  03D4  043B               	iorwf	waitFlag@flag_judge+1,w
  2990  03D5  1903               	btfsc	3,2
  2991  03D6  2BDC               	goto	l2597
  2992                           
  2993                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2994                           
  2995                           ;decode_AX25.c: 90: }else{
  2996  03D7  083C               	movf	waitFlag@buf,w
  2997  03D8  3880               	iorlw	128
  2998  03D9  00F6               	movwf	??_waitFlag
  2999  03DA  0876               	movf	??_waitFlag,w
  3000  03DB  00BC               	movwf	waitFlag@buf
  3001  03DC                     l2597:	
  3002  03DC  3001               	movlw	1
  3003  03DD  07A2               	addwf	waitFlag@j,f
  3004  03DE  1803               	skipnc
  3005  03DF  0AA3               	incf	waitFlag@j+1,f
  3006  03E0  3000               	movlw	0
  3007  03E1  07A3               	addwf	waitFlag@j+1,f
  3008  03E2  3000               	movlw	0
  3009  03E3  0223               	subwf	waitFlag@j+1,w
  3010  03E4  3008               	movlw	8
  3011  03E5  1903               	skipnz
  3012  03E6  0222               	subwf	waitFlag@j,w
  3013  03E7  1C03               	skipc
  3014  03E8  2BC1               	goto	l2587
  3015  03E9                     l2601:	
  3016                           
  3017                           ;decode_AX25.c: 92: }
  3018                           ;decode_AX25.c: 93: }
  3019                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  3020  03E9  300B               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  3021  03EA  0084               	movwf	4
  3022  03EB  120A  158A  2000  120A  118A  	fcall	stringdir
  3023  03F0  00F6               	movwf	??_waitFlag
  3024  03F1  01F7               	clrf	??_waitFlag+1
  3025  03F2  1003               	clrc
  3026  03F3  0DF6               	rlf	??_waitFlag,f
  3027  03F4  0DF7               	rlf	??_waitFlag+1,f
  3028  03F5  083C               	movf	waitFlag@buf,w
  3029  03F6  00F8               	movwf	??_waitFlag+2
  3030  03F7  01F9               	clrf	??_waitFlag+3
  3031  03F8  0877               	movf	??_waitFlag+1,w
  3032  03F9  0679               	xorwf	??_waitFlag+3,w
  3033  03FA  1D03               	skipz
  3034  03FB  2BFE               	goto	u2155
  3035  03FC  0876               	movf	??_waitFlag,w
  3036  03FD  0678               	xorwf	??_waitFlag+2,w
  3037  03FE                     u2155:	
  3038  03FE  1D03               	skipz
  3039  03FF  2D6D               	goto	l2723
  3040                           
  3041                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  3042  0400  083C               	movf	waitFlag@buf,w
  3043  0401  00F6               	movwf	??_waitFlag
  3044  0402  0867               	movf	_dPacketnum,w
  3045  0403  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3046  0404  0084               	movwf	4
  3047  0405  0876               	movf	??_waitFlag,w
  3048  0406  1783               	bsf	3,7	;select IRP bank3
  3049  0407  0080               	movwf	0
  3050                           
  3051                           ;decode_AX25.c: 96: dPacketnum ++;
  3052  0408  3001               	movlw	1
  3053  0409  07E7               	addwf	_dPacketnum,f
  3054  040A  1803               	skipnc
  3055  040B  0AE8               	incf	_dPacketnum+1,f
  3056  040C  3000               	movlw	0
  3057  040D  07E8               	addwf	_dPacketnum+1,f
  3058                           
  3059                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  3060  040E  01A4               	clrf	waitFlag@j_104
  3061  040F  01A5               	clrf	waitFlag@j_104+1
  3062  0410  3000               	movlw	0
  3063  0411  0225               	subwf	waitFlag@j_104+1,w
  3064  0412  3008               	movlw	8
  3065  0413  1903               	skipnz
  3066  0414  0224               	subwf	waitFlag@j_104,w
  3067  0415  1803               	btfsc	3,0
  3068  0416  2C3F               	goto	l2627
  3069  0417                     l2613:	
  3070                           
  3071                           ;decode_AX25.c: 98: flag_judge = getbit();
  3072  0417  120A  158A  2369  120A  118A  	fcall	_getbit
  3073  041C  0871               	movf	?_getbit+1,w
  3074  041D  1283               	bcf	3,5	;RP0=0, select bank0
  3075  041E  1303               	bcf	3,6	;RP1=0, select bank0
  3076  041F  00BB               	movwf	waitFlag@flag_judge+1
  3077  0420  0870               	movf	?_getbit,w
  3078  0421  00BA               	movwf	waitFlag@flag_judge
  3079                           
  3080                           ;decode_AX25.c: 99: buf = buf >> 1;
  3081  0422  083C               	movf	waitFlag@buf,w
  3082  0423  00F6               	movwf	??_waitFlag
  3083  0424  1003               	clrc
  3084  0425  0C76               	rrf	??_waitFlag,w
  3085  0426  00F7               	movwf	??_waitFlag+1
  3086  0427  0877               	movf	??_waitFlag+1,w
  3087  0428  00BC               	movwf	waitFlag@buf
  3088                           
  3089                           ;decode_AX25.c: 101: buf = buf | 0x00;
  3090  0429  083A               	movf	waitFlag@flag_judge,w
  3091  042A  043B               	iorwf	waitFlag@flag_judge+1,w
  3092  042B  1903               	btfsc	3,2
  3093  042C  2C32               	goto	l2623
  3094                           
  3095                           ;decode_AX25.c: 103: buf = buf | 0x80;
  3096                           
  3097                           ;decode_AX25.c: 102: }else{
  3098  042D  083C               	movf	waitFlag@buf,w
  3099  042E  3880               	iorlw	128
  3100  042F  00F6               	movwf	??_waitFlag
  3101  0430  0876               	movf	??_waitFlag,w
  3102  0431  00BC               	movwf	waitFlag@buf
  3103  0432                     l2623:	
  3104  0432  3001               	movlw	1
  3105  0433  07A4               	addwf	waitFlag@j_104,f
  3106  0434  1803               	skipnc
  3107  0435  0AA5               	incf	waitFlag@j_104+1,f
  3108  0436  3000               	movlw	0
  3109  0437  07A5               	addwf	waitFlag@j_104+1,f
  3110  0438  3000               	movlw	0
  3111  0439  0225               	subwf	waitFlag@j_104+1,w
  3112  043A  3008               	movlw	8
  3113  043B  1903               	skipnz
  3114  043C  0224               	subwf	waitFlag@j_104,w
  3115  043D  1C03               	skipc
  3116  043E  2C17               	goto	l2613
  3117  043F                     l2627:	
  3118                           
  3119                           ;decode_AX25.c: 104: }
  3120                           ;decode_AX25.c: 105: }
  3121                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  3122  043F  300C               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  3123  0440  0084               	movwf	4
  3124  0441  120A  158A  2000  120A  118A  	fcall	stringdir
  3125  0446  00F6               	movwf	??_waitFlag
  3126  0447  01F7               	clrf	??_waitFlag+1
  3127  0448  1003               	clrc
  3128  0449  0DF6               	rlf	??_waitFlag,f
  3129  044A  0DF7               	rlf	??_waitFlag+1,f
  3130  044B  083C               	movf	waitFlag@buf,w
  3131  044C  00F8               	movwf	??_waitFlag+2
  3132  044D  01F9               	clrf	??_waitFlag+3
  3133  044E  0877               	movf	??_waitFlag+1,w
  3134  044F  0679               	xorwf	??_waitFlag+3,w
  3135  0450  1D03               	skipz
  3136  0451  2C54               	goto	u2195
  3137  0452  0876               	movf	??_waitFlag,w
  3138  0453  0678               	xorwf	??_waitFlag+2,w
  3139  0454                     u2195:	
  3140  0454  1D03               	skipz
  3141  0455  2D6D               	goto	l2723
  3142                           
  3143                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  3144  0456  083C               	movf	waitFlag@buf,w
  3145  0457  00F6               	movwf	??_waitFlag
  3146  0458  0867               	movf	_dPacketnum,w
  3147  0459  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3148  045A  0084               	movwf	4
  3149  045B  0876               	movf	??_waitFlag,w
  3150  045C  1783               	bsf	3,7	;select IRP bank3
  3151  045D  0080               	movwf	0
  3152                           
  3153                           ;decode_AX25.c: 108: dPacketnum ++;
  3154  045E  3001               	movlw	1
  3155  045F  07E7               	addwf	_dPacketnum,f
  3156  0460  1803               	skipnc
  3157  0461  0AE8               	incf	_dPacketnum+1,f
  3158  0462  3000               	movlw	0
  3159  0463  07E8               	addwf	_dPacketnum+1,f
  3160                           
  3161                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  3162  0464  01A6               	clrf	waitFlag@j_106
  3163  0465  01A7               	clrf	waitFlag@j_106+1
  3164  0466  3000               	movlw	0
  3165  0467  0227               	subwf	waitFlag@j_106+1,w
  3166  0468  3008               	movlw	8
  3167  0469  1903               	skipnz
  3168  046A  0226               	subwf	waitFlag@j_106,w
  3169  046B  1803               	btfsc	3,0
  3170  046C  2C95               	goto	l2653
  3171  046D                     l2639:	
  3172                           
  3173                           ;decode_AX25.c: 110: flag_judge = getbit();
  3174  046D  120A  158A  2369  120A  118A  	fcall	_getbit
  3175  0472  0871               	movf	?_getbit+1,w
  3176  0473  1283               	bcf	3,5	;RP0=0, select bank0
  3177  0474  1303               	bcf	3,6	;RP1=0, select bank0
  3178  0475  00BB               	movwf	waitFlag@flag_judge+1
  3179  0476  0870               	movf	?_getbit,w
  3180  0477  00BA               	movwf	waitFlag@flag_judge
  3181                           
  3182                           ;decode_AX25.c: 111: buf = buf >> 1;
  3183  0478  083C               	movf	waitFlag@buf,w
  3184  0479  00F6               	movwf	??_waitFlag
  3185  047A  1003               	clrc
  3186  047B  0C76               	rrf	??_waitFlag,w
  3187  047C  00F7               	movwf	??_waitFlag+1
  3188  047D  0877               	movf	??_waitFlag+1,w
  3189  047E  00BC               	movwf	waitFlag@buf
  3190                           
  3191                           ;decode_AX25.c: 113: buf = buf | 0x00;
  3192  047F  083A               	movf	waitFlag@flag_judge,w
  3193  0480  043B               	iorwf	waitFlag@flag_judge+1,w
  3194  0481  1903               	btfsc	3,2
  3195  0482  2C88               	goto	l2649
  3196                           
  3197                           ;decode_AX25.c: 115: buf = buf | 0x80;
  3198                           
  3199                           ;decode_AX25.c: 114: }else{
  3200  0483  083C               	movf	waitFlag@buf,w
  3201  0484  3880               	iorlw	128
  3202  0485  00F6               	movwf	??_waitFlag
  3203  0486  0876               	movf	??_waitFlag,w
  3204  0487  00BC               	movwf	waitFlag@buf
  3205  0488                     l2649:	
  3206  0488  3001               	movlw	1
  3207  0489  07A6               	addwf	waitFlag@j_106,f
  3208  048A  1803               	skipnc
  3209  048B  0AA7               	incf	waitFlag@j_106+1,f
  3210  048C  3000               	movlw	0
  3211  048D  07A7               	addwf	waitFlag@j_106+1,f
  3212  048E  3000               	movlw	0
  3213  048F  0227               	subwf	waitFlag@j_106+1,w
  3214  0490  3008               	movlw	8
  3215  0491  1903               	skipnz
  3216  0492  0226               	subwf	waitFlag@j_106,w
  3217  0493  1C03               	skipc
  3218  0494  2C6D               	goto	l2639
  3219  0495                     l2653:	
  3220                           
  3221                           ;decode_AX25.c: 116: }
  3222                           ;decode_AX25.c: 117: }
  3223                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  3224  0495  300D               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  3225  0496  0084               	movwf	4
  3226  0497  120A  158A  2000  120A  118A  	fcall	stringdir
  3227  049C  00F6               	movwf	??_waitFlag
  3228  049D  01F7               	clrf	??_waitFlag+1
  3229  049E  1003               	clrc
  3230  049F  0DF6               	rlf	??_waitFlag,f
  3231  04A0  0DF7               	rlf	??_waitFlag+1,f
  3232  04A1  083C               	movf	waitFlag@buf,w
  3233  04A2  00F8               	movwf	??_waitFlag+2
  3234  04A3  01F9               	clrf	??_waitFlag+3
  3235  04A4  0877               	movf	??_waitFlag+1,w
  3236  04A5  0679               	xorwf	??_waitFlag+3,w
  3237  04A6  1D03               	skipz
  3238  04A7  2CAA               	goto	u2235
  3239  04A8  0876               	movf	??_waitFlag,w
  3240  04A9  0678               	xorwf	??_waitFlag+2,w
  3241  04AA                     u2235:	
  3242  04AA  1D03               	skipz
  3243  04AB  2D6D               	goto	l2723
  3244                           
  3245                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3246  04AC  083C               	movf	waitFlag@buf,w
  3247  04AD  00F6               	movwf	??_waitFlag
  3248  04AE  0867               	movf	_dPacketnum,w
  3249  04AF  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3250  04B0  0084               	movwf	4
  3251  04B1  0876               	movf	??_waitFlag,w
  3252  04B2  1783               	bsf	3,7	;select IRP bank3
  3253  04B3  0080               	movwf	0
  3254                           
  3255                           ;decode_AX25.c: 120: dPacketnum ++;
  3256  04B4  3001               	movlw	1
  3257  04B5  07E7               	addwf	_dPacketnum,f
  3258  04B6  1803               	skipnc
  3259  04B7  0AE8               	incf	_dPacketnum+1,f
  3260  04B8  3000               	movlw	0
  3261  04B9  07E8               	addwf	_dPacketnum+1,f
  3262                           
  3263                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3264  04BA  01A8               	clrf	waitFlag@j_108
  3265  04BB  01A9               	clrf	waitFlag@j_108+1
  3266  04BC  3000               	movlw	0
  3267  04BD  0229               	subwf	waitFlag@j_108+1,w
  3268  04BE  3008               	movlw	8
  3269  04BF  1903               	skipnz
  3270  04C0  0228               	subwf	waitFlag@j_108,w
  3271  04C1  1803               	btfsc	3,0
  3272  04C2  2CEB               	goto	l2679
  3273  04C3                     l2665:	
  3274                           
  3275                           ;decode_AX25.c: 122: flag_judge = getbit();
  3276  04C3  120A  158A  2369  120A  118A  	fcall	_getbit
  3277  04C8  0871               	movf	?_getbit+1,w
  3278  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  3279  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  3280  04CB  00BB               	movwf	waitFlag@flag_judge+1
  3281  04CC  0870               	movf	?_getbit,w
  3282  04CD  00BA               	movwf	waitFlag@flag_judge
  3283                           
  3284                           ;decode_AX25.c: 123: buf = buf >> 1;
  3285  04CE  083C               	movf	waitFlag@buf,w
  3286  04CF  00F6               	movwf	??_waitFlag
  3287  04D0  1003               	clrc
  3288  04D1  0C76               	rrf	??_waitFlag,w
  3289  04D2  00F7               	movwf	??_waitFlag+1
  3290  04D3  0877               	movf	??_waitFlag+1,w
  3291  04D4  00BC               	movwf	waitFlag@buf
  3292                           
  3293                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3294  04D5  083A               	movf	waitFlag@flag_judge,w
  3295  04D6  043B               	iorwf	waitFlag@flag_judge+1,w
  3296  04D7  1903               	btfsc	3,2
  3297  04D8  2CDE               	goto	l2675
  3298                           
  3299                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3300                           
  3301                           ;decode_AX25.c: 126: }else{
  3302  04D9  083C               	movf	waitFlag@buf,w
  3303  04DA  3880               	iorlw	128
  3304  04DB  00F6               	movwf	??_waitFlag
  3305  04DC  0876               	movf	??_waitFlag,w
  3306  04DD  00BC               	movwf	waitFlag@buf
  3307  04DE                     l2675:	
  3308  04DE  3001               	movlw	1
  3309  04DF  07A8               	addwf	waitFlag@j_108,f
  3310  04E0  1803               	skipnc
  3311  04E1  0AA9               	incf	waitFlag@j_108+1,f
  3312  04E2  3000               	movlw	0
  3313  04E3  07A9               	addwf	waitFlag@j_108+1,f
  3314  04E4  3000               	movlw	0
  3315  04E5  0229               	subwf	waitFlag@j_108+1,w
  3316  04E6  3008               	movlw	8
  3317  04E7  1903               	skipnz
  3318  04E8  0228               	subwf	waitFlag@j_108,w
  3319  04E9  1C03               	skipc
  3320  04EA  2CC3               	goto	l2665
  3321  04EB                     l2679:	
  3322                           
  3323                           ;decode_AX25.c: 128: }
  3324                           ;decode_AX25.c: 129: }
  3325                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3326  04EB  300E               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3327  04EC  0084               	movwf	4
  3328  04ED  120A  158A  2000  120A  118A  	fcall	stringdir
  3329  04F2  00F6               	movwf	??_waitFlag
  3330  04F3  01F7               	clrf	??_waitFlag+1
  3331  04F4  1003               	clrc
  3332  04F5  0DF6               	rlf	??_waitFlag,f
  3333  04F6  0DF7               	rlf	??_waitFlag+1,f
  3334  04F7  083C               	movf	waitFlag@buf,w
  3335  04F8  00F8               	movwf	??_waitFlag+2
  3336  04F9  01F9               	clrf	??_waitFlag+3
  3337  04FA  0877               	movf	??_waitFlag+1,w
  3338  04FB  0679               	xorwf	??_waitFlag+3,w
  3339  04FC  1D03               	skipz
  3340  04FD  2D00               	goto	u2275
  3341  04FE  0876               	movf	??_waitFlag,w
  3342  04FF  0678               	xorwf	??_waitFlag+2,w
  3343  0500                     u2275:	
  3344  0500  1D03               	skipz
  3345  0501  2D6D               	goto	l2723
  3346                           
  3347                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3348  0502  083C               	movf	waitFlag@buf,w
  3349  0503  00F6               	movwf	??_waitFlag
  3350  0504  0867               	movf	_dPacketnum,w
  3351  0505  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3352  0506  0084               	movwf	4
  3353  0507  0876               	movf	??_waitFlag,w
  3354  0508  1783               	bsf	3,7	;select IRP bank3
  3355  0509  0080               	movwf	0
  3356                           
  3357                           ;decode_AX25.c: 132: dPacketnum ++;
  3358  050A  3001               	movlw	1
  3359  050B  07E7               	addwf	_dPacketnum,f
  3360  050C  1803               	skipnc
  3361  050D  0AE8               	incf	_dPacketnum+1,f
  3362  050E  3000               	movlw	0
  3363  050F  07E8               	addwf	_dPacketnum+1,f
  3364                           
  3365                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3366  0510  01AA               	clrf	waitFlag@j_110
  3367  0511  01AB               	clrf	waitFlag@j_110+1
  3368  0512  3000               	movlw	0
  3369  0513  022B               	subwf	waitFlag@j_110+1,w
  3370  0514  3008               	movlw	8
  3371  0515  1903               	skipnz
  3372  0516  022A               	subwf	waitFlag@j_110,w
  3373  0517  1803               	btfsc	3,0
  3374  0518  2D41               	goto	l2705
  3375  0519                     l2691:	
  3376                           
  3377                           ;decode_AX25.c: 134: flag_judge = getbit();
  3378  0519  120A  158A  2369  120A  118A  	fcall	_getbit
  3379  051E  0871               	movf	?_getbit+1,w
  3380  051F  1283               	bcf	3,5	;RP0=0, select bank0
  3381  0520  1303               	bcf	3,6	;RP1=0, select bank0
  3382  0521  00BB               	movwf	waitFlag@flag_judge+1
  3383  0522  0870               	movf	?_getbit,w
  3384  0523  00BA               	movwf	waitFlag@flag_judge
  3385                           
  3386                           ;decode_AX25.c: 135: buf = buf >> 1;
  3387  0524  083C               	movf	waitFlag@buf,w
  3388  0525  00F6               	movwf	??_waitFlag
  3389  0526  1003               	clrc
  3390  0527  0C76               	rrf	??_waitFlag,w
  3391  0528  00F7               	movwf	??_waitFlag+1
  3392  0529  0877               	movf	??_waitFlag+1,w
  3393  052A  00BC               	movwf	waitFlag@buf
  3394                           
  3395                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3396  052B  083A               	movf	waitFlag@flag_judge,w
  3397  052C  043B               	iorwf	waitFlag@flag_judge+1,w
  3398  052D  1903               	btfsc	3,2
  3399  052E  2D34               	goto	l2701
  3400                           
  3401                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3402                           
  3403                           ;decode_AX25.c: 138: }else{
  3404  052F  083C               	movf	waitFlag@buf,w
  3405  0530  3880               	iorlw	128
  3406  0531  00F6               	movwf	??_waitFlag
  3407  0532  0876               	movf	??_waitFlag,w
  3408  0533  00BC               	movwf	waitFlag@buf
  3409  0534                     l2701:	
  3410  0534  3001               	movlw	1
  3411  0535  07AA               	addwf	waitFlag@j_110,f
  3412  0536  1803               	skipnc
  3413  0537  0AAB               	incf	waitFlag@j_110+1,f
  3414  0538  3000               	movlw	0
  3415  0539  07AB               	addwf	waitFlag@j_110+1,f
  3416  053A  3000               	movlw	0
  3417  053B  022B               	subwf	waitFlag@j_110+1,w
  3418  053C  3008               	movlw	8
  3419  053D  1903               	skipnz
  3420  053E  022A               	subwf	waitFlag@j_110,w
  3421  053F  1C03               	skipc
  3422  0540  2D19               	goto	l2691
  3423  0541                     l2705:	
  3424                           
  3425                           ;decode_AX25.c: 140: }
  3426                           ;decode_AX25.c: 141: }
  3427                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3428  0541  300F               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3429  0542  0084               	movwf	4
  3430  0543  120A  158A  2000  120A  118A  	fcall	stringdir
  3431  0548  00F6               	movwf	??_waitFlag
  3432  0549  01F7               	clrf	??_waitFlag+1
  3433  054A  1003               	clrc
  3434  054B  0DF6               	rlf	??_waitFlag,f
  3435  054C  0DF7               	rlf	??_waitFlag+1,f
  3436  054D  083C               	movf	waitFlag@buf,w
  3437  054E  00F8               	movwf	??_waitFlag+2
  3438  054F  01F9               	clrf	??_waitFlag+3
  3439  0550  0877               	movf	??_waitFlag+1,w
  3440  0551  0679               	xorwf	??_waitFlag+3,w
  3441  0552  1D03               	skipz
  3442  0553  2D56               	goto	u2315
  3443  0554  0876               	movf	??_waitFlag,w
  3444  0555  0678               	xorwf	??_waitFlag+2,w
  3445  0556                     u2315:	
  3446  0556  1D03               	skipz
  3447  0557  2D6D               	goto	l2723
  3448                           
  3449                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3450  0558  083C               	movf	waitFlag@buf,w
  3451  0559  00F6               	movwf	??_waitFlag
  3452  055A  0867               	movf	_dPacketnum,w
  3453  055B  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3454  055C  0084               	movwf	4
  3455  055D  0876               	movf	??_waitFlag,w
  3456  055E  1783               	bsf	3,7	;select IRP bank3
  3457  055F  0080               	movwf	0
  3458                           
  3459                           ;decode_AX25.c: 144: dPacketnum ++;
  3460  0560  3001               	movlw	1
  3461  0561  07E7               	addwf	_dPacketnum,f
  3462  0562  1803               	skipnc
  3463  0563  0AE8               	incf	_dPacketnum+1,f
  3464  0564  3000               	movlw	0
  3465  0565  07E8               	addwf	_dPacketnum+1,f
  3466                           
  3467                           ;decode_AX25.c: 145: rcv_state ++;
  3468  0566  3001               	movlw	1
  3469  0567  07E9               	addwf	_rcv_state,f
  3470  0568  1803               	skipnc
  3471  0569  0AEA               	incf	_rcv_state+1,f
  3472  056A  3000               	movlw	0
  3473  056B  07EA               	addwf	_rcv_state+1,f
  3474                           
  3475                           ;decode_AX25.c: 146: }else{
  3476  056C  2D6F               	goto	l179
  3477  056D                     l2723:	
  3478                           ;decode_AX25.c: 160: }
  3479                           ;decode_AX25.c: 161: }else{
  3480                           
  3481                           ;decode_AX25.c: 159: dPacketnum = 0;
  3482                           
  3483                           ;decode_AX25.c: 157: }
  3484                           ;decode_AX25.c: 158: }else{
  3485                           
  3486                           ;decode_AX25.c: 156: dPacketnum = 0;
  3487                           
  3488                           ;decode_AX25.c: 154: }
  3489                           ;decode_AX25.c: 155: }else{
  3490                           
  3491                           ;decode_AX25.c: 153: dPacketnum = 0;
  3492                           
  3493                           ;decode_AX25.c: 151: }
  3494                           ;decode_AX25.c: 152: }else{
  3495                           
  3496                           ;decode_AX25.c: 150: dPacketnum = 0;
  3497                           
  3498                           ;decode_AX25.c: 148: }
  3499                           ;decode_AX25.c: 149: }else{
  3500                           
  3501                           ;decode_AX25.c: 147: dPacketnum = 0;
  3502                           
  3503                           
  3504                           ;decode_AX25.c: 162: dPacketnum = 0;
  3505  056D  01E7               	clrf	_dPacketnum
  3506  056E  01E8               	clrf	_dPacketnum+1
  3507  056F                     l179:	
  3508                           
  3509                           ;decode_AX25.c: 163: }
  3510                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3511  056F  01AC               	clrf	waitFlag@j_112
  3512  0570  01AD               	clrf	waitFlag@j_112+1
  3513  0571  3000               	movlw	0
  3514  0572  022D               	subwf	waitFlag@j_112+1,w
  3515  0573  3008               	movlw	8
  3516  0574  1903               	skipnz
  3517  0575  022C               	subwf	waitFlag@j_112,w
  3518  0576  1803               	btfsc	3,0
  3519  0577  2DA0               	goto	l2743
  3520  0578                     l2729:	
  3521                           
  3522                           ;decode_AX25.c: 166: flag_judge = getbit();
  3523  0578  120A  158A  2369  120A  118A  	fcall	_getbit
  3524  057D  0871               	movf	?_getbit+1,w
  3525  057E  1283               	bcf	3,5	;RP0=0, select bank0
  3526  057F  1303               	bcf	3,6	;RP1=0, select bank0
  3527  0580  00BB               	movwf	waitFlag@flag_judge+1
  3528  0581  0870               	movf	?_getbit,w
  3529  0582  00BA               	movwf	waitFlag@flag_judge
  3530                           
  3531                           ;decode_AX25.c: 167: buf = buf >> 1;
  3532  0583  083C               	movf	waitFlag@buf,w
  3533  0584  00F6               	movwf	??_waitFlag
  3534  0585  1003               	clrc
  3535  0586  0C76               	rrf	??_waitFlag,w
  3536  0587  00F7               	movwf	??_waitFlag+1
  3537  0588  0877               	movf	??_waitFlag+1,w
  3538  0589  00BC               	movwf	waitFlag@buf
  3539                           
  3540                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3541  058A  083A               	movf	waitFlag@flag_judge,w
  3542  058B  043B               	iorwf	waitFlag@flag_judge+1,w
  3543  058C  1903               	btfsc	3,2
  3544  058D  2D93               	goto	l2739
  3545                           
  3546                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3547                           
  3548                           ;decode_AX25.c: 170: }else{
  3549  058E  083C               	movf	waitFlag@buf,w
  3550  058F  3880               	iorlw	128
  3551  0590  00F6               	movwf	??_waitFlag
  3552  0591  0876               	movf	??_waitFlag,w
  3553  0592  00BC               	movwf	waitFlag@buf
  3554  0593                     l2739:	
  3555  0593  3001               	movlw	1
  3556  0594  07AC               	addwf	waitFlag@j_112,f
  3557  0595  1803               	skipnc
  3558  0596  0AAD               	incf	waitFlag@j_112+1,f
  3559  0597  3000               	movlw	0
  3560  0598  07AD               	addwf	waitFlag@j_112+1,f
  3561  0599  3000               	movlw	0
  3562  059A  022D               	subwf	waitFlag@j_112+1,w
  3563  059B  3008               	movlw	8
  3564  059C  1903               	skipnz
  3565  059D  022C               	subwf	waitFlag@j_112,w
  3566  059E  1C03               	skipc
  3567  059F  2D78               	goto	l2729
  3568  05A0                     l2743:	
  3569                           
  3570                           ;decode_AX25.c: 172: }
  3571                           ;decode_AX25.c: 173: }
  3572                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3573  05A0  083C               	movf	waitFlag@buf,w
  3574  05A1  00F6               	movwf	??_waitFlag
  3575  05A2  0867               	movf	_dPacketnum,w
  3576  05A3  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3577  05A4  0084               	movwf	4
  3578  05A5  0876               	movf	??_waitFlag,w
  3579  05A6  1783               	bsf	3,7	;select IRP bank3
  3580  05A7  0080               	movwf	0
  3581                           
  3582                           ;decode_AX25.c: 175: dPacketnum ++;
  3583  05A8  3001               	movlw	1
  3584  05A9  07E7               	addwf	_dPacketnum,f
  3585  05AA  1803               	skipnc
  3586  05AB  0AE8               	incf	_dPacketnum+1,f
  3587  05AC  3000               	movlw	0
  3588  05AD  07E8               	addwf	_dPacketnum+1,f
  3589                           
  3590                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3591  05AE  01AE               	clrf	waitFlag@j_113
  3592  05AF  01AF               	clrf	waitFlag@j_113+1
  3593  05B0  3000               	movlw	0
  3594  05B1  022F               	subwf	waitFlag@j_113+1,w
  3595  05B2  3008               	movlw	8
  3596  05B3  1903               	skipnz
  3597  05B4  022E               	subwf	waitFlag@j_113,w
  3598  05B5  1803               	btfsc	3,0
  3599  05B6  2DDF               	goto	l2767
  3600  05B7                     l2753:	
  3601                           
  3602                           ;decode_AX25.c: 177: flag_judge = getbit();
  3603  05B7  120A  158A  2369  120A  118A  	fcall	_getbit
  3604  05BC  0871               	movf	?_getbit+1,w
  3605  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  3606  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  3607  05BF  00BB               	movwf	waitFlag@flag_judge+1
  3608  05C0  0870               	movf	?_getbit,w
  3609  05C1  00BA               	movwf	waitFlag@flag_judge
  3610                           
  3611                           ;decode_AX25.c: 178: buf = buf >> 1;
  3612  05C2  083C               	movf	waitFlag@buf,w
  3613  05C3  00F6               	movwf	??_waitFlag
  3614  05C4  1003               	clrc
  3615  05C5  0C76               	rrf	??_waitFlag,w
  3616  05C6  00F7               	movwf	??_waitFlag+1
  3617  05C7  0877               	movf	??_waitFlag+1,w
  3618  05C8  00BC               	movwf	waitFlag@buf
  3619                           
  3620                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3621  05C9  083A               	movf	waitFlag@flag_judge,w
  3622  05CA  043B               	iorwf	waitFlag@flag_judge+1,w
  3623  05CB  1903               	btfsc	3,2
  3624  05CC  2DD2               	goto	l2763
  3625                           
  3626                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3627                           
  3628                           ;decode_AX25.c: 181: }else{
  3629  05CD  083C               	movf	waitFlag@buf,w
  3630  05CE  3880               	iorlw	128
  3631  05CF  00F6               	movwf	??_waitFlag
  3632  05D0  0876               	movf	??_waitFlag,w
  3633  05D1  00BC               	movwf	waitFlag@buf
  3634  05D2                     l2763:	
  3635  05D2  3001               	movlw	1
  3636  05D3  07AE               	addwf	waitFlag@j_113,f
  3637  05D4  1803               	skipnc
  3638  05D5  0AAF               	incf	waitFlag@j_113+1,f
  3639  05D6  3000               	movlw	0
  3640  05D7  07AF               	addwf	waitFlag@j_113+1,f
  3641  05D8  3000               	movlw	0
  3642  05D9  022F               	subwf	waitFlag@j_113+1,w
  3643  05DA  3008               	movlw	8
  3644  05DB  1903               	skipnz
  3645  05DC  022E               	subwf	waitFlag@j_113,w
  3646  05DD  1C03               	skipc
  3647  05DE  2DB7               	goto	l2753
  3648  05DF                     l2767:	
  3649                           
  3650                           ;decode_AX25.c: 183: }
  3651                           ;decode_AX25.c: 184: }
  3652                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3653  05DF  3003               	movlw	low (STR_7-__stringbase)
  3654  05E0  0084               	movwf	4
  3655  05E1  120A  158A  2000  120A  118A  	fcall	stringdir
  3656  05E6  00F6               	movwf	??_waitFlag
  3657  05E7  01F7               	clrf	??_waitFlag+1
  3658  05E8  1003               	clrc
  3659  05E9  0DF6               	rlf	??_waitFlag,f
  3660  05EA  0DF7               	rlf	??_waitFlag+1,f
  3661  05EB  083C               	movf	waitFlag@buf,w
  3662  05EC  00F8               	movwf	??_waitFlag+2
  3663  05ED  01F9               	clrf	??_waitFlag+3
  3664  05EE  0877               	movf	??_waitFlag+1,w
  3665  05EF  0679               	xorwf	??_waitFlag+3,w
  3666  05F0  1D03               	skipz
  3667  05F1  2DF4               	goto	u2385
  3668  05F2  0876               	movf	??_waitFlag,w
  3669  05F3  0678               	xorwf	??_waitFlag+2,w
  3670  05F4                     u2385:	
  3671  05F4  1D03               	skipz
  3672  05F5  2FB9               	goto	l2915
  3673                           
  3674                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3675  05F6  083C               	movf	waitFlag@buf,w
  3676  05F7  00F6               	movwf	??_waitFlag
  3677  05F8  0867               	movf	_dPacketnum,w
  3678  05F9  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3679  05FA  0084               	movwf	4
  3680  05FB  0876               	movf	??_waitFlag,w
  3681  05FC  1783               	bsf	3,7	;select IRP bank3
  3682  05FD  0080               	movwf	0
  3683                           
  3684                           ;decode_AX25.c: 187: dPacketnum ++;
  3685  05FE  3001               	movlw	1
  3686  05FF  07E7               	addwf	_dPacketnum,f
  3687  0600  1803               	skipnc
  3688  0601  0AE8               	incf	_dPacketnum+1,f
  3689  0602  3000               	movlw	0
  3690  0603  07E8               	addwf	_dPacketnum+1,f
  3691                           
  3692                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3693  0604  01B0               	clrf	waitFlag@j_115
  3694  0605  01B1               	clrf	waitFlag@j_115+1
  3695  0606  3000               	movlw	0
  3696  0607  0231               	subwf	waitFlag@j_115+1,w
  3697  0608  3008               	movlw	8
  3698  0609  1903               	skipnz
  3699  060A  0230               	subwf	waitFlag@j_115,w
  3700  060B  1803               	btfsc	3,0
  3701  060C  2E35               	goto	l2793
  3702  060D                     l2779:	
  3703                           
  3704                           ;decode_AX25.c: 189: flag_judge = getbit();
  3705  060D  120A  158A  2369  120A  118A  	fcall	_getbit
  3706  0612  0871               	movf	?_getbit+1,w
  3707  0613  1283               	bcf	3,5	;RP0=0, select bank0
  3708  0614  1303               	bcf	3,6	;RP1=0, select bank0
  3709  0615  00BB               	movwf	waitFlag@flag_judge+1
  3710  0616  0870               	movf	?_getbit,w
  3711  0617  00BA               	movwf	waitFlag@flag_judge
  3712                           
  3713                           ;decode_AX25.c: 190: buf = buf >> 1;
  3714  0618  083C               	movf	waitFlag@buf,w
  3715  0619  00F6               	movwf	??_waitFlag
  3716  061A  1003               	clrc
  3717  061B  0C76               	rrf	??_waitFlag,w
  3718  061C  00F7               	movwf	??_waitFlag+1
  3719  061D  0877               	movf	??_waitFlag+1,w
  3720  061E  00BC               	movwf	waitFlag@buf
  3721                           
  3722                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3723  061F  083A               	movf	waitFlag@flag_judge,w
  3724  0620  043B               	iorwf	waitFlag@flag_judge+1,w
  3725  0621  1903               	btfsc	3,2
  3726  0622  2E28               	goto	l2789
  3727                           
  3728                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3729                           
  3730                           ;decode_AX25.c: 193: }else{
  3731  0623  083C               	movf	waitFlag@buf,w
  3732  0624  3880               	iorlw	128
  3733  0625  00F6               	movwf	??_waitFlag
  3734  0626  0876               	movf	??_waitFlag,w
  3735  0627  00BC               	movwf	waitFlag@buf
  3736  0628                     l2789:	
  3737  0628  3001               	movlw	1
  3738  0629  07B0               	addwf	waitFlag@j_115,f
  3739  062A  1803               	skipnc
  3740  062B  0AB1               	incf	waitFlag@j_115+1,f
  3741  062C  3000               	movlw	0
  3742  062D  07B1               	addwf	waitFlag@j_115+1,f
  3743  062E  3000               	movlw	0
  3744  062F  0231               	subwf	waitFlag@j_115+1,w
  3745  0630  3008               	movlw	8
  3746  0631  1903               	skipnz
  3747  0632  0230               	subwf	waitFlag@j_115,w
  3748  0633  1C03               	skipc
  3749  0634  2E0D               	goto	l2779
  3750  0635                     l2793:	
  3751                           
  3752                           ;decode_AX25.c: 195: }
  3753                           ;decode_AX25.c: 196: }
  3754                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3755  0635  3004               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3756  0636  0084               	movwf	4
  3757  0637  120A  158A  2000  120A  118A  	fcall	stringdir
  3758  063C  00F6               	movwf	??_waitFlag
  3759  063D  01F7               	clrf	??_waitFlag+1
  3760  063E  1003               	clrc
  3761  063F  0DF6               	rlf	??_waitFlag,f
  3762  0640  0DF7               	rlf	??_waitFlag+1,f
  3763  0641  083C               	movf	waitFlag@buf,w
  3764  0642  00F8               	movwf	??_waitFlag+2
  3765  0643  01F9               	clrf	??_waitFlag+3
  3766  0644  0877               	movf	??_waitFlag+1,w
  3767  0645  0679               	xorwf	??_waitFlag+3,w
  3768  0646  1D03               	skipz
  3769  0647  2E4A               	goto	u2425
  3770  0648  0876               	movf	??_waitFlag,w
  3771  0649  0678               	xorwf	??_waitFlag+2,w
  3772  064A                     u2425:	
  3773  064A  1D03               	skipz
  3774  064B  2FB9               	goto	l2915
  3775                           
  3776                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3777  064C  083C               	movf	waitFlag@buf,w
  3778  064D  00F6               	movwf	??_waitFlag
  3779  064E  0867               	movf	_dPacketnum,w
  3780  064F  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3781  0650  0084               	movwf	4
  3782  0651  0876               	movf	??_waitFlag,w
  3783  0652  1783               	bsf	3,7	;select IRP bank3
  3784  0653  0080               	movwf	0
  3785                           
  3786                           ;decode_AX25.c: 199: dPacketnum ++;
  3787  0654  3001               	movlw	1
  3788  0655  07E7               	addwf	_dPacketnum,f
  3789  0656  1803               	skipnc
  3790  0657  0AE8               	incf	_dPacketnum+1,f
  3791  0658  3000               	movlw	0
  3792  0659  07E8               	addwf	_dPacketnum+1,f
  3793                           
  3794                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3795  065A  01B2               	clrf	waitFlag@j_117
  3796  065B  01B3               	clrf	waitFlag@j_117+1
  3797  065C  3000               	movlw	0
  3798  065D  0233               	subwf	waitFlag@j_117+1,w
  3799  065E  3008               	movlw	8
  3800  065F  1903               	skipnz
  3801  0660  0232               	subwf	waitFlag@j_117,w
  3802  0661  1803               	btfsc	3,0
  3803  0662  2E8B               	goto	l2819
  3804  0663                     l2805:	
  3805                           
  3806                           ;decode_AX25.c: 201: flag_judge = getbit();
  3807  0663  120A  158A  2369  120A  118A  	fcall	_getbit
  3808  0668  0871               	movf	?_getbit+1,w
  3809  0669  1283               	bcf	3,5	;RP0=0, select bank0
  3810  066A  1303               	bcf	3,6	;RP1=0, select bank0
  3811  066B  00BB               	movwf	waitFlag@flag_judge+1
  3812  066C  0870               	movf	?_getbit,w
  3813  066D  00BA               	movwf	waitFlag@flag_judge
  3814                           
  3815                           ;decode_AX25.c: 202: buf = buf >> 1;
  3816  066E  083C               	movf	waitFlag@buf,w
  3817  066F  00F6               	movwf	??_waitFlag
  3818  0670  1003               	clrc
  3819  0671  0C76               	rrf	??_waitFlag,w
  3820  0672  00F7               	movwf	??_waitFlag+1
  3821  0673  0877               	movf	??_waitFlag+1,w
  3822  0674  00BC               	movwf	waitFlag@buf
  3823                           
  3824                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3825  0675  083A               	movf	waitFlag@flag_judge,w
  3826  0676  043B               	iorwf	waitFlag@flag_judge+1,w
  3827  0677  1903               	btfsc	3,2
  3828  0678  2E7E               	goto	l2815
  3829                           
  3830                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3831                           
  3832                           ;decode_AX25.c: 205: }else{
  3833  0679  083C               	movf	waitFlag@buf,w
  3834  067A  3880               	iorlw	128
  3835  067B  00F6               	movwf	??_waitFlag
  3836  067C  0876               	movf	??_waitFlag,w
  3837  067D  00BC               	movwf	waitFlag@buf
  3838  067E                     l2815:	
  3839  067E  3001               	movlw	1
  3840  067F  07B2               	addwf	waitFlag@j_117,f
  3841  0680  1803               	skipnc
  3842  0681  0AB3               	incf	waitFlag@j_117+1,f
  3843  0682  3000               	movlw	0
  3844  0683  07B3               	addwf	waitFlag@j_117+1,f
  3845  0684  3000               	movlw	0
  3846  0685  0233               	subwf	waitFlag@j_117+1,w
  3847  0686  3008               	movlw	8
  3848  0687  1903               	skipnz
  3849  0688  0232               	subwf	waitFlag@j_117,w
  3850  0689  1C03               	skipc
  3851  068A  2E63               	goto	l2805
  3852  068B                     l2819:	
  3853                           
  3854                           ;decode_AX25.c: 207: }
  3855                           ;decode_AX25.c: 208: }
  3856                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3857  068B  3005               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3858  068C  0084               	movwf	4
  3859  068D  120A  158A  2000  120A  118A  	fcall	stringdir
  3860  0692  00F6               	movwf	??_waitFlag
  3861  0693  01F7               	clrf	??_waitFlag+1
  3862  0694  1003               	clrc
  3863  0695  0DF6               	rlf	??_waitFlag,f
  3864  0696  0DF7               	rlf	??_waitFlag+1,f
  3865  0697  083C               	movf	waitFlag@buf,w
  3866  0698  00F8               	movwf	??_waitFlag+2
  3867  0699  01F9               	clrf	??_waitFlag+3
  3868  069A  0877               	movf	??_waitFlag+1,w
  3869  069B  0679               	xorwf	??_waitFlag+3,w
  3870  069C  1D03               	skipz
  3871  069D  2EA0               	goto	u2465
  3872  069E  0876               	movf	??_waitFlag,w
  3873  069F  0678               	xorwf	??_waitFlag+2,w
  3874  06A0                     u2465:	
  3875  06A0  1D03               	skipz
  3876  06A1  2FB9               	goto	l2915
  3877                           
  3878                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3879  06A2  083C               	movf	waitFlag@buf,w
  3880  06A3  00F6               	movwf	??_waitFlag
  3881  06A4  0867               	movf	_dPacketnum,w
  3882  06A5  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3883  06A6  0084               	movwf	4
  3884  06A7  0876               	movf	??_waitFlag,w
  3885  06A8  1783               	bsf	3,7	;select IRP bank3
  3886  06A9  0080               	movwf	0
  3887                           
  3888                           ;decode_AX25.c: 211: dPacketnum ++;
  3889  06AA  3001               	movlw	1
  3890  06AB  07E7               	addwf	_dPacketnum,f
  3891  06AC  1803               	skipnc
  3892  06AD  0AE8               	incf	_dPacketnum+1,f
  3893  06AE  3000               	movlw	0
  3894  06AF  07E8               	addwf	_dPacketnum+1,f
  3895                           
  3896                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3897  06B0  01B4               	clrf	waitFlag@j_119
  3898  06B1  01B5               	clrf	waitFlag@j_119+1
  3899  06B2  3000               	movlw	0
  3900  06B3  0235               	subwf	waitFlag@j_119+1,w
  3901  06B4  3008               	movlw	8
  3902  06B5  1903               	skipnz
  3903  06B6  0234               	subwf	waitFlag@j_119,w
  3904  06B7  1803               	btfsc	3,0
  3905  06B8  2EE1               	goto	l2845
  3906  06B9                     l2831:	
  3907                           
  3908                           ;decode_AX25.c: 213: flag_judge = getbit();
  3909  06B9  120A  158A  2369  120A  118A  	fcall	_getbit
  3910  06BE  0871               	movf	?_getbit+1,w
  3911  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  3912  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  3913  06C1  00BB               	movwf	waitFlag@flag_judge+1
  3914  06C2  0870               	movf	?_getbit,w
  3915  06C3  00BA               	movwf	waitFlag@flag_judge
  3916                           
  3917                           ;decode_AX25.c: 214: buf = buf >> 1;
  3918  06C4  083C               	movf	waitFlag@buf,w
  3919  06C5  00F6               	movwf	??_waitFlag
  3920  06C6  1003               	clrc
  3921  06C7  0C76               	rrf	??_waitFlag,w
  3922  06C8  00F7               	movwf	??_waitFlag+1
  3923  06C9  0877               	movf	??_waitFlag+1,w
  3924  06CA  00BC               	movwf	waitFlag@buf
  3925                           
  3926                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3927  06CB  083A               	movf	waitFlag@flag_judge,w
  3928  06CC  043B               	iorwf	waitFlag@flag_judge+1,w
  3929  06CD  1903               	btfsc	3,2
  3930  06CE  2ED4               	goto	l2841
  3931                           
  3932                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3933                           
  3934                           ;decode_AX25.c: 217: }else{
  3935  06CF  083C               	movf	waitFlag@buf,w
  3936  06D0  3880               	iorlw	128
  3937  06D1  00F6               	movwf	??_waitFlag
  3938  06D2  0876               	movf	??_waitFlag,w
  3939  06D3  00BC               	movwf	waitFlag@buf
  3940  06D4                     l2841:	
  3941  06D4  3001               	movlw	1
  3942  06D5  07B4               	addwf	waitFlag@j_119,f
  3943  06D6  1803               	skipnc
  3944  06D7  0AB5               	incf	waitFlag@j_119+1,f
  3945  06D8  3000               	movlw	0
  3946  06D9  07B5               	addwf	waitFlag@j_119+1,f
  3947  06DA  3000               	movlw	0
  3948  06DB  0235               	subwf	waitFlag@j_119+1,w
  3949  06DC  3008               	movlw	8
  3950  06DD  1903               	skipnz
  3951  06DE  0234               	subwf	waitFlag@j_119,w
  3952  06DF  1C03               	skipc
  3953  06E0  2EB9               	goto	l2831
  3954  06E1                     l2845:	
  3955                           
  3956                           ;decode_AX25.c: 219: }
  3957                           ;decode_AX25.c: 220: }
  3958                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3959  06E1  3006               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3960  06E2  0084               	movwf	4
  3961  06E3  120A  158A  2000  120A  118A  	fcall	stringdir
  3962  06E8  00F6               	movwf	??_waitFlag
  3963  06E9  01F7               	clrf	??_waitFlag+1
  3964  06EA  1003               	clrc
  3965  06EB  0DF6               	rlf	??_waitFlag,f
  3966  06EC  0DF7               	rlf	??_waitFlag+1,f
  3967  06ED  083C               	movf	waitFlag@buf,w
  3968  06EE  00F8               	movwf	??_waitFlag+2
  3969  06EF  01F9               	clrf	??_waitFlag+3
  3970  06F0  0877               	movf	??_waitFlag+1,w
  3971  06F1  0679               	xorwf	??_waitFlag+3,w
  3972  06F2  1D03               	skipz
  3973  06F3  2EF6               	goto	u2505
  3974  06F4  0876               	movf	??_waitFlag,w
  3975  06F5  0678               	xorwf	??_waitFlag+2,w
  3976  06F6                     u2505:	
  3977  06F6  1D03               	skipz
  3978  06F7  2FB9               	goto	l2915
  3979                           
  3980                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3981  06F8  083C               	movf	waitFlag@buf,w
  3982  06F9  00F6               	movwf	??_waitFlag
  3983  06FA  0867               	movf	_dPacketnum,w
  3984  06FB  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  3985  06FC  0084               	movwf	4
  3986  06FD  0876               	movf	??_waitFlag,w
  3987  06FE  1783               	bsf	3,7	;select IRP bank3
  3988  06FF  0080               	movwf	0
  3989                           
  3990                           ;decode_AX25.c: 223: dPacketnum ++;
  3991  0700  3001               	movlw	1
  3992  0701  07E7               	addwf	_dPacketnum,f
  3993  0702  1803               	skipnc
  3994  0703  0AE8               	incf	_dPacketnum+1,f
  3995  0704  3000               	movlw	0
  3996  0705  07E8               	addwf	_dPacketnum+1,f
  3997                           
  3998                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  3999  0706  01B6               	clrf	waitFlag@j_121
  4000  0707  01B7               	clrf	waitFlag@j_121+1
  4001  0708  3000               	movlw	0
  4002  0709  0237               	subwf	waitFlag@j_121+1,w
  4003  070A  3008               	movlw	8
  4004  070B  1903               	skipnz
  4005  070C  0236               	subwf	waitFlag@j_121,w
  4006  070D  1803               	btfsc	3,0
  4007  070E  2F37               	goto	l2871
  4008  070F                     l2857:	
  4009                           
  4010                           ;decode_AX25.c: 225: flag_judge = getbit();
  4011  070F  120A  158A  2369  120A  118A  	fcall	_getbit
  4012  0714  0871               	movf	?_getbit+1,w
  4013  0715  1283               	bcf	3,5	;RP0=0, select bank0
  4014  0716  1303               	bcf	3,6	;RP1=0, select bank0
  4015  0717  00BB               	movwf	waitFlag@flag_judge+1
  4016  0718  0870               	movf	?_getbit,w
  4017  0719  00BA               	movwf	waitFlag@flag_judge
  4018                           
  4019                           ;decode_AX25.c: 226: buf = buf >> 1;
  4020  071A  083C               	movf	waitFlag@buf,w
  4021  071B  00F6               	movwf	??_waitFlag
  4022  071C  1003               	clrc
  4023  071D  0C76               	rrf	??_waitFlag,w
  4024  071E  00F7               	movwf	??_waitFlag+1
  4025  071F  0877               	movf	??_waitFlag+1,w
  4026  0720  00BC               	movwf	waitFlag@buf
  4027                           
  4028                           ;decode_AX25.c: 228: buf = buf | 0x00;
  4029  0721  083A               	movf	waitFlag@flag_judge,w
  4030  0722  043B               	iorwf	waitFlag@flag_judge+1,w
  4031  0723  1903               	btfsc	3,2
  4032  0724  2F2A               	goto	l2867
  4033                           
  4034                           ;decode_AX25.c: 230: buf = buf | 0x80;
  4035                           
  4036                           ;decode_AX25.c: 229: }else{
  4037  0725  083C               	movf	waitFlag@buf,w
  4038  0726  3880               	iorlw	128
  4039  0727  00F6               	movwf	??_waitFlag
  4040  0728  0876               	movf	??_waitFlag,w
  4041  0729  00BC               	movwf	waitFlag@buf
  4042  072A                     l2867:	
  4043  072A  3001               	movlw	1
  4044  072B  07B6               	addwf	waitFlag@j_121,f
  4045  072C  1803               	skipnc
  4046  072D  0AB7               	incf	waitFlag@j_121+1,f
  4047  072E  3000               	movlw	0
  4048  072F  07B7               	addwf	waitFlag@j_121+1,f
  4049  0730  3000               	movlw	0
  4050  0731  0237               	subwf	waitFlag@j_121+1,w
  4051  0732  3008               	movlw	8
  4052  0733  1903               	skipnz
  4053  0734  0236               	subwf	waitFlag@j_121,w
  4054  0735  1C03               	skipc
  4055  0736  2F0F               	goto	l2857
  4056  0737                     l2871:	
  4057                           
  4058                           ;decode_AX25.c: 231: }
  4059                           ;decode_AX25.c: 232: }
  4060                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  4061  0737  3007               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  4062  0738  0084               	movwf	4
  4063  0739  120A  158A  2000  120A  118A  	fcall	stringdir
  4064  073E  00F6               	movwf	??_waitFlag
  4065  073F  01F7               	clrf	??_waitFlag+1
  4066  0740  1003               	clrc
  4067  0741  0DF6               	rlf	??_waitFlag,f
  4068  0742  0DF7               	rlf	??_waitFlag+1,f
  4069  0743  083C               	movf	waitFlag@buf,w
  4070  0744  00F8               	movwf	??_waitFlag+2
  4071  0745  01F9               	clrf	??_waitFlag+3
  4072  0746  0877               	movf	??_waitFlag+1,w
  4073  0747  0679               	xorwf	??_waitFlag+3,w
  4074  0748  1D03               	skipz
  4075  0749  2F4C               	goto	u2545
  4076  074A  0876               	movf	??_waitFlag,w
  4077  074B  0678               	xorwf	??_waitFlag+2,w
  4078  074C                     u2545:	
  4079  074C  1D03               	skipz
  4080  074D  2FB9               	goto	l2915
  4081                           
  4082                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  4083  074E  083C               	movf	waitFlag@buf,w
  4084  074F  00F6               	movwf	??_waitFlag
  4085  0750  0867               	movf	_dPacketnum,w
  4086  0751  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4087  0752  0084               	movwf	4
  4088  0753  0876               	movf	??_waitFlag,w
  4089  0754  1783               	bsf	3,7	;select IRP bank3
  4090  0755  0080               	movwf	0
  4091                           
  4092                           ;decode_AX25.c: 235: dPacketnum ++;
  4093  0756  3001               	movlw	1
  4094  0757  07E7               	addwf	_dPacketnum,f
  4095  0758  1803               	skipnc
  4096  0759  0AE8               	incf	_dPacketnum+1,f
  4097  075A  3000               	movlw	0
  4098  075B  07E8               	addwf	_dPacketnum+1,f
  4099                           
  4100                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  4101  075C  01B8               	clrf	waitFlag@j_123
  4102  075D  01B9               	clrf	waitFlag@j_123+1
  4103  075E  3000               	movlw	0
  4104  075F  0239               	subwf	waitFlag@j_123+1,w
  4105  0760  3008               	movlw	8
  4106  0761  1903               	skipnz
  4107  0762  0238               	subwf	waitFlag@j_123,w
  4108  0763  1803               	btfsc	3,0
  4109  0764  2F8D               	goto	l2897
  4110  0765                     l2883:	
  4111                           
  4112                           ;decode_AX25.c: 237: flag_judge = getbit();
  4113  0765  120A  158A  2369  120A  118A  	fcall	_getbit
  4114  076A  0871               	movf	?_getbit+1,w
  4115  076B  1283               	bcf	3,5	;RP0=0, select bank0
  4116  076C  1303               	bcf	3,6	;RP1=0, select bank0
  4117  076D  00BB               	movwf	waitFlag@flag_judge+1
  4118  076E  0870               	movf	?_getbit,w
  4119  076F  00BA               	movwf	waitFlag@flag_judge
  4120                           
  4121                           ;decode_AX25.c: 238: buf = buf >> 1;
  4122  0770  083C               	movf	waitFlag@buf,w
  4123  0771  00F6               	movwf	??_waitFlag
  4124  0772  1003               	clrc
  4125  0773  0C76               	rrf	??_waitFlag,w
  4126  0774  00F7               	movwf	??_waitFlag+1
  4127  0775  0877               	movf	??_waitFlag+1,w
  4128  0776  00BC               	movwf	waitFlag@buf
  4129                           
  4130                           ;decode_AX25.c: 240: buf = buf | 0x00;
  4131  0777  083A               	movf	waitFlag@flag_judge,w
  4132  0778  043B               	iorwf	waitFlag@flag_judge+1,w
  4133  0779  1903               	btfsc	3,2
  4134  077A  2F80               	goto	l2893
  4135                           
  4136                           ;decode_AX25.c: 242: buf = buf | 0x80;
  4137                           
  4138                           ;decode_AX25.c: 241: }else{
  4139  077B  083C               	movf	waitFlag@buf,w
  4140  077C  3880               	iorlw	128
  4141  077D  00F6               	movwf	??_waitFlag
  4142  077E  0876               	movf	??_waitFlag,w
  4143  077F  00BC               	movwf	waitFlag@buf
  4144  0780                     l2893:	
  4145  0780  3001               	movlw	1
  4146  0781  07B8               	addwf	waitFlag@j_123,f
  4147  0782  1803               	skipnc
  4148  0783  0AB9               	incf	waitFlag@j_123+1,f
  4149  0784  3000               	movlw	0
  4150  0785  07B9               	addwf	waitFlag@j_123+1,f
  4151  0786  3000               	movlw	0
  4152  0787  0239               	subwf	waitFlag@j_123+1,w
  4153  0788  3008               	movlw	8
  4154  0789  1903               	skipnz
  4155  078A  0238               	subwf	waitFlag@j_123,w
  4156  078B  1C03               	skipc
  4157  078C  2F65               	goto	l2883
  4158  078D                     l2897:	
  4159                           
  4160                           ;decode_AX25.c: 243: }
  4161                           ;decode_AX25.c: 244: }
  4162                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  4163  078D  3008               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  4164  078E  0084               	movwf	4
  4165  078F  120A  158A  2000  120A  118A  	fcall	stringdir
  4166  0794  00F6               	movwf	??_waitFlag
  4167  0795  01F7               	clrf	??_waitFlag+1
  4168  0796  1003               	clrc
  4169  0797  0DF6               	rlf	??_waitFlag,f
  4170  0798  0DF7               	rlf	??_waitFlag+1,f
  4171  0799  083C               	movf	waitFlag@buf,w
  4172  079A  00F8               	movwf	??_waitFlag+2
  4173  079B  01F9               	clrf	??_waitFlag+3
  4174  079C  0877               	movf	??_waitFlag+1,w
  4175  079D  0679               	xorwf	??_waitFlag+3,w
  4176  079E  1D03               	skipz
  4177  079F  2FA2               	goto	u2585
  4178  07A0  0876               	movf	??_waitFlag,w
  4179  07A1  0678               	xorwf	??_waitFlag+2,w
  4180  07A2                     u2585:	
  4181  07A2  1D03               	skipz
  4182  07A3  2FB9               	goto	l2915
  4183                           
  4184                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  4185  07A4  083C               	movf	waitFlag@buf,w
  4186  07A5  00F6               	movwf	??_waitFlag
  4187  07A6  0867               	movf	_dPacketnum,w
  4188  07A7  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4189  07A8  0084               	movwf	4
  4190  07A9  0876               	movf	??_waitFlag,w
  4191  07AA  1783               	bsf	3,7	;select IRP bank3
  4192  07AB  0080               	movwf	0
  4193                           
  4194                           ;decode_AX25.c: 247: dPacketnum ++;
  4195  07AC  3001               	movlw	1
  4196  07AD  07E7               	addwf	_dPacketnum,f
  4197  07AE  1803               	skipnc
  4198  07AF  0AE8               	incf	_dPacketnum+1,f
  4199  07B0  3000               	movlw	0
  4200  07B1  07E8               	addwf	_dPacketnum+1,f
  4201                           
  4202                           ;decode_AX25.c: 248: rcv_state ++;
  4203  07B2  3001               	movlw	1
  4204  07B3  07E9               	addwf	_rcv_state,f
  4205  07B4  1803               	skipnc
  4206  07B5  0AEA               	incf	_rcv_state+1,f
  4207  07B6  3000               	movlw	0
  4208  07B7  07EA               	addwf	_rcv_state+1,f
  4209                           
  4210                           ;decode_AX25.c: 249: }else{
  4211  07B8  2B38               	goto	l2917
  4212  07B9                     l2915:	
  4213                           ;decode_AX25.c: 268: }
  4214                           ;decode_AX25.c: 269: }else{
  4215                           
  4216                           ;decode_AX25.c: 267: rcv_state = 0;
  4217                           
  4218                           ;decode_AX25.c: 266: dPacketnum = 0;
  4219                           
  4220                           ;decode_AX25.c: 264: }
  4221                           ;decode_AX25.c: 265: }else{
  4222                           
  4223                           ;decode_AX25.c: 263: rcv_state = 0;
  4224                           
  4225                           ;decode_AX25.c: 262: dPacketnum = 0;
  4226                           
  4227                           ;decode_AX25.c: 260: }
  4228                           ;decode_AX25.c: 261: }else{
  4229                           
  4230                           ;decode_AX25.c: 259: rcv_state = 0;
  4231                           
  4232                           ;decode_AX25.c: 258: dPacketnum = 0;
  4233                           
  4234                           ;decode_AX25.c: 256: }
  4235                           ;decode_AX25.c: 257: }else{
  4236                           
  4237                           ;decode_AX25.c: 255: rcv_state = 0;
  4238                           
  4239                           ;decode_AX25.c: 254: dPacketnum = 0;
  4240                           
  4241                           ;decode_AX25.c: 252: }
  4242                           ;decode_AX25.c: 253: }else{
  4243                           
  4244                           ;decode_AX25.c: 251: rcv_state = 0;
  4245                           
  4246                           ;decode_AX25.c: 250: dPacketnum = 0;
  4247                           
  4248                           
  4249                           ;decode_AX25.c: 270: dPacketnum = 0;
  4250  07B9  01E7               	clrf	_dPacketnum
  4251  07BA  01E8               	clrf	_dPacketnum+1
  4252  07BB  2B36               	goto	L6
  4253  07BC                     __end_of_waitFlag:	
  4254                           
  4255                           	psect	text5
  4256  0C67                     __ptext5:	
  4257 ;; *************** function _getdata *****************
  4258 ;; Defined at:
  4259 ;;		line 278 in file "decode_AX25.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4264 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4265 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4266 ;;  buf             1    6[BANK0 ] unsigned char 
  4267 ;;  dammy_data      1    0        unsigned char 
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  1    wreg      void 
  4270 ;; Registers used:
  4271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4277 ;;      Params:         0       0       0       0       0
  4278 ;;      Locals:         0       7       0       0       0
  4279 ;;      Temps:          2       0       0       0       0
  4280 ;;      Totals:         2       7       0       0       0
  4281 ;;Total ram usage:        9 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    1
  4284 ;; This function calls:
  4285 ;;		_getbit
  4286 ;; This function is called by:
  4287 ;;		_ReceivePacket_data
  4288 ;;		_ReceivePacket
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           
  4293                           ;psect for function _getdata
  4294  0C67                     _getdata:	
  4295                           
  4296                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4297                           
  4298                           ;incstack = 0
  4299                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4300  0C67  1283               	bcf	3,5	;RP0=0, select bank0
  4301  0C68  1303               	bcf	3,6	;RP1=0, select bank0
  4302  0C69  01A6               	clrf	getdata@buf
  4303                           
  4304                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4305  0C6A  01A2               	clrf	getdata@dstuff
  4306  0C6B  01A3               	clrf	getdata@dstuff+1
  4307                           
  4308                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4309                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4310  0C6C  01A0               	clrf	getdata@bufstore_counter
  4311  0C6D  01A1               	clrf	getdata@bufstore_counter+1
  4312                           
  4313                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4314  0C6E  01A4               	clrf	getdata@dbitstatus
  4315  0C6F  01A5               	clrf	getdata@dbitstatus+1
  4316  0C70                     l2951:	
  4317                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4318                           
  4319  0C70  3002               	movlw	2
  4320  0C71  0669               	xorwf	_rcv_state,w
  4321  0C72  046A               	iorwf	_rcv_state+1,w
  4322  0C73  1D03               	btfss	3,2
  4323  0C74  0008               	return
  4324                           
  4325                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4326  0C75  120A  158A  2369  120A  158A  	fcall	_getbit
  4327  0C7A  0871               	movf	?_getbit+1,w
  4328  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  4329  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  4330  0C7D  00A5               	movwf	getdata@dbitstatus+1
  4331  0C7E  0870               	movf	?_getbit,w
  4332  0C7F  00A4               	movwf	getdata@dbitstatus
  4333                           
  4334                           ;decode_AX25.c: 287: if(dstuff == 5){
  4335  0C80  3005               	movlw	5
  4336  0C81  0622               	xorwf	getdata@dstuff,w
  4337  0C82  0423               	iorwf	getdata@dstuff+1,w
  4338  0C83  1D03               	btfss	3,2
  4339  0C84  2C93               	goto	l2933
  4340                           
  4341                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4342  0C85  0324               	decf	getdata@dbitstatus,w
  4343  0C86  0425               	iorwf	getdata@dbitstatus+1,w
  4344  0C87  1D03               	btfss	3,2
  4345  0C88  2C90               	goto	l2931
  4346                           
  4347                           ;decode_AX25.c: 289: rcv_state ++;
  4348  0C89  3001               	movlw	1
  4349  0C8A  07E9               	addwf	_rcv_state,f
  4350  0C8B  1803               	skipnc
  4351  0C8C  0AEA               	incf	_rcv_state+1,f
  4352  0C8D  3000               	movlw	0
  4353  0C8E  07EA               	addwf	_rcv_state+1,f
  4354                           
  4355                           ;decode_AX25.c: 290: break;
  4356  0C8F  0008               	return
  4357  0C90                     l2931:	
  4358                           ;decode_AX25.c: 291: }else{
  4359                           
  4360                           
  4361                           ;decode_AX25.c: 292: dstuff = 0;
  4362  0C90  01A2               	clrf	getdata@dstuff
  4363  0C91  01A3               	clrf	getdata@dstuff+1
  4364                           
  4365                           ;decode_AX25.c: 293: }
  4366                           ;decode_AX25.c: 294: }else{
  4367  0C92  2C70               	goto	l2951
  4368  0C93                     l2933:	
  4369                           
  4370                           ;decode_AX25.c: 295: buf = buf >> 1;
  4371  0C93  0826               	movf	getdata@buf,w
  4372  0C94  00F6               	movwf	??_getdata
  4373  0C95  1003               	clrc
  4374  0C96  0C76               	rrf	??_getdata,w
  4375  0C97  00F7               	movwf	??_getdata+1
  4376  0C98  0877               	movf	??_getdata+1,w
  4377  0C99  00A6               	movwf	getdata@buf
  4378                           
  4379                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4380  0C9A  0824               	movf	getdata@dbitstatus,w
  4381  0C9B  0425               	iorwf	getdata@dbitstatus+1,w
  4382  0C9C  1D03               	btfss	3,2
  4383  0C9D  2CA1               	goto	l2937
  4384                           
  4385                           ;decode_AX25.c: 298: dstuff = 0;
  4386  0C9E  01A2               	clrf	getdata@dstuff
  4387  0C9F  01A3               	clrf	getdata@dstuff+1
  4388                           
  4389                           ;decode_AX25.c: 299: }else{
  4390  0CA0  2CAC               	goto	l2941
  4391  0CA1                     l2937:	
  4392                           
  4393                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4394  0CA1  0826               	movf	getdata@buf,w
  4395  0CA2  3880               	iorlw	128
  4396  0CA3  00F6               	movwf	??_getdata
  4397  0CA4  0876               	movf	??_getdata,w
  4398  0CA5  00A6               	movwf	getdata@buf
  4399                           
  4400                           ;decode_AX25.c: 301: dstuff ++;
  4401  0CA6  3001               	movlw	1
  4402  0CA7  07A2               	addwf	getdata@dstuff,f
  4403  0CA8  1803               	skipnc
  4404  0CA9  0AA3               	incf	getdata@dstuff+1,f
  4405  0CAA  3000               	movlw	0
  4406  0CAB  07A3               	addwf	getdata@dstuff+1,f
  4407  0CAC                     l2941:	
  4408                           
  4409                           ;decode_AX25.c: 302: }
  4410                           ;decode_AX25.c: 303: bufstore_counter ++;
  4411  0CAC  3001               	movlw	1
  4412  0CAD  07A0               	addwf	getdata@bufstore_counter,f
  4413  0CAE  1803               	skipnc
  4414  0CAF  0AA1               	incf	getdata@bufstore_counter+1,f
  4415  0CB0  3000               	movlw	0
  4416  0CB1  07A1               	addwf	getdata@bufstore_counter+1,f
  4417                           
  4418                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4419  0CB2  3008               	movlw	8
  4420  0CB3  0620               	xorwf	getdata@bufstore_counter,w
  4421  0CB4  0421               	iorwf	getdata@bufstore_counter+1,w
  4422  0CB5  1D03               	btfss	3,2
  4423  0CB6  2C70               	goto	l2951
  4424                           
  4425                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4426  0CB7  01A0               	clrf	getdata@bufstore_counter
  4427  0CB8  01A1               	clrf	getdata@bufstore_counter+1
  4428                           
  4429                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4430  0CB9  0826               	movf	getdata@buf,w
  4431  0CBA  00F6               	movwf	??_getdata
  4432  0CBB  0867               	movf	_dPacketnum,w
  4433  0CBC  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4434  0CBD  0084               	movwf	4
  4435  0CBE  0876               	movf	??_getdata,w
  4436  0CBF  1783               	bsf	3,7	;select IRP bank3
  4437  0CC0  0080               	movwf	0
  4438                           
  4439                           ;decode_AX25.c: 307: dPacketnum ++;
  4440  0CC1  3001               	movlw	1
  4441  0CC2  07E7               	addwf	_dPacketnum,f
  4442  0CC3  1803               	skipnc
  4443  0CC4  0AE8               	incf	_dPacketnum+1,f
  4444  0CC5  3000               	movlw	0
  4445  0CC6  07E8               	addwf	_dPacketnum+1,f
  4446  0CC7  2C70               	goto	l2951
  4447  0CC8                     __end_of_getdata:	
  4448                           
  4449                           	psect	text6
  4450  0B69                     __ptext6:	
  4451 ;; *************** function _getbit *****************
  4452 ;; Defined at:
  4453 ;;		line 40 in file "decode_AX25.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;		None
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  i               2    4[COMMON] unsigned int 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  2    0[COMMON] unsigned int 
  4460 ;; Registers used:
  4461 ;;		wreg, status,2, status,0
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4467 ;;      Params:         2       0       0       0       0
  4468 ;;      Locals:         2       0       0       0       0
  4469 ;;      Temps:          2       0       0       0       0
  4470 ;;      Totals:         6       0       0       0       0
  4471 ;;Total ram usage:        6 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; This function calls:
  4474 ;;		Nothing
  4475 ;; This function is called by:
  4476 ;;		_waitFlag
  4477 ;;		_getdata
  4478 ;;		_conv_DI_UARTRX
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           
  4483                           ;psect for function _getbit
  4484  0B69                     _getbit:	
  4485                           
  4486                           ;decode_AX25.c: 41: static UINT oldbit;
  4487                           ;decode_AX25.c: 42: oldbit = RB5;
  4488                           
  4489                           ;incstack = 0
  4490                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4491  0B69  1003               	clrc
  4492  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  4493  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
  4494  0B6C  1A86               	btfsc	6,5	;volatile
  4495  0B6D  1403               	setc
  4496  0B6E  3000               	movlw	0
  4497  0B6F  1803               	skipnc
  4498  0B70  3001               	movlw	1
  4499  0B71  00F2               	movwf	??_getbit
  4500  0B72  01F3               	clrf	??_getbit+1
  4501  0B73  0872               	movf	??_getbit,w
  4502  0B74  00E5               	movwf	getbit@oldbit
  4503  0B75  0873               	movf	??_getbit+1,w
  4504  0B76  00E6               	movwf	getbit@oldbit+1
  4505                           
  4506                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4507  0B77  01F4               	clrf	getbit@i
  4508  0B78  01F5               	clrf	getbit@i+1
  4509  0B79  3000               	movlw	0
  4510  0B7A  0275               	subwf	getbit@i+1,w
  4511  0B7B  303E               	movlw	62
  4512  0B7C  1903               	skipnz
  4513  0B7D  0274               	subwf	getbit@i,w
  4514  0B7E  1803               	btfsc	3,0
  4515  0B7F  2BAB               	goto	l2397
  4516                           
  4517                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4518  0B80  1003               	clrc
  4519  0B81                     L7:	
  4520  0B81  1A86               	btfsc	6,5	;volatile
  4521  0B82  1403               	setc
  4522  0B83  3000               	movlw	0
  4523  0B84  1803               	skipnc
  4524  0B85  3001               	movlw	1
  4525  0B86  00F2               	movwf	??_getbit
  4526  0B87  01F3               	clrf	??_getbit+1
  4527  0B88  0866               	movf	getbit@oldbit+1,w
  4528  0B89  0673               	xorwf	??_getbit+1,w
  4529  0B8A  1D03               	skipz
  4530  0B8B  2B8E               	goto	u1815
  4531  0B8C  0865               	movf	getbit@oldbit,w
  4532  0B8D  0672               	xorwf	??_getbit,w
  4533  0B8E                     u1815:	
  4534  0B8E  1903               	skipnz
  4535  0B8F  2B9E               	goto	l2395
  4536                           
  4537                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4538  0B90  30C7               	movlw	199
  4539  0B91  00F2               	movwf	??_getbit
  4540  0B92                     u3617:	
  4541  0B92  2B93               	nop2
  4542  0B93  0BF2               	decfsz	??_getbit,f
  4543  0B94  2B92               	goto	u3617
  4544  0B95  2B96               	nop2
  4545  0B96  2B97               	nop2
  4546                           
  4547                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4548  0B97  3004               	movlw	4
  4549  0B98  1283               	bcf	3,5	;RP0=0, select bank0
  4550  0B99  1303               	bcf	3,6	;RP1=0, select bank0
  4551  0B9A  0687               	xorwf	7,f
  4552                           
  4553                           ;decode_AX25.c: 47: return 0;
  4554  0B9B  01F0               	clrf	?_getbit
  4555  0B9C  01F1               	clrf	?_getbit+1
  4556  0B9D  0008               	return
  4557  0B9E                     l2395:	
  4558  0B9E  3001               	movlw	1
  4559  0B9F  07F4               	addwf	getbit@i,f
  4560  0BA0  1803               	skipnc
  4561  0BA1  0AF5               	incf	getbit@i+1,f
  4562  0BA2  3000               	movlw	0
  4563  0BA3  07F5               	addwf	getbit@i+1,f
  4564  0BA4  3000               	movlw	0
  4565  0BA5  0275               	subwf	getbit@i+1,w
  4566  0BA6  303E               	movlw	62
  4567  0BA7  1903               	skipnz
  4568  0BA8  0274               	subwf	getbit@i,w
  4569  0BA9  1C03               	skipc
  4570  0BAA  2B81               	goto	L7
  4571  0BAB                     l2397:	
  4572                           
  4573                           ;decode_AX25.c: 48: }
  4574                           ;decode_AX25.c: 49: }
  4575                           ;decode_AX25.c: 50: return 1;
  4576  0BAB  3001               	movlw	1
  4577  0BAC  00F0               	movwf	?_getbit
  4578  0BAD  3000               	movlw	0
  4579  0BAE  00F1               	movwf	?_getbit+1
  4580  0BAF  0008               	return
  4581  0BB0                     __end_of_getbit:	
  4582                           
  4583                           	psect	text7
  4584  0DAA                     __ptext7:	
  4585 ;; *************** function _fcscheck *****************
  4586 ;; Defined at:
  4587 ;;		line 313 in file "decode_AX25.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;		None
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;  i               2    7[COMMON] unsigned int 
  4592 ;;  i               2    5[COMMON] unsigned int 
  4593 ;;  byte            1    9[COMMON] unsigned char 
  4594 ;;  bt              1    4[COMMON] unsigned char 
  4595 ;; Return value:  Size  Location     Type
  4596 ;;                  2    0[COMMON] unsigned int 
  4597 ;; Registers used:
  4598 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4604 ;;      Params:         2       0       0       0       0
  4605 ;;      Locals:         6       0       0       0       0
  4606 ;;      Temps:          2       0       0       0       0
  4607 ;;      Totals:        10       0       0       0       0
  4608 ;;Total ram usage:       10 bytes
  4609 ;; Hardware stack levels used:    1
  4610 ;; This function calls:
  4611 ;;		Nothing
  4612 ;; This function is called by:
  4613 ;;		_ReceivePacket_data
  4614 ;;		_ReceivePacket
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           
  4619                           ;psect for function _fcscheck
  4620  0DAA                     _fcscheck:	
  4621                           
  4622                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4623                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4624                           
  4625                           ;incstack = 0
  4626                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4627  0DAA  30FF               	movlw	255
  4628  0DAB  1283               	bcf	3,5	;RP0=0, select bank0
  4629  0DAC  1303               	bcf	3,6	;RP1=0, select bank0
  4630  0DAD  00EE               	movwf	_dfcshi
  4631  0DAE  00F2               	movwf	??_fcscheck
  4632  0DAF  0872               	movf	??_fcscheck,w
  4633  0DB0  00ED               	movwf	_dfcslo
  4634                           
  4635                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4636  0DB1  3003               	movlw	3
  4637  0DB2  0669               	xorwf	_rcv_state,w
  4638  0DB3  046A               	iorwf	_rcv_state+1,w
  4639  0DB4  1D03               	btfss	3,2
  4640  0DB5  0008               	return
  4641                           
  4642                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4643  0DB6  01F5               	clrf	fcscheck@i
  4644  0DB7  01F6               	clrf	fcscheck@i+1
  4645  0DB8                     l2979:	
  4646  0DB8  0867               	movf	_dPacketnum,w
  4647  0DB9  3EFE               	addlw	254
  4648  0DBA  00F2               	movwf	??_fcscheck
  4649  0DBB  0868               	movf	_dPacketnum+1,w
  4650  0DBC  1803               	skipnc
  4651  0DBD  3E01               	addlw	1
  4652  0DBE  3EFF               	addlw	255
  4653  0DBF  00F3               	movwf	??_fcscheck+1
  4654  0DC0  0873               	movf	??_fcscheck+1,w
  4655  0DC1  0276               	subwf	fcscheck@i+1,w
  4656  0DC2  1D03               	skipz
  4657  0DC3  2DC6               	goto	u2685
  4658  0DC4  0872               	movf	??_fcscheck,w
  4659  0DC5  0275               	subwf	fcscheck@i,w
  4660  0DC6                     u2685:	
  4661  0DC6  1803               	btfsc	3,0
  4662  0DC7  2E11               	goto	l244
  4663                           
  4664                           ;decode_AX25.c: 318: byte = dPacket[i];
  4665  0DC8  0875               	movf	fcscheck@i,w
  4666  0DC9  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4667  0DCA  0084               	movwf	4
  4668  0DCB  1783               	bsf	3,7	;select IRP bank3
  4669  0DCC  0800               	movf	0,w
  4670  0DCD  00F2               	movwf	??_fcscheck
  4671  0DCE  0872               	movf	??_fcscheck,w
  4672  0DCF  00F9               	movwf	fcscheck@byte
  4673                           
  4674                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4675  0DD0  01F7               	clrf	fcscheck@i_135
  4676  0DD1  01F8               	clrf	fcscheck@i_135+1
  4677  0DD2  3000               	movlw	0
  4678  0DD3  0278               	subwf	fcscheck@i_135+1,w
  4679  0DD4  3008               	movlw	8
  4680  0DD5  1903               	skipnz
  4681  0DD6  0277               	subwf	fcscheck@i_135,w
  4682  0DD7  1803               	btfsc	3,0
  4683  0DD8  2E0A               	goto	l2977
  4684  0DD9                     l2965:	
  4685                           
  4686                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4687  0DD9  0879               	movf	fcscheck@byte,w
  4688  0DDA  3901               	andlw	1
  4689  0DDB  00F2               	movwf	??_fcscheck
  4690  0DDC  0872               	movf	??_fcscheck,w
  4691  0DDD  00F4               	movwf	fcscheck@bt
  4692  0DDE  1003               	bcf	3,0	;# 
  4693  0DDF  0CEE               	rrf	_dfcshi,f	;# 
  4694  0DE0  0CED               	rrf	_dfcslo,f	;# 
  4695                           
  4696                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4697  0DE1  3001               	movlw	1
  4698  0DE2  1283               	bcf	3,5	;RP0=0, select bank0
  4699  0DE3  1303               	bcf	3,6	;RP1=0, select bank0
  4700  0DE4  0503               	andwf	3,w	;volatile
  4701  0DE5  00F2               	movwf	??_fcscheck
  4702  0DE6  0874               	movf	fcscheck@bt,w
  4703  0DE7  0672               	xorwf	??_fcscheck,w
  4704  0DE8  00F3               	movwf	??_fcscheck+1
  4705  0DE9  0373               	decf	??_fcscheck+1,w
  4706  0DEA  1D03               	btfss	3,2
  4707  0DEB  2DF6               	goto	l2971
  4708                           
  4709                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4710  0DEC  086E               	movf	_dfcshi,w
  4711  0DED  3A84               	xorlw	132
  4712  0DEE  00F2               	movwf	??_fcscheck
  4713  0DEF  0872               	movf	??_fcscheck,w
  4714  0DF0  00EE               	movwf	_dfcshi
  4715                           
  4716                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4717  0DF1  086D               	movf	_dfcslo,w
  4718  0DF2  3A08               	xorlw	8
  4719  0DF3  00F2               	movwf	??_fcscheck
  4720  0DF4  0872               	movf	??_fcscheck,w
  4721  0DF5  00ED               	movwf	_dfcslo
  4722  0DF6                     l2971:	
  4723                           
  4724                           ;decode_AX25.c: 329: }
  4725                           ;decode_AX25.c: 330: byte = byte >> 1;
  4726  0DF6  0879               	movf	fcscheck@byte,w
  4727  0DF7  00F2               	movwf	??_fcscheck
  4728  0DF8  1003               	clrc
  4729  0DF9  0C72               	rrf	??_fcscheck,w
  4730  0DFA  00F3               	movwf	??_fcscheck+1
  4731  0DFB  0873               	movf	??_fcscheck+1,w
  4732  0DFC  00F9               	movwf	fcscheck@byte
  4733  0DFD  3001               	movlw	1
  4734  0DFE  07F7               	addwf	fcscheck@i_135,f
  4735  0DFF  1803               	skipnc
  4736  0E00  0AF8               	incf	fcscheck@i_135+1,f
  4737  0E01  3000               	movlw	0
  4738  0E02  07F8               	addwf	fcscheck@i_135+1,f
  4739  0E03  3000               	movlw	0
  4740  0E04  0278               	subwf	fcscheck@i_135+1,w
  4741  0E05  3008               	movlw	8
  4742  0E06  1903               	skipnz
  4743  0E07  0277               	subwf	fcscheck@i_135,w
  4744  0E08  1C03               	skipc
  4745  0E09  2DD9               	goto	l2965
  4746  0E0A                     l2977:	
  4747  0E0A  3001               	movlw	1
  4748  0E0B  07F5               	addwf	fcscheck@i,f
  4749  0E0C  1803               	skipnc
  4750  0E0D  0AF6               	incf	fcscheck@i+1,f
  4751  0E0E  3000               	movlw	0
  4752  0E0F  07F6               	addwf	fcscheck@i+1,f
  4753  0E10  2DB8               	goto	l2979
  4754  0E11                     l244:	
  4755                           
  4756                           ;decode_AX25.c: 331: }
  4757                           ;decode_AX25.c: 332: }
  4758                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4759  0E11  09ED               	comf	_dfcslo,f
  4760                           
  4761                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4762  0E12  09EE               	comf	_dfcshi,f
  4763                           
  4764                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4765  0E13  0867               	movf	_dPacketnum,w
  4766  0E14  3EFE               	addlw	254
  4767  0E15  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4768  0E16  0084               	movwf	4
  4769  0E17  1783               	bsf	3,7	;select IRP bank3
  4770  0E18  0800               	movf	0,w
  4771  0E19  066D               	xorwf	_dfcslo,w
  4772  0E1A  1D03               	skipz
  4773  0E1B  2E29               	goto	l2991
  4774  0E1C  0867               	movf	_dPacketnum,w
  4775  0E1D  3EFF               	addlw	255
  4776  0E1E  3E90               	addlw	(low (_dPacket| (0+256)))& (0+255)
  4777  0E1F  0084               	movwf	4
  4778  0E20  0800               	movf	0,w
  4779  0E21  066E               	xorwf	_dfcshi,w
  4780  0E22  1D03               	skipz
  4781  0E23  2E29               	goto	l2991
  4782                           
  4783                           ;decode_AX25.c: 342: return 1;
  4784  0E24  3001               	movlw	1
  4785  0E25  00F0               	movwf	?_fcscheck
  4786  0E26  3000               	movlw	0
  4787  0E27  00F1               	movwf	?_fcscheck+1
  4788  0E28  0008               	return
  4789  0E29                     l2991:	
  4790                           ;decode_AX25.c: 343: }else{
  4791                           
  4792                           
  4793                           ;decode_AX25.c: 348: return 0;
  4794  0E29  01F0               	clrf	?_fcscheck
  4795  0E2A  01F1               	clrf	?_fcscheck+1
  4796  0E2B  0008               	return
  4797  0E2C                     __end_of_fcscheck:	
  4798                           
  4799                           	psect	text8
  4800  08E2                     __ptext8:	
  4801 ;; *************** function _NM_waddress *****************
  4802 ;; Defined at:
  4803 ;;		line 72 in file "UART.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  NM_wad_heade    1    wreg     unsigned char 
  4806 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4807 ;;  wlow_address    1    2[COMMON] unsigned char 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      void 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0, pclath, cstack
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4819 ;;      Params:         2       0       0       0       0
  4820 ;;      Locals:         1       0       0       0       0
  4821 ;;      Temps:          0       0       0       0       0
  4822 ;;      Totals:         3       0       0       0       0
  4823 ;;Total ram usage:        3 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    1
  4826 ;; This function calls:
  4827 ;;		_putch
  4828 ;; This function is called by:
  4829 ;;		_main
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           
  4834                           ;psect for function _NM_waddress
  4835  08E2                     _NM_waddress:	
  4836                           
  4837                           ;incstack = 0
  4838                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4839                           ;NM_waddress@NM_wad_header stored from wreg
  4840  08E2  00F3               	movwf	NM_waddress@NM_wad_header
  4841                           
  4842                           ;UART.c: 73: putch(NM_wad_header);
  4843  08E3  0873               	movf	NM_waddress@NM_wad_header,w
  4844  08E4  120A  158A  20B8  120A  158A  	fcall	_putch
  4845                           
  4846                           ;UART.c: 74: putch(whigh_address);
  4847  08E9  0871               	movf	NM_waddress@whigh_address,w
  4848  08EA  120A  158A  20B8  120A  158A  	fcall	_putch
  4849                           
  4850                           ;UART.c: 75: putch(wlow_address);
  4851  08EF  0872               	movf	NM_waddress@wlow_address,w
  4852  08F0  120A  158A  20B8   	fcall	_putch
  4853  08F3  0008               	return
  4854  08F4                     __end_of_NM_waddress:	
  4855                           
  4856                           	psect	text9
  4857  08B8                     __ptext9:	
  4858 ;; *************** function _putch *****************
  4859 ;; Defined at:
  4860 ;;		line 39 in file "UART.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;  byte            1    wreg     unsigned char 
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;  byte            1    0[COMMON] unsigned char 
  4865 ;; Return value:  Size  Location     Type
  4866 ;;                  1    wreg      void 
  4867 ;; Registers used:
  4868 ;;		wreg
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4874 ;;      Params:         0       0       0       0       0
  4875 ;;      Locals:         1       0       0       0       0
  4876 ;;      Temps:          0       0       0       0       0
  4877 ;;      Totals:         1       0       0       0       0
  4878 ;;Total ram usage:        1 bytes
  4879 ;; Hardware stack levels used:    1
  4880 ;; This function calls:
  4881 ;;		Nothing
  4882 ;; This function is called by:
  4883 ;;		_NM_waddress
  4884 ;;		_TXOBC_waddress
  4885 ;;		_putstr
  4886 ;;		_putAX25
  4887 ;;		_conv_DI_UARTRX
  4888 ;;		_test_Packetmaker
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           
  4893                           ;psect for function _putch
  4894  08B8                     _putch:	
  4895                           
  4896                           ;incstack = 0
  4897                           ; Regs used in _putch: [wreg]
  4898                           ;putch@byte stored from wreg
  4899  08B8  00F0               	movwf	putch@byte
  4900  08B9                     l55:	
  4901                           ;UART.c: 40: while(!TXIF);
  4902                           
  4903  08B9  1283               	bcf	3,5	;RP0=0, select bank0
  4904  08BA  1303               	bcf	3,6	;RP1=0, select bank0
  4905  08BB  1E0C               	btfss	12,4	;volatile
  4906  08BC  28B9               	goto	l55
  4907                           
  4908                           ;UART.c: 41: TXREG = byte;
  4909  08BD  0870               	movf	putch@byte,w
  4910  08BE  0099               	movwf	25	;volatile
  4911  08BF  0008               	return
  4912  08C0                     __end_of_putch:	
  4913                           
  4914                           	psect	text10
  4915  0909                     __ptext10:	
  4916 ;; *************** function _Init_SERIAL *****************
  4917 ;; Defined at:
  4918 ;;		line 6 in file "UART.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      void 
  4925 ;; Registers used:
  4926 ;;		wreg
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4932 ;;      Params:         0       0       0       0       0
  4933 ;;      Locals:         0       0       0       0       0
  4934 ;;      Temps:          0       0       0       0       0
  4935 ;;      Totals:         0       0       0       0       0
  4936 ;;Total ram usage:        0 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_main
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           
  4946                           ;psect for function _Init_SERIAL
  4947  0909                     _Init_SERIAL:	
  4948                           
  4949                           ;UART.c: 7: SPBRG = 10;
  4950                           
  4951                           ;incstack = 0
  4952                           ; Regs used in _Init_SERIAL: [wreg]
  4953  0909  300A               	movlw	10
  4954  090A  1683               	bsf	3,5	;RP0=1, select bank1
  4955  090B  1303               	bcf	3,6	;RP1=0, select bank1
  4956  090C  0099               	movwf	25	;volatile
  4957                           
  4958                           ;UART.c: 8: BRGH = 0;
  4959  090D  1118               	bcf	24,2	;volatile
  4960                           
  4961                           ;UART.c: 9: SYNC = 0;
  4962  090E  1218               	bcf	24,4	;volatile
  4963                           
  4964                           ;UART.c: 10: SPEN = 1;
  4965  090F  1283               	bcf	3,5	;RP0=0, select bank0
  4966  0910  1303               	bcf	3,6	;RP1=0, select bank0
  4967  0911  1798               	bsf	24,7	;volatile
  4968                           
  4969                           ;UART.c: 11: CREN = 1;
  4970  0912  1618               	bsf	24,4	;volatile
  4971                           
  4972                           ;UART.c: 12: SREN = 0;
  4973  0913  1298               	bcf	24,5	;volatile
  4974                           
  4975                           ;UART.c: 13: RCIF = 0;
  4976  0914  128C               	bcf	12,5	;volatile
  4977                           
  4978                           ;UART.c: 14: TXIE = 0;
  4979  0915  1683               	bsf	3,5	;RP0=1, select bank1
  4980  0916  1303               	bcf	3,6	;RP1=0, select bank1
  4981  0917  120C               	bcf	12,4	;volatile
  4982                           
  4983                           ;UART.c: 15: RCIE = 1;
  4984  0918  168C               	bsf	12,5	;volatile
  4985                           
  4986                           ;UART.c: 16: TX9 = 0;
  4987  0919  1318               	bcf	24,6	;volatile
  4988                           
  4989                           ;UART.c: 17: RX9 = 0;
  4990  091A  1283               	bcf	3,5	;RP0=0, select bank0
  4991  091B  1303               	bcf	3,6	;RP1=0, select bank0
  4992  091C  1318               	bcf	24,6	;volatile
  4993                           
  4994                           ;UART.c: 18: TXEN = 0;
  4995  091D  1683               	bsf	3,5	;RP0=1, select bank1
  4996  091E  1303               	bcf	3,6	;RP1=0, select bank1
  4997  091F  1298               	bcf	24,5	;volatile
  4998                           
  4999                           ;UART.c: 19: TXEN = 1;
  5000  0920  1698               	bsf	24,5	;volatile
  5001  0921  0008               	return
  5002  0922                     __end_of_Init_SERIAL:	
  5003                           
  5004                           	psect	text11
  5005  093B                     __ptext11:	
  5006 ;; *************** function _Init_MPU *****************
  5007 ;; Defined at:
  5008 ;;		line 8 in file "Init_MPU.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;		None
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;		None
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      void 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5022 ;;      Params:         0       0       0       0       0
  5023 ;;      Locals:         0       0       0       0       0
  5024 ;;      Temps:          0       0       0       0       0
  5025 ;;      Totals:         0       0       0       0       0
  5026 ;;Total ram usage:        0 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; This function calls:
  5029 ;;		Nothing
  5030 ;; This function is called by:
  5031 ;;		_main
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           
  5036                           ;psect for function _Init_MPU
  5037  093B                     _Init_MPU:	
  5038                           
  5039                           ;Init_MPU.c: 11: PORTA = 0x00;
  5040                           
  5041                           ;incstack = 0
  5042                           ; Regs used in _Init_MPU: [wreg+status,2]
  5043  093B  1283               	bcf	3,5	;RP0=0, select bank0
  5044  093C  1303               	bcf	3,6	;RP1=0, select bank0
  5045  093D  0185               	clrf	5	;volatile
  5046                           
  5047                           ;Init_MPU.c: 12: PORTB = 0x00;
  5048  093E  0186               	clrf	6	;volatile
  5049                           
  5050                           ;Init_MPU.c: 13: PORTC = 0x00;
  5051  093F  0187               	clrf	7	;volatile
  5052                           
  5053                           ;Init_MPU.c: 14: PORTD = 0x00;
  5054  0940  0188               	clrf	8	;volatile
  5055                           
  5056                           ;Init_MPU.c: 15: PORTE = 0x00;
  5057  0941  0189               	clrf	9	;volatile
  5058                           
  5059                           ;Init_MPU.c: 18: ANSEL = 0x00;
  5060  0942  1683               	bsf	3,5	;RP0=1, select bank3
  5061  0943  1703               	bsf	3,6	;RP1=1, select bank3
  5062  0944  0188               	clrf	8	;volatile
  5063                           
  5064                           ;Init_MPU.c: 19: ANSELH = 0x00;
  5065  0945  0189               	clrf	9	;volatile
  5066                           
  5067                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  5068  0946  3080               	movlw	128
  5069  0947  1683               	bsf	3,5	;RP0=1, select bank1
  5070  0948  1303               	bcf	3,6	;RP1=0, select bank1
  5071  0949  0085               	movwf	5	;volatile
  5072                           
  5073                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  5074  094A  3020               	movlw	32
  5075  094B  0086               	movwf	6	;volatile
  5076                           
  5077                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  5078  094C  3098               	movlw	152
  5079  094D  0087               	movwf	7	;volatile
  5080                           
  5081                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  5082  094E  0188               	clrf	8	;volatile
  5083                           
  5084                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  5085  094F  0189               	clrf	9	;volatile
  5086                           
  5087                           ;Init_MPU.c: 30: PORTA = 0x00;
  5088  0950  1283               	bcf	3,5	;RP0=0, select bank0
  5089  0951  1303               	bcf	3,6	;RP1=0, select bank0
  5090  0952  0185               	clrf	5	;volatile
  5091                           
  5092                           ;Init_MPU.c: 31: PORTB = 0x00;
  5093  0953  0186               	clrf	6	;volatile
  5094                           
  5095                           ;Init_MPU.c: 32: PORTC = 0x00;
  5096  0954  0187               	clrf	7	;volatile
  5097                           
  5098                           ;Init_MPU.c: 33: PORTD = 0x00;
  5099  0955  0188               	clrf	8	;volatile
  5100                           
  5101                           ;Init_MPU.c: 34: PORTE = 0x00;
  5102  0956  0189               	clrf	9	;volatile
  5103  0957  0008               	return
  5104  0958                     __end_of_Init_MPU:	
  5105                           
  5106                           	psect	text12
  5107  0A6F                     __ptext12:	
  5108 ;; *************** function _Init_I2C_M *****************
  5109 ;; Defined at:
  5110 ;;		line 8 in file "I2C.c"
  5111 ;; Parameters:    Size  Location     Type
  5112 ;;  c               4    0[BANK0 ] const unsigned long 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;		None
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  1    wreg      void 
  5117 ;; Registers used:
  5118 ;;		wreg, status,2, status,0, pclath, cstack
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5124 ;;      Params:         0       4       0       0       0
  5125 ;;      Locals:         0       0       0       0       0
  5126 ;;      Temps:          0       4       0       0       0
  5127 ;;      Totals:         0       8       0       0       0
  5128 ;;Total ram usage:        8 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    1
  5131 ;; This function calls:
  5132 ;;		___lldiv
  5133 ;; This function is called by:
  5134 ;;		_main
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           
  5139                           ;psect for function _Init_I2C_M
  5140  0A6F                     _Init_I2C_M:	
  5141                           
  5142                           ;I2C.c: 9: SSPCON = 0b00101000;
  5143                           
  5144                           ;incstack = 0
  5145                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  5146  0A6F  3028               	movlw	40
  5147  0A70  1283               	bcf	3,5	;RP0=0, select bank0
  5148  0A71  1303               	bcf	3,6	;RP1=0, select bank0
  5149  0A72  0094               	movwf	20	;volatile
  5150                           
  5151                           ;I2C.c: 10: SSPCON2 = 0;
  5152  0A73  1683               	bsf	3,5	;RP0=1, select bank1
  5153  0A74  1303               	bcf	3,6	;RP1=0, select bank1
  5154  0A75  0191               	clrf	17	;volatile
  5155                           
  5156                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5157  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  5158  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  5159  0A78  0820               	movf	Init_I2C_M@c,w
  5160  0A79  00A4               	movwf	??_Init_I2C_M
  5161  0A7A  0821               	movf	Init_I2C_M@c+1,w
  5162  0A7B  00A5               	movwf	??_Init_I2C_M+1
  5163  0A7C  0822               	movf	Init_I2C_M@c+2,w
  5164  0A7D  00A6               	movwf	??_Init_I2C_M+2
  5165  0A7E  0823               	movf	Init_I2C_M@c+3,w
  5166  0A7F  00A7               	movwf	??_Init_I2C_M+3
  5167  0A80  3002               	movlw	2
  5168  0A81                     u3105:	
  5169  0A81  1003               	clrc
  5170  0A82  0DA4               	rlf	??_Init_I2C_M,f
  5171  0A83  0DA5               	rlf	??_Init_I2C_M+1,f
  5172  0A84  0DA6               	rlf	??_Init_I2C_M+2,f
  5173  0A85  0DA7               	rlf	??_Init_I2C_M+3,f
  5174  0A86  3EFF               	addlw	-1
  5175  0A87  1D03               	skipz
  5176  0A88  2A81               	goto	u3105
  5177  0A89  0827               	movf	??_Init_I2C_M+3,w
  5178  0A8A  00F3               	movwf	___lldiv@divisor+3
  5179  0A8B  0826               	movf	??_Init_I2C_M+2,w
  5180  0A8C  00F2               	movwf	___lldiv@divisor+2
  5181  0A8D  0825               	movf	??_Init_I2C_M+1,w
  5182  0A8E  00F1               	movwf	___lldiv@divisor+1
  5183  0A8F  0824               	movf	??_Init_I2C_M,w
  5184  0A90  00F0               	movwf	___lldiv@divisor
  5185  0A91  3000               	movlw	0
  5186  0A92  00F7               	movwf	___lldiv@dividend+3
  5187  0A93  3098               	movlw	152
  5188  0A94  00F6               	movwf	___lldiv@dividend+2
  5189  0A95  3096               	movlw	150
  5190  0A96  00F5               	movwf	___lldiv@dividend+1
  5191  0A97  3080               	movlw	128
  5192  0A98  00F4               	movwf	___lldiv@dividend
  5193  0A99  120A  158A  2409   	fcall	___lldiv
  5194  0A9C  0870               	movf	?___lldiv,w
  5195  0A9D  3EFF               	addlw	255
  5196  0A9E  1683               	bsf	3,5	;RP0=1, select bank1
  5197  0A9F  1303               	bcf	3,6	;RP1=0, select bank1
  5198  0AA0  0093               	movwf	19	;volatile
  5199                           
  5200                           ;I2C.c: 12: SSPSTAT = 0;
  5201  0AA1  0194               	clrf	20	;volatile
  5202  0AA2  0008               	return
  5203  0AA3                     __end_of_Init_I2C_M:	
  5204                           
  5205                           	psect	text13
  5206  0C09                     __ptext13:	
  5207 ;; *************** function ___lldiv *****************
  5208 ;; Defined at:
  5209 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;  divisor         4    0[COMMON] unsigned long 
  5212 ;;  dividend        4    4[COMMON] unsigned long 
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  quotient        4    9[COMMON] unsigned long 
  5215 ;;  counter         1   13[COMMON] unsigned char 
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  4    0[COMMON] unsigned long 
  5218 ;; Registers used:
  5219 ;;		wreg, status,2, status,0
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5225 ;;      Params:         8       0       0       0       0
  5226 ;;      Locals:         5       0       0       0       0
  5227 ;;      Temps:          1       0       0       0       0
  5228 ;;      Totals:        14       0       0       0       0
  5229 ;;Total ram usage:       14 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; This function calls:
  5232 ;;		Nothing
  5233 ;; This function is called by:
  5234 ;;		_Init_I2C_M
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           
  5239                           ;psect for function ___lldiv
  5240  0C09                     ___lldiv:	
  5241                           
  5242                           ;incstack = 0
  5243                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5244  0C09  3000               	movlw	0
  5245  0C0A  00FC               	movwf	___lldiv@quotient+3
  5246  0C0B  3000               	movlw	0
  5247  0C0C  00FB               	movwf	___lldiv@quotient+2
  5248  0C0D  3000               	movlw	0
  5249  0C0E  00FA               	movwf	___lldiv@quotient+1
  5250  0C0F  3000               	movlw	0
  5251  0C10  00F9               	movwf	___lldiv@quotient
  5252  0C11  0873               	movf	___lldiv@divisor+3,w
  5253  0C12  0472               	iorwf	___lldiv@divisor+2,w
  5254  0C13  0471               	iorwf	___lldiv@divisor+1,w
  5255  0C14  0470               	iorwf	___lldiv@divisor,w
  5256  0C15  1903               	skipnz
  5257  0C16  2C5E               	goto	l3155
  5258  0C17  01FD               	clrf	___lldiv@counter
  5259  0C18  0AFD               	incf	___lldiv@counter,f
  5260  0C19                     l3141:	
  5261  0C19  1BF3               	btfsc	___lldiv@divisor+3,7
  5262  0C1A  2C29               	goto	l3143
  5263  0C1B  3001               	movlw	1
  5264  0C1C  00F8               	movwf	??___lldiv
  5265  0C1D                     u2955:	
  5266  0C1D  1003               	clrc
  5267  0C1E  0DF0               	rlf	___lldiv@divisor,f
  5268  0C1F  0DF1               	rlf	___lldiv@divisor+1,f
  5269  0C20  0DF2               	rlf	___lldiv@divisor+2,f
  5270  0C21  0DF3               	rlf	___lldiv@divisor+3,f
  5271  0C22  0BF8               	decfsz	??___lldiv,f
  5272  0C23  2C1D               	goto	u2955
  5273  0C24  3001               	movlw	1
  5274  0C25  00F8               	movwf	??___lldiv
  5275  0C26  0878               	movf	??___lldiv,w
  5276  0C27  07FD               	addwf	___lldiv@counter,f
  5277  0C28  2C19               	goto	l3141
  5278  0C29                     l3143:	
  5279  0C29  3001               	movlw	1
  5280  0C2A  00F8               	movwf	??___lldiv
  5281  0C2B                     u2975:	
  5282  0C2B  1003               	clrc
  5283  0C2C  0DF9               	rlf	___lldiv@quotient,f
  5284  0C2D  0DFA               	rlf	___lldiv@quotient+1,f
  5285  0C2E  0DFB               	rlf	___lldiv@quotient+2,f
  5286  0C2F  0DFC               	rlf	___lldiv@quotient+3,f
  5287  0C30  0BF8               	decfsz	??___lldiv,f
  5288  0C31  2C2B               	goto	u2975
  5289  0C32  0873               	movf	___lldiv@divisor+3,w
  5290  0C33  0277               	subwf	___lldiv@dividend+3,w
  5291  0C34  1D03               	skipz
  5292  0C35  2C40               	goto	u2985
  5293  0C36  0872               	movf	___lldiv@divisor+2,w
  5294  0C37  0276               	subwf	___lldiv@dividend+2,w
  5295  0C38  1D03               	skipz
  5296  0C39  2C40               	goto	u2985
  5297  0C3A  0871               	movf	___lldiv@divisor+1,w
  5298  0C3B  0275               	subwf	___lldiv@dividend+1,w
  5299  0C3C  1D03               	skipz
  5300  0C3D  2C40               	goto	u2985
  5301  0C3E  0870               	movf	___lldiv@divisor,w
  5302  0C3F  0274               	subwf	___lldiv@dividend,w
  5303  0C40                     u2985:	
  5304  0C40  1C03               	skipc
  5305  0C41  2C51               	goto	l3151
  5306  0C42  0870               	movf	___lldiv@divisor,w
  5307  0C43  02F4               	subwf	___lldiv@dividend,f
  5308  0C44  0871               	movf	___lldiv@divisor+1,w
  5309  0C45  1C03               	skipc
  5310  0C46  0F71               	incfsz	___lldiv@divisor+1,w
  5311  0C47  02F5               	subwf	___lldiv@dividend+1,f
  5312  0C48  0872               	movf	___lldiv@divisor+2,w
  5313  0C49  1C03               	skipc
  5314  0C4A  0F72               	incfsz	___lldiv@divisor+2,w
  5315  0C4B  02F6               	subwf	___lldiv@dividend+2,f
  5316  0C4C  0873               	movf	___lldiv@divisor+3,w
  5317  0C4D  1C03               	skipc
  5318  0C4E  0F73               	incfsz	___lldiv@divisor+3,w
  5319  0C4F  02F7               	subwf	___lldiv@dividend+3,f
  5320  0C50  1479               	bsf	___lldiv@quotient,0
  5321  0C51                     l3151:	
  5322  0C51  3001               	movlw	1
  5323  0C52                     u2995:	
  5324  0C52  1003               	clrc
  5325  0C53  0CF3               	rrf	___lldiv@divisor+3,f
  5326  0C54  0CF2               	rrf	___lldiv@divisor+2,f
  5327  0C55  0CF1               	rrf	___lldiv@divisor+1,f
  5328  0C56  0CF0               	rrf	___lldiv@divisor,f
  5329  0C57  3EFF               	addlw	-1
  5330  0C58  1D03               	skipz
  5331  0C59  2C52               	goto	u2995
  5332  0C5A  3001               	movlw	1
  5333  0C5B  02FD               	subwf	___lldiv@counter,f
  5334  0C5C  1D03               	btfss	3,2
  5335  0C5D  2C29               	goto	l3143
  5336  0C5E                     l3155:	
  5337  0C5E  087C               	movf	___lldiv@quotient+3,w
  5338  0C5F  00F3               	movwf	?___lldiv+3
  5339  0C60  087B               	movf	___lldiv@quotient+2,w
  5340  0C61  00F2               	movwf	?___lldiv+2
  5341  0C62  087A               	movf	___lldiv@quotient+1,w
  5342  0C63  00F1               	movwf	?___lldiv+1
  5343  0C64  0879               	movf	___lldiv@quotient,w
  5344  0C65  00F0               	movwf	?___lldiv
  5345  0C66  0008               	return
  5346  0C67                     __end_of___lldiv:	
  5347                           
  5348                           	psect	text14
  5349  0A15                     __ptext14:	
  5350 ;; *************** function _FMTX *****************
  5351 ;; Defined at:
  5352 ;;		line 270 in file "FMCW.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  Nref            2   52[BANK0 ] int 
  5355 ;;  Nprg            1   54[BANK0 ] PTR int 
  5356 ;;		 -> main@FMTX_Nprg(10), FMTX_Nprg(10), 
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;  fmtx            2   55[BANK0 ] int 
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  1    wreg      void 
  5361 ;; Registers used:
  5362 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5368 ;;      Params:         0       3       0       0       0
  5369 ;;      Locals:         0       2       0       0       0
  5370 ;;      Temps:          1       0       0       0       0
  5371 ;;      Totals:         1       5       0       0       0
  5372 ;;Total ram usage:        6 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    3
  5375 ;; This function calls:
  5376 ;;		_OPINIT
  5377 ;;		_OUTFQ
  5378 ;;		_RFDOUT
  5379 ;; This function is called by:
  5380 ;;		_main
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _FMTX
  5386  0A15                     _FMTX:	
  5387                           
  5388                           ;FMCW.c: 271: int fmtx = 1;
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5392  0A15  3001               	movlw	1
  5393  0A16  1283               	bcf	3,5	;RP0=0, select bank0
  5394  0A17  1303               	bcf	3,6	;RP1=0, select bank0
  5395  0A18  00D7               	movwf	FMTX@fmtx
  5396  0A19  3000               	movlw	0
  5397  0A1A  00D8               	movwf	FMTX@fmtx+1
  5398                           
  5399                           ;FMCW.c: 272: OPINIT(fmtx);
  5400  0A1B  0858               	movf	FMTX@fmtx+1,w
  5401  0A1C  00F5               	movwf	OPINIT@fmcwtxrx+1
  5402  0A1D  0857               	movf	FMTX@fmtx,w
  5403  0A1E  00F4               	movwf	OPINIT@fmcwtxrx
  5404  0A1F  120A  158A  252D  120A  158A  	fcall	_OPINIT
  5405                           
  5406                           ;FMCW.c: 273: RFDOUT(fmtx, Nref);
  5407  0A24  1283               	bcf	3,5	;RP0=0, select bank0
  5408  0A25  1303               	bcf	3,6	;RP1=0, select bank0
  5409  0A26  0858               	movf	FMTX@fmtx+1,w
  5410  0A27  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5411  0A28  0857               	movf	FMTX@fmtx,w
  5412  0A29  00F9               	movwf	RFDOUT@fmcwtxrx
  5413  0A2A  0855               	movf	FMTX@Nref+1,w
  5414  0A2B  00FC               	movwf	RFDOUT@Nref+1
  5415  0A2C  0854               	movf	FMTX@Nref,w
  5416  0A2D  00FB               	movwf	RFDOUT@Nref
  5417  0A2E  120A  118A  2060  120A  158A  	fcall	_RFDOUT
  5418                           
  5419                           ;FMCW.c: 274: OUTFQ(fmtx, Nprg);
  5420  0A33  1283               	bcf	3,5	;RP0=0, select bank0
  5421  0A34  1303               	bcf	3,6	;RP1=0, select bank0
  5422  0A35  0858               	movf	FMTX@fmtx+1,w
  5423  0A36  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5424  0A37  0857               	movf	FMTX@fmtx,w
  5425  0A38  00F9               	movwf	OUTFQ@fmcwtxrx
  5426  0A39  0856               	movf	FMTX@Nprg,w
  5427  0A3A  00FD               	movwf	??_FMTX
  5428  0A3B  087D               	movf	??_FMTX,w
  5429  0A3C  00FB               	movwf	OUTFQ@Nprg
  5430  0A3D  120A  158A  262C   	fcall	_OUTFQ
  5431  0A40  0008               	return
  5432  0A41                     __end_of_FMTX:	
  5433                           
  5434                           	psect	text15
  5435  09E9                     __ptext15:	
  5436 ;; *************** function _FMRX *****************
  5437 ;; Defined at:
  5438 ;;		line 298 in file "FMCW.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;  Nref            2   52[BANK0 ] int 
  5441 ;;  Nprg            1   54[BANK0 ] PTR int 
  5442 ;;		 -> main@FMRX_Nprg(10), FMRX_Nprg(10), 
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;  fmrx            2   55[BANK0 ] int 
  5445 ;; Return value:  Size  Location     Type
  5446 ;;                  1    wreg      void 
  5447 ;; Registers used:
  5448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5454 ;;      Params:         0       3       0       0       0
  5455 ;;      Locals:         0       2       0       0       0
  5456 ;;      Temps:          1       0       0       0       0
  5457 ;;      Totals:         1       5       0       0       0
  5458 ;;Total ram usage:        6 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:    3
  5461 ;; This function calls:
  5462 ;;		_OPINIT
  5463 ;;		_OUTFQ
  5464 ;;		_RFDOUT
  5465 ;; This function is called by:
  5466 ;;		_main
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           
  5471                           ;psect for function _FMRX
  5472  09E9                     _FMRX:	
  5473                           
  5474                           ;FMCW.c: 299: int fmrx = 3;
  5475                           
  5476                           ;incstack = 0
  5477                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5478  09E9  3003               	movlw	3
  5479  09EA  1283               	bcf	3,5	;RP0=0, select bank0
  5480  09EB  1303               	bcf	3,6	;RP1=0, select bank0
  5481  09EC  00D7               	movwf	FMRX@fmrx
  5482  09ED  3000               	movlw	0
  5483  09EE  00D8               	movwf	FMRX@fmrx+1
  5484                           
  5485                           ;FMCW.c: 300: OPINIT(fmrx);
  5486  09EF  0858               	movf	FMRX@fmrx+1,w
  5487  09F0  00F5               	movwf	OPINIT@fmcwtxrx+1
  5488  09F1  0857               	movf	FMRX@fmrx,w
  5489  09F2  00F4               	movwf	OPINIT@fmcwtxrx
  5490  09F3  120A  158A  252D  120A  158A  	fcall	_OPINIT
  5491                           
  5492                           ;FMCW.c: 301: RFDOUT(fmrx, Nref);
  5493  09F8  1283               	bcf	3,5	;RP0=0, select bank0
  5494  09F9  1303               	bcf	3,6	;RP1=0, select bank0
  5495  09FA  0858               	movf	FMRX@fmrx+1,w
  5496  09FB  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5497  09FC  0857               	movf	FMRX@fmrx,w
  5498  09FD  00F9               	movwf	RFDOUT@fmcwtxrx
  5499  09FE  0855               	movf	FMRX@Nref+1,w
  5500  09FF  00FC               	movwf	RFDOUT@Nref+1
  5501  0A00  0854               	movf	FMRX@Nref,w
  5502  0A01  00FB               	movwf	RFDOUT@Nref
  5503  0A02  120A  118A  2060  120A  158A  	fcall	_RFDOUT
  5504                           
  5505                           ;FMCW.c: 302: OUTFQ(fmrx, Nprg);
  5506  0A07  1283               	bcf	3,5	;RP0=0, select bank0
  5507  0A08  1303               	bcf	3,6	;RP1=0, select bank0
  5508  0A09  0858               	movf	FMRX@fmrx+1,w
  5509  0A0A  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5510  0A0B  0857               	movf	FMRX@fmrx,w
  5511  0A0C  00F9               	movwf	OUTFQ@fmcwtxrx
  5512  0A0D  0856               	movf	FMRX@Nprg,w
  5513  0A0E  00FD               	movwf	??_FMRX
  5514  0A0F  087D               	movf	??_FMRX,w
  5515  0A10  00FB               	movwf	OUTFQ@Nprg
  5516  0A11  120A  158A  262C   	fcall	_OUTFQ
  5517  0A14  0008               	return
  5518  0A15                     __end_of_FMRX:	
  5519                           
  5520                           	psect	text16
  5521  0003                     __ptext16:	
  5522 ;; *************** function _EEPROM_Write *****************
  5523 ;; Defined at:
  5524 ;;		line 51 in file "I2C.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  EEPROM_addre    1    wreg     unsigned char 
  5527 ;;  high_address    1    2[COMMON] unsigned char 
  5528 ;;  low_address     1    3[COMMON] unsigned char 
  5529 ;;  data            1    4[COMMON] PTR unsigned char 
  5530 ;;		 -> NULL(0), dData(16), 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5533 ;;  Address         1    9[COMMON] unsigned char 
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5543 ;;      Params:         3       0       0       0       0
  5544 ;;      Locals:         2       0       0       0       0
  5545 ;;      Temps:          3       0       0       0       0
  5546 ;;      Totals:         8       0       0       0       0
  5547 ;;Total ram usage:        8 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    2
  5550 ;; This function calls:
  5551 ;;		_I2C_Master_Start
  5552 ;;		_I2C_Master_Stop
  5553 ;;		_I2C_Master_Write
  5554 ;; This function is called by:
  5555 ;;		_main
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function _EEPROM_Write
  5561  0003                     _EEPROM_Write:	
  5562                           
  5563                           ;incstack = 0
  5564                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5565                           ;EEPROM_Write@EEPROM_address stored from wreg
  5566  0003  00F8               	movwf	EEPROM_Write@EEPROM_address
  5567                           
  5568                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5569  0004  0878               	movf	EEPROM_Write@EEPROM_address,w
  5570  0005  00F5               	movwf	??_EEPROM_Write
  5571  0006  0775               	addwf	??_EEPROM_Write,w
  5572  0007  00F6               	movwf	??_EEPROM_Write+1
  5573  0008  0876               	movf	??_EEPROM_Write+1,w
  5574  0009  00F9               	movwf	EEPROM_Write@Address
  5575                           
  5576                           ;I2C.c: 55: I2C_Master_Start();
  5577  000A  120A  158A  20A2  120A  118A  	fcall	_I2C_Master_Start
  5578                           
  5579                           ;I2C.c: 56: I2C_Master_Write(Address);
  5580  000F  0879               	movf	EEPROM_Write@Address,w
  5581  0010  00F5               	movwf	??_EEPROM_Write
  5582  0011  01F6               	clrf	??_EEPROM_Write+1
  5583  0012  0875               	movf	??_EEPROM_Write,w
  5584  0013  00F0               	movwf	I2C_Master_Write@d
  5585  0014  0876               	movf	??_EEPROM_Write+1,w
  5586  0015  00F1               	movwf	I2C_Master_Write@d+1
  5587  0016  120A  158A  20B0  120A  118A  	fcall	_I2C_Master_Write
  5588                           
  5589                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5590  001B  0872               	movf	EEPROM_Write@high_address,w
  5591  001C  00F5               	movwf	??_EEPROM_Write
  5592  001D  01F6               	clrf	??_EEPROM_Write+1
  5593  001E  0875               	movf	??_EEPROM_Write,w
  5594  001F  00F0               	movwf	I2C_Master_Write@d
  5595  0020  0876               	movf	??_EEPROM_Write+1,w
  5596  0021  00F1               	movwf	I2C_Master_Write@d+1
  5597  0022  120A  158A  20B0  120A  118A  	fcall	_I2C_Master_Write
  5598                           
  5599                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5600  0027  0873               	movf	EEPROM_Write@low_address,w
  5601  0028  00F5               	movwf	??_EEPROM_Write
  5602  0029  01F6               	clrf	??_EEPROM_Write+1
  5603  002A  0875               	movf	??_EEPROM_Write,w
  5604  002B  00F0               	movwf	I2C_Master_Write@d
  5605  002C  0876               	movf	??_EEPROM_Write+1,w
  5606  002D  00F1               	movwf	I2C_Master_Write@d+1
  5607  002E  120A  158A  20B0  120A  118A  	fcall	_I2C_Master_Write
  5608  0033                     l3347:	
  5609                           ;I2C.c: 59: while(*data){
  5610                           
  5611  0033  0874               	movf	EEPROM_Write@data,w
  5612  0034  0084               	movwf	4
  5613  0035  1783               	bsf	3,7	;select IRP bank2
  5614  0036  0800               	movf	0,w
  5615  0037  1903               	btfsc	3,2
  5616  0038  284D               	goto	l3349
  5617                           
  5618                           ;I2C.c: 60: I2C_Master_Write(*data);
  5619  0039  0874               	movf	EEPROM_Write@data,w
  5620  003A  0084               	movwf	4
  5621  003B  1783               	bsf	3,7	;select IRP bank2
  5622  003C  0800               	movf	0,w
  5623  003D  00F5               	movwf	??_EEPROM_Write
  5624  003E  01F6               	clrf	??_EEPROM_Write+1
  5625  003F  0875               	movf	??_EEPROM_Write,w
  5626  0040  00F0               	movwf	I2C_Master_Write@d
  5627  0041  0876               	movf	??_EEPROM_Write+1,w
  5628  0042  00F1               	movwf	I2C_Master_Write@d+1
  5629  0043  120A  158A  20B0  120A  118A  	fcall	_I2C_Master_Write
  5630                           
  5631                           ;I2C.c: 61: ++data;
  5632  0048  3001               	movlw	1
  5633  0049  00F5               	movwf	??_EEPROM_Write
  5634  004A  0875               	movf	??_EEPROM_Write,w
  5635  004B  07F4               	addwf	EEPROM_Write@data,f
  5636  004C  2833               	goto	l3347
  5637  004D                     l3349:	
  5638                           
  5639                           ;I2C.c: 62: }
  5640                           ;I2C.c: 63: I2C_Master_Stop();
  5641  004D  120A  158A  20A9  120A  118A  	fcall	_I2C_Master_Stop
  5642                           
  5643                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5644  0052  3003               	movlw	3
  5645  0053  00F7               	movwf	??_EEPROM_Write+2
  5646  0054  308A               	movlw	138
  5647  0055  00F6               	movwf	??_EEPROM_Write+1
  5648  0056  3055               	movlw	85
  5649  0057  00F5               	movwf	??_EEPROM_Write
  5650  0058                     u3627:	
  5651  0058  0BF5               	decfsz	??_EEPROM_Write,f
  5652  0059  2858               	goto	u3627
  5653  005A  0BF6               	decfsz	??_EEPROM_Write+1,f
  5654  005B  2858               	goto	u3627
  5655  005C  0BF7               	decfsz	??_EEPROM_Write+2,f
  5656  005D  2858               	goto	u3627
  5657  005E  285F               	nop2
  5658  005F  0008               	return
  5659  0060                     __end_of_EEPROM_Write:	
  5660                           
  5661                           	psect	text17
  5662  08B0                     __ptext17:	
  5663 ;; *************** function _I2C_Master_Write *****************
  5664 ;; Defined at:
  5665 ;;		line 34 in file "I2C.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;  d               2    0[COMMON] unsigned int 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;		None
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      void 
  5672 ;; Registers used:
  5673 ;;		wreg, status,2, status,0, pclath, cstack
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5679 ;;      Params:         2       0       0       0       0
  5680 ;;      Locals:         0       0       0       0       0
  5681 ;;      Temps:          0       0       0       0       0
  5682 ;;      Totals:         2       0       0       0       0
  5683 ;;Total ram usage:        2 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:    1
  5686 ;; This function calls:
  5687 ;;		_I2C_Master_Wait
  5688 ;; This function is called by:
  5689 ;;		_EEPROM_Write
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           
  5694                           ;psect for function _I2C_Master_Write
  5695  08B0                     _I2C_Master_Write:	
  5696                           
  5697                           ;I2C.c: 35: I2C_Master_Wait();
  5698                           
  5699                           ;incstack = 0
  5700                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5701  08B0  120A  158A  20C8   	fcall	_I2C_Master_Wait
  5702                           
  5703                           ;I2C.c: 36: SSPBUF = d;
  5704  08B3  0870               	movf	I2C_Master_Write@d,w
  5705  08B4  1283               	bcf	3,5	;RP0=0, select bank0
  5706  08B5  1303               	bcf	3,6	;RP1=0, select bank0
  5707  08B6  0093               	movwf	19	;volatile
  5708  08B7  0008               	return
  5709  08B8                     __end_of_I2C_Master_Write:	
  5710                           
  5711                           	psect	text18
  5712  08A9                     __ptext18:	
  5713 ;; *************** function _I2C_Master_Stop *****************
  5714 ;; Defined at:
  5715 ;;		line 29 in file "I2C.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;		None
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;		None
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  1    wreg      void 
  5722 ;; Registers used:
  5723 ;;		wreg, status,2, status,0, pclath, cstack
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5729 ;;      Params:         0       0       0       0       0
  5730 ;;      Locals:         0       0       0       0       0
  5731 ;;      Temps:          0       0       0       0       0
  5732 ;;      Totals:         0       0       0       0       0
  5733 ;;Total ram usage:        0 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    1
  5736 ;; This function calls:
  5737 ;;		_I2C_Master_Wait
  5738 ;; This function is called by:
  5739 ;;		_EEPROM_Write
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           
  5744                           ;psect for function _I2C_Master_Stop
  5745  08A9                     _I2C_Master_Stop:	
  5746                           
  5747                           ;I2C.c: 30: I2C_Master_Wait();
  5748                           
  5749                           ;incstack = 0
  5750                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5751  08A9  120A  158A  20C8   	fcall	_I2C_Master_Wait
  5752                           
  5753                           ;I2C.c: 31: PEN = 1;
  5754  08AC  1683               	bsf	3,5	;RP0=1, select bank1
  5755  08AD  1303               	bcf	3,6	;RP1=0, select bank1
  5756  08AE  1511               	bsf	17,2	;volatile
  5757  08AF  0008               	return
  5758  08B0                     __end_of_I2C_Master_Stop:	
  5759                           
  5760                           	psect	text19
  5761  08A2                     __ptext19:	
  5762 ;; *************** function _I2C_Master_Start *****************
  5763 ;; Defined at:
  5764 ;;		line 19 in file "I2C.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;		None
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;		None
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  1    wreg      void 
  5771 ;; Registers used:
  5772 ;;		wreg, status,2, status,0, pclath, cstack
  5773 ;; Tracked objects:
  5774 ;;		On entry : 0/0
  5775 ;;		On exit  : 0/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5778 ;;      Params:         0       0       0       0       0
  5779 ;;      Locals:         0       0       0       0       0
  5780 ;;      Temps:          0       0       0       0       0
  5781 ;;      Totals:         0       0       0       0       0
  5782 ;;Total ram usage:        0 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:    1
  5785 ;; This function calls:
  5786 ;;		_I2C_Master_Wait
  5787 ;; This function is called by:
  5788 ;;		_EEPROM_Write
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           
  5793                           ;psect for function _I2C_Master_Start
  5794  08A2                     _I2C_Master_Start:	
  5795                           
  5796                           ;I2C.c: 20: I2C_Master_Wait();
  5797                           
  5798                           ;incstack = 0
  5799                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5800  08A2  120A  158A  20C8   	fcall	_I2C_Master_Wait
  5801                           
  5802                           ;I2C.c: 21: SEN = 1;
  5803  08A5  1683               	bsf	3,5	;RP0=1, select bank1
  5804  08A6  1303               	bcf	3,6	;RP1=0, select bank1
  5805  08A7  1411               	bsf	17,0	;volatile
  5806  08A8  0008               	return
  5807  08A9                     __end_of_I2C_Master_Start:	
  5808                           
  5809                           	psect	text20
  5810  08C8                     __ptext20:	
  5811 ;; *************** function _I2C_Master_Wait *****************
  5812 ;; Defined at:
  5813 ;;		line 15 in file "I2C.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;		None
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;		None
  5818 ;; Return value:  Size  Location     Type
  5819 ;;                  1    wreg      void 
  5820 ;; Registers used:
  5821 ;;		wreg, status,2
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5827 ;;      Params:         0       0       0       0       0
  5828 ;;      Locals:         0       0       0       0       0
  5829 ;;      Temps:          0       0       0       0       0
  5830 ;;      Totals:         0       0       0       0       0
  5831 ;;Total ram usage:        0 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; This function calls:
  5834 ;;		Nothing
  5835 ;; This function is called by:
  5836 ;;		_I2C_Master_Start
  5837 ;;		_I2C_Master_Stop
  5838 ;;		_I2C_Master_Write
  5839 ;;		_I2C_Master_RepeatedStart
  5840 ;;		_I2C_Master_Read
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _I2C_Master_Wait
  5846  08C8                     _I2C_Master_Wait:	
  5847  08C8                     l459:	
  5848                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5849                           
  5850                           ;incstack = 0
  5851                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5852                           
  5853  08C8  1683               	bsf	3,5	;RP0=1, select bank1
  5854  08C9  1303               	bcf	3,6	;RP1=0, select bank1
  5855  08CA  1914               	btfsc	20,2	;volatile
  5856  08CB  28C8               	goto	l459
  5857  08CC  0811               	movf	17,w	;volatile
  5858  08CD  391F               	andlw	31
  5859  08CE  1903               	btfsc	3,2
  5860  08CF  0008               	return
  5861  08D0  28C8               	goto	l459
  5862  08D1                     __end_of_I2C_Master_Wait:	
  5863                           
  5864                           	psect	text21
  5865  09BD                     __ptext21:	
  5866 ;; *************** function _CWTX *****************
  5867 ;; Defined at:
  5868 ;;		line 284 in file "FMCW.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;  Nref            2   52[BANK0 ] int 
  5871 ;;  Nprg            1   54[BANK0 ] PTR int 
  5872 ;;		 -> main@CWTX_Nprg(10), CWTX_Nprg(10), 
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;  cwtx            2   55[BANK0 ] int 
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  1    wreg      void 
  5877 ;; Registers used:
  5878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5884 ;;      Params:         0       3       0       0       0
  5885 ;;      Locals:         0       2       0       0       0
  5886 ;;      Temps:          1       0       0       0       0
  5887 ;;      Totals:         1       5       0       0       0
  5888 ;;Total ram usage:        6 bytes
  5889 ;; Hardware stack levels used:    1
  5890 ;; Hardware stack levels required when called:    3
  5891 ;; This function calls:
  5892 ;;		_OPINIT
  5893 ;;		_OUTFQ
  5894 ;;		_RFDOUT
  5895 ;; This function is called by:
  5896 ;;		_main
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           
  5901                           ;psect for function _CWTX
  5902  09BD                     _CWTX:	
  5903                           
  5904                           ;FMCW.c: 285: int cwtx = 2;
  5905                           
  5906                           ;incstack = 0
  5907                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5908  09BD  3002               	movlw	2
  5909  09BE  1283               	bcf	3,5	;RP0=0, select bank0
  5910  09BF  1303               	bcf	3,6	;RP1=0, select bank0
  5911  09C0  00D7               	movwf	CWTX@cwtx
  5912  09C1  3000               	movlw	0
  5913  09C2  00D8               	movwf	CWTX@cwtx+1
  5914                           
  5915                           ;FMCW.c: 286: OPINIT(cwtx);
  5916  09C3  0858               	movf	CWTX@cwtx+1,w
  5917  09C4  00F5               	movwf	OPINIT@fmcwtxrx+1
  5918  09C5  0857               	movf	CWTX@cwtx,w
  5919  09C6  00F4               	movwf	OPINIT@fmcwtxrx
  5920  09C7  120A  158A  252D  120A  158A  	fcall	_OPINIT
  5921                           
  5922                           ;FMCW.c: 287: RFDOUT(cwtx, Nref);
  5923  09CC  1283               	bcf	3,5	;RP0=0, select bank0
  5924  09CD  1303               	bcf	3,6	;RP1=0, select bank0
  5925  09CE  0858               	movf	CWTX@cwtx+1,w
  5926  09CF  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5927  09D0  0857               	movf	CWTX@cwtx,w
  5928  09D1  00F9               	movwf	RFDOUT@fmcwtxrx
  5929  09D2  0855               	movf	CWTX@Nref+1,w
  5930  09D3  00FC               	movwf	RFDOUT@Nref+1
  5931  09D4  0854               	movf	CWTX@Nref,w
  5932  09D5  00FB               	movwf	RFDOUT@Nref
  5933  09D6  120A  118A  2060  120A  158A  	fcall	_RFDOUT
  5934                           
  5935                           ;FMCW.c: 288: OUTFQ(cwtx, Nprg);
  5936  09DB  1283               	bcf	3,5	;RP0=0, select bank0
  5937  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  5938  09DD  0858               	movf	CWTX@cwtx+1,w
  5939  09DE  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5940  09DF  0857               	movf	CWTX@cwtx,w
  5941  09E0  00F9               	movwf	OUTFQ@fmcwtxrx
  5942  09E1  0856               	movf	CWTX@Nprg,w
  5943  09E2  00FD               	movwf	??_CWTX
  5944  09E3  087D               	movf	??_CWTX,w
  5945  09E4  00FB               	movwf	OUTFQ@Nprg
  5946  09E5  120A  158A  262C   	fcall	_OUTFQ
  5947  09E8  0008               	return
  5948  09E9                     __end_of_CWTX:	
  5949                           
  5950                           	psect	text22
  5951  0060                     __ptext22:	
  5952 ;; *************** function _RFDOUT *****************
  5953 ;; Defined at:
  5954 ;;		line 200 in file "FMCW.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  fmcwtxrx        2    9[COMMON] int 
  5957 ;;  Nref            2   11[COMMON] int 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  i               2   31[BANK0 ] int 
  5960 ;;  i               2   27[BANK0 ] int 
  5961 ;;  i               2   29[BANK0 ] int 
  5962 ;;  Nref_b         24    3[BANK0 ] int [12]
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  1    wreg      void 
  5965 ;; Registers used:
  5966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5972 ;;      Params:         4       0       0       0       0
  5973 ;;      Locals:         0      30       0       0       0
  5974 ;;      Temps:          0       3       0       0       0
  5975 ;;      Totals:         4      33       0       0       0
  5976 ;;Total ram usage:       37 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:    2
  5979 ;; This function calls:
  5980 ;;		_H_OUT
  5981 ;;		_L_OUT
  5982 ;;		_STBOUT
  5983 ;;		___awdiv
  5984 ;; This function is called by:
  5985 ;;		_FMTX
  5986 ;;		_CWTX
  5987 ;;		_FMRX
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           
  5992                           ;psect for function _RFDOUT
  5993  0060                     _RFDOUT:	
  5994                           
  5995                           ;FMCW.c: 201: int Nref_b[12];
  5996                           ;FMCW.c: 203: for(int i=0; i<12; i++){
  5997                           
  5998                           ;incstack = 0
  5999                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6000  0060  1283               	bcf	3,5	;RP0=0, select bank0
  6001  0061  1303               	bcf	3,6	;RP1=0, select bank0
  6002  0062  01BD               	clrf	RFDOUT@i
  6003  0063  01BE               	clrf	RFDOUT@i+1
  6004  0064  083E               	movf	RFDOUT@i+1,w
  6005  0065  3A80               	xorlw	128
  6006  0066  00FF               	movwf	127
  6007  0067  3080               	movlw	128
  6008  0068  027F               	subwf	127,w
  6009  0069  1D03               	skipz
  6010  006A  286D               	goto	u2865
  6011  006B  300C               	movlw	12
  6012  006C  023D               	subwf	RFDOUT@i,w
  6013  006D                     u2865:	
  6014  006D  1803               	btfsc	3,0
  6015  006E  288B               	goto	l3099
  6016  006F                     l3093:	
  6017                           
  6018                           ;FMCW.c: 204: Nref_b[i] = 0;
  6019  006F  1283               	bcf	3,5	;RP0=0, select bank0
  6020  0070  1303               	bcf	3,6	;RP1=0, select bank0
  6021  0071  083D               	movf	RFDOUT@i,w
  6022  0072  00A0               	movwf	??_RFDOUT
  6023  0073  0720               	addwf	??_RFDOUT,w
  6024  0074  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6025  0075  0084               	movwf	4
  6026  0076  1383               	bcf	3,7	;select IRP bank0
  6027  0077  0180               	clrf	0
  6028  0078  0A84               	incf	4,f
  6029  0079  0180               	clrf	0
  6030  007A  3001               	movlw	1
  6031  007B  07BD               	addwf	RFDOUT@i,f
  6032  007C  1803               	skipnc
  6033  007D  0ABE               	incf	RFDOUT@i+1,f
  6034  007E  3000               	movlw	0
  6035  007F  07BE               	addwf	RFDOUT@i+1,f
  6036  0080  083E               	movf	RFDOUT@i+1,w
  6037  0081  3A80               	xorlw	128
  6038  0082  00FF               	movwf	127
  6039  0083  3080               	movlw	128
  6040  0084  027F               	subwf	127,w
  6041  0085  1D03               	skipz
  6042  0086  2889               	goto	u2875
  6043  0087  300C               	movlw	12
  6044  0088  023D               	subwf	RFDOUT@i,w
  6045  0089                     u2875:	
  6046  0089  1C03               	skipc
  6047  008A  286F               	goto	l3093
  6048  008B                     l3099:	
  6049                           
  6050                           ;FMCW.c: 205: }
  6051                           ;FMCW.c: 208: for(int i=0; Nref>0; i++){
  6052  008B  1283               	bcf	3,5	;RP0=0, select bank0
  6053  008C  1303               	bcf	3,6	;RP1=0, select bank0
  6054  008D  01BB               	clrf	RFDOUT@i_421
  6055  008E  01BC               	clrf	RFDOUT@i_421+1
  6056  008F  087C               	movf	RFDOUT@Nref+1,w
  6057  0090  3A80               	xorlw	128
  6058  0091  00FF               	movwf	127
  6059  0092  3080               	movlw	128
  6060  0093  027F               	subwf	127,w
  6061  0094  1D03               	skipz
  6062  0095  2898               	goto	u2885
  6063  0096  3001               	movlw	1
  6064  0097  027B               	subwf	RFDOUT@Nref,w
  6065  0098                     u2885:	
  6066  0098  1C03               	btfss	3,0
  6067  0099  28D1               	goto	l3113
  6068  009A                     l3105:	
  6069                           
  6070                           ;FMCW.c: 209: Nref_b[i] = Nref % 2;
  6071  009A  3001               	movlw	1
  6072  009B  057B               	andwf	RFDOUT@Nref,w
  6073  009C  1283               	bcf	3,5	;RP0=0, select bank0
  6074  009D  1303               	bcf	3,6	;RP1=0, select bank0
  6075  009E  00A0               	movwf	??_RFDOUT
  6076  009F  3000               	movlw	0
  6077  00A0  057C               	andwf	RFDOUT@Nref+1,w
  6078  00A1  00A1               	movwf	??_RFDOUT+1
  6079  00A2  083B               	movf	RFDOUT@i_421,w
  6080  00A3  00A2               	movwf	??_RFDOUT+2
  6081  00A4  0722               	addwf	??_RFDOUT+2,w
  6082  00A5  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6083  00A6  0084               	movwf	4
  6084  00A7  0820               	movf	??_RFDOUT,w
  6085  00A8  1383               	bcf	3,7	;select IRP bank0
  6086  00A9  0080               	movwf	0
  6087  00AA  0A84               	incf	4,f
  6088  00AB  0821               	movf	??_RFDOUT+1,w
  6089  00AC  0080               	movwf	0
  6090                           
  6091                           ;FMCW.c: 210: Nref = Nref / 2;
  6092  00AD  3002               	movlw	2
  6093  00AE  00F0               	movwf	___awdiv@divisor
  6094  00AF  3000               	movlw	0
  6095  00B0  00F1               	movwf	___awdiv@divisor+1
  6096  00B1  087C               	movf	RFDOUT@Nref+1,w
  6097  00B2  00F3               	movwf	___awdiv@dividend+1
  6098  00B3  087B               	movf	RFDOUT@Nref,w
  6099  00B4  00F2               	movwf	___awdiv@dividend
  6100  00B5  120A  158A  23B0  120A  118A  	fcall	___awdiv
  6101  00BA  0871               	movf	?___awdiv+1,w
  6102  00BB  00FC               	movwf	RFDOUT@Nref+1
  6103  00BC  0870               	movf	?___awdiv,w
  6104  00BD  00FB               	movwf	RFDOUT@Nref
  6105  00BE  3001               	movlw	1
  6106  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  6107  00C0  1303               	bcf	3,6	;RP1=0, select bank0
  6108  00C1  07BB               	addwf	RFDOUT@i_421,f
  6109  00C2  1803               	skipnc
  6110  00C3  0ABC               	incf	RFDOUT@i_421+1,f
  6111  00C4  3000               	movlw	0
  6112  00C5  07BC               	addwf	RFDOUT@i_421+1,f
  6113  00C6  087C               	movf	RFDOUT@Nref+1,w
  6114  00C7  3A80               	xorlw	128
  6115  00C8  00FF               	movwf	127
  6116  00C9  3080               	movlw	128
  6117  00CA  027F               	subwf	127,w
  6118  00CB  1D03               	skipz
  6119  00CC  28CF               	goto	u2895
  6120  00CD  3001               	movlw	1
  6121  00CE  027B               	subwf	RFDOUT@Nref,w
  6122  00CF                     u2895:	
  6123  00CF  1803               	skipnc
  6124  00D0  289A               	goto	l3105
  6125  00D1                     l3113:	
  6126                           
  6127                           ;FMCW.c: 211: }
  6128                           ;FMCW.c: 214: for (int i=0; i<12; i++)
  6129  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  6130  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  6131  00D3  01BF               	clrf	RFDOUT@i_422
  6132  00D4  01C0               	clrf	RFDOUT@i_422+1
  6133  00D5  0840               	movf	RFDOUT@i_422+1,w
  6134  00D6  3A80               	xorlw	128
  6135  00D7  00FF               	movwf	127
  6136  00D8  3080               	movlw	128
  6137  00D9  027F               	subwf	127,w
  6138  00DA  1D03               	skipz
  6139  00DB  28DE               	goto	u2905
  6140  00DC  300C               	movlw	12
  6141  00DD  023F               	subwf	RFDOUT@i_422,w
  6142  00DE                     u2905:	
  6143  00DE  1803               	btfsc	3,0
  6144  00DF  2927               	goto	l3131
  6145  00E0                     l3119:	
  6146                           
  6147                           ;FMCW.c: 215: {
  6148                           ;FMCW.c: 216: if(Nref_b[i] == 0)
  6149  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  6150  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  6151  00E2  083F               	movf	RFDOUT@i_422,w
  6152  00E3  00A0               	movwf	??_RFDOUT
  6153  00E4  0720               	addwf	??_RFDOUT,w
  6154  00E5  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6155  00E6  0084               	movwf	4
  6156  00E7  1383               	bcf	3,7	;select IRP bank0
  6157  00E8  0800               	movf	0,w
  6158  00E9  00A1               	movwf	??_RFDOUT+1
  6159  00EA  0A84               	incf	4,f
  6160  00EB  0800               	movf	0,w
  6161  00EC  00A2               	movwf	??_RFDOUT+2
  6162  00ED  0821               	movf	??_RFDOUT+1,w
  6163  00EE  0422               	iorwf	??_RFDOUT+2,w
  6164  00EF  1D03               	btfss	3,2
  6165  00F0  28FA               	goto	l3123
  6166                           
  6167                           ;FMCW.c: 217: {
  6168                           ;FMCW.c: 218: L_OUT(fmcwtxrx);
  6169  00F1  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6170  00F2  00F3               	movwf	L_OUT@fmcwtxrx+1
  6171  00F3  0879               	movf	RFDOUT@fmcwtxrx,w
  6172  00F4  00F2               	movwf	L_OUT@fmcwtxrx
  6173  00F5  120A  158A  2323  120A  118A  	fcall	_L_OUT
  6174  00FA                     l3123:	
  6175                           
  6176                           ;FMCW.c: 219: }
  6177                           ;FMCW.c: 220: if(Nref_b[i] == 1)
  6178  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  6179  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  6180  00FC  083F               	movf	RFDOUT@i_422,w
  6181  00FD  00A0               	movwf	??_RFDOUT
  6182  00FE  0720               	addwf	??_RFDOUT,w
  6183  00FF  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  6184  0100  0084               	movwf	4
  6185  0101  1383               	bcf	3,7	;select IRP bank0
  6186  0102  0800               	movf	0,w
  6187  0103  00A1               	movwf	??_RFDOUT+1
  6188  0104  0A84               	incf	4,f
  6189  0105  0800               	movf	0,w
  6190  0106  00A2               	movwf	??_RFDOUT+2
  6191  0107  0321               	decf	??_RFDOUT+1,w
  6192  0108  0422               	iorwf	??_RFDOUT+2,w
  6193  0109  1D03               	btfss	3,2
  6194  010A  2914               	goto	l3127
  6195                           
  6196                           ;FMCW.c: 221: {
  6197                           ;FMCW.c: 222: H_OUT(fmcwtxrx);
  6198  010B  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6199  010C  00F3               	movwf	H_OUT@fmcwtxrx+1
  6200  010D  0879               	movf	RFDOUT@fmcwtxrx,w
  6201  010E  00F2               	movwf	H_OUT@fmcwtxrx
  6202  010F  120A  158A  22DD  120A  118A  	fcall	_H_OUT
  6203  0114                     l3127:	
  6204  0114  3001               	movlw	1
  6205  0115  1283               	bcf	3,5	;RP0=0, select bank0
  6206  0116  1303               	bcf	3,6	;RP1=0, select bank0
  6207  0117  07BF               	addwf	RFDOUT@i_422,f
  6208  0118  1803               	skipnc
  6209  0119  0AC0               	incf	RFDOUT@i_422+1,f
  6210  011A  3000               	movlw	0
  6211  011B  07C0               	addwf	RFDOUT@i_422+1,f
  6212  011C  0840               	movf	RFDOUT@i_422+1,w
  6213  011D  3A80               	xorlw	128
  6214  011E  00FF               	movwf	127
  6215  011F  3080               	movlw	128
  6216  0120  027F               	subwf	127,w
  6217  0121  1D03               	skipz
  6218  0122  2925               	goto	u2935
  6219  0123  300C               	movlw	12
  6220  0124  023F               	subwf	RFDOUT@i_422,w
  6221  0125                     u2935:	
  6222  0125  1C03               	skipc
  6223  0126  28E0               	goto	l3119
  6224  0127                     l3131:	
  6225                           
  6226                           ;FMCW.c: 223: }
  6227                           ;FMCW.c: 224: }
  6228                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  6229  0127  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6230  0128  00F3               	movwf	H_OUT@fmcwtxrx+1
  6231  0129  0879               	movf	RFDOUT@fmcwtxrx,w
  6232  012A  00F2               	movwf	H_OUT@fmcwtxrx
  6233  012B  120A  158A  22DD  120A  118A  	fcall	_H_OUT
  6234                           
  6235                           ;FMCW.c: 228: H_OUT(fmcwtxrx);
  6236  0130  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6237  0131  00F3               	movwf	H_OUT@fmcwtxrx+1
  6238  0132  0879               	movf	RFDOUT@fmcwtxrx,w
  6239  0133  00F2               	movwf	H_OUT@fmcwtxrx
  6240  0134  120A  158A  22DD  120A  118A  	fcall	_H_OUT
  6241                           
  6242                           ;FMCW.c: 231: STBOUT(fmcwtxrx);
  6243  0139  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6244  013A  00F3               	movwf	STBOUT@fmcwtxrx+1
  6245  013B  0879               	movf	RFDOUT@fmcwtxrx,w
  6246  013C  00F2               	movwf	STBOUT@fmcwtxrx
  6247  013D  120A  158A  2241   	fcall	_STBOUT
  6248  0140  0008               	return
  6249  0141                     __end_of_RFDOUT:	
  6250                           
  6251                           	psect	text23
  6252  0E2C                     __ptext23:	
  6253 ;; *************** function _OUTFQ *****************
  6254 ;; Defined at:
  6255 ;;		line 136 in file "FMCW.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;  fmcwtxrx        2    9[COMMON] int 
  6258 ;;  Nprg            1   11[COMMON] PTR int 
  6259 ;;		 -> main@FMRX_Nprg(10), main@CWTX_Nprg(10), main@FMTX_Nprg(10), FMRX_Nprg(10), 
  6260 ;;		 -> CWTX_Nprg(10), FMTX_Nprg(10), 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  j               2   50[BANK0 ] int 
  6263 ;;  i               2   48[BANK0 ] int 
  6264 ;;  i               2   42[BANK0 ] int 
  6265 ;;  i               2   46[BANK0 ] int 
  6266 ;;  Nprg_b         34    8[BANK0 ] int [17]
  6267 ;;  count           2   44[BANK0 ] int 
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  1    wreg      void 
  6270 ;; Registers used:
  6271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6277 ;;      Params:         3       0       0       0       0
  6278 ;;      Locals:         0      44       0       0       0
  6279 ;;      Temps:          0       8       0       0       0
  6280 ;;      Totals:         3      52       0       0       0
  6281 ;;Total ram usage:       55 bytes
  6282 ;; Hardware stack levels used:    1
  6283 ;; Hardware stack levels required when called:    2
  6284 ;; This function calls:
  6285 ;;		_H_OUT
  6286 ;;		_L_OUT
  6287 ;;		_STBOUT
  6288 ;;		___awdiv
  6289 ;; This function is called by:
  6290 ;;		_FMTX
  6291 ;;		_CWTX
  6292 ;;		_FMRX
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           
  6297                           ;psect for function _OUTFQ
  6298  0E2C                     _OUTFQ:	
  6299                           
  6300                           ;FMCW.c: 137: int count = 0;
  6301                           
  6302                           ;incstack = 0
  6303                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6304  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  6305  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
  6306  0E2E  01CC               	clrf	OUTFQ@count
  6307  0E2F  01CD               	clrf	OUTFQ@count+1
  6308                           
  6309                           ;FMCW.c: 138: int Nprg_b[17];
  6310                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6311  0E30  01CE               	clrf	OUTFQ@i
  6312  0E31  01CF               	clrf	OUTFQ@i+1
  6313  0E32  084F               	movf	OUTFQ@i+1,w
  6314  0E33  3A80               	xorlw	128
  6315  0E34  00FF               	movwf	127
  6316  0E35  3080               	movlw	128
  6317  0E36  027F               	subwf	127,w
  6318  0E37  1D03               	skipz
  6319  0E38  2E3B               	goto	u2725
  6320  0E39  3011               	movlw	17
  6321  0E3A  024E               	subwf	OUTFQ@i,w
  6322  0E3B                     u2725:	
  6323  0E3B  1803               	btfsc	3,0
  6324  0E3C  2E59               	goto	l3021
  6325  0E3D                     l3015:	
  6326                           
  6327                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6328  0E3D  1283               	bcf	3,5	;RP0=0, select bank0
  6329  0E3E  1303               	bcf	3,6	;RP1=0, select bank0
  6330  0E3F  084E               	movf	OUTFQ@i,w
  6331  0E40  00A0               	movwf	??_OUTFQ
  6332  0E41  0720               	addwf	??_OUTFQ,w
  6333  0E42  3E28               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6334  0E43  0084               	movwf	4
  6335  0E44  1383               	bcf	3,7	;select IRP bank0
  6336  0E45  0180               	clrf	0
  6337  0E46  0A84               	incf	4,f
  6338  0E47  0180               	clrf	0
  6339  0E48  3001               	movlw	1
  6340  0E49  07CE               	addwf	OUTFQ@i,f
  6341  0E4A  1803               	skipnc
  6342  0E4B  0ACF               	incf	OUTFQ@i+1,f
  6343  0E4C  3000               	movlw	0
  6344  0E4D  07CF               	addwf	OUTFQ@i+1,f
  6345  0E4E  084F               	movf	OUTFQ@i+1,w
  6346  0E4F  3A80               	xorlw	128
  6347  0E50  00FF               	movwf	127
  6348  0E51  3080               	movlw	128
  6349  0E52  027F               	subwf	127,w
  6350  0E53  1D03               	skipz
  6351  0E54  2E57               	goto	u2735
  6352  0E55  3011               	movlw	17
  6353  0E56  024E               	subwf	OUTFQ@i,w
  6354  0E57                     u2735:	
  6355  0E57  1C03               	skipc
  6356  0E58  2E3D               	goto	l3015
  6357  0E59                     l3021:	
  6358                           
  6359                           ;FMCW.c: 142: }
  6360                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6361  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  6362  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  6363  0E5B  01CA               	clrf	OUTFQ@i_410
  6364  0E5C  01CB               	clrf	OUTFQ@i_410+1
  6365  0E5D  084B               	movf	OUTFQ@i_410+1,w
  6366  0E5E  3A80               	xorlw	128
  6367  0E5F  00FF               	movwf	127
  6368  0E60  3080               	movlw	128
  6369  0E61  027F               	subwf	127,w
  6370  0E62  1D03               	skipz
  6371  0E63  2E66               	goto	u2745
  6372  0E64  3011               	movlw	17
  6373  0E65  024A               	subwf	OUTFQ@i_410,w
  6374  0E66                     u2745:	
  6375  0E66  1803               	btfsc	3,0
  6376  0E67  2F90               	goto	l3067
  6377  0E68                     l3027:	
  6378                           
  6379                           ;FMCW.c: 146: for(int j = 0; j<5; j++){
  6380  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  6381  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  6382  0E6A  01D2               	clrf	OUTFQ@j
  6383  0E6B  01D3               	clrf	OUTFQ@j+1
  6384  0E6C  0853               	movf	OUTFQ@j+1,w
  6385  0E6D  3A80               	xorlw	128
  6386  0E6E  00FF               	movwf	127
  6387  0E6F  3080               	movlw	128
  6388  0E70  027F               	subwf	127,w
  6389  0E71  1D03               	skipz
  6390  0E72  2E75               	goto	u2755
  6391  0E73  3005               	movlw	5
  6392  0E74  0252               	subwf	OUTFQ@j,w
  6393  0E75                     u2755:	
  6394  0E75  1803               	btfsc	3,0
  6395  0E76  2F7D               	goto	l3063
  6396  0E77                     l3033:	
  6397                           
  6398                           ;FMCW.c: 147: if(Nprg[j] % 2 == 0) {
  6399  0E77  1283               	bcf	3,5	;RP0=0, select bank0
  6400  0E78  1303               	bcf	3,6	;RP1=0, select bank0
  6401  0E79  0852               	movf	OUTFQ@j,w
  6402  0E7A  00A0               	movwf	??_OUTFQ
  6403  0E7B  0720               	addwf	??_OUTFQ,w
  6404  0E7C  077B               	addwf	OUTFQ@Nprg,w
  6405  0E7D  00A1               	movwf	??_OUTFQ+1
  6406  0E7E  0821               	movf	??_OUTFQ+1,w
  6407  0E7F  0084               	movwf	4
  6408  0E80  1383               	bcf	3,7	;select IRP bank0
  6409  0E81  0800               	movf	0,w
  6410  0E82  00A2               	movwf	??_OUTFQ+2
  6411  0E83  0A84               	incf	4,f
  6412  0E84  0800               	movf	0,w
  6413  0E85  00A3               	movwf	??_OUTFQ+3
  6414  0E86  1822               	btfsc	??_OUTFQ+2,0
  6415  0E87  2EDE               	goto	l3045
  6416                           
  6417                           ;FMCW.c: 148: if(j == 4){
  6418  0E88  3004               	movlw	4
  6419  0E89  0652               	xorwf	OUTFQ@j,w
  6420  0E8A  0453               	iorwf	OUTFQ@j+1,w
  6421  0E8B  1D03               	btfss	3,2
  6422  0E8C  2EBA               	goto	l3043
  6423                           
  6424                           ;FMCW.c: 149: Nprg[j] = Nprg[j] / 2;
  6425  0E8D  3002               	movlw	2
  6426  0E8E  00F0               	movwf	___awdiv@divisor
  6427  0E8F  3000               	movlw	0
  6428  0E90  00F1               	movwf	___awdiv@divisor+1
  6429  0E91  0852               	movf	OUTFQ@j,w
  6430  0E92  00A0               	movwf	??_OUTFQ
  6431  0E93  0720               	addwf	??_OUTFQ,w
  6432  0E94  077B               	addwf	OUTFQ@Nprg,w
  6433  0E95  00A1               	movwf	??_OUTFQ+1
  6434  0E96  0821               	movf	??_OUTFQ+1,w
  6435  0E97  0084               	movwf	4
  6436  0E98  0800               	movf	0,w
  6437  0E99  00F2               	movwf	___awdiv@dividend
  6438  0E9A  0A84               	incf	4,f
  6439  0E9B  0800               	movf	0,w
  6440  0E9C  00F3               	movwf	___awdiv@dividend+1
  6441  0E9D  120A  158A  23B0  120A  158A  	fcall	___awdiv
  6442  0EA2  1283               	bcf	3,5	;RP0=0, select bank0
  6443  0EA3  1303               	bcf	3,6	;RP1=0, select bank0
  6444  0EA4  0852               	movf	OUTFQ@j,w
  6445  0EA5  00A2               	movwf	??_OUTFQ+2
  6446  0EA6  0722               	addwf	??_OUTFQ+2,w
  6447  0EA7  077B               	addwf	OUTFQ@Nprg,w
  6448  0EA8  00A3               	movwf	??_OUTFQ+3
  6449  0EA9  0823               	movf	??_OUTFQ+3,w
  6450  0EAA  0084               	movwf	4
  6451  0EAB  0870               	movf	?___awdiv,w
  6452  0EAC  1383               	bcf	3,7	;select IRP bank0
  6453  0EAD  0080               	movwf	0
  6454  0EAE  0A84               	incf	4,f
  6455  0EAF  0871               	movf	?___awdiv+1,w
  6456  0EB0  0080               	movwf	0
  6457                           
  6458                           ;FMCW.c: 150: Nprg_b[count] = 0;
  6459  0EB1  084C               	movf	OUTFQ@count,w
  6460  0EB2  00A0               	movwf	??_OUTFQ
  6461  0EB3  0720               	addwf	??_OUTFQ,w
  6462  0EB4  3E28               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6463  0EB5  0084               	movwf	4
  6464  0EB6  0180               	clrf	0
  6465  0EB7  0A84               	incf	4,f
  6466  0EB8  0180               	clrf	0
  6467  0EB9  2F1F               	goto	l3053
  6468  0EBA                     l3043:	
  6469                           ;FMCW.c: 152: }
  6470                           
  6471                           ;FMCW.c: 151: count++;
  6472                           
  6473                           
  6474                           ;FMCW.c: 153: else{
  6475                           ;FMCW.c: 154: Nprg[j] = Nprg[j] / 2;
  6476  0EBA  3002               	movlw	2
  6477  0EBB  00F0               	movwf	___awdiv@divisor
  6478  0EBC  3000               	movlw	0
  6479  0EBD  00F1               	movwf	___awdiv@divisor+1
  6480  0EBE  0852               	movf	OUTFQ@j,w
  6481  0EBF  00A0               	movwf	??_OUTFQ
  6482  0EC0  0720               	addwf	??_OUTFQ,w
  6483  0EC1  077B               	addwf	OUTFQ@Nprg,w
  6484  0EC2  00A1               	movwf	??_OUTFQ+1
  6485  0EC3  0821               	movf	??_OUTFQ+1,w
  6486  0EC4  0084               	movwf	4
  6487  0EC5  0800               	movf	0,w
  6488  0EC6  00F2               	movwf	___awdiv@dividend
  6489  0EC7  0A84               	incf	4,f
  6490  0EC8  0800               	movf	0,w
  6491  0EC9  00F3               	movwf	___awdiv@dividend+1
  6492  0ECA  120A  158A  23B0  120A  158A  	fcall	___awdiv
  6493  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  6494  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  6495  0ED1  0852               	movf	OUTFQ@j,w
  6496  0ED2  00A2               	movwf	??_OUTFQ+2
  6497  0ED3  0722               	addwf	??_OUTFQ+2,w
  6498  0ED4  077B               	addwf	OUTFQ@Nprg,w
  6499  0ED5  00A3               	movwf	??_OUTFQ+3
  6500  0ED6  0823               	movf	??_OUTFQ+3,w
  6501  0ED7  0084               	movwf	4
  6502  0ED8  0870               	movf	?___awdiv,w
  6503  0ED9  1383               	bcf	3,7	;select IRP bank0
  6504  0EDA  0080               	movwf	0
  6505  0EDB  0A84               	incf	4,f
  6506  0EDC  0871               	movf	?___awdiv+1,w
  6507  0EDD  2F6B               	goto	L8
  6508  0EDE                     l3045:	
  6509                           ;FMCW.c: 155: }
  6510                           ;FMCW.c: 156: }
  6511                           
  6512                           
  6513                           ;FMCW.c: 157: else if(Nprg[j] % 2 == 1) {
  6514  0EDE  0852               	movf	OUTFQ@j,w
  6515  0EDF  00A0               	movwf	??_OUTFQ
  6516  0EE0  0720               	addwf	??_OUTFQ,w
  6517  0EE1  077B               	addwf	OUTFQ@Nprg,w
  6518  0EE2  00A1               	movwf	??_OUTFQ+1
  6519  0EE3  0821               	movf	??_OUTFQ+1,w
  6520  0EE4  0084               	movwf	4
  6521  0EE5  0800               	movf	0,w
  6522  0EE6  00A2               	movwf	??_OUTFQ+2
  6523  0EE7  0A84               	incf	4,f
  6524  0EE8  0800               	movf	0,w
  6525  0EE9  00A3               	movwf	??_OUTFQ+3
  6526  0EEA  1C22               	btfss	??_OUTFQ+2,0
  6527  0EEB  2F6C               	goto	l3059
  6528                           
  6529                           ;FMCW.c: 158: if(j == 4){
  6530  0EEC  3004               	movlw	4
  6531  0EED  0652               	xorwf	OUTFQ@j,w
  6532  0EEE  0453               	iorwf	OUTFQ@j+1,w
  6533  0EEF  1D03               	btfss	3,2
  6534  0EF0  2F26               	goto	l3055
  6535                           
  6536                           ;FMCW.c: 159: Nprg[j] = Nprg[j] / 2;
  6537  0EF1  3002               	movlw	2
  6538  0EF2  00F0               	movwf	___awdiv@divisor
  6539  0EF3  3000               	movlw	0
  6540  0EF4  00F1               	movwf	___awdiv@divisor+1
  6541  0EF5  0852               	movf	OUTFQ@j,w
  6542  0EF6  00A0               	movwf	??_OUTFQ
  6543  0EF7  0720               	addwf	??_OUTFQ,w
  6544  0EF8  077B               	addwf	OUTFQ@Nprg,w
  6545  0EF9  00A1               	movwf	??_OUTFQ+1
  6546  0EFA  0821               	movf	??_OUTFQ+1,w
  6547  0EFB  0084               	movwf	4
  6548  0EFC  0800               	movf	0,w
  6549  0EFD  00F2               	movwf	___awdiv@dividend
  6550  0EFE  0A84               	incf	4,f
  6551  0EFF  0800               	movf	0,w
  6552  0F00  00F3               	movwf	___awdiv@dividend+1
  6553  0F01  120A  158A  23B0  120A  158A  	fcall	___awdiv
  6554  0F06  1283               	bcf	3,5	;RP0=0, select bank0
  6555  0F07  1303               	bcf	3,6	;RP1=0, select bank0
  6556  0F08  0852               	movf	OUTFQ@j,w
  6557  0F09  00A2               	movwf	??_OUTFQ+2
  6558  0F0A  0722               	addwf	??_OUTFQ+2,w
  6559  0F0B  077B               	addwf	OUTFQ@Nprg,w
  6560  0F0C  00A3               	movwf	??_OUTFQ+3
  6561  0F0D  0823               	movf	??_OUTFQ+3,w
  6562  0F0E  0084               	movwf	4
  6563  0F0F  0870               	movf	?___awdiv,w
  6564  0F10  1383               	bcf	3,7	;select IRP bank0
  6565  0F11  0080               	movwf	0
  6566  0F12  0A84               	incf	4,f
  6567  0F13  0871               	movf	?___awdiv+1,w
  6568  0F14  0080               	movwf	0
  6569                           
  6570                           ;FMCW.c: 160: Nprg_b[count] = 1;
  6571  0F15  084C               	movf	OUTFQ@count,w
  6572  0F16  00A0               	movwf	??_OUTFQ
  6573  0F17  0720               	addwf	??_OUTFQ,w
  6574  0F18  3E28               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6575  0F19  0084               	movwf	4
  6576  0F1A  3001               	movlw	1
  6577  0F1B  0080               	movwf	0
  6578  0F1C  0A84               	incf	4,f
  6579  0F1D  3000               	movlw	0
  6580  0F1E  0080               	movwf	0
  6581  0F1F                     l3053:	
  6582                           
  6583                           ;FMCW.c: 161: count++;
  6584  0F1F  3001               	movlw	1
  6585  0F20  07CC               	addwf	OUTFQ@count,f
  6586  0F21  1803               	skipnc
  6587  0F22  0ACD               	incf	OUTFQ@count+1,f
  6588  0F23  3000               	movlw	0
  6589  0F24  07CD               	addwf	OUTFQ@count+1,f
  6590                           
  6591                           ;FMCW.c: 162: }
  6592  0F25  2F6C               	goto	l3059
  6593  0F26                     l3055:	
  6594                           
  6595                           ;FMCW.c: 163: else{
  6596                           ;FMCW.c: 164: Nprg[j] = Nprg[j] / 2;
  6597  0F26  3002               	movlw	2
  6598  0F27  00F0               	movwf	___awdiv@divisor
  6599  0F28  3000               	movlw	0
  6600  0F29  00F1               	movwf	___awdiv@divisor+1
  6601  0F2A  0852               	movf	OUTFQ@j,w
  6602  0F2B  00A0               	movwf	??_OUTFQ
  6603  0F2C  0720               	addwf	??_OUTFQ,w
  6604  0F2D  077B               	addwf	OUTFQ@Nprg,w
  6605  0F2E  00A1               	movwf	??_OUTFQ+1
  6606  0F2F  0821               	movf	??_OUTFQ+1,w
  6607  0F30  0084               	movwf	4
  6608  0F31  0800               	movf	0,w
  6609  0F32  00F2               	movwf	___awdiv@dividend
  6610  0F33  0A84               	incf	4,f
  6611  0F34  0800               	movf	0,w
  6612  0F35  00F3               	movwf	___awdiv@dividend+1
  6613  0F36  120A  158A  23B0  120A  158A  	fcall	___awdiv
  6614  0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  6615  0F3C  1303               	bcf	3,6	;RP1=0, select bank0
  6616  0F3D  0852               	movf	OUTFQ@j,w
  6617  0F3E  00A2               	movwf	??_OUTFQ+2
  6618  0F3F  0722               	addwf	??_OUTFQ+2,w
  6619  0F40  077B               	addwf	OUTFQ@Nprg,w
  6620  0F41  00A3               	movwf	??_OUTFQ+3
  6621  0F42  0823               	movf	??_OUTFQ+3,w
  6622  0F43  0084               	movwf	4
  6623  0F44  0870               	movf	?___awdiv,w
  6624  0F45  1383               	bcf	3,7	;select IRP bank0
  6625  0F46  0080               	movwf	0
  6626  0F47  0A84               	incf	4,f
  6627  0F48  0871               	movf	?___awdiv+1,w
  6628  0F49  0080               	movwf	0
  6629                           
  6630                           ;FMCW.c: 165: Nprg[j+1] = Nprg[j+1] + 10;
  6631  0F4A  0852               	movf	OUTFQ@j,w
  6632  0F4B  00A0               	movwf	??_OUTFQ
  6633  0F4C  0720               	addwf	??_OUTFQ,w
  6634  0F4D  3E02               	addlw	2
  6635  0F4E  077B               	addwf	OUTFQ@Nprg,w
  6636  0F4F  00A1               	movwf	??_OUTFQ+1
  6637  0F50  0821               	movf	??_OUTFQ+1,w
  6638  0F51  0084               	movwf	4
  6639  0F52  0800               	movf	0,w
  6640  0F53  00A2               	movwf	??_OUTFQ+2
  6641  0F54  0A84               	incf	4,f
  6642  0F55  0800               	movf	0,w
  6643  0F56  00A3               	movwf	??_OUTFQ+3
  6644  0F57  0822               	movf	??_OUTFQ+2,w
  6645  0F58  3E0A               	addlw	10
  6646  0F59  00A4               	movwf	??_OUTFQ+4
  6647  0F5A  0823               	movf	??_OUTFQ+3,w
  6648  0F5B  1803               	skipnc
  6649  0F5C  3E01               	addlw	1
  6650  0F5D  3E00               	addlw	0
  6651  0F5E  00A5               	movwf	??_OUTFQ+5
  6652  0F5F  0852               	movf	OUTFQ@j,w
  6653  0F60  00A6               	movwf	??_OUTFQ+6
  6654  0F61  0726               	addwf	??_OUTFQ+6,w
  6655  0F62  3E02               	addlw	2
  6656  0F63  077B               	addwf	OUTFQ@Nprg,w
  6657  0F64  00A7               	movwf	??_OUTFQ+7
  6658  0F65  0827               	movf	??_OUTFQ+7,w
  6659  0F66  0084               	movwf	4
  6660  0F67  0824               	movf	??_OUTFQ+4,w
  6661  0F68  0080               	movwf	0
  6662  0F69  0A84               	incf	4,f
  6663  0F6A  0825               	movf	??_OUTFQ+5,w
  6664  0F6B                     L8:	
  6665  0F6B  0080               	movwf	0
  6666  0F6C                     l3059:	
  6667  0F6C  3001               	movlw	1
  6668  0F6D  07D2               	addwf	OUTFQ@j,f
  6669  0F6E  1803               	skipnc
  6670  0F6F  0AD3               	incf	OUTFQ@j+1,f
  6671  0F70  3000               	movlw	0
  6672  0F71  07D3               	addwf	OUTFQ@j+1,f
  6673  0F72  0853               	movf	OUTFQ@j+1,w
  6674  0F73  3A80               	xorlw	128
  6675  0F74  00FF               	movwf	127
  6676  0F75  3080               	movlw	128
  6677  0F76  027F               	subwf	127,w
  6678  0F77  1D03               	skipz
  6679  0F78  2F7B               	goto	u2805
  6680  0F79  3005               	movlw	5
  6681  0F7A  0252               	subwf	OUTFQ@j,w
  6682  0F7B                     u2805:	
  6683  0F7B  1C03               	skipc
  6684  0F7C  2E77               	goto	l3033
  6685  0F7D                     l3063:	
  6686  0F7D  3001               	movlw	1
  6687  0F7E  1283               	bcf	3,5	;RP0=0, select bank0
  6688  0F7F  1303               	bcf	3,6	;RP1=0, select bank0
  6689  0F80  07CA               	addwf	OUTFQ@i_410,f
  6690  0F81  1803               	skipnc
  6691  0F82  0ACB               	incf	OUTFQ@i_410+1,f
  6692  0F83  3000               	movlw	0
  6693  0F84  07CB               	addwf	OUTFQ@i_410+1,f
  6694  0F85  084B               	movf	OUTFQ@i_410+1,w
  6695  0F86  3A80               	xorlw	128
  6696  0F87  00FF               	movwf	127
  6697  0F88  3080               	movlw	128
  6698  0F89  027F               	subwf	127,w
  6699  0F8A  1D03               	skipz
  6700  0F8B  2F8E               	goto	u2815
  6701  0F8C  3011               	movlw	17
  6702  0F8D  024A               	subwf	OUTFQ@i_410,w
  6703  0F8E                     u2815:	
  6704  0F8E  1C03               	skipc
  6705  0F8F  2E68               	goto	l3027
  6706  0F90                     l3067:	
  6707                           
  6708                           ;FMCW.c: 166: }
  6709                           ;FMCW.c: 167: }
  6710                           ;FMCW.c: 168: }
  6711                           ;FMCW.c: 169: }
  6712                           ;FMCW.c: 172: for (int i=0; i<17; i++)
  6713  0F90  1283               	bcf	3,5	;RP0=0, select bank0
  6714  0F91  1303               	bcf	3,6	;RP1=0, select bank0
  6715  0F92  01D0               	clrf	OUTFQ@i_412
  6716  0F93  01D1               	clrf	OUTFQ@i_412+1
  6717  0F94  0851               	movf	OUTFQ@i_412+1,w
  6718  0F95  3A80               	xorlw	128
  6719  0F96  00FF               	movwf	127
  6720  0F97  3080               	movlw	128
  6721  0F98  027F               	subwf	127,w
  6722  0F99  1D03               	skipz
  6723  0F9A  2F9D               	goto	u2825
  6724  0F9B  3011               	movlw	17
  6725  0F9C  0250               	subwf	OUTFQ@i_412,w
  6726  0F9D                     u2825:	
  6727  0F9D  1803               	btfsc	3,0
  6728  0F9E  2FE6               	goto	l3085
  6729  0F9F                     l3073:	
  6730                           
  6731                           ;FMCW.c: 173: {
  6732                           ;FMCW.c: 174: if(Nprg_b[i] == 0)
  6733  0F9F  1283               	bcf	3,5	;RP0=0, select bank0
  6734  0FA0  1303               	bcf	3,6	;RP1=0, select bank0
  6735  0FA1  0850               	movf	OUTFQ@i_412,w
  6736  0FA2  00A0               	movwf	??_OUTFQ
  6737  0FA3  0720               	addwf	??_OUTFQ,w
  6738  0FA4  3E28               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6739  0FA5  0084               	movwf	4
  6740  0FA6  1383               	bcf	3,7	;select IRP bank0
  6741  0FA7  0800               	movf	0,w
  6742  0FA8  00A1               	movwf	??_OUTFQ+1
  6743  0FA9  0A84               	incf	4,f
  6744  0FAA  0800               	movf	0,w
  6745  0FAB  00A2               	movwf	??_OUTFQ+2
  6746  0FAC  0821               	movf	??_OUTFQ+1,w
  6747  0FAD  0422               	iorwf	??_OUTFQ+2,w
  6748  0FAE  1D03               	btfss	3,2
  6749  0FAF  2FB9               	goto	l3077
  6750                           
  6751                           ;FMCW.c: 175: {
  6752                           ;FMCW.c: 176: L_OUT(fmcwtxrx);
  6753  0FB0  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6754  0FB1  00F3               	movwf	L_OUT@fmcwtxrx+1
  6755  0FB2  0879               	movf	OUTFQ@fmcwtxrx,w
  6756  0FB3  00F2               	movwf	L_OUT@fmcwtxrx
  6757  0FB4  120A  158A  2323  120A  158A  	fcall	_L_OUT
  6758  0FB9                     l3077:	
  6759                           
  6760                           ;FMCW.c: 177: }
  6761                           ;FMCW.c: 178: if(Nprg_b[i] == 1)
  6762  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  6763  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  6764  0FBB  0850               	movf	OUTFQ@i_412,w
  6765  0FBC  00A0               	movwf	??_OUTFQ
  6766  0FBD  0720               	addwf	??_OUTFQ,w
  6767  0FBE  3E28               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6768  0FBF  0084               	movwf	4
  6769  0FC0  1383               	bcf	3,7	;select IRP bank0
  6770  0FC1  0800               	movf	0,w
  6771  0FC2  00A1               	movwf	??_OUTFQ+1
  6772  0FC3  0A84               	incf	4,f
  6773  0FC4  0800               	movf	0,w
  6774  0FC5  00A2               	movwf	??_OUTFQ+2
  6775  0FC6  0321               	decf	??_OUTFQ+1,w
  6776  0FC7  0422               	iorwf	??_OUTFQ+2,w
  6777  0FC8  1D03               	btfss	3,2
  6778  0FC9  2FD3               	goto	l3081
  6779                           
  6780                           ;FMCW.c: 179: {
  6781                           ;FMCW.c: 180: H_OUT(fmcwtxrx);
  6782  0FCA  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6783  0FCB  00F3               	movwf	H_OUT@fmcwtxrx+1
  6784  0FCC  0879               	movf	OUTFQ@fmcwtxrx,w
  6785  0FCD  00F2               	movwf	H_OUT@fmcwtxrx
  6786  0FCE  120A  158A  22DD  120A  158A  	fcall	_H_OUT
  6787  0FD3                     l3081:	
  6788  0FD3  3001               	movlw	1
  6789  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  6790  0FD5  1303               	bcf	3,6	;RP1=0, select bank0
  6791  0FD6  07D0               	addwf	OUTFQ@i_412,f
  6792  0FD7  1803               	skipnc
  6793  0FD8  0AD1               	incf	OUTFQ@i_412+1,f
  6794  0FD9  3000               	movlw	0
  6795  0FDA  07D1               	addwf	OUTFQ@i_412+1,f
  6796  0FDB  0851               	movf	OUTFQ@i_412+1,w
  6797  0FDC  3A80               	xorlw	128
  6798  0FDD  00FF               	movwf	127
  6799  0FDE  3080               	movlw	128
  6800  0FDF  027F               	subwf	127,w
  6801  0FE0  1D03               	skipz
  6802  0FE1  2FE4               	goto	u2855
  6803  0FE2  3011               	movlw	17
  6804  0FE3  0250               	subwf	OUTFQ@i_412,w
  6805  0FE4                     u2855:	
  6806  0FE4  1C03               	skipc
  6807  0FE5  2F9F               	goto	l3073
  6808  0FE6                     l3085:	
  6809                           
  6810                           ;FMCW.c: 181: }
  6811                           ;FMCW.c: 182: }
  6812                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6813  0FE6  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6814  0FE7  00F3               	movwf	H_OUT@fmcwtxrx+1
  6815  0FE8  0879               	movf	OUTFQ@fmcwtxrx,w
  6816  0FE9  00F2               	movwf	H_OUT@fmcwtxrx
  6817  0FEA  120A  158A  22DD  120A  158A  	fcall	_H_OUT
  6818                           
  6819                           ;FMCW.c: 186: L_OUT(fmcwtxrx);
  6820  0FEF  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6821  0FF0  00F3               	movwf	L_OUT@fmcwtxrx+1
  6822  0FF1  0879               	movf	OUTFQ@fmcwtxrx,w
  6823  0FF2  00F2               	movwf	L_OUT@fmcwtxrx
  6824  0FF3  120A  158A  2323  120A  158A  	fcall	_L_OUT
  6825                           
  6826                           ;FMCW.c: 189: STBOUT(fmcwtxrx);
  6827  0FF8  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6828  0FF9  00F3               	movwf	STBOUT@fmcwtxrx+1
  6829  0FFA  0879               	movf	OUTFQ@fmcwtxrx,w
  6830  0FFB  00F2               	movwf	STBOUT@fmcwtxrx
  6831  0FFC  120A  158A  2241   	fcall	_STBOUT
  6832  0FFF  0008               	return
  6833  1000                     __end_of_OUTFQ:	
  6834                           
  6835                           	psect	text24
  6836  0BB0                     __ptext24:	
  6837 ;; *************** function ___awdiv *****************
  6838 ;; Defined at:
  6839 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  6840 ;; Parameters:    Size  Location     Type
  6841 ;;  divisor         2    0[COMMON] int 
  6842 ;;  dividend        2    2[COMMON] int 
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;  quotient        2    7[COMMON] int 
  6845 ;;  sign            1    6[COMMON] unsigned char 
  6846 ;;  counter         1    5[COMMON] unsigned char 
  6847 ;; Return value:  Size  Location     Type
  6848 ;;                  2    0[COMMON] int 
  6849 ;; Registers used:
  6850 ;;		wreg, status,2, status,0
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6856 ;;      Params:         4       0       0       0       0
  6857 ;;      Locals:         4       0       0       0       0
  6858 ;;      Temps:          1       0       0       0       0
  6859 ;;      Totals:         9       0       0       0       0
  6860 ;;Total ram usage:        9 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; This function calls:
  6863 ;;		Nothing
  6864 ;; This function is called by:
  6865 ;;		_OUTFQ
  6866 ;;		_RFDOUT
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           
  6871                           ;psect for function ___awdiv
  6872  0BB0                     ___awdiv:	
  6873                           
  6874                           ;incstack = 0
  6875                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6876  0BB0  01F6               	clrf	___awdiv@sign
  6877  0BB1  1FF1               	btfss	___awdiv@divisor+1,7
  6878  0BB2  2BBA               	goto	l2497
  6879  0BB3  09F0               	comf	___awdiv@divisor,f
  6880  0BB4  09F1               	comf	___awdiv@divisor+1,f
  6881  0BB5  0AF0               	incf	___awdiv@divisor,f
  6882  0BB6  1903               	skipnz
  6883  0BB7  0AF1               	incf	___awdiv@divisor+1,f
  6884  0BB8  01F6               	clrf	___awdiv@sign
  6885  0BB9  0AF6               	incf	___awdiv@sign,f
  6886  0BBA                     l2497:	
  6887  0BBA  1FF3               	btfss	___awdiv@dividend+1,7
  6888  0BBB  2BC5               	goto	l2503
  6889  0BBC  09F2               	comf	___awdiv@dividend,f
  6890  0BBD  09F3               	comf	___awdiv@dividend+1,f
  6891  0BBE  0AF2               	incf	___awdiv@dividend,f
  6892  0BBF  1903               	skipnz
  6893  0BC0  0AF3               	incf	___awdiv@dividend+1,f
  6894  0BC1  3001               	movlw	1
  6895  0BC2  00F4               	movwf	??___awdiv
  6896  0BC3  0874               	movf	??___awdiv,w
  6897  0BC4  06F6               	xorwf	___awdiv@sign,f
  6898  0BC5                     l2503:	
  6899  0BC5  01F7               	clrf	___awdiv@quotient
  6900  0BC6  01F8               	clrf	___awdiv@quotient+1
  6901  0BC7  0870               	movf	___awdiv@divisor,w
  6902  0BC8  0471               	iorwf	___awdiv@divisor+1,w
  6903  0BC9  1903               	btfsc	3,2
  6904  0BCA  2BFC               	goto	l2525
  6905  0BCB  01F5               	clrf	___awdiv@counter
  6906  0BCC  0AF5               	incf	___awdiv@counter,f
  6907  0BCD                     l2513:	
  6908  0BCD  1BF1               	btfsc	___awdiv@divisor+1,7
  6909  0BCE  2BDB               	goto	l2515
  6910  0BCF  3001               	movlw	1
  6911  0BD0                     u1975:	
  6912  0BD0  1003               	clrc
  6913  0BD1  0DF0               	rlf	___awdiv@divisor,f
  6914  0BD2  0DF1               	rlf	___awdiv@divisor+1,f
  6915  0BD3  3EFF               	addlw	-1
  6916  0BD4  1D03               	skipz
  6917  0BD5  2BD0               	goto	u1975
  6918  0BD6  3001               	movlw	1
  6919  0BD7  00F4               	movwf	??___awdiv
  6920  0BD8  0874               	movf	??___awdiv,w
  6921  0BD9  07F5               	addwf	___awdiv@counter,f
  6922  0BDA  2BCD               	goto	l2513
  6923  0BDB                     l2515:	
  6924  0BDB  3001               	movlw	1
  6925  0BDC                     u1995:	
  6926  0BDC  1003               	clrc
  6927  0BDD  0DF7               	rlf	___awdiv@quotient,f
  6928  0BDE  0DF8               	rlf	___awdiv@quotient+1,f
  6929  0BDF  3EFF               	addlw	-1
  6930  0BE0  1D03               	skipz
  6931  0BE1  2BDC               	goto	u1995
  6932  0BE2  0871               	movf	___awdiv@divisor+1,w
  6933  0BE3  0273               	subwf	___awdiv@dividend+1,w
  6934  0BE4  1D03               	skipz
  6935  0BE5  2BE8               	goto	u2005
  6936  0BE6  0870               	movf	___awdiv@divisor,w
  6937  0BE7  0272               	subwf	___awdiv@dividend,w
  6938  0BE8                     u2005:	
  6939  0BE8  1C03               	skipc
  6940  0BE9  2BF1               	goto	l2521
  6941  0BEA  0870               	movf	___awdiv@divisor,w
  6942  0BEB  02F2               	subwf	___awdiv@dividend,f
  6943  0BEC  0871               	movf	___awdiv@divisor+1,w
  6944  0BED  1C03               	skipc
  6945  0BEE  03F3               	decf	___awdiv@dividend+1,f
  6946  0BEF  02F3               	subwf	___awdiv@dividend+1,f
  6947  0BF0  1477               	bsf	___awdiv@quotient,0
  6948  0BF1                     l2521:	
  6949  0BF1  3001               	movlw	1
  6950  0BF2                     u2015:	
  6951  0BF2  1003               	clrc
  6952  0BF3  0CF1               	rrf	___awdiv@divisor+1,f
  6953  0BF4  0CF0               	rrf	___awdiv@divisor,f
  6954  0BF5  3EFF               	addlw	-1
  6955  0BF6  1D03               	skipz
  6956  0BF7  2BF2               	goto	u2015
  6957  0BF8  3001               	movlw	1
  6958  0BF9  02F5               	subwf	___awdiv@counter,f
  6959  0BFA  1D03               	btfss	3,2
  6960  0BFB  2BDB               	goto	l2515
  6961  0BFC                     l2525:	
  6962  0BFC  0876               	movf	___awdiv@sign,w
  6963  0BFD  1903               	btfsc	3,2
  6964  0BFE  2C04               	goto	l2529
  6965  0BFF  09F7               	comf	___awdiv@quotient,f
  6966  0C00  09F8               	comf	___awdiv@quotient+1,f
  6967  0C01  0AF7               	incf	___awdiv@quotient,f
  6968  0C02  1903               	skipnz
  6969  0C03  0AF8               	incf	___awdiv@quotient+1,f
  6970  0C04                     l2529:	
  6971  0C04  0878               	movf	___awdiv@quotient+1,w
  6972  0C05  00F1               	movwf	?___awdiv+1
  6973  0C06  0877               	movf	___awdiv@quotient,w
  6974  0C07  00F0               	movwf	?___awdiv
  6975  0C08  0008               	return
  6976  0C09                     __end_of___awdiv:	
  6977                           
  6978                           	psect	text25
  6979  0D2D                     __ptext25:	
  6980 ;; *************** function _OPINIT *****************
  6981 ;; Defined at:
  6982 ;;		line 241 in file "FMCW.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;  fmcwtxrx        2    4[COMMON] int 
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;		None
  6987 ;; Return value:  Size  Location     Type
  6988 ;;                  1    wreg      void 
  6989 ;; Registers used:
  6990 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6991 ;; Tracked objects:
  6992 ;;		On entry : 0/0
  6993 ;;		On exit  : 0/0
  6994 ;;		Unchanged: 0/0
  6995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6996 ;;      Params:         2       0       0       0       0
  6997 ;;      Locals:         0       0       0       0       0
  6998 ;;      Temps:          0       0       0       0       0
  6999 ;;      Totals:         2       0       0       0       0
  7000 ;;Total ram usage:        2 bytes
  7001 ;; Hardware stack levels used:    1
  7002 ;; Hardware stack levels required when called:    2
  7003 ;; This function calls:
  7004 ;;		_H_OUT
  7005 ;;		_L_OUT
  7006 ;;		_STBOUT
  7007 ;; This function is called by:
  7008 ;;		_FMTX
  7009 ;;		_CWTX
  7010 ;;		_FMRX
  7011 ;; This function uses a non-reentrant model
  7012 ;;
  7013                           
  7014                           
  7015                           ;psect for function _OPINIT
  7016  0D2D                     _OPINIT:	
  7017                           
  7018                           ;FMCW.c: 243: L_OUT(fmcwtxrx);
  7019                           
  7020                           ;incstack = 0
  7021                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7022  0D2D  0875               	movf	OPINIT@fmcwtxrx+1,w
  7023  0D2E  00F3               	movwf	L_OUT@fmcwtxrx+1
  7024  0D2F  0874               	movf	OPINIT@fmcwtxrx,w
  7025  0D30  00F2               	movwf	L_OUT@fmcwtxrx
  7026  0D31  120A  158A  2323  120A  158A  	fcall	_L_OUT
  7027                           
  7028                           ;FMCW.c: 244: L_OUT(fmcwtxrx);
  7029  0D36  0875               	movf	OPINIT@fmcwtxrx+1,w
  7030  0D37  00F3               	movwf	L_OUT@fmcwtxrx+1
  7031  0D38  0874               	movf	OPINIT@fmcwtxrx,w
  7032  0D39  00F2               	movwf	L_OUT@fmcwtxrx
  7033  0D3A  120A  158A  2323  120A  158A  	fcall	_L_OUT
  7034                           
  7035                           ;FMCW.c: 245: L_OUT(fmcwtxrx);
  7036  0D3F  0875               	movf	OPINIT@fmcwtxrx+1,w
  7037  0D40  00F3               	movwf	L_OUT@fmcwtxrx+1
  7038  0D41  0874               	movf	OPINIT@fmcwtxrx,w
  7039  0D42  00F2               	movwf	L_OUT@fmcwtxrx
  7040  0D43  120A  158A  2323  120A  158A  	fcall	_L_OUT
  7041                           
  7042                           ;FMCW.c: 246: H_OUT(fmcwtxrx);
  7043  0D48  0875               	movf	OPINIT@fmcwtxrx+1,w
  7044  0D49  00F3               	movwf	H_OUT@fmcwtxrx+1
  7045  0D4A  0874               	movf	OPINIT@fmcwtxrx,w
  7046  0D4B  00F2               	movwf	H_OUT@fmcwtxrx
  7047  0D4C  120A  158A  22DD  120A  158A  	fcall	_H_OUT
  7048                           
  7049                           ;FMCW.c: 247: H_OUT(fmcwtxrx);
  7050  0D51  0875               	movf	OPINIT@fmcwtxrx+1,w
  7051  0D52  00F3               	movwf	H_OUT@fmcwtxrx+1
  7052  0D53  0874               	movf	OPINIT@fmcwtxrx,w
  7053  0D54  00F2               	movwf	H_OUT@fmcwtxrx
  7054  0D55  120A  158A  22DD  120A  158A  	fcall	_H_OUT
  7055                           
  7056                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  7057  0D5A  0875               	movf	OPINIT@fmcwtxrx+1,w
  7058  0D5B  00F3               	movwf	L_OUT@fmcwtxrx+1
  7059  0D5C  0874               	movf	OPINIT@fmcwtxrx,w
  7060  0D5D  00F2               	movwf	L_OUT@fmcwtxrx
  7061  0D5E  120A  158A  2323  120A  158A  	fcall	_L_OUT
  7062                           
  7063                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  7064  0D63  0875               	movf	OPINIT@fmcwtxrx+1,w
  7065  0D64  00F3               	movwf	L_OUT@fmcwtxrx+1
  7066  0D65  0874               	movf	OPINIT@fmcwtxrx,w
  7067  0D66  00F2               	movwf	L_OUT@fmcwtxrx
  7068  0D67  120A  158A  2323  120A  158A  	fcall	_L_OUT
  7069                           
  7070                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  7071  0D6C  0875               	movf	OPINIT@fmcwtxrx+1,w
  7072  0D6D  00F3               	movwf	L_OUT@fmcwtxrx+1
  7073  0D6E  0874               	movf	OPINIT@fmcwtxrx,w
  7074  0D6F  00F2               	movwf	L_OUT@fmcwtxrx
  7075  0D70  120A  158A  2323  120A  158A  	fcall	_L_OUT
  7076                           
  7077                           ;FMCW.c: 251: L_OUT(fmcwtxrx);
  7078  0D75  0875               	movf	OPINIT@fmcwtxrx+1,w
  7079  0D76  00F3               	movwf	L_OUT@fmcwtxrx+1
  7080  0D77  0874               	movf	OPINIT@fmcwtxrx,w
  7081  0D78  00F2               	movwf	L_OUT@fmcwtxrx
  7082  0D79  120A  158A  2323  120A  158A  	fcall	_L_OUT
  7083                           
  7084                           ;FMCW.c: 252: L_OUT(fmcwtxrx);
  7085  0D7E  0875               	movf	OPINIT@fmcwtxrx+1,w
  7086  0D7F  00F3               	movwf	L_OUT@fmcwtxrx+1
  7087  0D80  0874               	movf	OPINIT@fmcwtxrx,w
  7088  0D81  00F2               	movwf	L_OUT@fmcwtxrx
  7089  0D82  120A  158A  2323  120A  158A  	fcall	_L_OUT
  7090                           
  7091                           ;FMCW.c: 253: H_OUT(fmcwtxrx);
  7092  0D87  0875               	movf	OPINIT@fmcwtxrx+1,w
  7093  0D88  00F3               	movwf	H_OUT@fmcwtxrx+1
  7094  0D89  0874               	movf	OPINIT@fmcwtxrx,w
  7095  0D8A  00F2               	movwf	H_OUT@fmcwtxrx
  7096  0D8B  120A  158A  22DD  120A  158A  	fcall	_H_OUT
  7097                           
  7098                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  7099  0D90  0875               	movf	OPINIT@fmcwtxrx+1,w
  7100  0D91  00F3               	movwf	L_OUT@fmcwtxrx+1
  7101  0D92  0874               	movf	OPINIT@fmcwtxrx,w
  7102  0D93  00F2               	movwf	L_OUT@fmcwtxrx
  7103  0D94  120A  158A  2323  120A  158A  	fcall	_L_OUT
  7104                           
  7105                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  7106  0D99  0875               	movf	OPINIT@fmcwtxrx+1,w
  7107  0D9A  00F3               	movwf	L_OUT@fmcwtxrx+1
  7108  0D9B  0874               	movf	OPINIT@fmcwtxrx,w
  7109  0D9C  00F2               	movwf	L_OUT@fmcwtxrx
  7110  0D9D  120A  158A  2323  120A  158A  	fcall	_L_OUT
  7111                           
  7112                           ;FMCW.c: 260: STBOUT(fmcwtxrx);
  7113  0DA2  0875               	movf	OPINIT@fmcwtxrx+1,w
  7114  0DA3  00F3               	movwf	STBOUT@fmcwtxrx+1
  7115  0DA4  0874               	movf	OPINIT@fmcwtxrx,w
  7116  0DA5  00F2               	movwf	STBOUT@fmcwtxrx
  7117  0DA6  120A  158A  2241   	fcall	_STBOUT
  7118  0DA9  0008               	return
  7119  0DAA                     __end_of_OPINIT:	
  7120                           
  7121                           	psect	text26
  7122  0A41                     __ptext26:	
  7123 ;; *************** function _STBOUT *****************
  7124 ;; Defined at:
  7125 ;;		line 107 in file "FMCW.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  fmcwtxrx        2    2[COMMON] int 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;		None
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  1    wreg      void 
  7132 ;; Registers used:
  7133 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7139 ;;      Params:         2       0       0       0       0
  7140 ;;      Locals:         0       0       0       0       0
  7141 ;;      Temps:          0       0       0       0       0
  7142 ;;      Totals:         2       0       0       0       0
  7143 ;;Total ram usage:        2 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:    1
  7146 ;; This function calls:
  7147 ;;		__NOP
  7148 ;; This function is called by:
  7149 ;;		_OUTFQ
  7150 ;;		_RFDOUT
  7151 ;;		_OPINIT
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function _STBOUT
  7157  0A41                     _STBOUT:	
  7158                           
  7159                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  7160                           
  7161                           ;incstack = 0
  7162                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7163  0A41  0372               	decf	STBOUT@fmcwtxrx,w
  7164  0A42  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7165  0A43  1D03               	btfss	3,2
  7166  0A44  2A50               	goto	l2473
  7167                           
  7168                           ;FMCW.c: 109: {
  7169                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  7170  0A45  1283               	bcf	3,5	;RP0=0, select bank0
  7171  0A46  1303               	bcf	3,6	;RP1=0, select bank0
  7172  0A47  1685               	bsf	5,5	;volatile
  7173                           
  7174                           ;FMCW.c: 111: _NOP();
  7175  0A48  120A  158A  20F4  120A  158A  	fcall	__NOP
  7176                           
  7177                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  7178  0A4D  1283               	bcf	3,5	;RP0=0, select bank0
  7179  0A4E  1303               	bcf	3,6	;RP1=0, select bank0
  7180  0A4F  1285               	bcf	5,5	;volatile
  7181  0A50                     l2473:	
  7182                           
  7183                           ;FMCW.c: 113: }
  7184                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  7185  0A50  3002               	movlw	2
  7186  0A51  0672               	xorwf	STBOUT@fmcwtxrx,w
  7187  0A52  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7188  0A53  1D03               	btfss	3,2
  7189  0A54  2A60               	goto	l2481
  7190                           
  7191                           ;FMCW.c: 115: {
  7192                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  7193  0A55  1283               	bcf	3,5	;RP0=0, select bank0
  7194  0A56  1303               	bcf	3,6	;RP1=0, select bank0
  7195  0A57  1408               	bsf	8,0	;volatile
  7196                           
  7197                           ;FMCW.c: 117: _NOP();
  7198  0A58  120A  158A  20F4  120A  158A  	fcall	__NOP
  7199                           
  7200                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  7201  0A5D  1283               	bcf	3,5	;RP0=0, select bank0
  7202  0A5E  1303               	bcf	3,6	;RP1=0, select bank0
  7203  0A5F  1008               	bcf	8,0	;volatile
  7204  0A60                     l2481:	
  7205                           
  7206                           ;FMCW.c: 119: }
  7207                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  7208  0A60  3003               	movlw	3
  7209  0A61  0672               	xorwf	STBOUT@fmcwtxrx,w
  7210  0A62  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  7211  0A63  1D03               	btfss	3,2
  7212  0A64  0008               	return
  7213                           
  7214                           ;FMCW.c: 121: {
  7215                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  7216  0A65  1283               	bcf	3,5	;RP0=0, select bank0
  7217  0A66  1303               	bcf	3,6	;RP1=0, select bank0
  7218  0A67  1605               	bsf	5,4	;volatile
  7219                           
  7220                           ;FMCW.c: 123: _NOP();
  7221  0A68  120A  158A  20F4   	fcall	__NOP
  7222                           
  7223                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  7224  0A6B  1283               	bcf	3,5	;RP0=0, select bank0
  7225  0A6C  1303               	bcf	3,6	;RP1=0, select bank0
  7226  0A6D  1205               	bcf	5,4	;volatile
  7227  0A6E  0008               	return
  7228  0A6F                     __end_of_STBOUT:	
  7229                           
  7230                           	psect	text27
  7231  0B23                     __ptext27:	
  7232 ;; *************** function _L_OUT *****************
  7233 ;; Defined at:
  7234 ;;		line 40 in file "FMCW.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  fmcwtxrx        2    2[COMMON] int 
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;		None
  7239 ;; Return value:  Size  Location     Type
  7240 ;;                  1    wreg      void 
  7241 ;; Registers used:
  7242 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7243 ;; Tracked objects:
  7244 ;;		On entry : 0/0
  7245 ;;		On exit  : 0/0
  7246 ;;		Unchanged: 0/0
  7247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7248 ;;      Params:         2       0       0       0       0
  7249 ;;      Locals:         0       0       0       0       0
  7250 ;;      Temps:          0       0       0       0       0
  7251 ;;      Totals:         2       0       0       0       0
  7252 ;;Total ram usage:        2 bytes
  7253 ;; Hardware stack levels used:    1
  7254 ;; Hardware stack levels required when called:    1
  7255 ;; This function calls:
  7256 ;;		__NOP
  7257 ;; This function is called by:
  7258 ;;		_OUTFQ
  7259 ;;		_RFDOUT
  7260 ;;		_OPINIT
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           
  7265                           ;psect for function _L_OUT
  7266  0B23                     _L_OUT:	
  7267                           
  7268                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  7269                           
  7270                           ;incstack = 0
  7271                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7272  0B23  0372               	decf	L_OUT@fmcwtxrx,w
  7273  0B24  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7274  0B25  1D03               	btfss	3,2
  7275  0B26  2B3A               	goto	l2415
  7276                           
  7277                           ;FMCW.c: 42: {
  7278                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  7279  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  7280  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  7281  0B29  1009               	bcf	9,0	;volatile
  7282                           
  7283                           ;FMCW.c: 44: _NOP();
  7284  0B2A  120A  158A  20F4  120A  158A  	fcall	__NOP
  7285                           
  7286                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  7287  0B2F  1283               	bcf	3,5	;RP0=0, select bank0
  7288  0B30  1303               	bcf	3,6	;RP1=0, select bank0
  7289  0B31  1489               	bsf	9,1	;volatile
  7290                           
  7291                           ;FMCW.c: 46: _NOP();
  7292  0B32  120A  158A  20F4  120A  158A  	fcall	__NOP
  7293                           
  7294                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  7295  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  7296  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  7297  0B39  1089               	bcf	9,1	;volatile
  7298  0B3A                     l2415:	
  7299                           
  7300                           ;FMCW.c: 48: }
  7301                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  7302  0B3A  3002               	movlw	2
  7303  0B3B  0672               	xorwf	L_OUT@fmcwtxrx,w
  7304  0B3C  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7305  0B3D  1D03               	btfss	3,2
  7306  0B3E  2B52               	goto	l2425
  7307                           
  7308                           ;FMCW.c: 50: {
  7309                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  7310  0B3F  1283               	bcf	3,5	;RP0=0, select bank0
  7311  0B40  1303               	bcf	3,6	;RP1=0, select bank0
  7312  0B41  1088               	bcf	8,1	;volatile
  7313                           
  7314                           ;FMCW.c: 52: _NOP();
  7315  0B42  120A  158A  20F4  120A  158A  	fcall	__NOP
  7316                           
  7317                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  7318  0B47  1283               	bcf	3,5	;RP0=0, select bank0
  7319  0B48  1303               	bcf	3,6	;RP1=0, select bank0
  7320  0B49  1508               	bsf	8,2	;volatile
  7321                           
  7322                           ;FMCW.c: 54: _NOP();
  7323  0B4A  120A  158A  20F4  120A  158A  	fcall	__NOP
  7324                           
  7325                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  7326  0B4F  1283               	bcf	3,5	;RP0=0, select bank0
  7327  0B50  1303               	bcf	3,6	;RP1=0, select bank0
  7328  0B51  1108               	bcf	8,2	;volatile
  7329  0B52                     l2425:	
  7330                           
  7331                           ;FMCW.c: 56: }
  7332                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  7333  0B52  3003               	movlw	3
  7334  0B53  0672               	xorwf	L_OUT@fmcwtxrx,w
  7335  0B54  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  7336  0B55  1D03               	btfss	3,2
  7337  0B56  0008               	return
  7338                           
  7339                           ;FMCW.c: 58: {
  7340                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  7341  0B57  1283               	bcf	3,5	;RP0=0, select bank0
  7342  0B58  1303               	bcf	3,6	;RP1=0, select bank0
  7343  0B59  1185               	bcf	5,3	;volatile
  7344                           
  7345                           ;FMCW.c: 60: _NOP();
  7346  0B5A  120A  158A  20F4  120A  158A  	fcall	__NOP
  7347                           
  7348                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  7349  0B5F  1283               	bcf	3,5	;RP0=0, select bank0
  7350  0B60  1303               	bcf	3,6	;RP1=0, select bank0
  7351  0B61  1505               	bsf	5,2	;volatile
  7352                           
  7353                           ;FMCW.c: 62: _NOP();
  7354  0B62  120A  158A  20F4   	fcall	__NOP
  7355                           
  7356                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  7357  0B65  1283               	bcf	3,5	;RP0=0, select bank0
  7358  0B66  1303               	bcf	3,6	;RP1=0, select bank0
  7359  0B67  1105               	bcf	5,2	;volatile
  7360  0B68  0008               	return
  7361  0B69                     __end_of_L_OUT:	
  7362                           
  7363                           	psect	text28
  7364  0ADD                     __ptext28:	
  7365 ;; *************** function _H_OUT *****************
  7366 ;; Defined at:
  7367 ;;		line 74 in file "FMCW.c"
  7368 ;; Parameters:    Size  Location     Type
  7369 ;;  fmcwtxrx        2    2[COMMON] int 
  7370 ;; Auto vars:     Size  Location     Type
  7371 ;;		None
  7372 ;; Return value:  Size  Location     Type
  7373 ;;                  1    wreg      void 
  7374 ;; Registers used:
  7375 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7376 ;; Tracked objects:
  7377 ;;		On entry : 0/0
  7378 ;;		On exit  : 0/0
  7379 ;;		Unchanged: 0/0
  7380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7381 ;;      Params:         2       0       0       0       0
  7382 ;;      Locals:         0       0       0       0       0
  7383 ;;      Temps:          0       0       0       0       0
  7384 ;;      Totals:         2       0       0       0       0
  7385 ;;Total ram usage:        2 bytes
  7386 ;; Hardware stack levels used:    1
  7387 ;; Hardware stack levels required when called:    1
  7388 ;; This function calls:
  7389 ;;		__NOP
  7390 ;; This function is called by:
  7391 ;;		_OUTFQ
  7392 ;;		_RFDOUT
  7393 ;;		_OPINIT
  7394 ;; This function uses a non-reentrant model
  7395 ;;
  7396                           
  7397                           
  7398                           ;psect for function _H_OUT
  7399  0ADD                     _H_OUT:	
  7400                           
  7401                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  7402                           
  7403                           ;incstack = 0
  7404                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7405  0ADD  0372               	decf	H_OUT@fmcwtxrx,w
  7406  0ADE  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7407  0ADF  1D03               	btfss	3,2
  7408  0AE0  2AF4               	goto	l2445
  7409                           
  7410                           ;FMCW.c: 76: {
  7411                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  7412  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  7413  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  7414  0AE3  1409               	bsf	9,0	;volatile
  7415                           
  7416                           ;FMCW.c: 78: _NOP();
  7417  0AE4  120A  158A  20F4  120A  158A  	fcall	__NOP
  7418                           
  7419                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  7420  0AE9  1283               	bcf	3,5	;RP0=0, select bank0
  7421  0AEA  1303               	bcf	3,6	;RP1=0, select bank0
  7422  0AEB  1489               	bsf	9,1	;volatile
  7423                           
  7424                           ;FMCW.c: 80: _NOP();
  7425  0AEC  120A  158A  20F4  120A  158A  	fcall	__NOP
  7426                           
  7427                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  7428  0AF1  1283               	bcf	3,5	;RP0=0, select bank0
  7429  0AF2  1303               	bcf	3,6	;RP1=0, select bank0
  7430  0AF3  1089               	bcf	9,1	;volatile
  7431  0AF4                     l2445:	
  7432                           
  7433                           ;FMCW.c: 82: }
  7434                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  7435  0AF4  3002               	movlw	2
  7436  0AF5  0672               	xorwf	H_OUT@fmcwtxrx,w
  7437  0AF6  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7438  0AF7  1D03               	btfss	3,2
  7439  0AF8  2B0C               	goto	l2455
  7440                           
  7441                           ;FMCW.c: 84: {
  7442                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  7443  0AF9  1283               	bcf	3,5	;RP0=0, select bank0
  7444  0AFA  1303               	bcf	3,6	;RP1=0, select bank0
  7445  0AFB  1488               	bsf	8,1	;volatile
  7446                           
  7447                           ;FMCW.c: 86: _NOP();
  7448  0AFC  120A  158A  20F4  120A  158A  	fcall	__NOP
  7449                           
  7450                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  7451  0B01  1283               	bcf	3,5	;RP0=0, select bank0
  7452  0B02  1303               	bcf	3,6	;RP1=0, select bank0
  7453  0B03  1508               	bsf	8,2	;volatile
  7454                           
  7455                           ;FMCW.c: 88: _NOP();
  7456  0B04  120A  158A  20F4  120A  158A  	fcall	__NOP
  7457                           
  7458                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  7459  0B09  1283               	bcf	3,5	;RP0=0, select bank0
  7460  0B0A  1303               	bcf	3,6	;RP1=0, select bank0
  7461  0B0B  1108               	bcf	8,2	;volatile
  7462  0B0C                     l2455:	
  7463                           
  7464                           ;FMCW.c: 90: }
  7465                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  7466  0B0C  3003               	movlw	3
  7467  0B0D  0672               	xorwf	H_OUT@fmcwtxrx,w
  7468  0B0E  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  7469  0B0F  1D03               	btfss	3,2
  7470  0B10  0008               	return
  7471                           
  7472                           ;FMCW.c: 92: {
  7473                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  7474  0B11  1283               	bcf	3,5	;RP0=0, select bank0
  7475  0B12  1303               	bcf	3,6	;RP1=0, select bank0
  7476  0B13  1585               	bsf	5,3	;volatile
  7477                           
  7478                           ;FMCW.c: 94: _NOP();
  7479  0B14  120A  158A  20F4  120A  158A  	fcall	__NOP
  7480                           
  7481                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  7482  0B19  1283               	bcf	3,5	;RP0=0, select bank0
  7483  0B1A  1303               	bcf	3,6	;RP1=0, select bank0
  7484  0B1B  1505               	bsf	5,2	;volatile
  7485                           
  7486                           ;FMCW.c: 96: _NOP();
  7487  0B1C  120A  158A  20F4   	fcall	__NOP
  7488                           
  7489                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  7490  0B1F  1283               	bcf	3,5	;RP0=0, select bank0
  7491  0B20  1303               	bcf	3,6	;RP1=0, select bank0
  7492  0B21  1105               	bcf	5,2	;volatile
  7493  0B22  0008               	return
  7494  0B23                     __end_of_H_OUT:	
  7495                           
  7496                           	psect	text29
  7497  08F4                     __ptext29:	
  7498 ;; *************** function __NOP *****************
  7499 ;; Defined at:
  7500 ;;		line 353 in file "FMCW.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;		None
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;  i               2    0[COMMON] int 
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      void 
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, btemp+1
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7514 ;;      Params:         0       0       0       0       0
  7515 ;;      Locals:         2       0       0       0       0
  7516 ;;      Temps:          0       0       0       0       0
  7517 ;;      Totals:         2       0       0       0       0
  7518 ;;Total ram usage:        2 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; This function calls:
  7521 ;;		Nothing
  7522 ;; This function is called by:
  7523 ;;		_L_OUT
  7524 ;;		_H_OUT
  7525 ;;		_STBOUT
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           
  7530                           ;psect for function __NOP
  7531  08F4                     __NOP:	
  7532                           
  7533                           ;FMCW.c: 354: for(int i=0; i<5; i++){
  7534                           
  7535                           ;incstack = 0
  7536                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7537  08F4  01F0               	clrf	__NOP@i
  7538  08F5  01F1               	clrf	__NOP@i+1
  7539  08F6                     L9:	
  7540  08F6  0871               	movf	__NOP@i+1,w
  7541  08F7  3A80               	xorlw	128
  7542  08F8  00FF               	movwf	127
  7543  08F9  3080               	movlw	128
  7544  08FA  027F               	subwf	127,w
  7545  08FB  1D03               	skipz
  7546  08FC  28FF               	goto	u1785
  7547  08FD  3005               	movlw	5
  7548  08FE  0270               	subwf	__NOP@i,w
  7549  08FF                     u1785:	
  7550  08FF  1803               	btfsc	3,0
  7551  0900  0008               	return
  7552                           
  7553                           ;FMCW.c: 355: __nop();
  7554  0901  0000               	nop
  7555  0902  3001               	movlw	1
  7556  0903  07F0               	addwf	__NOP@i,f
  7557  0904  1803               	skipnc
  7558  0905  0AF1               	incf	__NOP@i+1,f
  7559  0906  3000               	movlw	0
  7560  0907  07F1               	addwf	__NOP@i+1,f
  7561  0908  28F6               	goto	L9
  7562  0909                     __end_of__NOP:	
  7563  007E                     btemp	set	126	;btemp
  7564  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    2
    Data        91
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     61      79
    BANK1            80     33      74
    BANK3            96      0      96
    BANK2            96      0      25

Pointer List with Targets:

    FMRX@Nprg	PTR int  size(1) Largest target is 10
		 -> main@FMRX_Nprg(BANK1[10]), FMRX_Nprg(BANK1[10]), 

    CWTX@Nprg	PTR int  size(1) Largest target is 10
		 -> main@CWTX_Nprg(BANK1[10]), CWTX_Nprg(BANK1[10]), 

    FMTX@Nprg	PTR int  size(1) Largest target is 10
		 -> main@FMTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    OUTFQ@Nprg	PTR int  size(1) Largest target is 10
		 -> main@FMRX_Nprg(BANK1[10]), main@CWTX_Nprg(BANK1[10]), main@FMTX_Nprg(BANK1[10]), FMRX_Nprg(BANK1[10]), 
		 -> CWTX_Nprg(BANK1[10]), FMTX_Nprg(BANK1[10]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK3[16]), 


Critical Paths under _main in COMMON

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _TXOBC_waddress->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_RFDOUT
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   32694
                                             57 BANK0      4     4      0
                                              0 BANK1     33    33      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                     _TXOBC_waddress
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     194
                                              1 COMMON     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     3      3    9482
                                             13 COMMON     1     1      0
                                             52 BANK0      5     2      3
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     3      3    9482
                                             13 COMMON     1     1      0
                                             52 BANK0      5     2      3
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     527
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     234
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     3      3    9482
                                             13 COMMON     1     1      0
                                             52 BANK0      5     2      3
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    3231
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               55    52      3    3853
                                              9 COMMON     3     0      3
                                              0 BANK0     52    52      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _TXOBC_waddress
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      19      11       26.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     21      4A       7       92.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3D      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     120      12        0.0%
ABS                  0      0     120       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Feb 24 14:23:07 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l55 08B9  
                  ___awdiv@sign 0076                              fsr 0004                             l244 0E11  
                           l407 0321                             l408 030C                             l179 056F  
                           l459 08C8                             _RA1 0029                             _RB2 0032  
                           _RC2 003A                             _RB4 0034                             _RB5 0035  
                           _RC5 003D                             _PEN 048A                    __CFG_CPD$OFF 0000  
                           _SEN 0488                             _RX9 00C6                             _TX9 04C6  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                  __CFG_LVP$OFF 0000                            l3021 0E59                            l3015 0E3D  
                          l3033 0E77                            l3113 00D1                            l3105 009A  
                          l3043 0EBA                            l3027 0E68                            l3123 00FA  
                          l3131 0127                            l3053 0F1F                            l3045 0EDE  
                          l3141 0C19                            l2415 0B3A                            l2503 0BC5  
                          l3055 0F26                            l3063 0F7D                            l3127 0114  
                          l3119 00E0                            l3151 0C51                            l3143 0C29  
                          l2425 0B52                            l2521 0BF1                            l2513 0BCD  
                          l3081 0FD3                            l3073 0F9F                            l2601 03E9  
                          l3233 0CF9                            l2515 0BDB                            l3059 0F6C  
                          l3067 0F90                            l3155 0C5E                            l2445 0AF4  
                          l2525 0BFC                            l3077 0FB9                            l3085 0FE6  
                          l3093 006F                            l2701 0534                            l2613 0417  
                          l2455 0B0C                            l2623 0432                            l2551 033F  
                          l3239 0D21                            l3247 0D27                            l2481 0A60  
                          l2473 0A50                            l2529 0C04                            l2705 0541  
                          l2553 035E                            l3099 008B                            l3347 0033  
                          l2395 0B9E                            l2627 043F                            l2723 056D  
                          l3349 004D                            l2397 0BAB                            l2805 0663  
                          l2653 0495                            l2573 038F                            l2831 06B9  
                          l2815 067E                            l2743 05A0                            l2639 046D  
                          l2559 0367                            l3615 024F                            l2497 0BBA  
                          l2841 06D4                            l2753 05B7                            l2729 0578  
                          l2665 04C3                            l2649 0488                            l2569 0382  
                          l3609 023E                            l2931 0C90                            l2819 068B  
                          l2915 07B9                            l2763 05D2                            l2739 0593  
                          l2691 0519                            l2675 04DE                            l2587 03C1  
                          l3635 02F4                            l2941 0CAC                            l2933 0C93  
                          l2845 06E1                            l2597 03DC                            l2917 0338  
                          l2951 0C70                            l2871 0737                            l2767 05DF  
                          l2679 04EB                            l2937 0CA1                            l2857 070F  
                          l2793 0635                            l2971 0DF6                            l2883 0765  
                          l2867 072A                            l2779 060D                            l3587 01BC  
                          l2965 0DD9                            l2893 0780                            l2789 0628  
                          l2991 0E29                            l2977 0E0A                            l2897 078D  
                          l2979 0DB8                            STR_1 080F                            STR_2 080F  
                          STR_3 080F                            STR_4 080F                            STR_5 080F  
                          STR_6 080F                            STR_7 0808                            STR_8 0808  
                          STR_9 0808                            _BRGH 04C2                            _CREN 00C4  
                          _FERR 00C2                            u2005 0BE8                            u2015 0BF2  
                          u2115 03A8                            u3105 0A81                            u3025 0CF7  
                          u2315 0556                            u2235 04AA                            u2155 03FE  
                          u3035 0D1F                            u2505 06F6                            u2425 064A  
                          u2275 0500                            u2195 0454                            u3420 026C  
                          u3430 0282                            u1815 0B8E                            u3440 0298  
                          _FMRX 09E9                            u2545 074C                            u2465 06A0  
                          u2385 05F4                            u3507 01FA                            _FMTX 0A15  
                          u2805 0F7B                            u2725 0E3B                            u3517 025C  
                          u2815 0F8E                            u2735 0E57                            u3607 0991  
                          u3527 02ED                            u1785 08FF                            u2825 0F9D  
                          u2745 0E66                            u2905 00DE                            u3617 0B92  
                          u2585 07A2                            u3537 0317                            u2755 0E75  
                          u3627 0058                            u3547 0329                            u2685 0DC6  
                          u3557 0AAB                            u3477 0149                            u1975 0BD0  
                          u2855 0FE4                            u2935 0125                            u3567 0AB9  
                          u3487 0173                            u2865 006D                            u3577 0AC7  
                          u3497 01D3                            u1995 0BDC                            u2875 0089  
                          u2955 0C1D                            u3587 0AD5                            _RCIE 0465  
                          _RCEN 048B                            _RCIF 0065                            _CWTX 09BD  
                          u2885 0098                            u3597 0980                            u2895 00CF  
                          u2975 0C2B                            u2985 0C40                            u2995 0C52  
                          _OERR 00C1                            _TMR1 000E                            _SPEN 00C7  
                          _RSEN 0489                            _SREN 00C5                            _TXIE 0464  
                          _TXEN 04C5                            _TXIF 0064                            _SYNC 04C4  
                          __NOP 08F4  TXOBC_waddress@TXOBC_wad_header 0075                    __CFG_WRT$OFF 0000  
                          _main 0141                     _NM_waddress 08E2                   ??_Init_SERIAL 0070  
                          btemp 007E                   __CFG_BOREN$ON 0000                    getbit@oldbit 0065  
                   Init_I2C_M@c 0020                            start 0000    ReceivePacket_data@fcschecker 003D  
                 __CFG_IESO$OFF 0000                   __CFG_MCLRE$ON 0000            __end_of_EEPROM_Write 0060  
                         ?_FMRX 0054                           ?_FMTX 0054                           ?_CWTX 0054  
              ?_I2C_Master_Wait 0070                ?_I2C_Master_Stop 0070                           ?__NOP 0070  
                         ?_main 0070                           _ACKEN 048C                           _ACKDT 048D  
               __end_of___awdiv 0C09                           STR_10 0808                           STR_11 0808  
                         STR_12 0808                   __CFG_WDTE$OFF 0000                           _ANSEL 0188  
               __end_of___lldiv 0C67                 ___awdiv@divisor 0070         __size_of_TXOBC_waddress 003A  
               ___awdiv@counter 0075                           _RCREG 001A                           _SPBRG 0099  
                         _PORTA 0005                           _PORTB 0006                           _PORTC 0007  
                         _PORTD 0008                           _PORTE 0009                           _H_OUT 0ADD  
                         _OUTFQ 0E2C                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _L_OUT 0B23                           _TXREG 0019                   __CFG_PWRTE$ON 0000  
                __CFG_FCMEN$OFF 0000                           _dData 01C2                 __end_of_getdata 0CC8  
                         _eflag 0063                   getdata@dstuff 0022                           _putch 08B8  
                         pclath 000A                           status 0003                           wtemp0 007E  
                    _Init_I2C_M 0A6F                EEPROM_Write@data 0074      __end_of_ReceivePacket_data 0D2D  
                  __end_of_FMRX 0A15                    __end_of_FMTX 0A41                    __end_of_CWTX 09E9  
                  __end_of__NOP 0909                 __initialization 07BC                    __end_of_main 0330  
           __end_of_Init_SERIAL 0922                __end_of_Init_MPU 0958                          ??_FMRX 007D  
                        ??_FMTX 007D                          ??_CWTX 007D                          ??__NOP 0070  
                        ??_main 0059                          ?_H_OUT 0072        EEPROM_Write@high_address 0072  
                        ?_OUTFQ 0079                          ?_L_OUT 0072               ?_I2C_Master_Start 0070  
             ?_I2C_Master_Write 0070                          OUTFQ@i 004E              ??_I2C_Master_Start 0070  
                        OUTFQ@j 0052              ??_I2C_Master_Write 0072                ___awdiv@dividend 0072  
                    _eDataField 0110                          ?_putch 0070                          _ANSELH 0189  
                        _RFDOUT 0060                          _OPINIT 0D2D                          _SSPADD 0093  
                        _STBOUT 0A41                          _STATUS 0003                          _SSPCON 0014  
                        _SSPBUF 0013                          __NOP@i 0070                __end_of_fcscheck 0E2C  
                     ??___awdiv 0074                          _dfcshi 006E                       ??___lldiv 0078  
                        _dfcslo 006D                          _efcshi 006B                          _efcslo 006C  
                        _getbit 0B69              __size_of_Reset_EPS 0023                          _estuff 005F  
              ___awdiv@quotient 0077                      _dPacketnum 0067                       ??_getdata 0076  
                   RFDOUT@i_421 003B                     RFDOUT@i_422 003F                __end_of_waitFlag 07BC  
    EEPROM_Write@EEPROM_address 0078         __end_of__initialization 07FC         EEPROM_Write@low_address 0073  
                   ?_Init_I2C_M 0020                     _Init_SERIAL 0909           __size_of_EEPROM_Write 005D  
                 __end_of_H_OUT 0B23                   __end_of_OUTFQ 1000                   __end_of_L_OUT 0B69  
                 L_OUT@fmcwtxrx 0072                  __pcstackCOMMON 0070                    __pidataBANK1 0999  
                  __pidataBANK2 0922                    __pidataBANK3 0958                   __end_of_putch 08C0  
                _TXOBC_waddress 0AA3                         ??_H_OUT 0074                         ??_OUTFQ 0020  
                       ??_L_OUT 0074                         ??_putch 0070                    _EEPROM_Write 0003  
                    __pbssBANK0 005D                      __pbssBANK1 00E5                      __pbssBANK3 0190  
             __end_of_Reset_EPS 0999                       ?_Init_MPU 0070                         ?_RFDOUT 0079  
                       ?_OPINIT 0074                    ?_NM_waddress 0071                         ?_STBOUT 0072  
                       RFDOUT@i 003D                      __pmaintext 0141                      _ebitstatus 005D  
                       ?_getbit 0070          __end_of_TXOBC_waddress 0ADD     TXOBC_waddress@whigh_address 0071  
           __size_of_Init_I2C_M 0034                       OUTFQ@Nprg 007B                       ?_fcscheck 0070  
                       _SSPCON2 0091                         _SSPSTAT 0094                      __stringtab 0800  
                    ??_Init_MPU 0070                 __size_of_RFDOUT 00E1                 __size_of_OPINIT 007D  
               __size_of_STBOUT 002E                       ?_waitFlag 0070                         _dPacket 0190  
                       _ePacket 00E5                         ___awdiv 0BB0                         ___lldiv 0C09  
               __size_of_getbit 0047                     waitFlag@buf 003C                 ?_TXOBC_waddress 0071  
                       __ptext1 0AA3                         __ptext2 0976                         __ptext3 0CC8  
                       __ptext4 0330                         __ptext5 0C67                         __ptext6 0B69  
                       __ptext7 0DAA                         __ptext8 08E2                         __ptext9 08B8  
                       _getdata 0C67              _ReceivePacket_data 0CC8                       _T1CONbits 0010  
      __size_of_I2C_Master_Wait 0009        __size_of_I2C_Master_Stop 0007                      ??_fcscheck 0072  
           ?_ReceivePacket_data 0070                         getbit@i 0074                         clrloop0 08C1  
          end_of_initialization 07FC                    RFDOUT@Nref_b 0023                       _FMRX_Nref 00A0  
                     _FMRX_Nprg 00A6                       _FMTX_Nref 00A4                       _FMTX_Nprg 00BA  
                     _CWTX_Nref 00A2                       _CWTX_Nprg 00B0                     OUTFQ@Nprg_b 0028  
     __size_of_I2C_Master_Start 0007       __size_of_I2C_Master_Write 0008                 ___lldiv@divisor 0070  
               ___lldiv@counter 007D                      ??_waitFlag 0076            ??_ReceivePacket_data 007A  
                    fcscheck@bt 0074                  OPINIT@fmcwtxrx 0074                       _PORTAbits 0005  
                     _PORTDbits 0008                       _PORTEbits 0009                      getdata@buf 0026  
                  ??_Init_I2C_M 0024                    ?_Init_SERIAL 0070                  __end_of_RFDOUT 0141  
                __end_of_OPINIT 0DAA                  __end_of_STBOUT 0A6F            __size_of_NM_waddress 0012  
                __end_of_getbit 0BB0      TXOBC_waddress@wlow_address 0072             start_initialization 07BC  
            __end_of_Init_I2C_M 0AA3                        ??_RFDOUT 0020                        ??_OPINIT 0076  
             ??_I2C_Master_Wait 0070               ??_I2C_Master_Stop 0070                        ??_STBOUT 0074  
             __size_of_Init_MPU 001D                       _Reset_EPS 0976               getdata@dbitstatus 0024  
                    init_fetch0 08D1                        ??_getbit 0072                     __pdataBANK1 00A0  
                   __pdataBANK2 0110                     __pdataBANK3 01D2                      RFDOUT@Nref 007B  
           __end_of_commandSize 0808        NM_waddress@whigh_address 0071                       ___latbits 0002  
                 __pcstackBANK0 0020                   __pcstackBANK1 00C4                        FMRX@Nref 0054  
                      FMRX@Nprg 0056                        FMTX@Nref 0054                        FMTX@Nprg 0056  
                      FMRX@fmrx 0057                        FMTX@fmtx 0057                        CWTX@Nref 0054  
                      CWTX@Nprg 0056               __size_of_fcscheck 0082                   waitFlag@j_110 002A  
                 waitFlag@j_112 002C                   waitFlag@j_104 0024                   waitFlag@j_121 0036  
                 waitFlag@j_113 002E                   waitFlag@j_106 0026                   waitFlag@j_123 0038  
                 waitFlag@j_115 0030                   waitFlag@j_108 0028                   waitFlag@j_117 0032  
                 waitFlag@j_119 0034                        CWTX@cwtx 0057                _I2C_Master_Start 08A2  
                    ?_Reset_EPS 0070                _I2C_Master_Write 08B0                ??_TXOBC_waddress 0073  
       getdata@bufstore_counter 0020                        ?___awdiv 0070                        ?___lldiv 0070  
             __size_of_waitFlag 048C                       __pstrings 0800                        ?_getdata 0070  
                __size_of_H_OUT 0046                  __size_of_OUTFQ 01D4                  __size_of_L_OUT 0046  
                __size_of_putch 0008                   H_OUT@fmcwtxrx 0072                       clear_ram0 08C0  
                      _PIE1bits 008C                      OUTFQ@i_410 004A                      OUTFQ@i_412 0050  
                     _rcv_state 0069            __size_of_Init_SERIAL 0019                        _PIR1bits 000C  
                    OUTFQ@count 004C                     _commandSize 0806                       fcscheck@i 0075  
                     main@F1991 01DC                       main@F1993 01D2                       main@F1989 01E6  
                   __stringbase 0805                       main@dData 00E4                        _Init_MPU 093B  
                   ??_Reset_EPS 0070                   fcscheck@i_135 0077     __size_of_ReceivePacket_data 0065  
              __size_of___awdiv 0059                __size_of___lldiv 005E              __end_of__stringtab 0806  
              __size_of_getdata 0061                 _I2C_Master_Wait 08C8                 _I2C_Master_Stop 08A9  
                RFDOUT@fmcwtxrx 0079                        _efcsflag 0061                        _fcscheck 0DAA  
                      __ptext10 0909                        __ptext11 093B                        __ptext20 08C8  
                      __ptext12 0A6F                        __ptext21 09BD                        __ptext13 0C09  
                      __ptext22 0060                        __ptext14 0A15                        __ptext23 0E2C  
                      __ptext15 09E9                        __ptext24 0BB0                        __ptext16 0003  
                      __ptext25 0D2D                        __ptext17 08B0                        __ptext26 0A41  
                      __ptext18 08A9                        __ptext27 0B23                        __ptext19 08A2  
                      __ptext28 0ADD                        __ptext29 08F4               __CFG_BOR4V$BOR21V 0000  
                 ?_EEPROM_Write 0072                   __size_of_FMRX 002C                   __size_of_FMTX 002C  
                 __size_of_CWTX 002C                   __size_of__NOP 0015                   ??_NM_waddress 0073  
                     waitFlag@i 0020                       waitFlag@j 0022                   __size_of_main 01EF  
                STBOUT@fmcwtxrx 0072                        _waitFlag 0330        NM_waddress@NM_wad_header 0073  
                 OUTFQ@fmcwtxrx 0079        __end_of_I2C_Master_Start 08A9                       putch@byte 0070  
      __end_of_I2C_Master_Write 08B8                      _INTCONbits 000B                        init_ram0 08D5  
                  fcscheck@byte 0079                  ??_EEPROM_Write 0075              waitFlag@flag_judge 003A  
              ___lldiv@dividend 0074                       stringcode 0800                   main@FMRX_Nprg 00D8  
             main@NM_wad_header 00E3                   main@FMTX_Nprg 00C4             __end_of_NM_waddress 08F4  
                 main@CWTX_Nprg 00CE         __end_of_I2C_Master_Wait 08D1         __end_of_I2C_Master_Stop 08B0  
              ___lldiv@quotient 0079               I2C_Master_Write@d 0070             EEPROM_Write@Address 0079  
                      stringdir 0800                        stringtab 0800             ReceivePacket_data@i 003F  
       NM_waddress@wlow_address 0072            main@TXOBC_wad_header 00E2  
