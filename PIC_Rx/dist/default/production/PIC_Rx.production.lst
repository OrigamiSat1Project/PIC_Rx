

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 28 01:08:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.45
    50                           ; Generated 16/11/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16F887 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000D                     	;# 
    97  000E                     	;# 
    98  000E                     	;# 
    99  000F                     	;# 
   100  0010                     	;# 
   101  0011                     	;# 
   102  0012                     	;# 
   103  0013                     	;# 
   104  0014                     	;# 
   105  0015                     	;# 
   106  0015                     	;# 
   107  0016                     	;# 
   108  0017                     	;# 
   109  0018                     	;# 
   110  0019                     	;# 
   111  001A                     	;# 
   112  001B                     	;# 
   113  001B                     	;# 
   114  001C                     	;# 
   115  001D                     	;# 
   116  001E                     	;# 
   117  001F                     	;# 
   118  0081                     	;# 
   119  0085                     	;# 
   120  0086                     	;# 
   121  0087                     	;# 
   122  0088                     	;# 
   123  0089                     	;# 
   124  008C                     	;# 
   125  008D                     	;# 
   126  008E                     	;# 
   127  008F                     	;# 
   128  0090                     	;# 
   129  0091                     	;# 
   130  0092                     	;# 
   131  0093                     	;# 
   132  0093                     	;# 
   133  0093                     	;# 
   134  0094                     	;# 
   135  0095                     	;# 
   136  0096                     	;# 
   137  0097                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009A                     	;# 
   141  009B                     	;# 
   142  009C                     	;# 
   143  009D                     	;# 
   144  009E                     	;# 
   145  009F                     	;# 
   146  0105                     	;# 
   147  0107                     	;# 
   148  0108                     	;# 
   149  0109                     	;# 
   150  010C                     	;# 
   151  010C                     	;# 
   152  010D                     	;# 
   153  010E                     	;# 
   154  010F                     	;# 
   155  0185                     	;# 
   156  0187                     	;# 
   157  0188                     	;# 
   158  0189                     	;# 
   159  018C                     	;# 
   160  018D                     	;# 
   161  0000                     	;# 
   162  0001                     	;# 
   163  0002                     	;# 
   164  0003                     	;# 
   165  0004                     	;# 
   166  0005                     	;# 
   167  0006                     	;# 
   168  0007                     	;# 
   169  0008                     	;# 
   170  0009                     	;# 
   171  000A                     	;# 
   172  000B                     	;# 
   173  000C                     	;# 
   174  000D                     	;# 
   175  000E                     	;# 
   176  000E                     	;# 
   177  000F                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0013                     	;# 
   182  0014                     	;# 
   183  0015                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  001D                     	;# 
   194  001E                     	;# 
   195  001F                     	;# 
   196  0081                     	;# 
   197  0085                     	;# 
   198  0086                     	;# 
   199  0087                     	;# 
   200  0088                     	;# 
   201  0089                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  008F                     	;# 
   206  0090                     	;# 
   207  0091                     	;# 
   208  0092                     	;# 
   209  0093                     	;# 
   210  0093                     	;# 
   211  0093                     	;# 
   212  0094                     	;# 
   213  0095                     	;# 
   214  0096                     	;# 
   215  0097                     	;# 
   216  0098                     	;# 
   217  0099                     	;# 
   218  009A                     	;# 
   219  009B                     	;# 
   220  009C                     	;# 
   221  009D                     	;# 
   222  009E                     	;# 
   223  009F                     	;# 
   224  0105                     	;# 
   225  0107                     	;# 
   226  0108                     	;# 
   227  0109                     	;# 
   228  010C                     	;# 
   229  010C                     	;# 
   230  010D                     	;# 
   231  010E                     	;# 
   232  010F                     	;# 
   233  0185                     	;# 
   234  0187                     	;# 
   235  0188                     	;# 
   236  0189                     	;# 
   237  018C                     	;# 
   238  018D                     	;# 
   239  0000                     	;# 
   240  0001                     	;# 
   241  0002                     	;# 
   242  0003                     	;# 
   243  0004                     	;# 
   244  0005                     	;# 
   245  0006                     	;# 
   246  0007                     	;# 
   247  0008                     	;# 
   248  0009                     	;# 
   249  000A                     	;# 
   250  000B                     	;# 
   251  000C                     	;# 
   252  000D                     	;# 
   253  000E                     	;# 
   254  000E                     	;# 
   255  000F                     	;# 
   256  0010                     	;# 
   257  0011                     	;# 
   258  0012                     	;# 
   259  0013                     	;# 
   260  0014                     	;# 
   261  0015                     	;# 
   262  0015                     	;# 
   263  0016                     	;# 
   264  0017                     	;# 
   265  0018                     	;# 
   266  0019                     	;# 
   267  001A                     	;# 
   268  001B                     	;# 
   269  001B                     	;# 
   270  001C                     	;# 
   271  001D                     	;# 
   272  001E                     	;# 
   273  001F                     	;# 
   274  0081                     	;# 
   275  0085                     	;# 
   276  0086                     	;# 
   277  0087                     	;# 
   278  0088                     	;# 
   279  0089                     	;# 
   280  008C                     	;# 
   281  008D                     	;# 
   282  008E                     	;# 
   283  008F                     	;# 
   284  0090                     	;# 
   285  0091                     	;# 
   286  0092                     	;# 
   287  0093                     	;# 
   288  0093                     	;# 
   289  0093                     	;# 
   290  0094                     	;# 
   291  0095                     	;# 
   292  0096                     	;# 
   293  0097                     	;# 
   294  0098                     	;# 
   295  0099                     	;# 
   296  009A                     	;# 
   297  009B                     	;# 
   298  009C                     	;# 
   299  009D                     	;# 
   300  009E                     	;# 
   301  009F                     	;# 
   302  0105                     	;# 
   303  0107                     	;# 
   304  0108                     	;# 
   305  0109                     	;# 
   306  010C                     	;# 
   307  010C                     	;# 
   308  010D                     	;# 
   309  010E                     	;# 
   310  010F                     	;# 
   311  0185                     	;# 
   312  0187                     	;# 
   313  0188                     	;# 
   314  0189                     	;# 
   315  018C                     	;# 
   316  018D                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  0008                     	;# 
   326  0009                     	;# 
   327  000A                     	;# 
   328  000B                     	;# 
   329  000C                     	;# 
   330  000D                     	;# 
   331  000E                     	;# 
   332  000E                     	;# 
   333  000F                     	;# 
   334  0010                     	;# 
   335  0011                     	;# 
   336  0012                     	;# 
   337  0013                     	;# 
   338  0014                     	;# 
   339  0015                     	;# 
   340  0015                     	;# 
   341  0016                     	;# 
   342  0017                     	;# 
   343  0018                     	;# 
   344  0019                     	;# 
   345  001A                     	;# 
   346  001B                     	;# 
   347  001B                     	;# 
   348  001C                     	;# 
   349  001D                     	;# 
   350  001E                     	;# 
   351  001F                     	;# 
   352  0081                     	;# 
   353  0085                     	;# 
   354  0086                     	;# 
   355  0087                     	;# 
   356  0088                     	;# 
   357  0089                     	;# 
   358  008C                     	;# 
   359  008D                     	;# 
   360  008E                     	;# 
   361  008F                     	;# 
   362  0090                     	;# 
   363  0091                     	;# 
   364  0092                     	;# 
   365  0093                     	;# 
   366  0093                     	;# 
   367  0093                     	;# 
   368  0094                     	;# 
   369  0095                     	;# 
   370  0096                     	;# 
   371  0097                     	;# 
   372  0098                     	;# 
   373  0099                     	;# 
   374  009A                     	;# 
   375  009B                     	;# 
   376  009C                     	;# 
   377  009D                     	;# 
   378  009E                     	;# 
   379  009F                     	;# 
   380  0105                     	;# 
   381  0107                     	;# 
   382  0108                     	;# 
   383  0109                     	;# 
   384  010C                     	;# 
   385  010C                     	;# 
   386  010D                     	;# 
   387  010E                     	;# 
   388  010F                     	;# 
   389  0185                     	;# 
   390  0187                     	;# 
   391  0188                     	;# 
   392  0189                     	;# 
   393  018C                     	;# 
   394  018D                     	;# 
   395  0000                     	;# 
   396  0001                     	;# 
   397  0002                     	;# 
   398  0003                     	;# 
   399  0004                     	;# 
   400  0005                     	;# 
   401  0006                     	;# 
   402  0007                     	;# 
   403  0008                     	;# 
   404  0009                     	;# 
   405  000A                     	;# 
   406  000B                     	;# 
   407  000C                     	;# 
   408  000D                     	;# 
   409  000E                     	;# 
   410  000E                     	;# 
   411  000F                     	;# 
   412  0010                     	;# 
   413  0011                     	;# 
   414  0012                     	;# 
   415  0013                     	;# 
   416  0014                     	;# 
   417  0015                     	;# 
   418  0015                     	;# 
   419  0016                     	;# 
   420  0017                     	;# 
   421  0018                     	;# 
   422  0019                     	;# 
   423  001A                     	;# 
   424  001B                     	;# 
   425  001B                     	;# 
   426  001C                     	;# 
   427  001D                     	;# 
   428  001E                     	;# 
   429  001F                     	;# 
   430  0081                     	;# 
   431  0085                     	;# 
   432  0086                     	;# 
   433  0087                     	;# 
   434  0088                     	;# 
   435  0089                     	;# 
   436  008C                     	;# 
   437  008D                     	;# 
   438  008E                     	;# 
   439  008F                     	;# 
   440  0090                     	;# 
   441  0091                     	;# 
   442  0092                     	;# 
   443  0093                     	;# 
   444  0093                     	;# 
   445  0093                     	;# 
   446  0094                     	;# 
   447  0095                     	;# 
   448  0096                     	;# 
   449  0097                     	;# 
   450  0098                     	;# 
   451  0099                     	;# 
   452  009A                     	;# 
   453  009B                     	;# 
   454  009C                     	;# 
   455  009D                     	;# 
   456  009E                     	;# 
   457  009F                     	;# 
   458  0105                     	;# 
   459  0107                     	;# 
   460  0108                     	;# 
   461  0109                     	;# 
   462  010C                     	;# 
   463  010C                     	;# 
   464  010D                     	;# 
   465  010E                     	;# 
   466  010F                     	;# 
   467  0185                     	;# 
   468  0187                     	;# 
   469  0188                     	;# 
   470  0189                     	;# 
   471  018C                     	;# 
   472  018D                     	;# 
   473  0000                     	;# 
   474  0001                     	;# 
   475  0002                     	;# 
   476  0003                     	;# 
   477  0004                     	;# 
   478  0005                     	;# 
   479  0006                     	;# 
   480  0007                     	;# 
   481  0008                     	;# 
   482  0009                     	;# 
   483  000A                     	;# 
   484  000B                     	;# 
   485  000C                     	;# 
   486  000D                     	;# 
   487  000E                     	;# 
   488  000E                     	;# 
   489  000F                     	;# 
   490  0010                     	;# 
   491  0011                     	;# 
   492  0012                     	;# 
   493  0013                     	;# 
   494  0014                     	;# 
   495  0015                     	;# 
   496  0015                     	;# 
   497  0016                     	;# 
   498  0017                     	;# 
   499  0018                     	;# 
   500  0019                     	;# 
   501  001A                     	;# 
   502  001B                     	;# 
   503  001B                     	;# 
   504  001C                     	;# 
   505  001D                     	;# 
   506  001E                     	;# 
   507  001F                     	;# 
   508  0081                     	;# 
   509  0085                     	;# 
   510  0086                     	;# 
   511  0087                     	;# 
   512  0088                     	;# 
   513  0089                     	;# 
   514  008C                     	;# 
   515  008D                     	;# 
   516  008E                     	;# 
   517  008F                     	;# 
   518  0090                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0093                     	;# 
   522  0093                     	;# 
   523  0093                     	;# 
   524  0094                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0098                     	;# 
   529  0099                     	;# 
   530  009A                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  009F                     	;# 
   536  0105                     	;# 
   537  0107                     	;# 
   538  0108                     	;# 
   539  0109                     	;# 
   540  010C                     	;# 
   541  010C                     	;# 
   542  010D                     	;# 
   543  010E                     	;# 
   544  010F                     	;# 
   545  0185                     	;# 
   546  0187                     	;# 
   547  0188                     	;# 
   548  0189                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  0000                     	;# 
   552  0001                     	;# 
   553  0002                     	;# 
   554  0003                     	;# 
   555  0004                     	;# 
   556  0005                     	;# 
   557  0006                     	;# 
   558  0007                     	;# 
   559  0008                     	;# 
   560  0009                     	;# 
   561  000A                     	;# 
   562  000B                     	;# 
   563  000C                     	;# 
   564  000D                     	;# 
   565  000E                     	;# 
   566  000E                     	;# 
   567  000F                     	;# 
   568  0010                     	;# 
   569  0011                     	;# 
   570  0012                     	;# 
   571  0013                     	;# 
   572  0014                     	;# 
   573  0015                     	;# 
   574  0015                     	;# 
   575  0016                     	;# 
   576  0017                     	;# 
   577  0018                     	;# 
   578  0019                     	;# 
   579  001A                     	;# 
   580  001B                     	;# 
   581  001B                     	;# 
   582  001C                     	;# 
   583  001D                     	;# 
   584  001E                     	;# 
   585  001F                     	;# 
   586  0081                     	;# 
   587  0085                     	;# 
   588  0086                     	;# 
   589  0087                     	;# 
   590  0088                     	;# 
   591  0089                     	;# 
   592  008C                     	;# 
   593  008D                     	;# 
   594  008E                     	;# 
   595  008F                     	;# 
   596  0090                     	;# 
   597  0091                     	;# 
   598  0092                     	;# 
   599  0093                     	;# 
   600  0093                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0098                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009C                     	;# 
   611  009D                     	;# 
   612  009E                     	;# 
   613  009F                     	;# 
   614  0105                     	;# 
   615  0107                     	;# 
   616  0108                     	;# 
   617  0109                     	;# 
   618  010C                     	;# 
   619  010C                     	;# 
   620  010D                     	;# 
   621  010E                     	;# 
   622  010F                     	;# 
   623  0185                     	;# 
   624  0187                     	;# 
   625  0188                     	;# 
   626  0189                     	;# 
   627  018C                     	;# 
   628  018D                     	;# 
   629  0000                     	;# 
   630  0001                     	;# 
   631  0002                     	;# 
   632  0003                     	;# 
   633  0004                     	;# 
   634  0005                     	;# 
   635  0006                     	;# 
   636  0007                     	;# 
   637  0008                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  000E                     	;# 
   645  000F                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0014                     	;# 
   651  0015                     	;# 
   652  0015                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001B                     	;# 
   660  001C                     	;# 
   661  001D                     	;# 
   662  001E                     	;# 
   663  001F                     	;# 
   664  0081                     	;# 
   665  0085                     	;# 
   666  0086                     	;# 
   667  0087                     	;# 
   668  0088                     	;# 
   669  0089                     	;# 
   670  008C                     	;# 
   671  008D                     	;# 
   672  008E                     	;# 
   673  008F                     	;# 
   674  0090                     	;# 
   675  0091                     	;# 
   676  0092                     	;# 
   677  0093                     	;# 
   678  0093                     	;# 
   679  0093                     	;# 
   680  0094                     	;# 
   681  0095                     	;# 
   682  0096                     	;# 
   683  0097                     	;# 
   684  0098                     	;# 
   685  0099                     	;# 
   686  009A                     	;# 
   687  009B                     	;# 
   688  009C                     	;# 
   689  009D                     	;# 
   690  009E                     	;# 
   691  009F                     	;# 
   692  0105                     	;# 
   693  0107                     	;# 
   694  0108                     	;# 
   695  0109                     	;# 
   696  010C                     	;# 
   697  010C                     	;# 
   698  010D                     	;# 
   699  010E                     	;# 
   700  010F                     	;# 
   701  0185                     	;# 
   702  0187                     	;# 
   703  0188                     	;# 
   704  0189                     	;# 
   705  018C                     	;# 
   706  018D                     	;# 
   707  0000                     	;# 
   708  0001                     	;# 
   709  0002                     	;# 
   710  0003                     	;# 
   711  0004                     	;# 
   712  0005                     	;# 
   713  0006                     	;# 
   714  0007                     	;# 
   715  0008                     	;# 
   716  0009                     	;# 
   717  000A                     	;# 
   718  000B                     	;# 
   719  000C                     	;# 
   720  000D                     	;# 
   721  000E                     	;# 
   722  000E                     	;# 
   723  000F                     	;# 
   724  0010                     	;# 
   725  0011                     	;# 
   726  0012                     	;# 
   727  0013                     	;# 
   728  0014                     	;# 
   729  0015                     	;# 
   730  0015                     	;# 
   731  0016                     	;# 
   732  0017                     	;# 
   733  0018                     	;# 
   734  0019                     	;# 
   735  001A                     	;# 
   736  001B                     	;# 
   737  001B                     	;# 
   738  001C                     	;# 
   739  001D                     	;# 
   740  001E                     	;# 
   741  001F                     	;# 
   742  0081                     	;# 
   743  0085                     	;# 
   744  0086                     	;# 
   745  0087                     	;# 
   746  0088                     	;# 
   747  0089                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  008F                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0093                     	;# 
   756  0093                     	;# 
   757  0093                     	;# 
   758  0094                     	;# 
   759  0095                     	;# 
   760  0096                     	;# 
   761  0097                     	;# 
   762  0098                     	;# 
   763  0099                     	;# 
   764  009A                     	;# 
   765  009B                     	;# 
   766  009C                     	;# 
   767  009D                     	;# 
   768  009E                     	;# 
   769  009F                     	;# 
   770  0105                     	;# 
   771  0107                     	;# 
   772  0108                     	;# 
   773  0109                     	;# 
   774  010C                     	;# 
   775  010C                     	;# 
   776  010D                     	;# 
   777  010E                     	;# 
   778  010F                     	;# 
   779  0185                     	;# 
   780  0187                     	;# 
   781  0188                     	;# 
   782  0189                     	;# 
   783  018C                     	;# 
   784  018D                     	;# 
   785  0000                     	;# 
   786  0001                     	;# 
   787  0002                     	;# 
   788  0003                     	;# 
   789  0004                     	;# 
   790  0005                     	;# 
   791  0006                     	;# 
   792  0007                     	;# 
   793  0008                     	;# 
   794  0009                     	;# 
   795  000A                     	;# 
   796  000B                     	;# 
   797  000C                     	;# 
   798  000D                     	;# 
   799  000E                     	;# 
   800  000E                     	;# 
   801  000F                     	;# 
   802  0010                     	;# 
   803  0011                     	;# 
   804  0012                     	;# 
   805  0013                     	;# 
   806  0014                     	;# 
   807  0015                     	;# 
   808  0015                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001B                     	;# 
   816  001C                     	;# 
   817  001D                     	;# 
   818  001E                     	;# 
   819  001F                     	;# 
   820  0081                     	;# 
   821  0085                     	;# 
   822  0086                     	;# 
   823  0087                     	;# 
   824  0088                     	;# 
   825  0089                     	;# 
   826  008C                     	;# 
   827  008D                     	;# 
   828  008E                     	;# 
   829  008F                     	;# 
   830  0090                     	;# 
   831  0091                     	;# 
   832  0092                     	;# 
   833  0093                     	;# 
   834  0093                     	;# 
   835  0093                     	;# 
   836  0094                     	;# 
   837  0095                     	;# 
   838  0096                     	;# 
   839  0097                     	;# 
   840  0098                     	;# 
   841  0099                     	;# 
   842  009A                     	;# 
   843  009B                     	;# 
   844  009C                     	;# 
   845  009D                     	;# 
   846  009E                     	;# 
   847  009F                     	;# 
   848  0105                     	;# 
   849  0107                     	;# 
   850  0108                     	;# 
   851  0109                     	;# 
   852  010C                     	;# 
   853  010C                     	;# 
   854  010D                     	;# 
   855  010E                     	;# 
   856  010F                     	;# 
   857  0185                     	;# 
   858  0187                     	;# 
   859  0188                     	;# 
   860  0189                     	;# 
   861  018C                     	;# 
   862  018D                     	;# 
   863                           
   864                           	psect	idataBANK0
   865  0A79                     __pidataBANK0:	
   866                           
   867                           ;initializer for _FMRX_Nprg
   868  0A79  3437               	retlw	55
   869  0A7A  3461               	retlw	97
   870                           
   871                           ;initializer for _FMRX_Nref
   872  0A7B  3400               	retlw	0
   873  0A7C  340A               	retlw	10
   874                           
   875                           ;initializer for _CWTX_Nprg
   876  0A7D  34D3               	retlw	211
   877  0A7E  3406               	retlw	6
   878                           
   879                           ;initializer for _CWTX_Nref
   880  0A7F  34A0               	retlw	160
   881  0A80  3400               	retlw	0
   882                           
   883                           ;initializer for _FMTX_Nprg
   884  0A81  3404               	retlw	4
   885  0A82  3455               	retlw	85
   886                           
   887                           ;initializer for _FMTX_Nref
   888  0A83  3400               	retlw	0
   889  0A84  340A               	retlw	10
   890                           
   891                           	psect	idataBANK3
   892  0AD6                     __pidataBANK3:	
   893                           
   894                           ;initializer for _eDataField
   895  0AD6  3448               	retlw	72
   896  0AD7  3465               	retlw	101
   897  0AD8  346C               	retlw	108
   898  0AD9  346C               	retlw	108
   899  0ADA  346F               	retlw	111
   900  0ADB  3421               	retlw	33
   901  0ADC  3420               	retlw	32
   902  0ADD  3449               	retlw	73
   903  0ADE  3427               	retlw	39
   904  0ADF  346D               	retlw	109
   905  0AE0  3420               	retlw	32
   906  0AE1  344F               	retlw	79
   907  0AE2  3472               	retlw	114
   908  0AE3  3469               	retlw	105
   909  0AE4  3467               	retlw	103
   910  0AE5  3461               	retlw	97
   911  0AE6  346D               	retlw	109
   912  0AE7  3469               	retlw	105
   913  0AE8  3453               	retlw	83
   914  0AE9  3461               	retlw	97
   915  0AEA  3474               	retlw	116
   916  0AEB  3431               	retlw	49
   917  0AEC  3421               	retlw	33
   918  0AED  3421               	retlw	33
   919  0AEE  3400               	retlw	0
   920                           
   921                           	psect	strings
   922  0800                     __pstrings:	
   923  0800                     stringtab:	
   924  0800                     __stringtab:	
   925  0800                     stringcode:	
   926                           ;	String table - string pointers are 1 byte each
   927                           
   928  0800                     stringdir:	
   929  0800  3008               	movlw	high stringdir
   930  0801  008A               	movwf	10
   931  0802  0804               	movf	4,w
   932  0803  0A84               	incf	4,f
   933  0804  0782               	addwf	2,f
   934  0805                     __stringbase:	
   935  0805  3400               	retlw	0
   936  0806                     __end_of__stringtab:	
   937  0806                     _commandSize:	
   938  0806  3420               	retlw	32
   939  0807  3400               	retlw	0
   940  0808                     __end_of_commandSize:	
   941  000E                     _TMR1	set	14
   942  0010                     _T1CONbits	set	16
   943  000C                     _PIR1bits	set	12
   944  000B                     _INTCONbits	set	11
   945  0008                     _PORTDbits	set	8
   946  0007                     _PORTCbits	set	7
   947  0009                     _PORTEbits	set	9
   948  0005                     _PORTAbits	set	5
   949  0013                     _SSPBUF	set	19
   950  0014                     _SSPCON	set	20
   951  0003                     _STATUS	set	3
   952  0009                     _PORTE	set	9
   953  0008                     _PORTD	set	8
   954  0007                     _PORTC	set	7
   955  0006                     _PORTB	set	6
   956  0005                     _PORTA	set	5
   957  0019                     _TXREG	set	25
   958  001A                     _RCREG	set	26
   959  0029                     _RA1	set	41
   960  0034                     _RB4	set	52
   961  0032                     _RB2	set	50
   962  0035                     _RB5	set	53
   963  003A                     _RC2	set	58
   964  003D                     _RC5	set	61
   965  0064                     _TXIF	set	100
   966  00C1                     _OERR	set	193
   967  00C2                     _FERR	set	194
   968  00C6                     _RX9	set	198
   969  0065                     _RCIF	set	101
   970  00C5                     _SREN	set	197
   971  00C4                     _CREN	set	196
   972  00C7                     _SPEN	set	199
   973  008C                     _PIE1bits	set	140
   974  0094                     _SSPSTAT	set	148
   975  0093                     _SSPADD	set	147
   976  0091                     _SSPCON2	set	145
   977  0089                     _TRISE	set	137
   978  0088                     _TRISD	set	136
   979  0087                     _TRISC	set	135
   980  0086                     _TRISB	set	134
   981  0085                     _TRISA	set	133
   982  0099                     _SPBRG	set	153
   983  048C                     _ACKEN	set	1164
   984  048D                     _ACKDT	set	1165
   985  048B                     _RCEN	set	1163
   986  048A                     _PEN	set	1162
   987  0489                     _RSEN	set	1161
   988  0488                     _SEN	set	1160
   989  04C5                     _TXEN	set	1221
   990  04C6                     _TX9	set	1222
   991  0465                     _RCIE	set	1125
   992  0464                     _TXIE	set	1124
   993  04C4                     _SYNC	set	1220
   994  04C2                     _BRGH	set	1218
   995  0189                     _ANSELH	set	393
   996  0188                     _ANSEL	set	392
   997  0808                     STR_7:	
   998  0808  344A               	retlw	74	;'J'
   999  0809  3451               	retlw	81	;'Q'
  1000  080A  3431               	retlw	49	;'1'
  1001  080B  345A               	retlw	90	;'Z'
  1002  080C  3448               	retlw	72	;'H'
  1003  080D  3458               	retlw	88	;'X'
  1004  080E  3400               	retlw	0
  1005  080F                     STR_1:	
  1006  080F  344A               	retlw	74	;'J'
  1007  0810  3451               	retlw	81	;'Q'
  1008  0811  3431               	retlw	49	;'1'
  1009  0812  3459               	retlw	89	;'Y'
  1010  0813  3443               	retlw	67	;'C'
  1011  0814  345A               	retlw	90	;'Z'
  1012  0815  3400               	retlw	0
  1013  0808                     
  1014                           ; #config settings
  1015  0000                     
  1016                           	psect	cinit
  1017  07C8                     start_initialization:	
  1018  07C8                     __initialization:	
  1019                           
  1020                           ; Initialize objects allocated to BANK3
  1021  07C8  1783               	bsf	3,7	;select IRP bank2
  1022  07C9  30C9               	movlw	low (__pdataBANK3+25)
  1023  07CA  00FD               	movwf	btemp+-1
  1024  07CB  300A               	movlw	high __pidataBANK3
  1025  07CC  00FE               	movwf	btemp
  1026  07CD  30D6               	movlw	low __pidataBANK3
  1027  07CE  00FF               	movwf	btemp+1
  1028  07CF  30B0               	movlw	low __pdataBANK3
  1029  07D0  0084               	movwf	4
  1030  07D1  120A  158A  2289  120A  118A  	fcall	init_ram0
  1031                           
  1032                           ; Initialize objects allocated to BANK0
  1033  07D6  1383               	bcf	3,7	;select IRP bank0
  1034  07D7  3065               	movlw	low (__pdataBANK0+12)
  1035  07D8  00FD               	movwf	btemp+-1
  1036  07D9  300A               	movlw	high __pidataBANK0
  1037  07DA  00FE               	movwf	btemp
  1038  07DB  3079               	movlw	low __pidataBANK0
  1039  07DC  00FF               	movwf	btemp+1
  1040  07DD  3059               	movlw	low __pdataBANK0
  1041  07DE  0084               	movwf	4
  1042  07DF  120A  158A  2289  120A  118A  	fcall	init_ram0
  1043                           
  1044                           ; Clear objects allocated to BANK3
  1045  07E4  1783               	bsf	3,7	;select IRP bank2
  1046  07E5  3090               	movlw	low __pbssBANK3
  1047  07E6  0084               	movwf	4
  1048  07E7  30B0               	movlw	low (__pbssBANK3+32)
  1049  07E8  120A  158A  2271  120A  118A  	fcall	clear_ram0
  1050                           
  1051                           ; Clear objects allocated to BANK1
  1052  07ED  1383               	bcf	3,7	;select IRP bank0
  1053  07EE  30A0               	movlw	low __pbssBANK1
  1054  07EF  0084               	movwf	4
  1055  07F0  30EF               	movlw	low (__pbssBANK1+79)
  1056  07F1  120A  158A  2271  120A  118A  	fcall	clear_ram0
  1057                           
  1058                           ; Clear objects allocated to BANK0
  1059  07F6  3065               	movlw	low __pbssBANK0
  1060  07F7  0084               	movwf	4
  1061  07F8  306F               	movlw	low (__pbssBANK0+10)
  1062  07F9  120A  158A  2271   	fcall	clear_ram0
  1063  07FC                     end_of_initialization:	
  1064                           ;End of C runtime variable initialization code
  1065                           
  1066  07FC                     __end_of__initialization:	
  1067  07FC  0183               	clrf	3
  1068  07FD  120A  118A  29D0   	ljmp	_main	;jump to C main() function
  1069                           
  1070                           	psect	bssBANK0
  1071  0065                     __pbssBANK0:	
  1072  0065                     _eflag:	
  1073  0065                     	ds	2
  1074  0067                     _dPacketnum:	
  1075  0067                     	ds	2
  1076  0069                     _rcv_state:	
  1077  0069                     	ds	2
  1078  006B                     _efcshi:	
  1079  006B                     	ds	1
  1080  006C                     _efcslo:	
  1081  006C                     	ds	1
  1082  006D                     _dfcslo:	
  1083  006D                     	ds	1
  1084  006E                     _dfcshi:	
  1085  006E                     	ds	1
  1086                           
  1087                           	psect	dataBANK0
  1088  0059                     __pdataBANK0:	
  1089  0059                     _FMRX_Nprg:	
  1090  0059                     	ds	2
  1091  005B                     _FMRX_Nref:	
  1092  005B                     	ds	2
  1093  005D                     _CWTX_Nprg:	
  1094  005D                     	ds	2
  1095  005F                     _CWTX_Nref:	
  1096  005F                     	ds	2
  1097  0061                     _FMTX_Nprg:	
  1098  0061                     	ds	2
  1099  0063                     _FMTX_Nref:	
  1100  0063                     	ds	2
  1101                           
  1102                           	psect	bssBANK1
  1103  00A0                     __pbssBANK1:	
  1104  00A0                     _dPacket:	
  1105  00A0                     	ds	50
  1106  00D2                     _ePacket:	
  1107  00D2                     	ds	5
  1108  00D7                     _ebitstatus:	
  1109  00D7                     	ds	2
  1110  00D9                     _estuff:	
  1111  00D9                     	ds	2
  1112  00DB                     _efcsflag:	
  1113  00DB                     	ds	2
  1114  00DD                     getbit@oldbit:	
  1115  00DD                     	ds	2
  1116  00DF                     _dData:	
  1117  00DF                     	ds	16
  1118                           
  1119                           	psect	bssBANK3
  1120  0190                     __pbssBANK3:	
  1121  0190                     _EEPROMData:	
  1122  0190                     	ds	32
  1123                           
  1124                           	psect	dataBANK3
  1125  01B0                     __pdataBANK3:	
  1126  01B0                     _eDataField:	
  1127  01B0                     	ds	25
  1128                           
  1129                           	psect	inittext
  1130  0A85                     init_fetch0:	
  1131                           ;	Called with low address in FSR and high address in W
  1132                           
  1133  0A85  087E               	movf	126,w
  1134  0A86  008A               	movwf	10
  1135  0A87  087F               	movf	127,w
  1136  0A88  0082               	movwf	2
  1137  0A89                     init_ram0:	
  1138                           ;Called with:
  1139                           ;	high address of idata address in btemp 
  1140                           ;	low address of idata address in btemp+1 
  1141                           ;	low address of data in FSR
  1142                           ;	high address + 1 of data in btemp-1
  1143                           
  1144  0A89  2285  120A  158A   	fcall	init_fetch0
  1145  0A8C  0080               	movwf	0
  1146  0A8D  0A84               	incf	4,f
  1147  0A8E  0804               	movf	4,w
  1148  0A8F  067D               	xorwf	125,w
  1149  0A90  1903               	btfsc	3,2
  1150  0A91  3400               	retlw	0
  1151  0A92  0AFF               	incf	127,f
  1152  0A93  1903               	btfsc	3,2
  1153  0A94  0AFE               	incf	126,f
  1154  0A95  2A89               	goto	init_ram0
  1155                           
  1156                           	psect	clrtext
  1157  0A71                     clear_ram0:	
  1158                           ;	Called with FSR containing the base address, and
  1159                           ;	W with the last address+1
  1160                           
  1161  0A71  0064               	clrwdt	;clear the watchdog before getting into this loop
  1162  0A72                     clrloop0:	
  1163  0A72  0180               	clrf	0	;clear RAM location pointed to by FSR
  1164  0A73  0A84               	incf	4,f	;increment pointer
  1165  0A74  0604               	xorwf	4,w	;XOR with final address
  1166  0A75  1903               	btfsc	3,2	;have we reached the end yet?
  1167  0A76  3400               	retlw	0	;all done for this memory range, return
  1168  0A77  0604               	xorwf	4,w	;XOR again to restore value
  1169  0A78  2A72               	goto	clrloop0	;do the next byte
  1170                           
  1171                           	psect	cstackCOMMON
  1172  0070                     __pcstackCOMMON:	
  1173  0070                     ?_ReceivePacket_data:	
  1174  0070                     ?_Reset_EPS:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177  0070                     ??_Reset_EPS:	
  1178                           ; 1 bytes @ 0x0
  1179                           
  1180  0070                     ?__NOP:	
  1181                           ; 1 bytes @ 0x0
  1182                           
  1183  0070                     ??__NOP:	
  1184                           ; 1 bytes @ 0x0
  1185                           
  1186  0070                     ?_Init_SERIAL:	
  1187                           ; 1 bytes @ 0x0
  1188                           
  1189  0070                     ??_Init_SERIAL:	
  1190                           ; 1 bytes @ 0x0
  1191                           
  1192  0070                     ?_putch:	
  1193                           ; 1 bytes @ 0x0
  1194                           
  1195  0070                     ??_putch:	
  1196                           ; 1 bytes @ 0x0
  1197                           
  1198  0070                     ?_Init_MPU:	
  1199                           ; 1 bytes @ 0x0
  1200                           
  1201  0070                     ??_Init_MPU:	
  1202                           ; 1 bytes @ 0x0
  1203                           
  1204  0070                     ?_waitFlag:	
  1205                           ; 1 bytes @ 0x0
  1206                           
  1207  0070                     ?_getdata:	
  1208                           ; 1 bytes @ 0x0
  1209                           
  1210  0070                     ?_main:	
  1211                           ; 1 bytes @ 0x0
  1212                           
  1213  0070                     ?_I2C_Master_Wait:	
  1214                           ; 1 bytes @ 0x0
  1215                           
  1216  0070                     ??_I2C_Master_Wait:	
  1217                           ; 1 bytes @ 0x0
  1218                           
  1219  0070                     ?_I2C_Master_Start:	
  1220                           ; 1 bytes @ 0x0
  1221                           
  1222  0070                     ??_I2C_Master_Start:	
  1223                           ; 1 bytes @ 0x0
  1224                           
  1225  0070                     ?_I2C_Master_Stop:	
  1226                           ; 1 bytes @ 0x0
  1227                           
  1228  0070                     ??_I2C_Master_Stop:	
  1229                           ; 1 bytes @ 0x0
  1230                           
  1231  0070                     ?_I2C_Master_Write:	
  1232                           ; 1 bytes @ 0x0
  1233                           
  1234  0070                     ?_getbit:	
  1235                           ; 1 bytes @ 0x0
  1236                           
  1237  0070                     ?_fcscheck:	
  1238                           ; 2 bytes @ 0x0
  1239                           
  1240  0070                     ?___awdiv:	
  1241                           ; 2 bytes @ 0x0
  1242                           
  1243  0070                     ?___lldiv:	
  1244                           ; 2 bytes @ 0x0
  1245                           
  1246  0070                     putch@byte:	
  1247                           ; 4 bytes @ 0x0
  1248                           
  1249  0070                     I2C_Master_Write@d:	
  1250                           ; 1 bytes @ 0x0
  1251                           
  1252  0070                     __NOP@i:	
  1253                           ; 2 bytes @ 0x0
  1254                           
  1255  0070                     ___awdiv@divisor:	
  1256                           ; 2 bytes @ 0x0
  1257                           
  1258  0070                     ___lldiv@divisor:	
  1259                           ; 2 bytes @ 0x0
  1260                           
  1261                           
  1262                           ; 4 bytes @ 0x0
  1263  0070                     	ds	1
  1264  0071                     ?_NM_waddress:	
  1265  0071                     ?_TXOBC_waddress:	
  1266                           ; 1 bytes @ 0x1
  1267                           
  1268  0071                     NM_waddress@whigh_address:	
  1269                           ; 1 bytes @ 0x1
  1270                           
  1271  0071                     TXOBC_waddress@whigh_address:	
  1272                           ; 1 bytes @ 0x1
  1273                           
  1274                           
  1275                           ; 1 bytes @ 0x1
  1276  0071                     	ds	1
  1277  0072                     ?_EEPROM_Write:	
  1278  0072                     ??_getbit:	
  1279                           ; 1 bytes @ 0x2
  1280                           
  1281  0072                     ??_fcscheck:	
  1282                           ; 1 bytes @ 0x2
  1283                           
  1284  0072                     ??_I2C_Master_Write:	
  1285                           ; 1 bytes @ 0x2
  1286                           
  1287  0072                     ?_L_OUT:	
  1288                           ; 1 bytes @ 0x2
  1289                           
  1290  0072                     ?_H_OUT:	
  1291                           ; 1 bytes @ 0x2
  1292                           
  1293  0072                     ?_STBOUT:	
  1294                           ; 1 bytes @ 0x2
  1295                           
  1296  0072                     NM_waddress@wlow_address:	
  1297                           ; 1 bytes @ 0x2
  1298                           
  1299  0072                     TXOBC_waddress@wlow_address:	
  1300                           ; 1 bytes @ 0x2
  1301                           
  1302  0072                     EEPROM_Write@high_address:	
  1303                           ; 1 bytes @ 0x2
  1304                           
  1305  0072                     L_OUT@fmcwtxrx:	
  1306                           ; 1 bytes @ 0x2
  1307                           
  1308  0072                     H_OUT@fmcwtxrx:	
  1309                           ; 2 bytes @ 0x2
  1310                           
  1311  0072                     STBOUT@fmcwtxrx:	
  1312                           ; 2 bytes @ 0x2
  1313                           
  1314  0072                     ___awdiv@dividend:	
  1315                           ; 2 bytes @ 0x2
  1316                           
  1317                           
  1318                           ; 2 bytes @ 0x2
  1319  0072                     	ds	1
  1320  0073                     ??_NM_waddress:	
  1321  0073                     ??_TXOBC_waddress:	
  1322                           ; 1 bytes @ 0x3
  1323                           
  1324  0073                     NM_waddress@NM_wad_header:	
  1325                           ; 1 bytes @ 0x3
  1326                           
  1327  0073                     EEPROM_Write@low_address:	
  1328                           ; 1 bytes @ 0x3
  1329                           
  1330                           
  1331                           ; 1 bytes @ 0x3
  1332  0073                     	ds	1
  1333  0074                     ??_L_OUT:	
  1334  0074                     ??_H_OUT:	
  1335                           ; 1 bytes @ 0x4
  1336                           
  1337  0074                     ??_STBOUT:	
  1338                           ; 1 bytes @ 0x4
  1339                           
  1340  0074                     ?_OPINIT:	
  1341                           ; 1 bytes @ 0x4
  1342                           
  1343  0074                     ??___awdiv:	
  1344                           ; 1 bytes @ 0x4
  1345                           
  1346  0074                     fcscheck@bt:	
  1347                           ; 1 bytes @ 0x4
  1348                           
  1349  0074                     EEPROM_Write@data:	
  1350                           ; 1 bytes @ 0x4
  1351                           
  1352  0074                     getbit@i:	
  1353                           ; 1 bytes @ 0x4
  1354                           
  1355  0074                     OPINIT@fmcwtxrx:	
  1356                           ; 2 bytes @ 0x4
  1357                           
  1358  0074                     ___lldiv@dividend:	
  1359                           ; 2 bytes @ 0x4
  1360                           
  1361                           
  1362                           ; 4 bytes @ 0x4
  1363  0074                     	ds	1
  1364  0075                     ??_EEPROM_Write:	
  1365  0075                     TXOBC_waddress@TXOBC_wad_header:	
  1366                           ; 1 bytes @ 0x5
  1367                           
  1368  0075                     ___awdiv@counter:	
  1369                           ; 1 bytes @ 0x5
  1370                           
  1371  0075                     fcscheck@i:	
  1372                           ; 1 bytes @ 0x5
  1373                           
  1374                           
  1375                           ; 2 bytes @ 0x5
  1376  0075                     	ds	1
  1377  0076                     ??_waitFlag:	
  1378  0076                     ??_getdata:	
  1379                           ; 1 bytes @ 0x6
  1380                           
  1381  0076                     ??_OPINIT:	
  1382                           ; 1 bytes @ 0x6
  1383                           
  1384  0076                     ___awdiv@sign:	
  1385                           ; 1 bytes @ 0x6
  1386                           
  1387                           
  1388                           ; 1 bytes @ 0x6
  1389  0076                     	ds	1
  1390  0077                     fcscheck@i_149:	
  1391  0077                     ___awdiv@quotient:	
  1392                           ; 2 bytes @ 0x7
  1393                           
  1394                           
  1395                           ; 2 bytes @ 0x7
  1396  0077                     	ds	1
  1397  0078                     ??___lldiv:	
  1398  0078                     EEPROM_Write@EEPROM_address:	
  1399                           ; 1 bytes @ 0x8
  1400                           
  1401                           
  1402                           ; 1 bytes @ 0x8
  1403  0078                     	ds	1
  1404  0079                     ?_OUTFQ:	
  1405  0079                     ?_RFDOUT:	
  1406                           ; 1 bytes @ 0x9
  1407                           
  1408  0079                     fcscheck@byte:	
  1409                           ; 1 bytes @ 0x9
  1410                           
  1411  0079                     EEPROM_Write@Address:	
  1412                           ; 1 bytes @ 0x9
  1413                           
  1414  0079                     OUTFQ@fmcwtxrx:	
  1415                           ; 1 bytes @ 0x9
  1416                           
  1417  0079                     RFDOUT@fmcwtxrx:	
  1418                           ; 2 bytes @ 0x9
  1419                           
  1420  0079                     ___lldiv@quotient:	
  1421                           ; 2 bytes @ 0x9
  1422                           
  1423                           
  1424                           ; 4 bytes @ 0x9
  1425  0079                     	ds	1
  1426  007A                     ??_ReceivePacket_data:	
  1427                           
  1428                           ; 1 bytes @ 0xA
  1429  007A                     	ds	1
  1430  007B                     OUTFQ@Nprg:	
  1431  007B                     RFDOUT@Nref:	
  1432                           ; 2 bytes @ 0xB
  1433                           
  1434                           
  1435                           ; 2 bytes @ 0xB
  1436  007B                     	ds	2
  1437  007D                     ??_FMTX:	
  1438  007D                     ??_CWTX:	
  1439                           ; 1 bytes @ 0xD
  1440                           
  1441  007D                     ??_FMRX:	
  1442                           ; 1 bytes @ 0xD
  1443                           
  1444  007D                     ___lldiv@counter:	
  1445                           ; 1 bytes @ 0xD
  1446                           
  1447                           
  1448                           ; 1 bytes @ 0xD
  1449  007D                     	ds	1
  1450                           
  1451                           	psect	cstackBANK0
  1452  0020                     __pcstackBANK0:	
  1453  0020                     ?_Init_I2C_M:	
  1454  0020                     ??_OUTFQ:	
  1455                           ; 1 bytes @ 0x0
  1456                           
  1457  0020                     ??_RFDOUT:	
  1458                           ; 1 bytes @ 0x0
  1459                           
  1460  0020                     waitFlag@i:	
  1461                           ; 1 bytes @ 0x0
  1462                           
  1463  0020                     getdata@bufstore_counter:	
  1464                           ; 2 bytes @ 0x0
  1465                           
  1466  0020                     Init_I2C_M@c:	
  1467                           ; 2 bytes @ 0x0
  1468                           
  1469                           
  1470                           ; 4 bytes @ 0x0
  1471  0020                     	ds	2
  1472  0022                     waitFlag@j:	
  1473  0022                     getdata@dstuff:	
  1474                           ; 2 bytes @ 0x2
  1475                           
  1476                           
  1477                           ; 2 bytes @ 0x2
  1478  0022                     	ds	1
  1479  0023                     RFDOUT@Nref_b:	
  1480  0023                     OUTFQ@Nprg_b:	
  1481                           ; 24 bytes @ 0x3
  1482                           
  1483                           
  1484                           ; 34 bytes @ 0x3
  1485  0023                     	ds	1
  1486  0024                     ??_Init_I2C_M:	
  1487  0024                     waitFlag@j_118:	
  1488                           ; 1 bytes @ 0x4
  1489                           
  1490  0024                     getdata@dbitstatus:	
  1491                           ; 2 bytes @ 0x4
  1492                           
  1493                           
  1494                           ; 2 bytes @ 0x4
  1495  0024                     	ds	2
  1496  0026                     getdata@buf:	
  1497  0026                     waitFlag@j_120:	
  1498                           ; 1 bytes @ 0x6
  1499                           
  1500                           
  1501                           ; 2 bytes @ 0x6
  1502  0026                     	ds	2
  1503  0028                     waitFlag@j_122:	
  1504                           
  1505                           ; 2 bytes @ 0x8
  1506  0028                     	ds	2
  1507  002A                     waitFlag@j_124:	
  1508                           
  1509                           ; 2 bytes @ 0xA
  1510  002A                     	ds	2
  1511  002C                     waitFlag@j_126:	
  1512                           
  1513                           ; 2 bytes @ 0xC
  1514  002C                     	ds	2
  1515  002E                     waitFlag@j_127:	
  1516                           
  1517                           ; 2 bytes @ 0xE
  1518  002E                     	ds	2
  1519  0030                     waitFlag@j_129:	
  1520                           
  1521                           ; 2 bytes @ 0x10
  1522  0030                     	ds	2
  1523  0032                     waitFlag@j_131:	
  1524                           
  1525                           ; 2 bytes @ 0x12
  1526  0032                     	ds	2
  1527  0034                     waitFlag@j_133:	
  1528                           
  1529                           ; 2 bytes @ 0x14
  1530  0034                     	ds	2
  1531  0036                     waitFlag@j_135:	
  1532                           
  1533                           ; 2 bytes @ 0x16
  1534  0036                     	ds	2
  1535  0038                     waitFlag@j_137:	
  1536                           
  1537                           ; 2 bytes @ 0x18
  1538  0038                     	ds	2
  1539  003A                     waitFlag@flag_judge:	
  1540                           
  1541                           ; 2 bytes @ 0x1A
  1542  003A                     	ds	1
  1543  003B                     RFDOUT@i_476:	
  1544                           
  1545                           ; 2 bytes @ 0x1B
  1546  003B                     	ds	1
  1547  003C                     waitFlag@buf:	
  1548                           
  1549                           ; 1 bytes @ 0x1C
  1550  003C                     	ds	1
  1551  003D                     ReceivePacket_data@fcschecker:	
  1552  003D                     RFDOUT@i:	
  1553                           ; 2 bytes @ 0x1D
  1554                           
  1555                           
  1556                           ; 2 bytes @ 0x1D
  1557  003D                     	ds	2
  1558  003F                     ReceivePacket_data@i:	
  1559  003F                     RFDOUT@i_477:	
  1560                           ; 2 bytes @ 0x1F
  1561                           
  1562                           
  1563                           ; 2 bytes @ 0x1F
  1564  003F                     	ds	6
  1565  0045                     OUTFQ@count:	
  1566                           
  1567                           ; 2 bytes @ 0x25
  1568  0045                     	ds	2
  1569  0047                     OUTFQ@i:	
  1570                           
  1571                           ; 2 bytes @ 0x27
  1572  0047                     	ds	2
  1573  0049                     OUTFQ@i_466:	
  1574                           
  1575                           ; 2 bytes @ 0x29
  1576  0049                     	ds	2
  1577  004B                     OUTFQ@i_467:	
  1578                           
  1579                           ; 2 bytes @ 0x2B
  1580  004B                     	ds	2
  1581  004D                     ?_FMTX:	
  1582  004D                     ?_CWTX:	
  1583                           ; 1 bytes @ 0x2D
  1584                           
  1585  004D                     ?_FMRX:	
  1586                           ; 1 bytes @ 0x2D
  1587                           
  1588  004D                     FMTX@Nref:	
  1589                           ; 1 bytes @ 0x2D
  1590                           
  1591  004D                     CWTX@Nref:	
  1592                           ; 2 bytes @ 0x2D
  1593                           
  1594  004D                     FMRX@Nref:	
  1595                           ; 2 bytes @ 0x2D
  1596                           
  1597                           
  1598                           ; 2 bytes @ 0x2D
  1599  004D                     	ds	2
  1600  004F                     FMTX@Nprg:	
  1601  004F                     CWTX@Nprg:	
  1602                           ; 2 bytes @ 0x2F
  1603                           
  1604  004F                     FMRX@Nprg:	
  1605                           ; 2 bytes @ 0x2F
  1606                           
  1607                           
  1608                           ; 2 bytes @ 0x2F
  1609  004F                     	ds	2
  1610  0051                     FMTX@fmtx:	
  1611  0051                     CWTX@cwtx:	
  1612                           ; 2 bytes @ 0x31
  1613                           
  1614  0051                     FMRX@fmrx:	
  1615                           ; 2 bytes @ 0x31
  1616                           
  1617                           
  1618                           ; 2 bytes @ 0x31
  1619  0051                     	ds	2
  1620  0053                     ??_main:	
  1621                           
  1622                           ; 1 bytes @ 0x33
  1623  0053                     	ds	3
  1624  0056                     main@TXOBC_wad_header:	
  1625                           
  1626                           ; 1 bytes @ 0x36
  1627  0056                     	ds	1
  1628  0057                     main@NM_wad_header:	
  1629                           
  1630                           ; 1 bytes @ 0x37
  1631  0057                     	ds	1
  1632  0058                     main@dData:	
  1633                           
  1634                           ; 1 bytes @ 0x38
  1635  0058                     	ds	1
  1636                           
  1637                           	psect	maintext
  1638  01D0                     __pmaintext:	
  1639 ;;
  1640 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1641 ;;
  1642 ;; *************** function _main *****************
  1643 ;; Defined at:
  1644 ;;		line 38 in file "main.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;		None
  1647 ;; Auto vars:     Size  Location     Type
  1648 ;;  NM_wad_heade    1   55[BANK0 ] unsigned char 
  1649 ;;  dData           1   56[BANK0 ] PTR unsigned char 
  1650 ;;		 -> NULL(0), dData(16), 
  1651 ;;  TXOBC_wad_he    1   54[BANK0 ] unsigned char 
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      void 
  1654 ;; Registers used:
  1655 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1656 ;; Tracked objects:
  1657 ;;		On entry : B00/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1661 ;;      Params:         0       0       0       0       0
  1662 ;;      Locals:         0       3       0       0       0
  1663 ;;      Temps:          0       3       0       0       0
  1664 ;;      Totals:         0       6       0       0       0
  1665 ;;Total ram usage:        6 bytes
  1666 ;; Hardware stack levels required when called:    4
  1667 ;; This function calls:
  1668 ;;		_CWTX
  1669 ;;		_EEPROM_Write
  1670 ;;		_FMRX
  1671 ;;		_FMTX
  1672 ;;		_Init_I2C_M
  1673 ;;		_Init_MPU
  1674 ;;		_Init_SERIAL
  1675 ;;		_NM_waddress
  1676 ;;		_ReceivePacket_data
  1677 ;;		_Reset_EPS
  1678 ;;		_TXOBC_waddress
  1679 ;; This function is called by:
  1680 ;;		Startup code after reset
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           
  1685                           ;psect for function _main
  1686  01D0                     _main:	
  1687                           
  1688                           ;main.c: 43: _delay((unsigned long)((200)*(10000000/4000.0)));
  1689                           
  1690                           ;incstack = 0
  1691                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1692  01D0  3003               	movlw	3
  1693  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  1694  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  1695  01D3  00D5               	movwf	??_main+2
  1696  01D4  308A               	movlw	138
  1697  01D5  00D4               	movwf	??_main+1
  1698  01D6  3055               	movlw	85
  1699  01D7  00D3               	movwf	??_main
  1700  01D8                     u3367:	
  1701  01D8  0BD3               	decfsz	??_main,f
  1702  01D9  29D8               	goto	u3367
  1703  01DA  0BD4               	decfsz	??_main+1,f
  1704  01DB  29D8               	goto	u3367
  1705  01DC  0BD5               	decfsz	??_main+2,f
  1706  01DD  29D8               	goto	u3367
  1707                           
  1708                           ;main.c: 45: Init_SERIAL();
  1709  01DE  120A  158A  22BD  120A  118A  	fcall	_Init_SERIAL
  1710                           
  1711                           ;main.c: 46: Init_MPU();
  1712  01E3  120A  158A  22EF  120A  118A  	fcall	_Init_MPU
  1713                           
  1714                           ;main.c: 47: Init_I2C_M(400000);
  1715  01E8  3000               	movlw	0
  1716  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  1717  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  1718  01EB  00A3               	movwf	Init_I2C_M@c+3
  1719  01EC  3006               	movlw	6
  1720  01ED  00A2               	movwf	Init_I2C_M@c+2
  1721  01EE  301A               	movlw	26
  1722  01EF  00A1               	movwf	Init_I2C_M@c+1
  1723  01F0  3080               	movlw	128
  1724  01F1  00A0               	movwf	Init_I2C_M@c
  1725  01F2  120A  158A  23E1  120A  118A  	fcall	_Init_I2C_M
  1726                           
  1727                           ;main.c: 54: RB2 = 1;
  1728  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  1729  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  1730  01F9  1506               	bsf	6,2	;volatile
  1731                           
  1732                           ;main.c: 55: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1733  01FA  300D               	movlw	13
  1734  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  1735  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  1736  01FD  00D5               	movwf	??_main+2
  1737  01FE  30AF               	movlw	175
  1738  01FF  00D4               	movwf	??_main+1
  1739  0200  30B5               	movlw	181
  1740  0201  00D3               	movwf	??_main
  1741  0202                     u3377:	
  1742  0202  0BD3               	decfsz	??_main,f
  1743  0203  2A02               	goto	u3377
  1744  0204  0BD4               	decfsz	??_main+1,f
  1745  0205  2A02               	goto	u3377
  1746  0206  0BD5               	decfsz	??_main+2,f
  1747  0207  2A02               	goto	u3377
  1748  0208  2A09               	nop2
  1749                           
  1750                           ;main.c: 57: FMTX(FMTX_Nref, FMTX_Nprg);
  1751  0209  1283               	bcf	3,5	;RP0=0, select bank0
  1752  020A  1303               	bcf	3,6	;RP1=0, select bank0
  1753  020B  0864               	movf	_FMTX_Nref+1,w
  1754  020C  00CE               	movwf	FMTX@Nref+1
  1755  020D  0863               	movf	_FMTX_Nref,w
  1756  020E  00CD               	movwf	FMTX@Nref
  1757  020F  0862               	movf	_FMTX_Nprg+1,w
  1758  0210  00D0               	movwf	FMTX@Nprg+1
  1759  0211  0861               	movf	_FMTX_Nprg,w
  1760  0212  00CF               	movwf	FMTX@Nprg
  1761  0213  120A  158A  2387  120A  118A  	fcall	_FMTX
  1762                           
  1763                           ;main.c: 58: CWTX(CWTX_Nref, CWTX_Nprg);
  1764  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1765  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1766  021A  0860               	movf	_CWTX_Nref+1,w
  1767  021B  00CE               	movwf	CWTX@Nref+1
  1768  021C  085F               	movf	_CWTX_Nref,w
  1769  021D  00CD               	movwf	CWTX@Nref
  1770  021E  085E               	movf	_CWTX_Nprg+1,w
  1771  021F  00D0               	movwf	CWTX@Nprg+1
  1772  0220  085D               	movf	_CWTX_Nprg,w
  1773  0221  00CF               	movwf	CWTX@Nprg
  1774  0222  120A  158A  232F  120A  118A  	fcall	_CWTX
  1775                           
  1776                           ;main.c: 59: FMRX(FMRX_Nref, FMRX_Nprg);
  1777  0227  1283               	bcf	3,5	;RP0=0, select bank0
  1778  0228  1303               	bcf	3,6	;RP1=0, select bank0
  1779  0229  085C               	movf	_FMRX_Nref+1,w
  1780  022A  00CE               	movwf	FMRX@Nref+1
  1781  022B  085B               	movf	_FMRX_Nref,w
  1782  022C  00CD               	movwf	FMRX@Nref
  1783  022D  085A               	movf	_FMRX_Nprg+1,w
  1784  022E  00D0               	movwf	FMRX@Nprg+1
  1785  022F  0859               	movf	_FMRX_Nprg,w
  1786  0230  00CF               	movwf	FMRX@Nprg
  1787  0231  120A  158A  235B  120A  118A  	fcall	_FMRX
  1788                           
  1789                           ;main.c: 60: RB2 = 0;
  1790  0236  1283               	bcf	3,5	;RP0=0, select bank0
  1791  0237  1303               	bcf	3,6	;RP1=0, select bank0
  1792  0238  1106               	bcf	6,2	;volatile
  1793  0239                     l3681:	
  1794                           ;main.c: 63: while(1){
  1795                           
  1796                           
  1797                           ;main.c: 78: UBYTE *dData;
  1798                           ;main.c: 79: dData = ReceivePacket_data();
  1799  0239  120A  158A  269C  120A  118A  	fcall	_ReceivePacket_data
  1800  023E  1283               	bcf	3,5	;RP0=0, select bank0
  1801  023F  1303               	bcf	3,6	;RP1=0, select bank0
  1802  0240  00D3               	movwf	??_main
  1803  0241  0853               	movf	??_main,w
  1804  0242  00D8               	movwf	main@dData
  1805                           
  1806                           ;main.c: 80: RB2 = 1;
  1807  0243  1506               	bsf	6,2	;volatile
  1808                           
  1809                           ;main.c: 81: _delay((unsigned long)((500)*(10000000/4000.0)));
  1810  0244  3007               	movlw	7
  1811  0245  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0246  1303               	bcf	3,6	;RP1=0, select bank0
  1813  0247  00D5               	movwf	??_main+2
  1814  0248  3058               	movlw	88
  1815  0249  00D4               	movwf	??_main+1
  1816  024A  3059               	movlw	89
  1817  024B  00D3               	movwf	??_main
  1818  024C                     u3387:	
  1819  024C  0BD3               	decfsz	??_main,f
  1820  024D  2A4C               	goto	u3387
  1821  024E  0BD4               	decfsz	??_main+1,f
  1822  024F  2A4C               	goto	u3387
  1823  0250  0BD5               	decfsz	??_main+2,f
  1824  0251  2A4C               	goto	u3387
  1825                           
  1826                           ;main.c: 82: RB2 = 0;
  1827  0252  1283               	bcf	3,5	;RP0=0, select bank0
  1828  0253  1303               	bcf	3,6	;RP1=0, select bank0
  1829  0254  1106               	bcf	6,2	;volatile
  1830                           
  1831                           ;main.c: 84: EEPROM_Write(0x50,0x00,0x00,dData);
  1832  0255  01F2               	clrf	EEPROM_Write@high_address
  1833  0256  01F3               	clrf	EEPROM_Write@low_address
  1834  0257  0858               	movf	main@dData,w
  1835  0258  00D3               	movwf	??_main
  1836  0259  0853               	movf	??_main,w
  1837  025A  00F4               	movwf	EEPROM_Write@data
  1838  025B  3050               	movlw	80
  1839  025C  120A  158A  2580  120A  118A  	fcall	_EEPROM_Write
  1840                           
  1841                           ;main.c: 85: _delay((unsigned long)((100)*(10000000/4000.0)));
  1842  0261  3002               	movlw	2
  1843  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1844  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1845  0264  00D5               	movwf	??_main+2
  1846  0265  3045               	movlw	69
  1847  0266  00D4               	movwf	??_main+1
  1848  0267  30A9               	movlw	169
  1849  0268  00D3               	movwf	??_main
  1850  0269                     u3397:	
  1851  0269  0BD3               	decfsz	??_main,f
  1852  026A  2A69               	goto	u3397
  1853  026B  0BD4               	decfsz	??_main+1,f
  1854  026C  2A69               	goto	u3397
  1855  026D  0BD5               	decfsz	??_main+2,f
  1856  026E  2A69               	goto	u3397
  1857                           
  1858                           ;main.c: 89: UBYTE TXOBC_wad_header = 0x74;
  1859  026F  3074               	movlw	116
  1860  0270  1283               	bcf	3,5	;RP0=0, select bank0
  1861  0271  1303               	bcf	3,6	;RP1=0, select bank0
  1862  0272  00D3               	movwf	??_main
  1863  0273  0853               	movf	??_main,w
  1864  0274  00D6               	movwf	main@TXOBC_wad_header
  1865                           
  1866                           ;main.c: 90: TXOBC_waddress(TXOBC_wad_header, 0x00, 0x00);
  1867  0275  01F1               	clrf	TXOBC_waddress@whigh_address
  1868  0276  01F2               	clrf	TXOBC_waddress@wlow_address
  1869  0277  0856               	movf	main@TXOBC_wad_header,w
  1870  0278  120A  158A  2415  120A  118A  	fcall	_TXOBC_waddress
  1871                           
  1872                           ;main.c: 98: _delay((unsigned long)((7000)*(10000000/4000.0)));
  1873  027D  3059               	movlw	89
  1874  027E  1283               	bcf	3,5	;RP0=0, select bank0
  1875  027F  1303               	bcf	3,6	;RP1=0, select bank0
  1876  0280  00D5               	movwf	??_main+2
  1877  0281  30C8               	movlw	200
  1878  0282  00D4               	movwf	??_main+1
  1879  0283  3007               	movlw	7
  1880  0284  00D3               	movwf	??_main
  1881  0285                     u3407:	
  1882  0285  0BD3               	decfsz	??_main,f
  1883  0286  2A85               	goto	u3407
  1884  0287  0BD4               	decfsz	??_main+1,f
  1885  0288  2A85               	goto	u3407
  1886  0289  0BD5               	decfsz	??_main+2,f
  1887  028A  2A85               	goto	u3407
  1888  028B  2A8C               	nop2
  1889                           
  1890                           ;main.c: 103: if(dData[0]=='n'){
  1891  028C  1283               	bcf	3,5	;RP0=0, select bank0
  1892  028D  1303               	bcf	3,6	;RP1=0, select bank0
  1893  028E  0858               	movf	main@dData,w
  1894  028F  0084               	movwf	4
  1895  0290  306E               	movlw	110
  1896  0291  1383               	bcf	3,7	;select IRP bank0
  1897  0292  0600               	xorwf	0,w
  1898  0293  1D03               	btfss	3,2
  1899  0294  2AA2               	goto	l3705
  1900                           
  1901                           ;main.c: 105: UBYTE NM_wad_header = 0x72;
  1902  0295  3072               	movlw	114
  1903  0296  00D3               	movwf	??_main
  1904  0297  0853               	movf	??_main,w
  1905  0298  00D7               	movwf	main@NM_wad_header
  1906                           
  1907                           ;main.c: 106: NM_waddress(NM_wad_header, 0x00, 0x00);
  1908  0299  01F1               	clrf	NM_waddress@whigh_address
  1909  029A  01F2               	clrf	NM_waddress@wlow_address
  1910  029B  0857               	movf	main@NM_wad_header,w
  1911  029C  120A  158A  2296  120A  118A  	fcall	_NM_waddress
  1912                           
  1913                           ;main.c: 108: }else if(dData[0]=='p'){
  1914  02A1  2B2D               	goto	l442
  1915  02A2                     l3705:	
  1916  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  1917  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  1918  02A4  0858               	movf	main@dData,w
  1919  02A5  0084               	movwf	4
  1920  02A6  3070               	movlw	112
  1921  02A7  1383               	bcf	3,7	;select IRP bank0
  1922  02A8  0600               	xorwf	0,w
  1923  02A9  1D03               	btfss	3,2
  1924  02AA  2B1A               	goto	l443
  1925                           
  1926                           ;main.c: 113: if(dData[2] == 'r'){
  1927  02AB  0858               	movf	main@dData,w
  1928  02AC  3E02               	addlw	2
  1929  02AD  0084               	movwf	4
  1930  02AE  3072               	movlw	114
  1931  02AF  0600               	xorwf	0,w
  1932  02B0  1903               	btfsc	3,2
  1933  02B1  2B02               	goto	l3725
  1934  02B2  2B2D               	goto	l442
  1935  02B3                     l3711:	
  1936                           ;main.c: 119: case 'E':
  1937                           
  1938                           ;main.c: 118: switch(dData[3]){
  1939                           
  1940                           
  1941                           ;main.c: 126: Reset_EPS();
  1942  02B3  120A  158A  230C  120A  118A  	fcall	_Reset_EPS
  1943                           
  1944                           ;main.c: 127: _delay((unsigned long)((5000)*(10000000/4000.0)));
  1945  02B8  3040               	movlw	64
  1946  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  1947  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  1948  02BB  00D5               	movwf	??_main+2
  1949  02BC  306A               	movlw	106
  1950  02BD  00D4               	movwf	??_main+1
  1951  02BE  3097               	movlw	151
  1952  02BF  00D3               	movwf	??_main
  1953  02C0                     u3417:	
  1954  02C0  0BD3               	decfsz	??_main,f
  1955  02C1  2AC0               	goto	u3417
  1956  02C2  0BD4               	decfsz	??_main+1,f
  1957  02C3  2AC0               	goto	u3417
  1958  02C4  0BD5               	decfsz	??_main+2,f
  1959  02C5  2AC0               	goto	u3417
  1960                           
  1961                           ;main.c: 134: FMTX(FMTX_Nref, FMTX_Nprg);
  1962  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  1963  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  1964  02C8  0864               	movf	_FMTX_Nref+1,w
  1965  02C9  00CE               	movwf	FMTX@Nref+1
  1966  02CA  0863               	movf	_FMTX_Nref,w
  1967  02CB  00CD               	movwf	FMTX@Nref
  1968  02CC  0862               	movf	_FMTX_Nprg+1,w
  1969  02CD  00D0               	movwf	FMTX@Nprg+1
  1970  02CE  0861               	movf	_FMTX_Nprg,w
  1971  02CF  00CF               	movwf	FMTX@Nprg
  1972  02D0  120A  158A  2387  120A  118A  	fcall	_FMTX
  1973                           
  1974                           ;main.c: 135: CWTX(CWTX_Nref, CWTX_Nprg);
  1975  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  1976  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  1977  02D7  0860               	movf	_CWTX_Nref+1,w
  1978  02D8  00CE               	movwf	CWTX@Nref+1
  1979  02D9  085F               	movf	_CWTX_Nref,w
  1980  02DA  00CD               	movwf	CWTX@Nref
  1981  02DB  085E               	movf	_CWTX_Nprg+1,w
  1982  02DC  00D0               	movwf	CWTX@Nprg+1
  1983  02DD  085D               	movf	_CWTX_Nprg,w
  1984  02DE  00CF               	movwf	CWTX@Nprg
  1985  02DF  120A  158A  232F  120A  118A  	fcall	_CWTX
  1986                           
  1987                           ;main.c: 136: FMRX(FMRX_Nref, FMRX_Nprg);
  1988  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  1989  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  1990  02E6  085C               	movf	_FMRX_Nref+1,w
  1991  02E7  00CE               	movwf	FMRX@Nref+1
  1992  02E8  085B               	movf	_FMRX_Nref,w
  1993  02E9  00CD               	movwf	FMRX@Nref
  1994  02EA  085A               	movf	_FMRX_Nprg+1,w
  1995  02EB  00D0               	movwf	FMRX@Nprg+1
  1996  02EC  0859               	movf	_FMRX_Nprg,w
  1997  02ED  00CF               	movwf	FMRX@Nprg
  1998  02EE  120A  158A  235B  120A  118A  	fcall	_FMRX
  1999                           
  2000                           ;main.c: 137: _delay((unsigned long)((500)*(10000000/4000.0)));
  2001  02F3  3007               	movlw	7
  2002  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  2003  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  2004  02F6  00D5               	movwf	??_main+2
  2005  02F7  3058               	movlw	88
  2006  02F8  00D4               	movwf	??_main+1
  2007  02F9  3059               	movlw	89
  2008  02FA  00D3               	movwf	??_main
  2009  02FB                     u3427:	
  2010  02FB  0BD3               	decfsz	??_main,f
  2011  02FC  2AFB               	goto	u3427
  2012  02FD  0BD4               	decfsz	??_main+1,f
  2013  02FE  2AFB               	goto	u3427
  2014  02FF  0BD5               	decfsz	??_main+2,f
  2015  0300  2AFB               	goto	u3427
  2016                           
  2017                           ;main.c: 154: }
  2018                           
  2019                           ;main.c: 153: break;
  2020                           
  2021                           ;main.c: 151: default:
  2022                           
  2023                           ;main.c: 150: break;
  2024                           
  2025                           ;main.c: 148: case 'T':
  2026                           
  2027                           ;main.c: 147: break;
  2028                           
  2029                           ;main.c: 145: case 'N':
  2030                           
  2031                           ;main.c: 144: break;
  2032                           
  2033                           ;main.c: 142: case '3':
  2034                           
  2035                           ;main.c: 141: break;
  2036                           
  2037                           ;main.c: 139: case 'I':
  2038                           
  2039                           ;main.c: 138: break;
  2040  0301  2B2D               	goto	l442
  2041  0302                     l3725:	
  2042  0302  1283               	bcf	3,5	;RP0=0, select bank0
  2043  0303  1303               	bcf	3,6	;RP1=0, select bank0
  2044  0304  0858               	movf	main@dData,w
  2045  0305  3E03               	addlw	3
  2046  0306  0084               	movwf	4
  2047  0307  1383               	bcf	3,7	;select IRP bank0
  2048  0308  0800               	movf	0,w
  2049                           
  2050                           ; Switch size 1, requested type "space"
  2051                           ; Number of cases is 5, Range of values is 51 to 84
  2052                           ; switch strategies available:
  2053                           ; Name         Instructions Cycles
  2054                           ; simple_byte           16     9 (average)
  2055                           ; direct_byte          113    11 (fixed)
  2056                           ; jumptable            263     9 (fixed)
  2057                           ;	Chosen strategy is simple_byte
  2058  0309  3A33               	xorlw	51	; case 51
  2059  030A  1903               	skipnz
  2060  030B  2B2D               	goto	l442
  2061  030C  3A76               	xorlw	118	; case 69
  2062  030D  1903               	skipnz
  2063  030E  2AB3               	goto	l3711
  2064  030F  3A0C               	xorlw	12	; case 73
  2065  0310  1903               	skipnz
  2066  0311  2B2D               	goto	l442
  2067  0312  3A07               	xorlw	7	; case 78
  2068  0313  1903               	skipnz
  2069  0314  2B2D               	goto	l442
  2070  0315  3A1A               	xorlw	26	; case 84
  2071  0316  1903               	skipnz
  2072  0317  2B2D               	goto	l442
  2073  0318  2B2D               	goto	l442
  2074                           
  2075                           ;main.c: 158: }
  2076                           ;main.c: 159: }else{
  2077                           
  2078                           ;main.c: 156: }else if(dData[2] == 't'){
  2079  0319  2B2D               	goto	l442
  2080  031A                     l443:	
  2081                           
  2082                           ;main.c: 160: RB2 = 1;
  2083  031A  1506               	bsf	6,2	;volatile
  2084                           
  2085                           ;main.c: 161: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2086  031B  300D               	movlw	13
  2087  031C  1283               	bcf	3,5	;RP0=0, select bank0
  2088  031D  1303               	bcf	3,6	;RP1=0, select bank0
  2089  031E  00D5               	movwf	??_main+2
  2090  031F  30AF               	movlw	175
  2091  0320  00D4               	movwf	??_main+1
  2092  0321  30B5               	movlw	181
  2093  0322  00D3               	movwf	??_main
  2094  0323                     u3437:	
  2095  0323  0BD3               	decfsz	??_main,f
  2096  0324  2B23               	goto	u3437
  2097  0325  0BD4               	decfsz	??_main+1,f
  2098  0326  2B23               	goto	u3437
  2099  0327  0BD5               	decfsz	??_main+2,f
  2100  0328  2B23               	goto	u3437
  2101  0329  2B2A               	nop2
  2102                           
  2103                           ;main.c: 162: RB2 = 0;
  2104  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2105  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2106  032C  1106               	bcf	6,2	;volatile
  2107  032D                     l442:	
  2108                           
  2109                           ;main.c: 163: }
  2110                           ;main.c: 207: _delay((unsigned long)((500)*(10000000/4000.0)));
  2111  032D  3007               	movlw	7
  2112  032E  1283               	bcf	3,5	;RP0=0, select bank0
  2113  032F  1303               	bcf	3,6	;RP1=0, select bank0
  2114  0330  00D5               	movwf	??_main+2
  2115  0331  3058               	movlw	88
  2116  0332  00D4               	movwf	??_main+1
  2117  0333  3059               	movlw	89
  2118  0334  00D3               	movwf	??_main
  2119  0335                     u3447:	
  2120  0335  0BD3               	decfsz	??_main,f
  2121  0336  2B35               	goto	u3447
  2122  0337  0BD4               	decfsz	??_main+1,f
  2123  0338  2B35               	goto	u3447
  2124  0339  0BD5               	decfsz	??_main+2,f
  2125  033A  2B35               	goto	u3447
  2126  033B  2A39               	goto	l3681
  2127  033C                     __end_of_main:	
  2128                           ;main.c: 208: }
  2129                           ;main.c: 209: return;
  2130                           
  2131                           
  2132                           	psect	text1
  2133  0C15                     __ptext1:	
  2134 ;; *************** function _TXOBC_waddress *****************
  2135 ;; Defined at:
  2136 ;;		line 78 in file "UART.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  2139 ;;  whigh_addres    1    1[COMMON] unsigned char 
  2140 ;;  wlow_address    1    2[COMMON] unsigned char 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;  TXOBC_wad_he    1    5[COMMON] unsigned char 
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2152 ;;      Params:         2       0       0       0       0
  2153 ;;      Locals:         1       0       0       0       0
  2154 ;;      Temps:          2       0       0       0       0
  2155 ;;      Totals:         5       0       0       0       0
  2156 ;;Total ram usage:        5 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    1
  2159 ;; This function calls:
  2160 ;;		_putch
  2161 ;; This function is called by:
  2162 ;;		_main
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           
  2167                           ;psect for function _TXOBC_waddress
  2168  0C15                     _TXOBC_waddress:	
  2169                           
  2170                           ;incstack = 0
  2171                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2172                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2173  0C15  00F5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2174                           
  2175                           ;UART.c: 79: RC5 = 1;
  2176  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  2177  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  2178  0C18  1687               	bsf	7,5	;volatile
  2179                           
  2180                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2181  0C19  30A3               	movlw	163
  2182  0C1A  00F4               	movwf	??_TXOBC_waddress+1
  2183  0C1B  3055               	movlw	85
  2184  0C1C  00F3               	movwf	??_TXOBC_waddress
  2185  0C1D                     u3457:	
  2186  0C1D  0BF3               	decfsz	??_TXOBC_waddress,f
  2187  0C1E  2C1D               	goto	u3457
  2188  0C1F  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2189  0C20  2C1D               	goto	u3457
  2190                           
  2191                           ;UART.c: 81: putch(TXOBC_wad_header);
  2192  0C21  0875               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2193  0C22  120A  158A  2269  120A  158A  	fcall	_putch
  2194                           
  2195                           ;UART.c: 82: _delay((unsigned long)((50)*(10000000/4000.0)));
  2196  0C27  30A3               	movlw	163
  2197  0C28  00F4               	movwf	??_TXOBC_waddress+1
  2198  0C29  3055               	movlw	85
  2199  0C2A  00F3               	movwf	??_TXOBC_waddress
  2200  0C2B                     u3467:	
  2201  0C2B  0BF3               	decfsz	??_TXOBC_waddress,f
  2202  0C2C  2C2B               	goto	u3467
  2203  0C2D  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2204  0C2E  2C2B               	goto	u3467
  2205                           
  2206                           ;UART.c: 83: putch(whigh_address);
  2207  0C2F  0871               	movf	TXOBC_waddress@whigh_address,w
  2208  0C30  120A  158A  2269  120A  158A  	fcall	_putch
  2209                           
  2210                           ;UART.c: 84: _delay((unsigned long)((50)*(10000000/4000.0)));
  2211  0C35  30A3               	movlw	163
  2212  0C36  00F4               	movwf	??_TXOBC_waddress+1
  2213  0C37  3055               	movlw	85
  2214  0C38  00F3               	movwf	??_TXOBC_waddress
  2215  0C39                     u3477:	
  2216  0C39  0BF3               	decfsz	??_TXOBC_waddress,f
  2217  0C3A  2C39               	goto	u3477
  2218  0C3B  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2219  0C3C  2C39               	goto	u3477
  2220                           
  2221                           ;UART.c: 85: putch(wlow_address);
  2222  0C3D  0872               	movf	TXOBC_waddress@wlow_address,w
  2223  0C3E  120A  158A  2269  120A  158A  	fcall	_putch
  2224                           
  2225                           ;UART.c: 86: _delay((unsigned long)((50)*(10000000/4000.0)));
  2226  0C43  30A3               	movlw	163
  2227  0C44  00F4               	movwf	??_TXOBC_waddress+1
  2228  0C45  3055               	movlw	85
  2229  0C46  00F3               	movwf	??_TXOBC_waddress
  2230  0C47                     u3487:	
  2231  0C47  0BF3               	decfsz	??_TXOBC_waddress,f
  2232  0C48  2C47               	goto	u3487
  2233  0C49  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2234  0C4A  2C47               	goto	u3487
  2235                           
  2236                           ;UART.c: 87: RC5 = 0;
  2237  0C4B  1283               	bcf	3,5	;RP0=0, select bank0
  2238  0C4C  1303               	bcf	3,6	;RP1=0, select bank0
  2239  0C4D  1287               	bcf	7,5	;volatile
  2240  0C4E  0008               	return
  2241  0C4F                     __end_of_TXOBC_waddress:	
  2242                           
  2243                           	psect	text2
  2244  0B0C                     __ptext2:	
  2245 ;; *************** function _Reset_EPS *****************
  2246 ;; Defined at:
  2247 ;;		line 19 in file "EPS.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;		None
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;		None
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      void 
  2254 ;; Registers used:
  2255 ;;		wreg
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2261 ;;      Params:         0       0       0       0       0
  2262 ;;      Locals:         0       0       0       0       0
  2263 ;;      Temps:          3       0       0       0       0
  2264 ;;      Totals:         3       0       0       0       0
  2265 ;;Total ram usage:        3 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; This function calls:
  2268 ;;		Nothing
  2269 ;; This function is called by:
  2270 ;;		_main
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           
  2275                           ;psect for function _Reset_EPS
  2276  0B0C                     _Reset_EPS:	
  2277                           
  2278                           ;EPS.c: 20: RB4 = 1;
  2279                           
  2280                           ;incstack = 0
  2281                           ; Regs used in _Reset_EPS: [wreg]
  2282  0B0C  1283               	bcf	3,5	;RP0=0, select bank0
  2283  0B0D  1303               	bcf	3,6	;RP1=0, select bank0
  2284  0B0E  1606               	bsf	6,4	;volatile
  2285                           
  2286                           ;EPS.c: 21: RA1 = 1;
  2287  0B0F  1485               	bsf	5,1	;volatile
  2288                           
  2289                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2290  0B10  3040               	movlw	64
  2291  0B11  00F2               	movwf	??_Reset_EPS+2
  2292  0B12  306A               	movlw	106
  2293  0B13  00F1               	movwf	??_Reset_EPS+1
  2294  0B14  3097               	movlw	151
  2295  0B15  00F0               	movwf	??_Reset_EPS
  2296  0B16                     u3497:	
  2297  0B16  0BF0               	decfsz	??_Reset_EPS,f
  2298  0B17  2B16               	goto	u3497
  2299  0B18  0BF1               	decfsz	??_Reset_EPS+1,f
  2300  0B19  2B16               	goto	u3497
  2301  0B1A  0BF2               	decfsz	??_Reset_EPS+2,f
  2302  0B1B  2B16               	goto	u3497
  2303  0B1C  2B1D               	nop2
  2304                           
  2305                           ;EPS.c: 23: RB4 = 0;
  2306  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  2307  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  2308  0B1F  1206               	bcf	6,4	;volatile
  2309                           
  2310                           ;EPS.c: 24: RA1 = 0;
  2311  0B20  1085               	bcf	5,1	;volatile
  2312                           
  2313                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2314  0B21  3007               	movlw	7
  2315  0B22  00F2               	movwf	??_Reset_EPS+2
  2316  0B23  3058               	movlw	88
  2317  0B24  00F1               	movwf	??_Reset_EPS+1
  2318  0B25  3059               	movlw	89
  2319  0B26  00F0               	movwf	??_Reset_EPS
  2320  0B27                     u3507:	
  2321  0B27  0BF0               	decfsz	??_Reset_EPS,f
  2322  0B28  2B27               	goto	u3507
  2323  0B29  0BF1               	decfsz	??_Reset_EPS+1,f
  2324  0B2A  2B27               	goto	u3507
  2325  0B2B  0BF2               	decfsz	??_Reset_EPS+2,f
  2326  0B2C  2B27               	goto	u3507
  2327  0B2D  2B2E               	nop2
  2328  0B2E  0008               	return
  2329  0B2F                     __end_of_Reset_EPS:	
  2330                           
  2331                           	psect	text3
  2332  0E9C                     __ptext3:	
  2333 ;; *************** function _ReceivePacket_data *****************
  2334 ;; Defined at:
  2335 ;;		line 359 in file "decode_AX25.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  i               2   31[BANK0 ] unsigned int 
  2340 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      PTR unsigned char 
  2343 ;; Registers used:
  2344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2350 ;;      Params:         0       0       0       0       0
  2351 ;;      Locals:         0       4       0       0       0
  2352 ;;      Temps:          2       0       0       0       0
  2353 ;;      Totals:         2       4       0       0       0
  2354 ;;Total ram usage:        6 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; Hardware stack levels required when called:    2
  2357 ;; This function calls:
  2358 ;;		_fcscheck
  2359 ;;		_getdata
  2360 ;;		_waitFlag
  2361 ;; This function is called by:
  2362 ;;		_main
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           
  2367                           ;psect for function _ReceivePacket_data
  2368  0E9C                     _ReceivePacket_data:	
  2369                           
  2370                           ;decode_AX25.c: 360: UINT fcschecker;
  2371                           ;decode_AX25.c: 363: waitFlag();
  2372                           
  2373                           ;incstack = 0
  2374                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2375  0E9C  120A  118A  233C  120A  158A  	fcall	_waitFlag
  2376                           
  2377                           ;decode_AX25.c: 365: getdata();
  2378  0EA1  120A  158A  263B  120A  158A  	fcall	_getdata
  2379                           
  2380                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2381  0EA6  120A  158A  277E  120A  158A  	fcall	_fcscheck
  2382  0EAB  0871               	movf	?_fcscheck+1,w
  2383  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  2384  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  2385  0EAE  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2386  0EAF  0870               	movf	?_fcscheck,w
  2387  0EB0  00BD               	movwf	ReceivePacket_data@fcschecker
  2388                           
  2389                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2390  0EB1  033D               	decf	ReceivePacket_data@fcschecker,w
  2391  0EB2  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2392  0EB3  1D03               	btfss	3,2
  2393  0EB4  2EFB               	goto	l3315
  2394                           
  2395                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2396  0EB5  01BF               	clrf	ReceivePacket_data@i
  2397  0EB6  01C0               	clrf	ReceivePacket_data@i+1
  2398  0EB7  3001               	movlw	low (_commandSize-__stringbase)
  2399  0EB8  0084               	movwf	4
  2400  0EB9  120A  158A  2000  120A  158A  	fcall	stringdir
  2401  0EBE  00FA               	movwf	??_ReceivePacket_data
  2402  0EBF  120A  158A  2000  120A  158A  	fcall	stringdir
  2403  0EC4  00FB               	movwf	??_ReceivePacket_data+1
  2404  0EC5  087B               	movf	??_ReceivePacket_data+1,w
  2405  0EC6  0240               	subwf	ReceivePacket_data@i+1,w
  2406  0EC7  1D03               	skipz
  2407  0EC8  2ECB               	goto	u2925
  2408  0EC9  087A               	movf	??_ReceivePacket_data,w
  2409  0ECA  023F               	subwf	ReceivePacket_data@i,w
  2410  0ECB                     u2925:	
  2411  0ECB  1803               	btfsc	3,0
  2412  0ECC  2EF5               	goto	l3307
  2413  0ECD                     l3301:	
  2414                           
  2415                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2416  0ECD  083F               	movf	ReceivePacket_data@i,w
  2417  0ECE  3E14               	addlw	20
  2418  0ECF  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  2419  0ED0  0084               	movwf	4
  2420  0ED1  1383               	bcf	3,7	;select IRP bank1
  2421  0ED2  0800               	movf	0,w
  2422  0ED3  00FA               	movwf	??_ReceivePacket_data
  2423  0ED4  083F               	movf	ReceivePacket_data@i,w
  2424  0ED5  3EDF               	addlw	(low (_dData| 0))& (0+255)
  2425  0ED6  0084               	movwf	4
  2426  0ED7  087A               	movf	??_ReceivePacket_data,w
  2427  0ED8  0080               	movwf	0
  2428  0ED9  3001               	movlw	1
  2429  0EDA  07BF               	addwf	ReceivePacket_data@i,f
  2430  0EDB  1803               	skipnc
  2431  0EDC  0AC0               	incf	ReceivePacket_data@i+1,f
  2432  0EDD  3000               	movlw	0
  2433  0EDE  07C0               	addwf	ReceivePacket_data@i+1,f
  2434  0EDF  3001               	movlw	low (_commandSize-__stringbase)
  2435  0EE0  0084               	movwf	4
  2436  0EE1  120A  158A  2000  120A  158A  	fcall	stringdir
  2437  0EE6  00FA               	movwf	??_ReceivePacket_data
  2438  0EE7  120A  158A  2000  120A  158A  	fcall	stringdir
  2439  0EEC  00FB               	movwf	??_ReceivePacket_data+1
  2440  0EED  087B               	movf	??_ReceivePacket_data+1,w
  2441  0EEE  0240               	subwf	ReceivePacket_data@i+1,w
  2442  0EEF  1D03               	skipz
  2443  0EF0  2EF3               	goto	u2935
  2444  0EF1  087A               	movf	??_ReceivePacket_data,w
  2445  0EF2  023F               	subwf	ReceivePacket_data@i,w
  2446  0EF3                     u2935:	
  2447  0EF3  1C03               	skipc
  2448  0EF4  2ECD               	goto	l3301
  2449  0EF5                     l3307:	
  2450                           
  2451                           ;decode_AX25.c: 372: }
  2452                           ;decode_AX25.c: 373: dPacketnum = 0;
  2453  0EF5  01E7               	clrf	_dPacketnum
  2454  0EF6  01E8               	clrf	_dPacketnum+1
  2455                           
  2456                           ;decode_AX25.c: 374: rcv_state = 0;
  2457  0EF7  01E9               	clrf	_rcv_state
  2458  0EF8  01EA               	clrf	_rcv_state+1
  2459                           
  2460                           ;decode_AX25.c: 375: return dData;
  2461  0EF9  30DF               	movlw	(low (_dData| 0))& (0+255)
  2462                           
  2463                           ;decode_AX25.c: 376: }else{
  2464  0EFA  0008               	return
  2465  0EFB                     l3315:	
  2466                           
  2467                           ;decode_AX25.c: 377: dPacketnum = 0;
  2468  0EFB  01E7               	clrf	_dPacketnum
  2469  0EFC  01E8               	clrf	_dPacketnum+1
  2470                           
  2471                           ;decode_AX25.c: 378: rcv_state = 0;
  2472  0EFD  01E9               	clrf	_rcv_state
  2473  0EFE  01EA               	clrf	_rcv_state+1
  2474                           
  2475                           ;decode_AX25.c: 379: return 0x00;
  2476  0EFF  3000               	movlw	0
  2477  0F00  0008               	return
  2478  0F01                     __end_of_ReceivePacket_data:	
  2479                           
  2480                           	psect	text4
  2481  033C                     __ptext4:	
  2482 ;; *************** function _waitFlag *****************
  2483 ;; Defined at:
  2484 ;;		line 54 in file "decode_AX25.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  j               2   24[BANK0 ] unsigned int 
  2489 ;;  j               2   10[BANK0 ] unsigned int 
  2490 ;;  j               2   22[BANK0 ] unsigned int 
  2491 ;;  j               2    8[BANK0 ] unsigned int 
  2492 ;;  j               2   20[BANK0 ] unsigned int 
  2493 ;;  j               2    6[BANK0 ] unsigned int 
  2494 ;;  j               2   18[BANK0 ] unsigned int 
  2495 ;;  j               2    4[BANK0 ] unsigned int 
  2496 ;;  j               2   16[BANK0 ] unsigned int 
  2497 ;;  j               2    2[BANK0 ] unsigned int 
  2498 ;;  i               2    0[BANK0 ] unsigned int 
  2499 ;;  j               2   14[BANK0 ] unsigned int 
  2500 ;;  j               2   12[BANK0 ] unsigned int 
  2501 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2502 ;;  buf             1   28[BANK0 ] unsigned char 
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      void 
  2505 ;; Registers used:
  2506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2512 ;;      Params:         0       0       0       0       0
  2513 ;;      Locals:         0      29       0       0       0
  2514 ;;      Temps:          4       0       0       0       0
  2515 ;;      Totals:         4      29       0       0       0
  2516 ;;Total ram usage:       33 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    1
  2519 ;; This function calls:
  2520 ;;		_getbit
  2521 ;; This function is called by:
  2522 ;;		_ReceivePacket_data
  2523 ;;		_ReceivePacket
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           
  2528                           ;psect for function _waitFlag
  2529  033C                     _waitFlag:	
  2530                           
  2531                           ;decode_AX25.c: 55: UINT flag_judge;
  2532                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2533                           
  2534                           ;incstack = 0
  2535                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2536  033C  30FF               	movlw	255
  2537  033D  00F6               	movwf	??_waitFlag
  2538  033E  0876               	movf	??_waitFlag,w
  2539  033F  1283               	bcf	3,5	;RP0=0, select bank0
  2540  0340  1303               	bcf	3,6	;RP1=0, select bank0
  2541  0341  00BC               	movwf	waitFlag@buf
  2542  0342                     L6:	
  2543                           
  2544                           ;decode_AX25.c: 271: rcv_state = 0;
  2545  0342  01E9               	clrf	_rcv_state
  2546  0343  01EA               	clrf	_rcv_state+1
  2547  0344                     l3017:	
  2548  0344  3000               	movlw	0
  2549  0345  026A               	subwf	_rcv_state+1,w
  2550  0346  3002               	movlw	2
  2551  0347  1903               	skipnz
  2552  0348  0269               	subwf	_rcv_state,w
  2553  0349  1803               	btfsc	3,0
  2554  034A  0008               	return
  2555  034B                     l2651:	
  2556                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2557                           
  2558                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2559                           
  2560                           ;decode_AX25.c: 57: rcv_state = 0;
  2561                           
  2562  034B  307E               	movlw	126
  2563  034C  063C               	xorwf	waitFlag@buf,w
  2564  034D  1903               	btfsc	3,2
  2565  034E  2B9B               	goto	l2673
  2566                           
  2567                           ;decode_AX25.c: 60: flag_judge = getbit();
  2568  034F  120A  158A  24DB  120A  118A  	fcall	_getbit
  2569  0354  0871               	movf	?_getbit+1,w
  2570  0355  1283               	bcf	3,5	;RP0=0, select bank0
  2571  0356  1303               	bcf	3,6	;RP1=0, select bank0
  2572  0357  00BB               	movwf	waitFlag@flag_judge+1
  2573  0358  0870               	movf	?_getbit,w
  2574  0359  00BA               	movwf	waitFlag@flag_judge
  2575                           
  2576                           ;decode_AX25.c: 61: buf = buf << 1;
  2577  035A  083C               	movf	waitFlag@buf,w
  2578  035B  00F6               	movwf	??_waitFlag
  2579  035C  0776               	addwf	??_waitFlag,w
  2580  035D  00F7               	movwf	??_waitFlag+1
  2581  035E  0877               	movf	??_waitFlag+1,w
  2582  035F  00BC               	movwf	waitFlag@buf
  2583                           
  2584                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2585  0360  083A               	movf	waitFlag@flag_judge,w
  2586  0361  043B               	iorwf	waitFlag@flag_judge+1,w
  2587  0362  1903               	btfsc	3,2
  2588  0363  2B4B               	goto	l2651
  2589                           
  2590                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2591                           
  2592                           ;decode_AX25.c: 64: }else{
  2593  0364  083C               	movf	waitFlag@buf,w
  2594  0365  3801               	iorlw	1
  2595  0366  00F6               	movwf	??_waitFlag
  2596  0367  0876               	movf	??_waitFlag,w
  2597  0368  00BC               	movwf	waitFlag@buf
  2598  0369  2B4B               	goto	l2651
  2599  036A                     l2653:	
  2600                           ;decode_AX25.c: 66: }
  2601                           ;decode_AX25.c: 67: }
  2602                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2603                           
  2604                           
  2605                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2606  036A  01A0               	clrf	waitFlag@i
  2607  036B  01A1               	clrf	waitFlag@i+1
  2608  036C  3000               	movlw	0
  2609  036D  0221               	subwf	waitFlag@i+1,w
  2610  036E  3008               	movlw	8
  2611  036F  1903               	skipnz
  2612  0370  0220               	subwf	waitFlag@i,w
  2613  0371  1803               	btfsc	3,0
  2614  0372  2B9B               	goto	l2673
  2615  0373                     l2659:	
  2616                           
  2617                           ;decode_AX25.c: 73: flag_judge = getbit();
  2618  0373  120A  158A  24DB  120A  118A  	fcall	_getbit
  2619  0378  0871               	movf	?_getbit+1,w
  2620  0379  1283               	bcf	3,5	;RP0=0, select bank0
  2621  037A  1303               	bcf	3,6	;RP1=0, select bank0
  2622  037B  00BB               	movwf	waitFlag@flag_judge+1
  2623  037C  0870               	movf	?_getbit,w
  2624  037D  00BA               	movwf	waitFlag@flag_judge
  2625                           
  2626                           ;decode_AX25.c: 74: buf = buf >> 1;
  2627  037E  083C               	movf	waitFlag@buf,w
  2628  037F  00F6               	movwf	??_waitFlag
  2629  0380  1003               	clrc
  2630  0381  0C76               	rrf	??_waitFlag,w
  2631  0382  00F7               	movwf	??_waitFlag+1
  2632  0383  0877               	movf	??_waitFlag+1,w
  2633  0384  00BC               	movwf	waitFlag@buf
  2634                           
  2635                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2636  0385  083A               	movf	waitFlag@flag_judge,w
  2637  0386  043B               	iorwf	waitFlag@flag_judge+1,w
  2638  0387  1903               	btfsc	3,2
  2639  0388  2B8E               	goto	l2669
  2640                           
  2641                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2642                           
  2643                           ;decode_AX25.c: 77: }else{
  2644  0389  083C               	movf	waitFlag@buf,w
  2645  038A  3880               	iorlw	128
  2646  038B  00F6               	movwf	??_waitFlag
  2647  038C  0876               	movf	??_waitFlag,w
  2648  038D  00BC               	movwf	waitFlag@buf
  2649  038E                     l2669:	
  2650  038E  3001               	movlw	1
  2651  038F  07A0               	addwf	waitFlag@i,f
  2652  0390  1803               	skipnc
  2653  0391  0AA1               	incf	waitFlag@i+1,f
  2654  0392  3000               	movlw	0
  2655  0393  07A1               	addwf	waitFlag@i+1,f
  2656  0394  3000               	movlw	0
  2657  0395  0221               	subwf	waitFlag@i+1,w
  2658  0396  3008               	movlw	8
  2659  0397  1903               	skipnz
  2660  0398  0220               	subwf	waitFlag@i,w
  2661  0399  1C03               	skipc
  2662  039A  2B73               	goto	l2659
  2663  039B                     l2673:	
  2664  039B  307E               	movlw	126
  2665  039C  063C               	xorwf	waitFlag@buf,w
  2666  039D  1903               	btfsc	3,2
  2667  039E  2B6A               	goto	l2653
  2668                           
  2669                           ;decode_AX25.c: 79: }
  2670                           ;decode_AX25.c: 80: }
  2671                           ;decode_AX25.c: 81: }
  2672                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2673  039F  300A               	movlw	low (STR_1-__stringbase)
  2674  03A0  0084               	movwf	4
  2675  03A1  120A  158A  2000  120A  118A  	fcall	stringdir
  2676  03A6  00F6               	movwf	??_waitFlag
  2677  03A7  01F7               	clrf	??_waitFlag+1
  2678  03A8  1003               	clrc
  2679  03A9  0DF6               	rlf	??_waitFlag,f
  2680  03AA  0DF7               	rlf	??_waitFlag+1,f
  2681  03AB  083C               	movf	waitFlag@buf,w
  2682  03AC  00F8               	movwf	??_waitFlag+2
  2683  03AD  01F9               	clrf	??_waitFlag+3
  2684  03AE  0877               	movf	??_waitFlag+1,w
  2685  03AF  0679               	xorwf	??_waitFlag+3,w
  2686  03B0  1D03               	skipz
  2687  03B1  2BB4               	goto	u2075
  2688  03B2  0876               	movf	??_waitFlag,w
  2689  03B3  0678               	xorwf	??_waitFlag+2,w
  2690  03B4                     u2075:	
  2691  03B4  1D03               	skipz
  2692  03B5  2D79               	goto	l2823
  2693                           
  2694                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2695  03B6  083C               	movf	waitFlag@buf,w
  2696  03B7  00F6               	movwf	??_waitFlag
  2697  03B8  0867               	movf	_dPacketnum,w
  2698  03B9  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  2699  03BA  0084               	movwf	4
  2700  03BB  0876               	movf	??_waitFlag,w
  2701  03BC  1383               	bcf	3,7	;select IRP bank1
  2702  03BD  0080               	movwf	0
  2703                           
  2704                           ;decode_AX25.c: 84: dPacketnum ++;
  2705  03BE  3001               	movlw	1
  2706  03BF  07E7               	addwf	_dPacketnum,f
  2707  03C0  1803               	skipnc
  2708  03C1  0AE8               	incf	_dPacketnum+1,f
  2709  03C2  3000               	movlw	0
  2710  03C3  07E8               	addwf	_dPacketnum+1,f
  2711                           
  2712                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2713  03C4  01A2               	clrf	waitFlag@j
  2714  03C5  01A3               	clrf	waitFlag@j+1
  2715  03C6  3000               	movlw	0
  2716  03C7  0223               	subwf	waitFlag@j+1,w
  2717  03C8  3008               	movlw	8
  2718  03C9  1903               	skipnz
  2719  03CA  0222               	subwf	waitFlag@j,w
  2720  03CB  1803               	btfsc	3,0
  2721  03CC  2BF5               	goto	l2701
  2722  03CD                     l2687:	
  2723                           
  2724                           ;decode_AX25.c: 86: flag_judge = getbit();
  2725  03CD  120A  158A  24DB  120A  118A  	fcall	_getbit
  2726  03D2  0871               	movf	?_getbit+1,w
  2727  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2728  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  2729  03D5  00BB               	movwf	waitFlag@flag_judge+1
  2730  03D6  0870               	movf	?_getbit,w
  2731  03D7  00BA               	movwf	waitFlag@flag_judge
  2732                           
  2733                           ;decode_AX25.c: 87: buf = buf >> 1;
  2734  03D8  083C               	movf	waitFlag@buf,w
  2735  03D9  00F6               	movwf	??_waitFlag
  2736  03DA  1003               	clrc
  2737  03DB  0C76               	rrf	??_waitFlag,w
  2738  03DC  00F7               	movwf	??_waitFlag+1
  2739  03DD  0877               	movf	??_waitFlag+1,w
  2740  03DE  00BC               	movwf	waitFlag@buf
  2741                           
  2742                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2743  03DF  083A               	movf	waitFlag@flag_judge,w
  2744  03E0  043B               	iorwf	waitFlag@flag_judge+1,w
  2745  03E1  1903               	btfsc	3,2
  2746  03E2  2BE8               	goto	l2697
  2747                           
  2748                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2749                           
  2750                           ;decode_AX25.c: 90: }else{
  2751  03E3  083C               	movf	waitFlag@buf,w
  2752  03E4  3880               	iorlw	128
  2753  03E5  00F6               	movwf	??_waitFlag
  2754  03E6  0876               	movf	??_waitFlag,w
  2755  03E7  00BC               	movwf	waitFlag@buf
  2756  03E8                     l2697:	
  2757  03E8  3001               	movlw	1
  2758  03E9  07A2               	addwf	waitFlag@j,f
  2759  03EA  1803               	skipnc
  2760  03EB  0AA3               	incf	waitFlag@j+1,f
  2761  03EC  3000               	movlw	0
  2762  03ED  07A3               	addwf	waitFlag@j+1,f
  2763  03EE  3000               	movlw	0
  2764  03EF  0223               	subwf	waitFlag@j+1,w
  2765  03F0  3008               	movlw	8
  2766  03F1  1903               	skipnz
  2767  03F2  0222               	subwf	waitFlag@j,w
  2768  03F3  1C03               	skipc
  2769  03F4  2BCD               	goto	l2687
  2770  03F5                     l2701:	
  2771                           
  2772                           ;decode_AX25.c: 92: }
  2773                           ;decode_AX25.c: 93: }
  2774                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  2775  03F5  300B               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  2776  03F6  0084               	movwf	4
  2777  03F7  120A  158A  2000  120A  118A  	fcall	stringdir
  2778  03FC  00F6               	movwf	??_waitFlag
  2779  03FD  01F7               	clrf	??_waitFlag+1
  2780  03FE  1003               	clrc
  2781  03FF  0DF6               	rlf	??_waitFlag,f
  2782  0400  0DF7               	rlf	??_waitFlag+1,f
  2783  0401  083C               	movf	waitFlag@buf,w
  2784  0402  00F8               	movwf	??_waitFlag+2
  2785  0403  01F9               	clrf	??_waitFlag+3
  2786  0404  0877               	movf	??_waitFlag+1,w
  2787  0405  0679               	xorwf	??_waitFlag+3,w
  2788  0406  1D03               	skipz
  2789  0407  2C0A               	goto	u2115
  2790  0408  0876               	movf	??_waitFlag,w
  2791  0409  0678               	xorwf	??_waitFlag+2,w
  2792  040A                     u2115:	
  2793  040A  1D03               	skipz
  2794  040B  2D79               	goto	l2823
  2795                           
  2796                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  2797  040C  083C               	movf	waitFlag@buf,w
  2798  040D  00F6               	movwf	??_waitFlag
  2799  040E  0867               	movf	_dPacketnum,w
  2800  040F  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  2801  0410  0084               	movwf	4
  2802  0411  0876               	movf	??_waitFlag,w
  2803  0412  1383               	bcf	3,7	;select IRP bank1
  2804  0413  0080               	movwf	0
  2805                           
  2806                           ;decode_AX25.c: 96: dPacketnum ++;
  2807  0414  3001               	movlw	1
  2808  0415  07E7               	addwf	_dPacketnum,f
  2809  0416  1803               	skipnc
  2810  0417  0AE8               	incf	_dPacketnum+1,f
  2811  0418  3000               	movlw	0
  2812  0419  07E8               	addwf	_dPacketnum+1,f
  2813                           
  2814                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  2815  041A  01A4               	clrf	waitFlag@j_118
  2816  041B  01A5               	clrf	waitFlag@j_118+1
  2817  041C  3000               	movlw	0
  2818  041D  0225               	subwf	waitFlag@j_118+1,w
  2819  041E  3008               	movlw	8
  2820  041F  1903               	skipnz
  2821  0420  0224               	subwf	waitFlag@j_118,w
  2822  0421  1803               	btfsc	3,0
  2823  0422  2C4B               	goto	l2727
  2824  0423                     l2713:	
  2825                           
  2826                           ;decode_AX25.c: 98: flag_judge = getbit();
  2827  0423  120A  158A  24DB  120A  118A  	fcall	_getbit
  2828  0428  0871               	movf	?_getbit+1,w
  2829  0429  1283               	bcf	3,5	;RP0=0, select bank0
  2830  042A  1303               	bcf	3,6	;RP1=0, select bank0
  2831  042B  00BB               	movwf	waitFlag@flag_judge+1
  2832  042C  0870               	movf	?_getbit,w
  2833  042D  00BA               	movwf	waitFlag@flag_judge
  2834                           
  2835                           ;decode_AX25.c: 99: buf = buf >> 1;
  2836  042E  083C               	movf	waitFlag@buf,w
  2837  042F  00F6               	movwf	??_waitFlag
  2838  0430  1003               	clrc
  2839  0431  0C76               	rrf	??_waitFlag,w
  2840  0432  00F7               	movwf	??_waitFlag+1
  2841  0433  0877               	movf	??_waitFlag+1,w
  2842  0434  00BC               	movwf	waitFlag@buf
  2843                           
  2844                           ;decode_AX25.c: 101: buf = buf | 0x00;
  2845  0435  083A               	movf	waitFlag@flag_judge,w
  2846  0436  043B               	iorwf	waitFlag@flag_judge+1,w
  2847  0437  1903               	btfsc	3,2
  2848  0438  2C3E               	goto	l2723
  2849                           
  2850                           ;decode_AX25.c: 103: buf = buf | 0x80;
  2851                           
  2852                           ;decode_AX25.c: 102: }else{
  2853  0439  083C               	movf	waitFlag@buf,w
  2854  043A  3880               	iorlw	128
  2855  043B  00F6               	movwf	??_waitFlag
  2856  043C  0876               	movf	??_waitFlag,w
  2857  043D  00BC               	movwf	waitFlag@buf
  2858  043E                     l2723:	
  2859  043E  3001               	movlw	1
  2860  043F  07A4               	addwf	waitFlag@j_118,f
  2861  0440  1803               	skipnc
  2862  0441  0AA5               	incf	waitFlag@j_118+1,f
  2863  0442  3000               	movlw	0
  2864  0443  07A5               	addwf	waitFlag@j_118+1,f
  2865  0444  3000               	movlw	0
  2866  0445  0225               	subwf	waitFlag@j_118+1,w
  2867  0446  3008               	movlw	8
  2868  0447  1903               	skipnz
  2869  0448  0224               	subwf	waitFlag@j_118,w
  2870  0449  1C03               	skipc
  2871  044A  2C23               	goto	l2713
  2872  044B                     l2727:	
  2873                           
  2874                           ;decode_AX25.c: 104: }
  2875                           ;decode_AX25.c: 105: }
  2876                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  2877  044B  300C               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  2878  044C  0084               	movwf	4
  2879  044D  120A  158A  2000  120A  118A  	fcall	stringdir
  2880  0452  00F6               	movwf	??_waitFlag
  2881  0453  01F7               	clrf	??_waitFlag+1
  2882  0454  1003               	clrc
  2883  0455  0DF6               	rlf	??_waitFlag,f
  2884  0456  0DF7               	rlf	??_waitFlag+1,f
  2885  0457  083C               	movf	waitFlag@buf,w
  2886  0458  00F8               	movwf	??_waitFlag+2
  2887  0459  01F9               	clrf	??_waitFlag+3
  2888  045A  0877               	movf	??_waitFlag+1,w
  2889  045B  0679               	xorwf	??_waitFlag+3,w
  2890  045C  1D03               	skipz
  2891  045D  2C60               	goto	u2155
  2892  045E  0876               	movf	??_waitFlag,w
  2893  045F  0678               	xorwf	??_waitFlag+2,w
  2894  0460                     u2155:	
  2895  0460  1D03               	skipz
  2896  0461  2D79               	goto	l2823
  2897                           
  2898                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  2899  0462  083C               	movf	waitFlag@buf,w
  2900  0463  00F6               	movwf	??_waitFlag
  2901  0464  0867               	movf	_dPacketnum,w
  2902  0465  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  2903  0466  0084               	movwf	4
  2904  0467  0876               	movf	??_waitFlag,w
  2905  0468  1383               	bcf	3,7	;select IRP bank1
  2906  0469  0080               	movwf	0
  2907                           
  2908                           ;decode_AX25.c: 108: dPacketnum ++;
  2909  046A  3001               	movlw	1
  2910  046B  07E7               	addwf	_dPacketnum,f
  2911  046C  1803               	skipnc
  2912  046D  0AE8               	incf	_dPacketnum+1,f
  2913  046E  3000               	movlw	0
  2914  046F  07E8               	addwf	_dPacketnum+1,f
  2915                           
  2916                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  2917  0470  01A6               	clrf	waitFlag@j_120
  2918  0471  01A7               	clrf	waitFlag@j_120+1
  2919  0472  3000               	movlw	0
  2920  0473  0227               	subwf	waitFlag@j_120+1,w
  2921  0474  3008               	movlw	8
  2922  0475  1903               	skipnz
  2923  0476  0226               	subwf	waitFlag@j_120,w
  2924  0477  1803               	btfsc	3,0
  2925  0478  2CA1               	goto	l2753
  2926  0479                     l2739:	
  2927                           
  2928                           ;decode_AX25.c: 110: flag_judge = getbit();
  2929  0479  120A  158A  24DB  120A  118A  	fcall	_getbit
  2930  047E  0871               	movf	?_getbit+1,w
  2931  047F  1283               	bcf	3,5	;RP0=0, select bank0
  2932  0480  1303               	bcf	3,6	;RP1=0, select bank0
  2933  0481  00BB               	movwf	waitFlag@flag_judge+1
  2934  0482  0870               	movf	?_getbit,w
  2935  0483  00BA               	movwf	waitFlag@flag_judge
  2936                           
  2937                           ;decode_AX25.c: 111: buf = buf >> 1;
  2938  0484  083C               	movf	waitFlag@buf,w
  2939  0485  00F6               	movwf	??_waitFlag
  2940  0486  1003               	clrc
  2941  0487  0C76               	rrf	??_waitFlag,w
  2942  0488  00F7               	movwf	??_waitFlag+1
  2943  0489  0877               	movf	??_waitFlag+1,w
  2944  048A  00BC               	movwf	waitFlag@buf
  2945                           
  2946                           ;decode_AX25.c: 113: buf = buf | 0x00;
  2947  048B  083A               	movf	waitFlag@flag_judge,w
  2948  048C  043B               	iorwf	waitFlag@flag_judge+1,w
  2949  048D  1903               	btfsc	3,2
  2950  048E  2C94               	goto	l2749
  2951                           
  2952                           ;decode_AX25.c: 115: buf = buf | 0x80;
  2953                           
  2954                           ;decode_AX25.c: 114: }else{
  2955  048F  083C               	movf	waitFlag@buf,w
  2956  0490  3880               	iorlw	128
  2957  0491  00F6               	movwf	??_waitFlag
  2958  0492  0876               	movf	??_waitFlag,w
  2959  0493  00BC               	movwf	waitFlag@buf
  2960  0494                     l2749:	
  2961  0494  3001               	movlw	1
  2962  0495  07A6               	addwf	waitFlag@j_120,f
  2963  0496  1803               	skipnc
  2964  0497  0AA7               	incf	waitFlag@j_120+1,f
  2965  0498  3000               	movlw	0
  2966  0499  07A7               	addwf	waitFlag@j_120+1,f
  2967  049A  3000               	movlw	0
  2968  049B  0227               	subwf	waitFlag@j_120+1,w
  2969  049C  3008               	movlw	8
  2970  049D  1903               	skipnz
  2971  049E  0226               	subwf	waitFlag@j_120,w
  2972  049F  1C03               	skipc
  2973  04A0  2C79               	goto	l2739
  2974  04A1                     l2753:	
  2975                           
  2976                           ;decode_AX25.c: 116: }
  2977                           ;decode_AX25.c: 117: }
  2978                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  2979  04A1  300D               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  2980  04A2  0084               	movwf	4
  2981  04A3  120A  158A  2000  120A  118A  	fcall	stringdir
  2982  04A8  00F6               	movwf	??_waitFlag
  2983  04A9  01F7               	clrf	??_waitFlag+1
  2984  04AA  1003               	clrc
  2985  04AB  0DF6               	rlf	??_waitFlag,f
  2986  04AC  0DF7               	rlf	??_waitFlag+1,f
  2987  04AD  083C               	movf	waitFlag@buf,w
  2988  04AE  00F8               	movwf	??_waitFlag+2
  2989  04AF  01F9               	clrf	??_waitFlag+3
  2990  04B0  0877               	movf	??_waitFlag+1,w
  2991  04B1  0679               	xorwf	??_waitFlag+3,w
  2992  04B2  1D03               	skipz
  2993  04B3  2CB6               	goto	u2195
  2994  04B4  0876               	movf	??_waitFlag,w
  2995  04B5  0678               	xorwf	??_waitFlag+2,w
  2996  04B6                     u2195:	
  2997  04B6  1D03               	skipz
  2998  04B7  2D79               	goto	l2823
  2999                           
  3000                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  3001  04B8  083C               	movf	waitFlag@buf,w
  3002  04B9  00F6               	movwf	??_waitFlag
  3003  04BA  0867               	movf	_dPacketnum,w
  3004  04BB  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3005  04BC  0084               	movwf	4
  3006  04BD  0876               	movf	??_waitFlag,w
  3007  04BE  1383               	bcf	3,7	;select IRP bank1
  3008  04BF  0080               	movwf	0
  3009                           
  3010                           ;decode_AX25.c: 120: dPacketnum ++;
  3011  04C0  3001               	movlw	1
  3012  04C1  07E7               	addwf	_dPacketnum,f
  3013  04C2  1803               	skipnc
  3014  04C3  0AE8               	incf	_dPacketnum+1,f
  3015  04C4  3000               	movlw	0
  3016  04C5  07E8               	addwf	_dPacketnum+1,f
  3017                           
  3018                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  3019  04C6  01A8               	clrf	waitFlag@j_122
  3020  04C7  01A9               	clrf	waitFlag@j_122+1
  3021  04C8  3000               	movlw	0
  3022  04C9  0229               	subwf	waitFlag@j_122+1,w
  3023  04CA  3008               	movlw	8
  3024  04CB  1903               	skipnz
  3025  04CC  0228               	subwf	waitFlag@j_122,w
  3026  04CD  1803               	btfsc	3,0
  3027  04CE  2CF7               	goto	l2779
  3028  04CF                     l2765:	
  3029                           
  3030                           ;decode_AX25.c: 122: flag_judge = getbit();
  3031  04CF  120A  158A  24DB  120A  118A  	fcall	_getbit
  3032  04D4  0871               	movf	?_getbit+1,w
  3033  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  3034  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  3035  04D7  00BB               	movwf	waitFlag@flag_judge+1
  3036  04D8  0870               	movf	?_getbit,w
  3037  04D9  00BA               	movwf	waitFlag@flag_judge
  3038                           
  3039                           ;decode_AX25.c: 123: buf = buf >> 1;
  3040  04DA  083C               	movf	waitFlag@buf,w
  3041  04DB  00F6               	movwf	??_waitFlag
  3042  04DC  1003               	clrc
  3043  04DD  0C76               	rrf	??_waitFlag,w
  3044  04DE  00F7               	movwf	??_waitFlag+1
  3045  04DF  0877               	movf	??_waitFlag+1,w
  3046  04E0  00BC               	movwf	waitFlag@buf
  3047                           
  3048                           ;decode_AX25.c: 125: buf = buf | 0x00;
  3049  04E1  083A               	movf	waitFlag@flag_judge,w
  3050  04E2  043B               	iorwf	waitFlag@flag_judge+1,w
  3051  04E3  1903               	btfsc	3,2
  3052  04E4  2CEA               	goto	l2775
  3053                           
  3054                           ;decode_AX25.c: 127: buf = buf | 0x80;
  3055                           
  3056                           ;decode_AX25.c: 126: }else{
  3057  04E5  083C               	movf	waitFlag@buf,w
  3058  04E6  3880               	iorlw	128
  3059  04E7  00F6               	movwf	??_waitFlag
  3060  04E8  0876               	movf	??_waitFlag,w
  3061  04E9  00BC               	movwf	waitFlag@buf
  3062  04EA                     l2775:	
  3063  04EA  3001               	movlw	1
  3064  04EB  07A8               	addwf	waitFlag@j_122,f
  3065  04EC  1803               	skipnc
  3066  04ED  0AA9               	incf	waitFlag@j_122+1,f
  3067  04EE  3000               	movlw	0
  3068  04EF  07A9               	addwf	waitFlag@j_122+1,f
  3069  04F0  3000               	movlw	0
  3070  04F1  0229               	subwf	waitFlag@j_122+1,w
  3071  04F2  3008               	movlw	8
  3072  04F3  1903               	skipnz
  3073  04F4  0228               	subwf	waitFlag@j_122,w
  3074  04F5  1C03               	skipc
  3075  04F6  2CCF               	goto	l2765
  3076  04F7                     l2779:	
  3077                           
  3078                           ;decode_AX25.c: 128: }
  3079                           ;decode_AX25.c: 129: }
  3080                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  3081  04F7  300E               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  3082  04F8  0084               	movwf	4
  3083  04F9  120A  158A  2000  120A  118A  	fcall	stringdir
  3084  04FE  00F6               	movwf	??_waitFlag
  3085  04FF  01F7               	clrf	??_waitFlag+1
  3086  0500  1003               	clrc
  3087  0501  0DF6               	rlf	??_waitFlag,f
  3088  0502  0DF7               	rlf	??_waitFlag+1,f
  3089  0503  083C               	movf	waitFlag@buf,w
  3090  0504  00F8               	movwf	??_waitFlag+2
  3091  0505  01F9               	clrf	??_waitFlag+3
  3092  0506  0877               	movf	??_waitFlag+1,w
  3093  0507  0679               	xorwf	??_waitFlag+3,w
  3094  0508  1D03               	skipz
  3095  0509  2D0C               	goto	u2235
  3096  050A  0876               	movf	??_waitFlag,w
  3097  050B  0678               	xorwf	??_waitFlag+2,w
  3098  050C                     u2235:	
  3099  050C  1D03               	skipz
  3100  050D  2D79               	goto	l2823
  3101                           
  3102                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  3103  050E  083C               	movf	waitFlag@buf,w
  3104  050F  00F6               	movwf	??_waitFlag
  3105  0510  0867               	movf	_dPacketnum,w
  3106  0511  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3107  0512  0084               	movwf	4
  3108  0513  0876               	movf	??_waitFlag,w
  3109  0514  1383               	bcf	3,7	;select IRP bank1
  3110  0515  0080               	movwf	0
  3111                           
  3112                           ;decode_AX25.c: 132: dPacketnum ++;
  3113  0516  3001               	movlw	1
  3114  0517  07E7               	addwf	_dPacketnum,f
  3115  0518  1803               	skipnc
  3116  0519  0AE8               	incf	_dPacketnum+1,f
  3117  051A  3000               	movlw	0
  3118  051B  07E8               	addwf	_dPacketnum+1,f
  3119                           
  3120                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  3121  051C  01AA               	clrf	waitFlag@j_124
  3122  051D  01AB               	clrf	waitFlag@j_124+1
  3123  051E  3000               	movlw	0
  3124  051F  022B               	subwf	waitFlag@j_124+1,w
  3125  0520  3008               	movlw	8
  3126  0521  1903               	skipnz
  3127  0522  022A               	subwf	waitFlag@j_124,w
  3128  0523  1803               	btfsc	3,0
  3129  0524  2D4D               	goto	l2805
  3130  0525                     l2791:	
  3131                           
  3132                           ;decode_AX25.c: 134: flag_judge = getbit();
  3133  0525  120A  158A  24DB  120A  118A  	fcall	_getbit
  3134  052A  0871               	movf	?_getbit+1,w
  3135  052B  1283               	bcf	3,5	;RP0=0, select bank0
  3136  052C  1303               	bcf	3,6	;RP1=0, select bank0
  3137  052D  00BB               	movwf	waitFlag@flag_judge+1
  3138  052E  0870               	movf	?_getbit,w
  3139  052F  00BA               	movwf	waitFlag@flag_judge
  3140                           
  3141                           ;decode_AX25.c: 135: buf = buf >> 1;
  3142  0530  083C               	movf	waitFlag@buf,w
  3143  0531  00F6               	movwf	??_waitFlag
  3144  0532  1003               	clrc
  3145  0533  0C76               	rrf	??_waitFlag,w
  3146  0534  00F7               	movwf	??_waitFlag+1
  3147  0535  0877               	movf	??_waitFlag+1,w
  3148  0536  00BC               	movwf	waitFlag@buf
  3149                           
  3150                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3151  0537  083A               	movf	waitFlag@flag_judge,w
  3152  0538  043B               	iorwf	waitFlag@flag_judge+1,w
  3153  0539  1903               	btfsc	3,2
  3154  053A  2D40               	goto	l2801
  3155                           
  3156                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3157                           
  3158                           ;decode_AX25.c: 138: }else{
  3159  053B  083C               	movf	waitFlag@buf,w
  3160  053C  3880               	iorlw	128
  3161  053D  00F6               	movwf	??_waitFlag
  3162  053E  0876               	movf	??_waitFlag,w
  3163  053F  00BC               	movwf	waitFlag@buf
  3164  0540                     l2801:	
  3165  0540  3001               	movlw	1
  3166  0541  07AA               	addwf	waitFlag@j_124,f
  3167  0542  1803               	skipnc
  3168  0543  0AAB               	incf	waitFlag@j_124+1,f
  3169  0544  3000               	movlw	0
  3170  0545  07AB               	addwf	waitFlag@j_124+1,f
  3171  0546  3000               	movlw	0
  3172  0547  022B               	subwf	waitFlag@j_124+1,w
  3173  0548  3008               	movlw	8
  3174  0549  1903               	skipnz
  3175  054A  022A               	subwf	waitFlag@j_124,w
  3176  054B  1C03               	skipc
  3177  054C  2D25               	goto	l2791
  3178  054D                     l2805:	
  3179                           
  3180                           ;decode_AX25.c: 140: }
  3181                           ;decode_AX25.c: 141: }
  3182                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3183  054D  300F               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3184  054E  0084               	movwf	4
  3185  054F  120A  158A  2000  120A  118A  	fcall	stringdir
  3186  0554  00F6               	movwf	??_waitFlag
  3187  0555  01F7               	clrf	??_waitFlag+1
  3188  0556  1003               	clrc
  3189  0557  0DF6               	rlf	??_waitFlag,f
  3190  0558  0DF7               	rlf	??_waitFlag+1,f
  3191  0559  083C               	movf	waitFlag@buf,w
  3192  055A  00F8               	movwf	??_waitFlag+2
  3193  055B  01F9               	clrf	??_waitFlag+3
  3194  055C  0877               	movf	??_waitFlag+1,w
  3195  055D  0679               	xorwf	??_waitFlag+3,w
  3196  055E  1D03               	skipz
  3197  055F  2D62               	goto	u2275
  3198  0560  0876               	movf	??_waitFlag,w
  3199  0561  0678               	xorwf	??_waitFlag+2,w
  3200  0562                     u2275:	
  3201  0562  1D03               	skipz
  3202  0563  2D79               	goto	l2823
  3203                           
  3204                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3205  0564  083C               	movf	waitFlag@buf,w
  3206  0565  00F6               	movwf	??_waitFlag
  3207  0566  0867               	movf	_dPacketnum,w
  3208  0567  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3209  0568  0084               	movwf	4
  3210  0569  0876               	movf	??_waitFlag,w
  3211  056A  1383               	bcf	3,7	;select IRP bank1
  3212  056B  0080               	movwf	0
  3213                           
  3214                           ;decode_AX25.c: 144: dPacketnum ++;
  3215  056C  3001               	movlw	1
  3216  056D  07E7               	addwf	_dPacketnum,f
  3217  056E  1803               	skipnc
  3218  056F  0AE8               	incf	_dPacketnum+1,f
  3219  0570  3000               	movlw	0
  3220  0571  07E8               	addwf	_dPacketnum+1,f
  3221                           
  3222                           ;decode_AX25.c: 145: rcv_state ++;
  3223  0572  3001               	movlw	1
  3224  0573  07E9               	addwf	_rcv_state,f
  3225  0574  1803               	skipnc
  3226  0575  0AEA               	incf	_rcv_state+1,f
  3227  0576  3000               	movlw	0
  3228  0577  07EA               	addwf	_rcv_state+1,f
  3229                           
  3230                           ;decode_AX25.c: 146: }else{
  3231  0578  2D7B               	goto	l214
  3232  0579                     l2823:	
  3233                           ;decode_AX25.c: 160: }
  3234                           ;decode_AX25.c: 161: }else{
  3235                           
  3236                           ;decode_AX25.c: 159: dPacketnum = 0;
  3237                           
  3238                           ;decode_AX25.c: 157: }
  3239                           ;decode_AX25.c: 158: }else{
  3240                           
  3241                           ;decode_AX25.c: 156: dPacketnum = 0;
  3242                           
  3243                           ;decode_AX25.c: 154: }
  3244                           ;decode_AX25.c: 155: }else{
  3245                           
  3246                           ;decode_AX25.c: 153: dPacketnum = 0;
  3247                           
  3248                           ;decode_AX25.c: 151: }
  3249                           ;decode_AX25.c: 152: }else{
  3250                           
  3251                           ;decode_AX25.c: 150: dPacketnum = 0;
  3252                           
  3253                           ;decode_AX25.c: 148: }
  3254                           ;decode_AX25.c: 149: }else{
  3255                           
  3256                           ;decode_AX25.c: 147: dPacketnum = 0;
  3257                           
  3258                           
  3259                           ;decode_AX25.c: 162: dPacketnum = 0;
  3260  0579  01E7               	clrf	_dPacketnum
  3261  057A  01E8               	clrf	_dPacketnum+1
  3262  057B                     l214:	
  3263                           
  3264                           ;decode_AX25.c: 163: }
  3265                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3266  057B  01AC               	clrf	waitFlag@j_126
  3267  057C  01AD               	clrf	waitFlag@j_126+1
  3268  057D  3000               	movlw	0
  3269  057E  022D               	subwf	waitFlag@j_126+1,w
  3270  057F  3008               	movlw	8
  3271  0580  1903               	skipnz
  3272  0581  022C               	subwf	waitFlag@j_126,w
  3273  0582  1803               	btfsc	3,0
  3274  0583  2DAC               	goto	l2843
  3275  0584                     l2829:	
  3276                           
  3277                           ;decode_AX25.c: 166: flag_judge = getbit();
  3278  0584  120A  158A  24DB  120A  118A  	fcall	_getbit
  3279  0589  0871               	movf	?_getbit+1,w
  3280  058A  1283               	bcf	3,5	;RP0=0, select bank0
  3281  058B  1303               	bcf	3,6	;RP1=0, select bank0
  3282  058C  00BB               	movwf	waitFlag@flag_judge+1
  3283  058D  0870               	movf	?_getbit,w
  3284  058E  00BA               	movwf	waitFlag@flag_judge
  3285                           
  3286                           ;decode_AX25.c: 167: buf = buf >> 1;
  3287  058F  083C               	movf	waitFlag@buf,w
  3288  0590  00F6               	movwf	??_waitFlag
  3289  0591  1003               	clrc
  3290  0592  0C76               	rrf	??_waitFlag,w
  3291  0593  00F7               	movwf	??_waitFlag+1
  3292  0594  0877               	movf	??_waitFlag+1,w
  3293  0595  00BC               	movwf	waitFlag@buf
  3294                           
  3295                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3296  0596  083A               	movf	waitFlag@flag_judge,w
  3297  0597  043B               	iorwf	waitFlag@flag_judge+1,w
  3298  0598  1903               	btfsc	3,2
  3299  0599  2D9F               	goto	l2839
  3300                           
  3301                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3302                           
  3303                           ;decode_AX25.c: 170: }else{
  3304  059A  083C               	movf	waitFlag@buf,w
  3305  059B  3880               	iorlw	128
  3306  059C  00F6               	movwf	??_waitFlag
  3307  059D  0876               	movf	??_waitFlag,w
  3308  059E  00BC               	movwf	waitFlag@buf
  3309  059F                     l2839:	
  3310  059F  3001               	movlw	1
  3311  05A0  07AC               	addwf	waitFlag@j_126,f
  3312  05A1  1803               	skipnc
  3313  05A2  0AAD               	incf	waitFlag@j_126+1,f
  3314  05A3  3000               	movlw	0
  3315  05A4  07AD               	addwf	waitFlag@j_126+1,f
  3316  05A5  3000               	movlw	0
  3317  05A6  022D               	subwf	waitFlag@j_126+1,w
  3318  05A7  3008               	movlw	8
  3319  05A8  1903               	skipnz
  3320  05A9  022C               	subwf	waitFlag@j_126,w
  3321  05AA  1C03               	skipc
  3322  05AB  2D84               	goto	l2829
  3323  05AC                     l2843:	
  3324                           
  3325                           ;decode_AX25.c: 172: }
  3326                           ;decode_AX25.c: 173: }
  3327                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3328  05AC  083C               	movf	waitFlag@buf,w
  3329  05AD  00F6               	movwf	??_waitFlag
  3330  05AE  0867               	movf	_dPacketnum,w
  3331  05AF  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3332  05B0  0084               	movwf	4
  3333  05B1  0876               	movf	??_waitFlag,w
  3334  05B2  1383               	bcf	3,7	;select IRP bank1
  3335  05B3  0080               	movwf	0
  3336                           
  3337                           ;decode_AX25.c: 175: dPacketnum ++;
  3338  05B4  3001               	movlw	1
  3339  05B5  07E7               	addwf	_dPacketnum,f
  3340  05B6  1803               	skipnc
  3341  05B7  0AE8               	incf	_dPacketnum+1,f
  3342  05B8  3000               	movlw	0
  3343  05B9  07E8               	addwf	_dPacketnum+1,f
  3344                           
  3345                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3346  05BA  01AE               	clrf	waitFlag@j_127
  3347  05BB  01AF               	clrf	waitFlag@j_127+1
  3348  05BC  3000               	movlw	0
  3349  05BD  022F               	subwf	waitFlag@j_127+1,w
  3350  05BE  3008               	movlw	8
  3351  05BF  1903               	skipnz
  3352  05C0  022E               	subwf	waitFlag@j_127,w
  3353  05C1  1803               	btfsc	3,0
  3354  05C2  2DEB               	goto	l2867
  3355  05C3                     l2853:	
  3356                           
  3357                           ;decode_AX25.c: 177: flag_judge = getbit();
  3358  05C3  120A  158A  24DB  120A  118A  	fcall	_getbit
  3359  05C8  0871               	movf	?_getbit+1,w
  3360  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  3361  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  3362  05CB  00BB               	movwf	waitFlag@flag_judge+1
  3363  05CC  0870               	movf	?_getbit,w
  3364  05CD  00BA               	movwf	waitFlag@flag_judge
  3365                           
  3366                           ;decode_AX25.c: 178: buf = buf >> 1;
  3367  05CE  083C               	movf	waitFlag@buf,w
  3368  05CF  00F6               	movwf	??_waitFlag
  3369  05D0  1003               	clrc
  3370  05D1  0C76               	rrf	??_waitFlag,w
  3371  05D2  00F7               	movwf	??_waitFlag+1
  3372  05D3  0877               	movf	??_waitFlag+1,w
  3373  05D4  00BC               	movwf	waitFlag@buf
  3374                           
  3375                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3376  05D5  083A               	movf	waitFlag@flag_judge,w
  3377  05D6  043B               	iorwf	waitFlag@flag_judge+1,w
  3378  05D7  1903               	btfsc	3,2
  3379  05D8  2DDE               	goto	l2863
  3380                           
  3381                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3382                           
  3383                           ;decode_AX25.c: 181: }else{
  3384  05D9  083C               	movf	waitFlag@buf,w
  3385  05DA  3880               	iorlw	128
  3386  05DB  00F6               	movwf	??_waitFlag
  3387  05DC  0876               	movf	??_waitFlag,w
  3388  05DD  00BC               	movwf	waitFlag@buf
  3389  05DE                     l2863:	
  3390  05DE  3001               	movlw	1
  3391  05DF  07AE               	addwf	waitFlag@j_127,f
  3392  05E0  1803               	skipnc
  3393  05E1  0AAF               	incf	waitFlag@j_127+1,f
  3394  05E2  3000               	movlw	0
  3395  05E3  07AF               	addwf	waitFlag@j_127+1,f
  3396  05E4  3000               	movlw	0
  3397  05E5  022F               	subwf	waitFlag@j_127+1,w
  3398  05E6  3008               	movlw	8
  3399  05E7  1903               	skipnz
  3400  05E8  022E               	subwf	waitFlag@j_127,w
  3401  05E9  1C03               	skipc
  3402  05EA  2DC3               	goto	l2853
  3403  05EB                     l2867:	
  3404                           
  3405                           ;decode_AX25.c: 183: }
  3406                           ;decode_AX25.c: 184: }
  3407                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3408  05EB  3003               	movlw	low (STR_7-__stringbase)
  3409  05EC  0084               	movwf	4
  3410  05ED  120A  158A  2000  120A  118A  	fcall	stringdir
  3411  05F2  00F6               	movwf	??_waitFlag
  3412  05F3  01F7               	clrf	??_waitFlag+1
  3413  05F4  1003               	clrc
  3414  05F5  0DF6               	rlf	??_waitFlag,f
  3415  05F6  0DF7               	rlf	??_waitFlag+1,f
  3416  05F7  083C               	movf	waitFlag@buf,w
  3417  05F8  00F8               	movwf	??_waitFlag+2
  3418  05F9  01F9               	clrf	??_waitFlag+3
  3419  05FA  0877               	movf	??_waitFlag+1,w
  3420  05FB  0679               	xorwf	??_waitFlag+3,w
  3421  05FC  1D03               	skipz
  3422  05FD  2E00               	goto	u2345
  3423  05FE  0876               	movf	??_waitFlag,w
  3424  05FF  0678               	xorwf	??_waitFlag+2,w
  3425  0600                     u2345:	
  3426  0600  1D03               	skipz
  3427  0601  2FC5               	goto	l3015
  3428                           
  3429                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3430  0602  083C               	movf	waitFlag@buf,w
  3431  0603  00F6               	movwf	??_waitFlag
  3432  0604  0867               	movf	_dPacketnum,w
  3433  0605  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3434  0606  0084               	movwf	4
  3435  0607  0876               	movf	??_waitFlag,w
  3436  0608  1383               	bcf	3,7	;select IRP bank1
  3437  0609  0080               	movwf	0
  3438                           
  3439                           ;decode_AX25.c: 187: dPacketnum ++;
  3440  060A  3001               	movlw	1
  3441  060B  07E7               	addwf	_dPacketnum,f
  3442  060C  1803               	skipnc
  3443  060D  0AE8               	incf	_dPacketnum+1,f
  3444  060E  3000               	movlw	0
  3445  060F  07E8               	addwf	_dPacketnum+1,f
  3446                           
  3447                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3448  0610  01B0               	clrf	waitFlag@j_129
  3449  0611  01B1               	clrf	waitFlag@j_129+1
  3450  0612  3000               	movlw	0
  3451  0613  0231               	subwf	waitFlag@j_129+1,w
  3452  0614  3008               	movlw	8
  3453  0615  1903               	skipnz
  3454  0616  0230               	subwf	waitFlag@j_129,w
  3455  0617  1803               	btfsc	3,0
  3456  0618  2E41               	goto	l2893
  3457  0619                     l2879:	
  3458                           
  3459                           ;decode_AX25.c: 189: flag_judge = getbit();
  3460  0619  120A  158A  24DB  120A  118A  	fcall	_getbit
  3461  061E  0871               	movf	?_getbit+1,w
  3462  061F  1283               	bcf	3,5	;RP0=0, select bank0
  3463  0620  1303               	bcf	3,6	;RP1=0, select bank0
  3464  0621  00BB               	movwf	waitFlag@flag_judge+1
  3465  0622  0870               	movf	?_getbit,w
  3466  0623  00BA               	movwf	waitFlag@flag_judge
  3467                           
  3468                           ;decode_AX25.c: 190: buf = buf >> 1;
  3469  0624  083C               	movf	waitFlag@buf,w
  3470  0625  00F6               	movwf	??_waitFlag
  3471  0626  1003               	clrc
  3472  0627  0C76               	rrf	??_waitFlag,w
  3473  0628  00F7               	movwf	??_waitFlag+1
  3474  0629  0877               	movf	??_waitFlag+1,w
  3475  062A  00BC               	movwf	waitFlag@buf
  3476                           
  3477                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3478  062B  083A               	movf	waitFlag@flag_judge,w
  3479  062C  043B               	iorwf	waitFlag@flag_judge+1,w
  3480  062D  1903               	btfsc	3,2
  3481  062E  2E34               	goto	l2889
  3482                           
  3483                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3484                           
  3485                           ;decode_AX25.c: 193: }else{
  3486  062F  083C               	movf	waitFlag@buf,w
  3487  0630  3880               	iorlw	128
  3488  0631  00F6               	movwf	??_waitFlag
  3489  0632  0876               	movf	??_waitFlag,w
  3490  0633  00BC               	movwf	waitFlag@buf
  3491  0634                     l2889:	
  3492  0634  3001               	movlw	1
  3493  0635  07B0               	addwf	waitFlag@j_129,f
  3494  0636  1803               	skipnc
  3495  0637  0AB1               	incf	waitFlag@j_129+1,f
  3496  0638  3000               	movlw	0
  3497  0639  07B1               	addwf	waitFlag@j_129+1,f
  3498  063A  3000               	movlw	0
  3499  063B  0231               	subwf	waitFlag@j_129+1,w
  3500  063C  3008               	movlw	8
  3501  063D  1903               	skipnz
  3502  063E  0230               	subwf	waitFlag@j_129,w
  3503  063F  1C03               	skipc
  3504  0640  2E19               	goto	l2879
  3505  0641                     l2893:	
  3506                           
  3507                           ;decode_AX25.c: 195: }
  3508                           ;decode_AX25.c: 196: }
  3509                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3510  0641  3004               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3511  0642  0084               	movwf	4
  3512  0643  120A  158A  2000  120A  118A  	fcall	stringdir
  3513  0648  00F6               	movwf	??_waitFlag
  3514  0649  01F7               	clrf	??_waitFlag+1
  3515  064A  1003               	clrc
  3516  064B  0DF6               	rlf	??_waitFlag,f
  3517  064C  0DF7               	rlf	??_waitFlag+1,f
  3518  064D  083C               	movf	waitFlag@buf,w
  3519  064E  00F8               	movwf	??_waitFlag+2
  3520  064F  01F9               	clrf	??_waitFlag+3
  3521  0650  0877               	movf	??_waitFlag+1,w
  3522  0651  0679               	xorwf	??_waitFlag+3,w
  3523  0652  1D03               	skipz
  3524  0653  2E56               	goto	u2385
  3525  0654  0876               	movf	??_waitFlag,w
  3526  0655  0678               	xorwf	??_waitFlag+2,w
  3527  0656                     u2385:	
  3528  0656  1D03               	skipz
  3529  0657  2FC5               	goto	l3015
  3530                           
  3531                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3532  0658  083C               	movf	waitFlag@buf,w
  3533  0659  00F6               	movwf	??_waitFlag
  3534  065A  0867               	movf	_dPacketnum,w
  3535  065B  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3536  065C  0084               	movwf	4
  3537  065D  0876               	movf	??_waitFlag,w
  3538  065E  1383               	bcf	3,7	;select IRP bank1
  3539  065F  0080               	movwf	0
  3540                           
  3541                           ;decode_AX25.c: 199: dPacketnum ++;
  3542  0660  3001               	movlw	1
  3543  0661  07E7               	addwf	_dPacketnum,f
  3544  0662  1803               	skipnc
  3545  0663  0AE8               	incf	_dPacketnum+1,f
  3546  0664  3000               	movlw	0
  3547  0665  07E8               	addwf	_dPacketnum+1,f
  3548                           
  3549                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3550  0666  01B2               	clrf	waitFlag@j_131
  3551  0667  01B3               	clrf	waitFlag@j_131+1
  3552  0668  3000               	movlw	0
  3553  0669  0233               	subwf	waitFlag@j_131+1,w
  3554  066A  3008               	movlw	8
  3555  066B  1903               	skipnz
  3556  066C  0232               	subwf	waitFlag@j_131,w
  3557  066D  1803               	btfsc	3,0
  3558  066E  2E97               	goto	l2919
  3559  066F                     l2905:	
  3560                           
  3561                           ;decode_AX25.c: 201: flag_judge = getbit();
  3562  066F  120A  158A  24DB  120A  118A  	fcall	_getbit
  3563  0674  0871               	movf	?_getbit+1,w
  3564  0675  1283               	bcf	3,5	;RP0=0, select bank0
  3565  0676  1303               	bcf	3,6	;RP1=0, select bank0
  3566  0677  00BB               	movwf	waitFlag@flag_judge+1
  3567  0678  0870               	movf	?_getbit,w
  3568  0679  00BA               	movwf	waitFlag@flag_judge
  3569                           
  3570                           ;decode_AX25.c: 202: buf = buf >> 1;
  3571  067A  083C               	movf	waitFlag@buf,w
  3572  067B  00F6               	movwf	??_waitFlag
  3573  067C  1003               	clrc
  3574  067D  0C76               	rrf	??_waitFlag,w
  3575  067E  00F7               	movwf	??_waitFlag+1
  3576  067F  0877               	movf	??_waitFlag+1,w
  3577  0680  00BC               	movwf	waitFlag@buf
  3578                           
  3579                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3580  0681  083A               	movf	waitFlag@flag_judge,w
  3581  0682  043B               	iorwf	waitFlag@flag_judge+1,w
  3582  0683  1903               	btfsc	3,2
  3583  0684  2E8A               	goto	l2915
  3584                           
  3585                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3586                           
  3587                           ;decode_AX25.c: 205: }else{
  3588  0685  083C               	movf	waitFlag@buf,w
  3589  0686  3880               	iorlw	128
  3590  0687  00F6               	movwf	??_waitFlag
  3591  0688  0876               	movf	??_waitFlag,w
  3592  0689  00BC               	movwf	waitFlag@buf
  3593  068A                     l2915:	
  3594  068A  3001               	movlw	1
  3595  068B  07B2               	addwf	waitFlag@j_131,f
  3596  068C  1803               	skipnc
  3597  068D  0AB3               	incf	waitFlag@j_131+1,f
  3598  068E  3000               	movlw	0
  3599  068F  07B3               	addwf	waitFlag@j_131+1,f
  3600  0690  3000               	movlw	0
  3601  0691  0233               	subwf	waitFlag@j_131+1,w
  3602  0692  3008               	movlw	8
  3603  0693  1903               	skipnz
  3604  0694  0232               	subwf	waitFlag@j_131,w
  3605  0695  1C03               	skipc
  3606  0696  2E6F               	goto	l2905
  3607  0697                     l2919:	
  3608                           
  3609                           ;decode_AX25.c: 207: }
  3610                           ;decode_AX25.c: 208: }
  3611                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3612  0697  3005               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3613  0698  0084               	movwf	4
  3614  0699  120A  158A  2000  120A  118A  	fcall	stringdir
  3615  069E  00F6               	movwf	??_waitFlag
  3616  069F  01F7               	clrf	??_waitFlag+1
  3617  06A0  1003               	clrc
  3618  06A1  0DF6               	rlf	??_waitFlag,f
  3619  06A2  0DF7               	rlf	??_waitFlag+1,f
  3620  06A3  083C               	movf	waitFlag@buf,w
  3621  06A4  00F8               	movwf	??_waitFlag+2
  3622  06A5  01F9               	clrf	??_waitFlag+3
  3623  06A6  0877               	movf	??_waitFlag+1,w
  3624  06A7  0679               	xorwf	??_waitFlag+3,w
  3625  06A8  1D03               	skipz
  3626  06A9  2EAC               	goto	u2425
  3627  06AA  0876               	movf	??_waitFlag,w
  3628  06AB  0678               	xorwf	??_waitFlag+2,w
  3629  06AC                     u2425:	
  3630  06AC  1D03               	skipz
  3631  06AD  2FC5               	goto	l3015
  3632                           
  3633                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3634  06AE  083C               	movf	waitFlag@buf,w
  3635  06AF  00F6               	movwf	??_waitFlag
  3636  06B0  0867               	movf	_dPacketnum,w
  3637  06B1  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3638  06B2  0084               	movwf	4
  3639  06B3  0876               	movf	??_waitFlag,w
  3640  06B4  1383               	bcf	3,7	;select IRP bank1
  3641  06B5  0080               	movwf	0
  3642                           
  3643                           ;decode_AX25.c: 211: dPacketnum ++;
  3644  06B6  3001               	movlw	1
  3645  06B7  07E7               	addwf	_dPacketnum,f
  3646  06B8  1803               	skipnc
  3647  06B9  0AE8               	incf	_dPacketnum+1,f
  3648  06BA  3000               	movlw	0
  3649  06BB  07E8               	addwf	_dPacketnum+1,f
  3650                           
  3651                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3652  06BC  01B4               	clrf	waitFlag@j_133
  3653  06BD  01B5               	clrf	waitFlag@j_133+1
  3654  06BE  3000               	movlw	0
  3655  06BF  0235               	subwf	waitFlag@j_133+1,w
  3656  06C0  3008               	movlw	8
  3657  06C1  1903               	skipnz
  3658  06C2  0234               	subwf	waitFlag@j_133,w
  3659  06C3  1803               	btfsc	3,0
  3660  06C4  2EED               	goto	l2945
  3661  06C5                     l2931:	
  3662                           
  3663                           ;decode_AX25.c: 213: flag_judge = getbit();
  3664  06C5  120A  158A  24DB  120A  118A  	fcall	_getbit
  3665  06CA  0871               	movf	?_getbit+1,w
  3666  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  3667  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  3668  06CD  00BB               	movwf	waitFlag@flag_judge+1
  3669  06CE  0870               	movf	?_getbit,w
  3670  06CF  00BA               	movwf	waitFlag@flag_judge
  3671                           
  3672                           ;decode_AX25.c: 214: buf = buf >> 1;
  3673  06D0  083C               	movf	waitFlag@buf,w
  3674  06D1  00F6               	movwf	??_waitFlag
  3675  06D2  1003               	clrc
  3676  06D3  0C76               	rrf	??_waitFlag,w
  3677  06D4  00F7               	movwf	??_waitFlag+1
  3678  06D5  0877               	movf	??_waitFlag+1,w
  3679  06D6  00BC               	movwf	waitFlag@buf
  3680                           
  3681                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3682  06D7  083A               	movf	waitFlag@flag_judge,w
  3683  06D8  043B               	iorwf	waitFlag@flag_judge+1,w
  3684  06D9  1903               	btfsc	3,2
  3685  06DA  2EE0               	goto	l2941
  3686                           
  3687                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3688                           
  3689                           ;decode_AX25.c: 217: }else{
  3690  06DB  083C               	movf	waitFlag@buf,w
  3691  06DC  3880               	iorlw	128
  3692  06DD  00F6               	movwf	??_waitFlag
  3693  06DE  0876               	movf	??_waitFlag,w
  3694  06DF  00BC               	movwf	waitFlag@buf
  3695  06E0                     l2941:	
  3696  06E0  3001               	movlw	1
  3697  06E1  07B4               	addwf	waitFlag@j_133,f
  3698  06E2  1803               	skipnc
  3699  06E3  0AB5               	incf	waitFlag@j_133+1,f
  3700  06E4  3000               	movlw	0
  3701  06E5  07B5               	addwf	waitFlag@j_133+1,f
  3702  06E6  3000               	movlw	0
  3703  06E7  0235               	subwf	waitFlag@j_133+1,w
  3704  06E8  3008               	movlw	8
  3705  06E9  1903               	skipnz
  3706  06EA  0234               	subwf	waitFlag@j_133,w
  3707  06EB  1C03               	skipc
  3708  06EC  2EC5               	goto	l2931
  3709  06ED                     l2945:	
  3710                           
  3711                           ;decode_AX25.c: 219: }
  3712                           ;decode_AX25.c: 220: }
  3713                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3714  06ED  3006               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3715  06EE  0084               	movwf	4
  3716  06EF  120A  158A  2000  120A  118A  	fcall	stringdir
  3717  06F4  00F6               	movwf	??_waitFlag
  3718  06F5  01F7               	clrf	??_waitFlag+1
  3719  06F6  1003               	clrc
  3720  06F7  0DF6               	rlf	??_waitFlag,f
  3721  06F8  0DF7               	rlf	??_waitFlag+1,f
  3722  06F9  083C               	movf	waitFlag@buf,w
  3723  06FA  00F8               	movwf	??_waitFlag+2
  3724  06FB  01F9               	clrf	??_waitFlag+3
  3725  06FC  0877               	movf	??_waitFlag+1,w
  3726  06FD  0679               	xorwf	??_waitFlag+3,w
  3727  06FE  1D03               	skipz
  3728  06FF  2F02               	goto	u2465
  3729  0700  0876               	movf	??_waitFlag,w
  3730  0701  0678               	xorwf	??_waitFlag+2,w
  3731  0702                     u2465:	
  3732  0702  1D03               	skipz
  3733  0703  2FC5               	goto	l3015
  3734                           
  3735                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3736  0704  083C               	movf	waitFlag@buf,w
  3737  0705  00F6               	movwf	??_waitFlag
  3738  0706  0867               	movf	_dPacketnum,w
  3739  0707  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3740  0708  0084               	movwf	4
  3741  0709  0876               	movf	??_waitFlag,w
  3742  070A  1383               	bcf	3,7	;select IRP bank1
  3743  070B  0080               	movwf	0
  3744                           
  3745                           ;decode_AX25.c: 223: dPacketnum ++;
  3746  070C  3001               	movlw	1
  3747  070D  07E7               	addwf	_dPacketnum,f
  3748  070E  1803               	skipnc
  3749  070F  0AE8               	incf	_dPacketnum+1,f
  3750  0710  3000               	movlw	0
  3751  0711  07E8               	addwf	_dPacketnum+1,f
  3752                           
  3753                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  3754  0712  01B6               	clrf	waitFlag@j_135
  3755  0713  01B7               	clrf	waitFlag@j_135+1
  3756  0714  3000               	movlw	0
  3757  0715  0237               	subwf	waitFlag@j_135+1,w
  3758  0716  3008               	movlw	8
  3759  0717  1903               	skipnz
  3760  0718  0236               	subwf	waitFlag@j_135,w
  3761  0719  1803               	btfsc	3,0
  3762  071A  2F43               	goto	l2971
  3763  071B                     l2957:	
  3764                           
  3765                           ;decode_AX25.c: 225: flag_judge = getbit();
  3766  071B  120A  158A  24DB  120A  118A  	fcall	_getbit
  3767  0720  0871               	movf	?_getbit+1,w
  3768  0721  1283               	bcf	3,5	;RP0=0, select bank0
  3769  0722  1303               	bcf	3,6	;RP1=0, select bank0
  3770  0723  00BB               	movwf	waitFlag@flag_judge+1
  3771  0724  0870               	movf	?_getbit,w
  3772  0725  00BA               	movwf	waitFlag@flag_judge
  3773                           
  3774                           ;decode_AX25.c: 226: buf = buf >> 1;
  3775  0726  083C               	movf	waitFlag@buf,w
  3776  0727  00F6               	movwf	??_waitFlag
  3777  0728  1003               	clrc
  3778  0729  0C76               	rrf	??_waitFlag,w
  3779  072A  00F7               	movwf	??_waitFlag+1
  3780  072B  0877               	movf	??_waitFlag+1,w
  3781  072C  00BC               	movwf	waitFlag@buf
  3782                           
  3783                           ;decode_AX25.c: 228: buf = buf | 0x00;
  3784  072D  083A               	movf	waitFlag@flag_judge,w
  3785  072E  043B               	iorwf	waitFlag@flag_judge+1,w
  3786  072F  1903               	btfsc	3,2
  3787  0730  2F36               	goto	l2967
  3788                           
  3789                           ;decode_AX25.c: 230: buf = buf | 0x80;
  3790                           
  3791                           ;decode_AX25.c: 229: }else{
  3792  0731  083C               	movf	waitFlag@buf,w
  3793  0732  3880               	iorlw	128
  3794  0733  00F6               	movwf	??_waitFlag
  3795  0734  0876               	movf	??_waitFlag,w
  3796  0735  00BC               	movwf	waitFlag@buf
  3797  0736                     l2967:	
  3798  0736  3001               	movlw	1
  3799  0737  07B6               	addwf	waitFlag@j_135,f
  3800  0738  1803               	skipnc
  3801  0739  0AB7               	incf	waitFlag@j_135+1,f
  3802  073A  3000               	movlw	0
  3803  073B  07B7               	addwf	waitFlag@j_135+1,f
  3804  073C  3000               	movlw	0
  3805  073D  0237               	subwf	waitFlag@j_135+1,w
  3806  073E  3008               	movlw	8
  3807  073F  1903               	skipnz
  3808  0740  0236               	subwf	waitFlag@j_135,w
  3809  0741  1C03               	skipc
  3810  0742  2F1B               	goto	l2957
  3811  0743                     l2971:	
  3812                           
  3813                           ;decode_AX25.c: 231: }
  3814                           ;decode_AX25.c: 232: }
  3815                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  3816  0743  3007               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  3817  0744  0084               	movwf	4
  3818  0745  120A  158A  2000  120A  118A  	fcall	stringdir
  3819  074A  00F6               	movwf	??_waitFlag
  3820  074B  01F7               	clrf	??_waitFlag+1
  3821  074C  1003               	clrc
  3822  074D  0DF6               	rlf	??_waitFlag,f
  3823  074E  0DF7               	rlf	??_waitFlag+1,f
  3824  074F  083C               	movf	waitFlag@buf,w
  3825  0750  00F8               	movwf	??_waitFlag+2
  3826  0751  01F9               	clrf	??_waitFlag+3
  3827  0752  0877               	movf	??_waitFlag+1,w
  3828  0753  0679               	xorwf	??_waitFlag+3,w
  3829  0754  1D03               	skipz
  3830  0755  2F58               	goto	u2505
  3831  0756  0876               	movf	??_waitFlag,w
  3832  0757  0678               	xorwf	??_waitFlag+2,w
  3833  0758                     u2505:	
  3834  0758  1D03               	skipz
  3835  0759  2FC5               	goto	l3015
  3836                           
  3837                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  3838  075A  083C               	movf	waitFlag@buf,w
  3839  075B  00F6               	movwf	??_waitFlag
  3840  075C  0867               	movf	_dPacketnum,w
  3841  075D  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3842  075E  0084               	movwf	4
  3843  075F  0876               	movf	??_waitFlag,w
  3844  0760  1383               	bcf	3,7	;select IRP bank1
  3845  0761  0080               	movwf	0
  3846                           
  3847                           ;decode_AX25.c: 235: dPacketnum ++;
  3848  0762  3001               	movlw	1
  3849  0763  07E7               	addwf	_dPacketnum,f
  3850  0764  1803               	skipnc
  3851  0765  0AE8               	incf	_dPacketnum+1,f
  3852  0766  3000               	movlw	0
  3853  0767  07E8               	addwf	_dPacketnum+1,f
  3854                           
  3855                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  3856  0768  01B8               	clrf	waitFlag@j_137
  3857  0769  01B9               	clrf	waitFlag@j_137+1
  3858  076A  3000               	movlw	0
  3859  076B  0239               	subwf	waitFlag@j_137+1,w
  3860  076C  3008               	movlw	8
  3861  076D  1903               	skipnz
  3862  076E  0238               	subwf	waitFlag@j_137,w
  3863  076F  1803               	btfsc	3,0
  3864  0770  2F99               	goto	l2997
  3865  0771                     l2983:	
  3866                           
  3867                           ;decode_AX25.c: 237: flag_judge = getbit();
  3868  0771  120A  158A  24DB  120A  118A  	fcall	_getbit
  3869  0776  0871               	movf	?_getbit+1,w
  3870  0777  1283               	bcf	3,5	;RP0=0, select bank0
  3871  0778  1303               	bcf	3,6	;RP1=0, select bank0
  3872  0779  00BB               	movwf	waitFlag@flag_judge+1
  3873  077A  0870               	movf	?_getbit,w
  3874  077B  00BA               	movwf	waitFlag@flag_judge
  3875                           
  3876                           ;decode_AX25.c: 238: buf = buf >> 1;
  3877  077C  083C               	movf	waitFlag@buf,w
  3878  077D  00F6               	movwf	??_waitFlag
  3879  077E  1003               	clrc
  3880  077F  0C76               	rrf	??_waitFlag,w
  3881  0780  00F7               	movwf	??_waitFlag+1
  3882  0781  0877               	movf	??_waitFlag+1,w
  3883  0782  00BC               	movwf	waitFlag@buf
  3884                           
  3885                           ;decode_AX25.c: 240: buf = buf | 0x00;
  3886  0783  083A               	movf	waitFlag@flag_judge,w
  3887  0784  043B               	iorwf	waitFlag@flag_judge+1,w
  3888  0785  1903               	btfsc	3,2
  3889  0786  2F8C               	goto	l2993
  3890                           
  3891                           ;decode_AX25.c: 242: buf = buf | 0x80;
  3892                           
  3893                           ;decode_AX25.c: 241: }else{
  3894  0787  083C               	movf	waitFlag@buf,w
  3895  0788  3880               	iorlw	128
  3896  0789  00F6               	movwf	??_waitFlag
  3897  078A  0876               	movf	??_waitFlag,w
  3898  078B  00BC               	movwf	waitFlag@buf
  3899  078C                     l2993:	
  3900  078C  3001               	movlw	1
  3901  078D  07B8               	addwf	waitFlag@j_137,f
  3902  078E  1803               	skipnc
  3903  078F  0AB9               	incf	waitFlag@j_137+1,f
  3904  0790  3000               	movlw	0
  3905  0791  07B9               	addwf	waitFlag@j_137+1,f
  3906  0792  3000               	movlw	0
  3907  0793  0239               	subwf	waitFlag@j_137+1,w
  3908  0794  3008               	movlw	8
  3909  0795  1903               	skipnz
  3910  0796  0238               	subwf	waitFlag@j_137,w
  3911  0797  1C03               	skipc
  3912  0798  2F71               	goto	l2983
  3913  0799                     l2997:	
  3914                           
  3915                           ;decode_AX25.c: 243: }
  3916                           ;decode_AX25.c: 244: }
  3917                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  3918  0799  3008               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  3919  079A  0084               	movwf	4
  3920  079B  120A  158A  2000  120A  118A  	fcall	stringdir
  3921  07A0  00F6               	movwf	??_waitFlag
  3922  07A1  01F7               	clrf	??_waitFlag+1
  3923  07A2  1003               	clrc
  3924  07A3  0DF6               	rlf	??_waitFlag,f
  3925  07A4  0DF7               	rlf	??_waitFlag+1,f
  3926  07A5  083C               	movf	waitFlag@buf,w
  3927  07A6  00F8               	movwf	??_waitFlag+2
  3928  07A7  01F9               	clrf	??_waitFlag+3
  3929  07A8  0877               	movf	??_waitFlag+1,w
  3930  07A9  0679               	xorwf	??_waitFlag+3,w
  3931  07AA  1D03               	skipz
  3932  07AB  2FAE               	goto	u2545
  3933  07AC  0876               	movf	??_waitFlag,w
  3934  07AD  0678               	xorwf	??_waitFlag+2,w
  3935  07AE                     u2545:	
  3936  07AE  1D03               	skipz
  3937  07AF  2FC5               	goto	l3015
  3938                           
  3939                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  3940  07B0  083C               	movf	waitFlag@buf,w
  3941  07B1  00F6               	movwf	??_waitFlag
  3942  07B2  0867               	movf	_dPacketnum,w
  3943  07B3  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3944  07B4  0084               	movwf	4
  3945  07B5  0876               	movf	??_waitFlag,w
  3946  07B6  1383               	bcf	3,7	;select IRP bank1
  3947  07B7  0080               	movwf	0
  3948                           
  3949                           ;decode_AX25.c: 247: dPacketnum ++;
  3950  07B8  3001               	movlw	1
  3951  07B9  07E7               	addwf	_dPacketnum,f
  3952  07BA  1803               	skipnc
  3953  07BB  0AE8               	incf	_dPacketnum+1,f
  3954  07BC  3000               	movlw	0
  3955  07BD  07E8               	addwf	_dPacketnum+1,f
  3956                           
  3957                           ;decode_AX25.c: 248: rcv_state ++;
  3958  07BE  3001               	movlw	1
  3959  07BF  07E9               	addwf	_rcv_state,f
  3960  07C0  1803               	skipnc
  3961  07C1  0AEA               	incf	_rcv_state+1,f
  3962  07C2  3000               	movlw	0
  3963  07C3  07EA               	addwf	_rcv_state+1,f
  3964                           
  3965                           ;decode_AX25.c: 249: }else{
  3966  07C4  2B44               	goto	l3017
  3967  07C5                     l3015:	
  3968                           ;decode_AX25.c: 268: }
  3969                           ;decode_AX25.c: 269: }else{
  3970                           
  3971                           ;decode_AX25.c: 267: rcv_state = 0;
  3972                           
  3973                           ;decode_AX25.c: 266: dPacketnum = 0;
  3974                           
  3975                           ;decode_AX25.c: 264: }
  3976                           ;decode_AX25.c: 265: }else{
  3977                           
  3978                           ;decode_AX25.c: 263: rcv_state = 0;
  3979                           
  3980                           ;decode_AX25.c: 262: dPacketnum = 0;
  3981                           
  3982                           ;decode_AX25.c: 260: }
  3983                           ;decode_AX25.c: 261: }else{
  3984                           
  3985                           ;decode_AX25.c: 259: rcv_state = 0;
  3986                           
  3987                           ;decode_AX25.c: 258: dPacketnum = 0;
  3988                           
  3989                           ;decode_AX25.c: 256: }
  3990                           ;decode_AX25.c: 257: }else{
  3991                           
  3992                           ;decode_AX25.c: 255: rcv_state = 0;
  3993                           
  3994                           ;decode_AX25.c: 254: dPacketnum = 0;
  3995                           
  3996                           ;decode_AX25.c: 252: }
  3997                           ;decode_AX25.c: 253: }else{
  3998                           
  3999                           ;decode_AX25.c: 251: rcv_state = 0;
  4000                           
  4001                           ;decode_AX25.c: 250: dPacketnum = 0;
  4002                           
  4003                           
  4004                           ;decode_AX25.c: 270: dPacketnum = 0;
  4005  07C5  01E7               	clrf	_dPacketnum
  4006  07C6  01E8               	clrf	_dPacketnum+1
  4007  07C7  2B42               	goto	L6
  4008  07C8                     __end_of_waitFlag:	
  4009                           
  4010                           	psect	text5
  4011  0E3B                     __ptext5:	
  4012 ;; *************** function _getdata *****************
  4013 ;; Defined at:
  4014 ;;		line 278 in file "decode_AX25.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;		None
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  4019 ;;  dstuff          2    2[BANK0 ] unsigned int 
  4020 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  4021 ;;  buf             1    6[BANK0 ] unsigned char 
  4022 ;;  dammy_data      1    0        unsigned char 
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  1    wreg      void 
  4025 ;; Registers used:
  4026 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4032 ;;      Params:         0       0       0       0       0
  4033 ;;      Locals:         0       7       0       0       0
  4034 ;;      Temps:          2       0       0       0       0
  4035 ;;      Totals:         2       7       0       0       0
  4036 ;;Total ram usage:        9 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    1
  4039 ;; This function calls:
  4040 ;;		_getbit
  4041 ;; This function is called by:
  4042 ;;		_ReceivePacket_data
  4043 ;;		_ReceivePacket
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           
  4048                           ;psect for function _getdata
  4049  0E3B                     _getdata:	
  4050                           
  4051                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  4052                           
  4053                           ;incstack = 0
  4054                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4055  0E3B  1283               	bcf	3,5	;RP0=0, select bank0
  4056  0E3C  1303               	bcf	3,6	;RP1=0, select bank0
  4057  0E3D  01A6               	clrf	getdata@buf
  4058                           
  4059                           ;decode_AX25.c: 280: UINT dstuff = 0;
  4060  0E3E  01A2               	clrf	getdata@dstuff
  4061  0E3F  01A3               	clrf	getdata@dstuff+1
  4062                           
  4063                           ;decode_AX25.c: 281: UBYTE dammy_data;
  4064                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  4065  0E40  01A0               	clrf	getdata@bufstore_counter
  4066  0E41  01A1               	clrf	getdata@bufstore_counter+1
  4067                           
  4068                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  4069  0E42  01A4               	clrf	getdata@dbitstatus
  4070  0E43  01A5               	clrf	getdata@dbitstatus+1
  4071  0E44                     l3051:	
  4072                           ;decode_AX25.c: 285: while(rcv_state == 2){
  4073                           
  4074  0E44  3002               	movlw	2
  4075  0E45  0669               	xorwf	_rcv_state,w
  4076  0E46  046A               	iorwf	_rcv_state+1,w
  4077  0E47  1D03               	btfss	3,2
  4078  0E48  0008               	return
  4079                           
  4080                           ;decode_AX25.c: 286: dbitstatus = getbit();
  4081  0E49  120A  158A  24DB  120A  158A  	fcall	_getbit
  4082  0E4E  0871               	movf	?_getbit+1,w
  4083  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  4084  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  4085  0E51  00A5               	movwf	getdata@dbitstatus+1
  4086  0E52  0870               	movf	?_getbit,w
  4087  0E53  00A4               	movwf	getdata@dbitstatus
  4088                           
  4089                           ;decode_AX25.c: 287: if(dstuff == 5){
  4090  0E54  3005               	movlw	5
  4091  0E55  0622               	xorwf	getdata@dstuff,w
  4092  0E56  0423               	iorwf	getdata@dstuff+1,w
  4093  0E57  1D03               	btfss	3,2
  4094  0E58  2E67               	goto	l3033
  4095                           
  4096                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  4097  0E59  0324               	decf	getdata@dbitstatus,w
  4098  0E5A  0425               	iorwf	getdata@dbitstatus+1,w
  4099  0E5B  1D03               	btfss	3,2
  4100  0E5C  2E64               	goto	l3031
  4101                           
  4102                           ;decode_AX25.c: 289: rcv_state ++;
  4103  0E5D  3001               	movlw	1
  4104  0E5E  07E9               	addwf	_rcv_state,f
  4105  0E5F  1803               	skipnc
  4106  0E60  0AEA               	incf	_rcv_state+1,f
  4107  0E61  3000               	movlw	0
  4108  0E62  07EA               	addwf	_rcv_state+1,f
  4109                           
  4110                           ;decode_AX25.c: 290: break;
  4111  0E63  0008               	return
  4112  0E64                     l3031:	
  4113                           ;decode_AX25.c: 291: }else{
  4114                           
  4115                           
  4116                           ;decode_AX25.c: 292: dstuff = 0;
  4117  0E64  01A2               	clrf	getdata@dstuff
  4118  0E65  01A3               	clrf	getdata@dstuff+1
  4119                           
  4120                           ;decode_AX25.c: 293: }
  4121                           ;decode_AX25.c: 294: }else{
  4122  0E66  2E44               	goto	l3051
  4123  0E67                     l3033:	
  4124                           
  4125                           ;decode_AX25.c: 295: buf = buf >> 1;
  4126  0E67  0826               	movf	getdata@buf,w
  4127  0E68  00F6               	movwf	??_getdata
  4128  0E69  1003               	clrc
  4129  0E6A  0C76               	rrf	??_getdata,w
  4130  0E6B  00F7               	movwf	??_getdata+1
  4131  0E6C  0877               	movf	??_getdata+1,w
  4132  0E6D  00A6               	movwf	getdata@buf
  4133                           
  4134                           ;decode_AX25.c: 297: buf = buf | 0x00;
  4135  0E6E  0824               	movf	getdata@dbitstatus,w
  4136  0E6F  0425               	iorwf	getdata@dbitstatus+1,w
  4137  0E70  1D03               	btfss	3,2
  4138  0E71  2E75               	goto	l3037
  4139                           
  4140                           ;decode_AX25.c: 298: dstuff = 0;
  4141  0E72  01A2               	clrf	getdata@dstuff
  4142  0E73  01A3               	clrf	getdata@dstuff+1
  4143                           
  4144                           ;decode_AX25.c: 299: }else{
  4145  0E74  2E80               	goto	l3041
  4146  0E75                     l3037:	
  4147                           
  4148                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4149  0E75  0826               	movf	getdata@buf,w
  4150  0E76  3880               	iorlw	128
  4151  0E77  00F6               	movwf	??_getdata
  4152  0E78  0876               	movf	??_getdata,w
  4153  0E79  00A6               	movwf	getdata@buf
  4154                           
  4155                           ;decode_AX25.c: 301: dstuff ++;
  4156  0E7A  3001               	movlw	1
  4157  0E7B  07A2               	addwf	getdata@dstuff,f
  4158  0E7C  1803               	skipnc
  4159  0E7D  0AA3               	incf	getdata@dstuff+1,f
  4160  0E7E  3000               	movlw	0
  4161  0E7F  07A3               	addwf	getdata@dstuff+1,f
  4162  0E80                     l3041:	
  4163                           
  4164                           ;decode_AX25.c: 302: }
  4165                           ;decode_AX25.c: 303: bufstore_counter ++;
  4166  0E80  3001               	movlw	1
  4167  0E81  07A0               	addwf	getdata@bufstore_counter,f
  4168  0E82  1803               	skipnc
  4169  0E83  0AA1               	incf	getdata@bufstore_counter+1,f
  4170  0E84  3000               	movlw	0
  4171  0E85  07A1               	addwf	getdata@bufstore_counter+1,f
  4172                           
  4173                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4174  0E86  3008               	movlw	8
  4175  0E87  0620               	xorwf	getdata@bufstore_counter,w
  4176  0E88  0421               	iorwf	getdata@bufstore_counter+1,w
  4177  0E89  1D03               	btfss	3,2
  4178  0E8A  2E44               	goto	l3051
  4179                           
  4180                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4181  0E8B  01A0               	clrf	getdata@bufstore_counter
  4182  0E8C  01A1               	clrf	getdata@bufstore_counter+1
  4183                           
  4184                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4185  0E8D  0826               	movf	getdata@buf,w
  4186  0E8E  00F6               	movwf	??_getdata
  4187  0E8F  0867               	movf	_dPacketnum,w
  4188  0E90  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  4189  0E91  0084               	movwf	4
  4190  0E92  0876               	movf	??_getdata,w
  4191  0E93  1383               	bcf	3,7	;select IRP bank1
  4192  0E94  0080               	movwf	0
  4193                           
  4194                           ;decode_AX25.c: 307: dPacketnum ++;
  4195  0E95  3001               	movlw	1
  4196  0E96  07E7               	addwf	_dPacketnum,f
  4197  0E97  1803               	skipnc
  4198  0E98  0AE8               	incf	_dPacketnum+1,f
  4199  0E99  3000               	movlw	0
  4200  0E9A  07E8               	addwf	_dPacketnum+1,f
  4201  0E9B  2E44               	goto	l3051
  4202  0E9C                     __end_of_getdata:	
  4203                           
  4204                           	psect	text6
  4205  0CDB                     __ptext6:	
  4206 ;; *************** function _getbit *****************
  4207 ;; Defined at:
  4208 ;;		line 40 in file "decode_AX25.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;		None
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  i               2    4[COMMON] unsigned int 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  2    0[COMMON] unsigned int 
  4215 ;; Registers used:
  4216 ;;		wreg, status,2, status,0
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4222 ;;      Params:         2       0       0       0       0
  4223 ;;      Locals:         2       0       0       0       0
  4224 ;;      Temps:          2       0       0       0       0
  4225 ;;      Totals:         6       0       0       0       0
  4226 ;;Total ram usage:        6 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; This function calls:
  4229 ;;		Nothing
  4230 ;; This function is called by:
  4231 ;;		_waitFlag
  4232 ;;		_getdata
  4233 ;;		_conv_DI_UARTRX
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _getbit
  4239  0CDB                     _getbit:	
  4240                           
  4241                           ;decode_AX25.c: 41: static UINT oldbit;
  4242                           ;decode_AX25.c: 42: oldbit = RB5;
  4243                           
  4244                           ;incstack = 0
  4245                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4246  0CDB  1003               	clrc
  4247  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  4248  0CDD  1303               	bcf	3,6	;RP1=0, select bank0
  4249  0CDE  1A86               	btfsc	6,5	;volatile
  4250  0CDF  1403               	setc
  4251  0CE0  3000               	movlw	0
  4252  0CE1  1803               	skipnc
  4253  0CE2  3001               	movlw	1
  4254  0CE3  00F2               	movwf	??_getbit
  4255  0CE4  01F3               	clrf	??_getbit+1
  4256  0CE5  0872               	movf	??_getbit,w
  4257  0CE6  1683               	bsf	3,5	;RP0=1, select bank1
  4258  0CE7  1303               	bcf	3,6	;RP1=0, select bank1
  4259  0CE8  00DD               	movwf	getbit@oldbit^(0+128)
  4260  0CE9  0873               	movf	??_getbit+1,w
  4261  0CEA  00DE               	movwf	(getbit@oldbit+1)^(0+128)
  4262                           
  4263                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4264  0CEB  01F4               	clrf	getbit@i
  4265  0CEC  01F5               	clrf	getbit@i+1
  4266  0CED  3000               	movlw	0
  4267  0CEE  0275               	subwf	getbit@i+1,w
  4268  0CEF  303E               	movlw	62
  4269  0CF0  1903               	skipnz
  4270  0CF1  0274               	subwf	getbit@i,w
  4271  0CF2  1803               	btfsc	3,0
  4272  0CF3  2D22               	goto	l2497
  4273                           
  4274                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4275  0CF4  1003               	clrc
  4276  0CF5                     L7:	
  4277  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  4278  0CF6  1A86               	btfsc	6,5	;volatile
  4279  0CF7  1403               	setc
  4280  0CF8  3000               	movlw	0
  4281  0CF9  1803               	skipnc
  4282  0CFA  3001               	movlw	1
  4283  0CFB  00F2               	movwf	??_getbit
  4284  0CFC  01F3               	clrf	??_getbit+1
  4285  0CFD  1683               	bsf	3,5	;RP0=1, select bank1
  4286  0CFE  1303               	bcf	3,6	;RP1=0, select bank1
  4287  0CFF  085E               	movf	(getbit@oldbit+1)^(0+128),w
  4288  0D00  0673               	xorwf	??_getbit+1,w
  4289  0D01  1D03               	skipz
  4290  0D02  2D05               	goto	u1775
  4291  0D03  085D               	movf	getbit@oldbit^(0+128),w
  4292  0D04  0672               	xorwf	??_getbit,w
  4293  0D05                     u1775:	
  4294  0D05  1903               	skipnz
  4295  0D06  2D15               	goto	l2495
  4296                           
  4297                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4298  0D07  30C7               	movlw	199
  4299  0D08  00F2               	movwf	??_getbit
  4300  0D09                     u3517:	
  4301  0D09  2D0A               	nop2
  4302  0D0A  0BF2               	decfsz	??_getbit,f
  4303  0D0B  2D09               	goto	u3517
  4304  0D0C  2D0D               	nop2
  4305  0D0D  2D0E               	nop2
  4306                           
  4307                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4308  0D0E  3004               	movlw	4
  4309  0D0F  1283               	bcf	3,5	;RP0=0, select bank0
  4310  0D10  1303               	bcf	3,6	;RP1=0, select bank0
  4311  0D11  0687               	xorwf	7,f
  4312                           
  4313                           ;decode_AX25.c: 47: return 0;
  4314  0D12  01F0               	clrf	?_getbit
  4315  0D13  01F1               	clrf	?_getbit+1
  4316  0D14  0008               	return
  4317  0D15                     l2495:	
  4318  0D15  3001               	movlw	1
  4319  0D16  07F4               	addwf	getbit@i,f
  4320  0D17  1803               	skipnc
  4321  0D18  0AF5               	incf	getbit@i+1,f
  4322  0D19  3000               	movlw	0
  4323  0D1A  07F5               	addwf	getbit@i+1,f
  4324  0D1B  3000               	movlw	0
  4325  0D1C  0275               	subwf	getbit@i+1,w
  4326  0D1D  303E               	movlw	62
  4327  0D1E  1903               	skipnz
  4328  0D1F  0274               	subwf	getbit@i,w
  4329  0D20  1C03               	skipc
  4330  0D21  2CF5               	goto	L7
  4331  0D22                     l2497:	
  4332                           
  4333                           ;decode_AX25.c: 48: }
  4334                           ;decode_AX25.c: 49: }
  4335                           ;decode_AX25.c: 50: return 1;
  4336  0D22  3001               	movlw	1
  4337  0D23  00F0               	movwf	?_getbit
  4338  0D24  3000               	movlw	0
  4339  0D25  00F1               	movwf	?_getbit+1
  4340  0D26  0008               	return
  4341  0D27                     __end_of_getbit:	
  4342                           
  4343                           	psect	text7
  4344  0F7E                     __ptext7:	
  4345 ;; *************** function _fcscheck *****************
  4346 ;; Defined at:
  4347 ;;		line 313 in file "decode_AX25.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;		None
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;  i               2    7[COMMON] unsigned int 
  4352 ;;  i               2    5[COMMON] unsigned int 
  4353 ;;  byte            1    9[COMMON] unsigned char 
  4354 ;;  bt              1    4[COMMON] unsigned char 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  2    0[COMMON] unsigned int 
  4357 ;; Registers used:
  4358 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4364 ;;      Params:         2       0       0       0       0
  4365 ;;      Locals:         6       0       0       0       0
  4366 ;;      Temps:          2       0       0       0       0
  4367 ;;      Totals:        10       0       0       0       0
  4368 ;;Total ram usage:       10 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		_ReceivePacket_data
  4374 ;;		_ReceivePacket
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           
  4379                           ;psect for function _fcscheck
  4380  0F7E                     _fcscheck:	
  4381                           
  4382                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4383                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4384                           
  4385                           ;incstack = 0
  4386                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4387  0F7E  30FF               	movlw	255
  4388  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  4389  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  4390  0F81  00EE               	movwf	_dfcshi
  4391  0F82  00F2               	movwf	??_fcscheck
  4392  0F83  0872               	movf	??_fcscheck,w
  4393  0F84  00ED               	movwf	_dfcslo
  4394                           
  4395                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4396  0F85  3003               	movlw	3
  4397  0F86  0669               	xorwf	_rcv_state,w
  4398  0F87  046A               	iorwf	_rcv_state+1,w
  4399  0F88  1D03               	btfss	3,2
  4400  0F89  0008               	return
  4401                           
  4402                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4403  0F8A  01F5               	clrf	fcscheck@i
  4404  0F8B  01F6               	clrf	fcscheck@i+1
  4405  0F8C                     l3079:	
  4406  0F8C  0867               	movf	_dPacketnum,w
  4407  0F8D  3EFE               	addlw	254
  4408  0F8E  00F2               	movwf	??_fcscheck
  4409  0F8F  0868               	movf	_dPacketnum+1,w
  4410  0F90  1803               	skipnc
  4411  0F91  3E01               	addlw	1
  4412  0F92  3EFF               	addlw	255
  4413  0F93  00F3               	movwf	??_fcscheck+1
  4414  0F94  0873               	movf	??_fcscheck+1,w
  4415  0F95  0276               	subwf	fcscheck@i+1,w
  4416  0F96  1D03               	skipz
  4417  0F97  2F9A               	goto	u2645
  4418  0F98  0872               	movf	??_fcscheck,w
  4419  0F99  0275               	subwf	fcscheck@i,w
  4420  0F9A                     u2645:	
  4421  0F9A  1803               	btfsc	3,0
  4422  0F9B  2FE5               	goto	l279
  4423                           
  4424                           ;decode_AX25.c: 318: byte = dPacket[i];
  4425  0F9C  0875               	movf	fcscheck@i,w
  4426  0F9D  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  4427  0F9E  0084               	movwf	4
  4428  0F9F  1383               	bcf	3,7	;select IRP bank1
  4429  0FA0  0800               	movf	0,w
  4430  0FA1  00F2               	movwf	??_fcscheck
  4431  0FA2  0872               	movf	??_fcscheck,w
  4432  0FA3  00F9               	movwf	fcscheck@byte
  4433                           
  4434                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4435  0FA4  01F7               	clrf	fcscheck@i_149
  4436  0FA5  01F8               	clrf	fcscheck@i_149+1
  4437  0FA6  3000               	movlw	0
  4438  0FA7  0278               	subwf	fcscheck@i_149+1,w
  4439  0FA8  3008               	movlw	8
  4440  0FA9  1903               	skipnz
  4441  0FAA  0277               	subwf	fcscheck@i_149,w
  4442  0FAB  1803               	btfsc	3,0
  4443  0FAC  2FDE               	goto	l3077
  4444  0FAD                     l3065:	
  4445                           
  4446                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4447  0FAD  0879               	movf	fcscheck@byte,w
  4448  0FAE  3901               	andlw	1
  4449  0FAF  00F2               	movwf	??_fcscheck
  4450  0FB0  0872               	movf	??_fcscheck,w
  4451  0FB1  00F4               	movwf	fcscheck@bt
  4452  0FB2  1003               	bcf	3,0	;# 
  4453  0FB3  0CEE               	rrf	_dfcshi,f	;# 
  4454  0FB4  0CED               	rrf	_dfcslo,f	;# 
  4455                           
  4456                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4457  0FB5  3001               	movlw	1
  4458  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  4459  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  4460  0FB8  0503               	andwf	3,w	;volatile
  4461  0FB9  00F2               	movwf	??_fcscheck
  4462  0FBA  0874               	movf	fcscheck@bt,w
  4463  0FBB  0672               	xorwf	??_fcscheck,w
  4464  0FBC  00F3               	movwf	??_fcscheck+1
  4465  0FBD  0373               	decf	??_fcscheck+1,w
  4466  0FBE  1D03               	btfss	3,2
  4467  0FBF  2FCA               	goto	l3071
  4468                           
  4469                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4470  0FC0  086E               	movf	_dfcshi,w
  4471  0FC1  3A84               	xorlw	132
  4472  0FC2  00F2               	movwf	??_fcscheck
  4473  0FC3  0872               	movf	??_fcscheck,w
  4474  0FC4  00EE               	movwf	_dfcshi
  4475                           
  4476                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4477  0FC5  086D               	movf	_dfcslo,w
  4478  0FC6  3A08               	xorlw	8
  4479  0FC7  00F2               	movwf	??_fcscheck
  4480  0FC8  0872               	movf	??_fcscheck,w
  4481  0FC9  00ED               	movwf	_dfcslo
  4482  0FCA                     l3071:	
  4483                           
  4484                           ;decode_AX25.c: 329: }
  4485                           ;decode_AX25.c: 330: byte = byte >> 1;
  4486  0FCA  0879               	movf	fcscheck@byte,w
  4487  0FCB  00F2               	movwf	??_fcscheck
  4488  0FCC  1003               	clrc
  4489  0FCD  0C72               	rrf	??_fcscheck,w
  4490  0FCE  00F3               	movwf	??_fcscheck+1
  4491  0FCF  0873               	movf	??_fcscheck+1,w
  4492  0FD0  00F9               	movwf	fcscheck@byte
  4493  0FD1  3001               	movlw	1
  4494  0FD2  07F7               	addwf	fcscheck@i_149,f
  4495  0FD3  1803               	skipnc
  4496  0FD4  0AF8               	incf	fcscheck@i_149+1,f
  4497  0FD5  3000               	movlw	0
  4498  0FD6  07F8               	addwf	fcscheck@i_149+1,f
  4499  0FD7  3000               	movlw	0
  4500  0FD8  0278               	subwf	fcscheck@i_149+1,w
  4501  0FD9  3008               	movlw	8
  4502  0FDA  1903               	skipnz
  4503  0FDB  0277               	subwf	fcscheck@i_149,w
  4504  0FDC  1C03               	skipc
  4505  0FDD  2FAD               	goto	l3065
  4506  0FDE                     l3077:	
  4507  0FDE  3001               	movlw	1
  4508  0FDF  07F5               	addwf	fcscheck@i,f
  4509  0FE0  1803               	skipnc
  4510  0FE1  0AF6               	incf	fcscheck@i+1,f
  4511  0FE2  3000               	movlw	0
  4512  0FE3  07F6               	addwf	fcscheck@i+1,f
  4513  0FE4  2F8C               	goto	l3079
  4514  0FE5                     l279:	
  4515                           
  4516                           ;decode_AX25.c: 331: }
  4517                           ;decode_AX25.c: 332: }
  4518                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4519  0FE5  09ED               	comf	_dfcslo,f
  4520                           
  4521                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4522  0FE6  09EE               	comf	_dfcshi,f
  4523                           
  4524                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4525  0FE7  0867               	movf	_dPacketnum,w
  4526  0FE8  3EFE               	addlw	254
  4527  0FE9  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  4528  0FEA  0084               	movwf	4
  4529  0FEB  1383               	bcf	3,7	;select IRP bank1
  4530  0FEC  0800               	movf	0,w
  4531  0FED  066D               	xorwf	_dfcslo,w
  4532  0FEE  1D03               	skipz
  4533  0FEF  2FFD               	goto	l3091
  4534  0FF0  0867               	movf	_dPacketnum,w
  4535  0FF1  3EFF               	addlw	255
  4536  0FF2  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  4537  0FF3  0084               	movwf	4
  4538  0FF4  0800               	movf	0,w
  4539  0FF5  066E               	xorwf	_dfcshi,w
  4540  0FF6  1D03               	skipz
  4541  0FF7  2FFD               	goto	l3091
  4542                           
  4543                           ;decode_AX25.c: 342: return 1;
  4544  0FF8  3001               	movlw	1
  4545  0FF9  00F0               	movwf	?_fcscheck
  4546  0FFA  3000               	movlw	0
  4547  0FFB  00F1               	movwf	?_fcscheck+1
  4548  0FFC  0008               	return
  4549  0FFD                     l3091:	
  4550                           ;decode_AX25.c: 343: }else{
  4551                           
  4552                           
  4553                           ;decode_AX25.c: 348: return 0;
  4554  0FFD  01F0               	clrf	?_fcscheck
  4555  0FFE  01F1               	clrf	?_fcscheck+1
  4556  0FFF  0008               	return
  4557  1000                     __end_of_fcscheck:	
  4558                           
  4559                           	psect	text8
  4560  0A96                     __ptext8:	
  4561 ;; *************** function _NM_waddress *****************
  4562 ;; Defined at:
  4563 ;;		line 72 in file "UART.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;  NM_wad_heade    1    wreg     unsigned char 
  4566 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4567 ;;  wlow_address    1    2[COMMON] unsigned char 
  4568 ;; Auto vars:     Size  Location     Type
  4569 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4570 ;; Return value:  Size  Location     Type
  4571 ;;                  1    wreg      void 
  4572 ;; Registers used:
  4573 ;;		wreg, status,2, status,0, pclath, cstack
  4574 ;; Tracked objects:
  4575 ;;		On entry : 0/0
  4576 ;;		On exit  : 0/0
  4577 ;;		Unchanged: 0/0
  4578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4579 ;;      Params:         2       0       0       0       0
  4580 ;;      Locals:         1       0       0       0       0
  4581 ;;      Temps:          0       0       0       0       0
  4582 ;;      Totals:         3       0       0       0       0
  4583 ;;Total ram usage:        3 bytes
  4584 ;; Hardware stack levels used:    1
  4585 ;; Hardware stack levels required when called:    1
  4586 ;; This function calls:
  4587 ;;		_putch
  4588 ;; This function is called by:
  4589 ;;		_main
  4590 ;; This function uses a non-reentrant model
  4591 ;;
  4592                           
  4593                           
  4594                           ;psect for function _NM_waddress
  4595  0A96                     _NM_waddress:	
  4596                           
  4597                           ;incstack = 0
  4598                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4599                           ;NM_waddress@NM_wad_header stored from wreg
  4600  0A96  00F3               	movwf	NM_waddress@NM_wad_header
  4601                           
  4602                           ;UART.c: 73: putch(NM_wad_header);
  4603  0A97  0873               	movf	NM_waddress@NM_wad_header,w
  4604  0A98  120A  158A  2269  120A  158A  	fcall	_putch
  4605                           
  4606                           ;UART.c: 74: putch(whigh_address);
  4607  0A9D  0871               	movf	NM_waddress@whigh_address,w
  4608  0A9E  120A  158A  2269  120A  158A  	fcall	_putch
  4609                           
  4610                           ;UART.c: 75: putch(wlow_address);
  4611  0AA3  0872               	movf	NM_waddress@wlow_address,w
  4612  0AA4  120A  158A  2269   	fcall	_putch
  4613  0AA7  0008               	return
  4614  0AA8                     __end_of_NM_waddress:	
  4615                           
  4616                           	psect	text9
  4617  0A69                     __ptext9:	
  4618 ;; *************** function _putch *****************
  4619 ;; Defined at:
  4620 ;;		line 39 in file "UART.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;  byte            1    wreg     unsigned char 
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;  byte            1    0[COMMON] unsigned char 
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  1    wreg      void 
  4627 ;; Registers used:
  4628 ;;		wreg
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4634 ;;      Params:         0       0       0       0       0
  4635 ;;      Locals:         1       0       0       0       0
  4636 ;;      Temps:          0       0       0       0       0
  4637 ;;      Totals:         1       0       0       0       0
  4638 ;;Total ram usage:        1 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; This function calls:
  4641 ;;		Nothing
  4642 ;; This function is called by:
  4643 ;;		_NM_waddress
  4644 ;;		_TXOBC_waddress
  4645 ;;		_putstr
  4646 ;;		_putcrlf
  4647 ;;		_put_error
  4648 ;;		_put_ok
  4649 ;;		_putAX25
  4650 ;;		_conv_DI_UARTRX
  4651 ;;		_test_Packetmaker
  4652 ;;		_EEPROM_Read
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           
  4657                           ;psect for function _putch
  4658  0A69                     _putch:	
  4659                           
  4660                           ;incstack = 0
  4661                           ; Regs used in _putch: [wreg]
  4662                           ;putch@byte stored from wreg
  4663  0A69  00F0               	movwf	putch@byte
  4664  0A6A                     l69:	
  4665                           ;UART.c: 40: while(!TXIF);
  4666                           
  4667  0A6A  1283               	bcf	3,5	;RP0=0, select bank0
  4668  0A6B  1303               	bcf	3,6	;RP1=0, select bank0
  4669  0A6C  1E0C               	btfss	12,4	;volatile
  4670  0A6D  2A6A               	goto	l69
  4671                           
  4672                           ;UART.c: 41: TXREG = byte;
  4673  0A6E  0870               	movf	putch@byte,w
  4674  0A6F  0099               	movwf	25	;volatile
  4675  0A70  0008               	return
  4676  0A71                     __end_of_putch:	
  4677                           
  4678                           	psect	text10
  4679  0ABD                     __ptext10:	
  4680 ;; *************** function _Init_SERIAL *****************
  4681 ;; Defined at:
  4682 ;;		line 6 in file "UART.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;		None
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;		None
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  1    wreg      void 
  4689 ;; Registers used:
  4690 ;;		wreg
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4696 ;;      Params:         0       0       0       0       0
  4697 ;;      Locals:         0       0       0       0       0
  4698 ;;      Temps:          0       0       0       0       0
  4699 ;;      Totals:         0       0       0       0       0
  4700 ;;Total ram usage:        0 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_main
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           
  4710                           ;psect for function _Init_SERIAL
  4711  0ABD                     _Init_SERIAL:	
  4712                           
  4713                           ;UART.c: 7: SPBRG = 10;
  4714                           
  4715                           ;incstack = 0
  4716                           ; Regs used in _Init_SERIAL: [wreg]
  4717  0ABD  300A               	movlw	10
  4718  0ABE  1683               	bsf	3,5	;RP0=1, select bank1
  4719  0ABF  1303               	bcf	3,6	;RP1=0, select bank1
  4720  0AC0  0099               	movwf	25	;volatile
  4721                           
  4722                           ;UART.c: 8: BRGH = 0;
  4723  0AC1  1118               	bcf	24,2	;volatile
  4724                           
  4725                           ;UART.c: 9: SYNC = 0;
  4726  0AC2  1218               	bcf	24,4	;volatile
  4727                           
  4728                           ;UART.c: 10: SPEN = 1;
  4729  0AC3  1283               	bcf	3,5	;RP0=0, select bank0
  4730  0AC4  1303               	bcf	3,6	;RP1=0, select bank0
  4731  0AC5  1798               	bsf	24,7	;volatile
  4732                           
  4733                           ;UART.c: 11: CREN = 1;
  4734  0AC6  1618               	bsf	24,4	;volatile
  4735                           
  4736                           ;UART.c: 12: SREN = 0;
  4737  0AC7  1298               	bcf	24,5	;volatile
  4738                           
  4739                           ;UART.c: 13: RCIF = 0;
  4740  0AC8  128C               	bcf	12,5	;volatile
  4741                           
  4742                           ;UART.c: 14: TXIE = 0;
  4743  0AC9  1683               	bsf	3,5	;RP0=1, select bank1
  4744  0ACA  1303               	bcf	3,6	;RP1=0, select bank1
  4745  0ACB  120C               	bcf	12,4	;volatile
  4746                           
  4747                           ;UART.c: 15: RCIE = 1;
  4748  0ACC  168C               	bsf	12,5	;volatile
  4749                           
  4750                           ;UART.c: 16: TX9 = 0;
  4751  0ACD  1318               	bcf	24,6	;volatile
  4752                           
  4753                           ;UART.c: 17: RX9 = 0;
  4754  0ACE  1283               	bcf	3,5	;RP0=0, select bank0
  4755  0ACF  1303               	bcf	3,6	;RP1=0, select bank0
  4756  0AD0  1318               	bcf	24,6	;volatile
  4757                           
  4758                           ;UART.c: 18: TXEN = 0;
  4759  0AD1  1683               	bsf	3,5	;RP0=1, select bank1
  4760  0AD2  1303               	bcf	3,6	;RP1=0, select bank1
  4761  0AD3  1298               	bcf	24,5	;volatile
  4762                           
  4763                           ;UART.c: 19: TXEN = 1;
  4764  0AD4  1698               	bsf	24,5	;volatile
  4765  0AD5  0008               	return
  4766  0AD6                     __end_of_Init_SERIAL:	
  4767                           
  4768                           	psect	text11
  4769  0AEF                     __ptext11:	
  4770 ;; *************** function _Init_MPU *****************
  4771 ;; Defined at:
  4772 ;;		line 8 in file "Init_MPU.c"
  4773 ;; Parameters:    Size  Location     Type
  4774 ;;		None
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;		None
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  1    wreg      void 
  4779 ;; Registers used:
  4780 ;;		wreg, status,2
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4786 ;;      Params:         0       0       0       0       0
  4787 ;;      Locals:         0       0       0       0       0
  4788 ;;      Temps:          0       0       0       0       0
  4789 ;;      Totals:         0       0       0       0       0
  4790 ;;Total ram usage:        0 bytes
  4791 ;; Hardware stack levels used:    1
  4792 ;; This function calls:
  4793 ;;		Nothing
  4794 ;; This function is called by:
  4795 ;;		_main
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           
  4800                           ;psect for function _Init_MPU
  4801  0AEF                     _Init_MPU:	
  4802                           
  4803                           ;Init_MPU.c: 11: PORTA = 0x00;
  4804                           
  4805                           ;incstack = 0
  4806                           ; Regs used in _Init_MPU: [wreg+status,2]
  4807  0AEF  1283               	bcf	3,5	;RP0=0, select bank0
  4808  0AF0  1303               	bcf	3,6	;RP1=0, select bank0
  4809  0AF1  0185               	clrf	5	;volatile
  4810                           
  4811                           ;Init_MPU.c: 12: PORTB = 0x00;
  4812  0AF2  0186               	clrf	6	;volatile
  4813                           
  4814                           ;Init_MPU.c: 13: PORTC = 0x00;
  4815  0AF3  0187               	clrf	7	;volatile
  4816                           
  4817                           ;Init_MPU.c: 14: PORTD = 0x00;
  4818  0AF4  0188               	clrf	8	;volatile
  4819                           
  4820                           ;Init_MPU.c: 15: PORTE = 0x00;
  4821  0AF5  0189               	clrf	9	;volatile
  4822                           
  4823                           ;Init_MPU.c: 18: ANSEL = 0x00;
  4824  0AF6  1683               	bsf	3,5	;RP0=1, select bank3
  4825  0AF7  1703               	bsf	3,6	;RP1=1, select bank3
  4826  0AF8  0188               	clrf	8	;volatile
  4827                           
  4828                           ;Init_MPU.c: 19: ANSELH = 0x00;
  4829  0AF9  0189               	clrf	9	;volatile
  4830                           
  4831                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  4832  0AFA  3080               	movlw	128
  4833  0AFB  1683               	bsf	3,5	;RP0=1, select bank1
  4834  0AFC  1303               	bcf	3,6	;RP1=0, select bank1
  4835  0AFD  0085               	movwf	5	;volatile
  4836                           
  4837                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  4838  0AFE  3020               	movlw	32
  4839  0AFF  0086               	movwf	6	;volatile
  4840                           
  4841                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  4842  0B00  3098               	movlw	152
  4843  0B01  0087               	movwf	7	;volatile
  4844                           
  4845                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  4846  0B02  0188               	clrf	8	;volatile
  4847                           
  4848                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  4849  0B03  0189               	clrf	9	;volatile
  4850                           
  4851                           ;Init_MPU.c: 30: PORTA = 0x00;
  4852  0B04  1283               	bcf	3,5	;RP0=0, select bank0
  4853  0B05  1303               	bcf	3,6	;RP1=0, select bank0
  4854  0B06  0185               	clrf	5	;volatile
  4855                           
  4856                           ;Init_MPU.c: 31: PORTB = 0x00;
  4857  0B07  0186               	clrf	6	;volatile
  4858                           
  4859                           ;Init_MPU.c: 32: PORTC = 0x00;
  4860  0B08  0187               	clrf	7	;volatile
  4861                           
  4862                           ;Init_MPU.c: 33: PORTD = 0x00;
  4863  0B09  0188               	clrf	8	;volatile
  4864                           
  4865                           ;Init_MPU.c: 34: PORTE = 0x00;
  4866  0B0A  0189               	clrf	9	;volatile
  4867  0B0B  0008               	return
  4868  0B0C                     __end_of_Init_MPU:	
  4869                           
  4870                           	psect	text12
  4871  0BE1                     __ptext12:	
  4872 ;; *************** function _Init_I2C_M *****************
  4873 ;; Defined at:
  4874 ;;		line 8 in file "I2C.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;  c               4    0[BANK0 ] const unsigned long 
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;		None
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  1    wreg      void 
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0, pclath, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4888 ;;      Params:         0       4       0       0       0
  4889 ;;      Locals:         0       0       0       0       0
  4890 ;;      Temps:          0       4       0       0       0
  4891 ;;      Totals:         0       8       0       0       0
  4892 ;;Total ram usage:        8 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    1
  4895 ;; This function calls:
  4896 ;;		___lldiv
  4897 ;; This function is called by:
  4898 ;;		_main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _Init_I2C_M
  4904  0BE1                     _Init_I2C_M:	
  4905                           
  4906                           ;I2C.c: 9: SSPCON = 0b00101000;
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  4910  0BE1  3028               	movlw	40
  4911  0BE2  1283               	bcf	3,5	;RP0=0, select bank0
  4912  0BE3  1303               	bcf	3,6	;RP1=0, select bank0
  4913  0BE4  0094               	movwf	20	;volatile
  4914                           
  4915                           ;I2C.c: 10: SSPCON2 = 0;
  4916  0BE5  1683               	bsf	3,5	;RP0=1, select bank1
  4917  0BE6  1303               	bcf	3,6	;RP1=0, select bank1
  4918  0BE7  0191               	clrf	17	;volatile
  4919                           
  4920                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  4921  0BE8  1283               	bcf	3,5	;RP0=0, select bank0
  4922  0BE9  1303               	bcf	3,6	;RP1=0, select bank0
  4923  0BEA  0820               	movf	Init_I2C_M@c,w
  4924  0BEB  00A4               	movwf	??_Init_I2C_M
  4925  0BEC  0821               	movf	Init_I2C_M@c+1,w
  4926  0BED  00A5               	movwf	??_Init_I2C_M+1
  4927  0BEE  0822               	movf	Init_I2C_M@c+2,w
  4928  0BEF  00A6               	movwf	??_Init_I2C_M+2
  4929  0BF0  0823               	movf	Init_I2C_M@c+3,w
  4930  0BF1  00A7               	movwf	??_Init_I2C_M+3
  4931  0BF2  3002               	movlw	2
  4932  0BF3                     u3005:	
  4933  0BF3  1003               	clrc
  4934  0BF4  0DA4               	rlf	??_Init_I2C_M,f
  4935  0BF5  0DA5               	rlf	??_Init_I2C_M+1,f
  4936  0BF6  0DA6               	rlf	??_Init_I2C_M+2,f
  4937  0BF7  0DA7               	rlf	??_Init_I2C_M+3,f
  4938  0BF8  3EFF               	addlw	-1
  4939  0BF9  1D03               	skipz
  4940  0BFA  2BF3               	goto	u3005
  4941  0BFB  0827               	movf	??_Init_I2C_M+3,w
  4942  0BFC  00F3               	movwf	___lldiv@divisor+3
  4943  0BFD  0826               	movf	??_Init_I2C_M+2,w
  4944  0BFE  00F2               	movwf	___lldiv@divisor+2
  4945  0BFF  0825               	movf	??_Init_I2C_M+1,w
  4946  0C00  00F1               	movwf	___lldiv@divisor+1
  4947  0C01  0824               	movf	??_Init_I2C_M,w
  4948  0C02  00F0               	movwf	___lldiv@divisor
  4949  0C03  3000               	movlw	0
  4950  0C04  00F7               	movwf	___lldiv@dividend+3
  4951  0C05  3098               	movlw	152
  4952  0C06  00F6               	movwf	___lldiv@dividend+2
  4953  0C07  3096               	movlw	150
  4954  0C08  00F5               	movwf	___lldiv@dividend+1
  4955  0C09  3080               	movlw	128
  4956  0C0A  00F4               	movwf	___lldiv@dividend
  4957  0C0B  120A  158A  25DD   	fcall	___lldiv
  4958  0C0E  0870               	movf	?___lldiv,w
  4959  0C0F  3EFF               	addlw	255
  4960  0C10  1683               	bsf	3,5	;RP0=1, select bank1
  4961  0C11  1303               	bcf	3,6	;RP1=0, select bank1
  4962  0C12  0093               	movwf	19	;volatile
  4963                           
  4964                           ;I2C.c: 12: SSPSTAT = 0;
  4965  0C13  0194               	clrf	20	;volatile
  4966  0C14  0008               	return
  4967  0C15                     __end_of_Init_I2C_M:	
  4968                           
  4969                           	psect	text13
  4970  0DDD                     __ptext13:	
  4971 ;; *************** function ___lldiv *****************
  4972 ;; Defined at:
  4973 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  divisor         4    0[COMMON] unsigned long 
  4976 ;;  dividend        4    4[COMMON] unsigned long 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  quotient        4    9[COMMON] unsigned long 
  4979 ;;  counter         1   13[COMMON] unsigned char 
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  4    0[COMMON] unsigned long 
  4982 ;; Registers used:
  4983 ;;		wreg, status,2, status,0
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4989 ;;      Params:         8       0       0       0       0
  4990 ;;      Locals:         5       0       0       0       0
  4991 ;;      Temps:          1       0       0       0       0
  4992 ;;      Totals:        14       0       0       0       0
  4993 ;;Total ram usage:       14 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; This function calls:
  4996 ;;		Nothing
  4997 ;; This function is called by:
  4998 ;;		_Init_I2C_M
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           
  5003                           ;psect for function ___lldiv
  5004  0DDD                     ___lldiv:	
  5005                           
  5006                           ;incstack = 0
  5007                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5008  0DDD  3000               	movlw	0
  5009  0DDE  00FC               	movwf	___lldiv@quotient+3
  5010  0DDF  3000               	movlw	0
  5011  0DE0  00FB               	movwf	___lldiv@quotient+2
  5012  0DE1  3000               	movlw	0
  5013  0DE2  00FA               	movwf	___lldiv@quotient+1
  5014  0DE3  3000               	movlw	0
  5015  0DE4  00F9               	movwf	___lldiv@quotient
  5016  0DE5  0873               	movf	___lldiv@divisor+3,w
  5017  0DE6  0472               	iorwf	___lldiv@divisor+2,w
  5018  0DE7  0471               	iorwf	___lldiv@divisor+1,w
  5019  0DE8  0470               	iorwf	___lldiv@divisor,w
  5020  0DE9  1903               	skipnz
  5021  0DEA  2E32               	goto	l3223
  5022  0DEB  01FD               	clrf	___lldiv@counter
  5023  0DEC  0AFD               	incf	___lldiv@counter,f
  5024  0DED                     l3209:	
  5025  0DED  1BF3               	btfsc	___lldiv@divisor+3,7
  5026  0DEE  2DFD               	goto	l3211
  5027  0DEF  3001               	movlw	1
  5028  0DF0  00F8               	movwf	??___lldiv
  5029  0DF1                     u2855:	
  5030  0DF1  1003               	clrc
  5031  0DF2  0DF0               	rlf	___lldiv@divisor,f
  5032  0DF3  0DF1               	rlf	___lldiv@divisor+1,f
  5033  0DF4  0DF2               	rlf	___lldiv@divisor+2,f
  5034  0DF5  0DF3               	rlf	___lldiv@divisor+3,f
  5035  0DF6  0BF8               	decfsz	??___lldiv,f
  5036  0DF7  2DF1               	goto	u2855
  5037  0DF8  3001               	movlw	1
  5038  0DF9  00F8               	movwf	??___lldiv
  5039  0DFA  0878               	movf	??___lldiv,w
  5040  0DFB  07FD               	addwf	___lldiv@counter,f
  5041  0DFC  2DED               	goto	l3209
  5042  0DFD                     l3211:	
  5043  0DFD  3001               	movlw	1
  5044  0DFE  00F8               	movwf	??___lldiv
  5045  0DFF                     u2875:	
  5046  0DFF  1003               	clrc
  5047  0E00  0DF9               	rlf	___lldiv@quotient,f
  5048  0E01  0DFA               	rlf	___lldiv@quotient+1,f
  5049  0E02  0DFB               	rlf	___lldiv@quotient+2,f
  5050  0E03  0DFC               	rlf	___lldiv@quotient+3,f
  5051  0E04  0BF8               	decfsz	??___lldiv,f
  5052  0E05  2DFF               	goto	u2875
  5053  0E06  0873               	movf	___lldiv@divisor+3,w
  5054  0E07  0277               	subwf	___lldiv@dividend+3,w
  5055  0E08  1D03               	skipz
  5056  0E09  2E14               	goto	u2885
  5057  0E0A  0872               	movf	___lldiv@divisor+2,w
  5058  0E0B  0276               	subwf	___lldiv@dividend+2,w
  5059  0E0C  1D03               	skipz
  5060  0E0D  2E14               	goto	u2885
  5061  0E0E  0871               	movf	___lldiv@divisor+1,w
  5062  0E0F  0275               	subwf	___lldiv@dividend+1,w
  5063  0E10  1D03               	skipz
  5064  0E11  2E14               	goto	u2885
  5065  0E12  0870               	movf	___lldiv@divisor,w
  5066  0E13  0274               	subwf	___lldiv@dividend,w
  5067  0E14                     u2885:	
  5068  0E14  1C03               	skipc
  5069  0E15  2E25               	goto	l3219
  5070  0E16  0870               	movf	___lldiv@divisor,w
  5071  0E17  02F4               	subwf	___lldiv@dividend,f
  5072  0E18  0871               	movf	___lldiv@divisor+1,w
  5073  0E19  1C03               	skipc
  5074  0E1A  0F71               	incfsz	___lldiv@divisor+1,w
  5075  0E1B  02F5               	subwf	___lldiv@dividend+1,f
  5076  0E1C  0872               	movf	___lldiv@divisor+2,w
  5077  0E1D  1C03               	skipc
  5078  0E1E  0F72               	incfsz	___lldiv@divisor+2,w
  5079  0E1F  02F6               	subwf	___lldiv@dividend+2,f
  5080  0E20  0873               	movf	___lldiv@divisor+3,w
  5081  0E21  1C03               	skipc
  5082  0E22  0F73               	incfsz	___lldiv@divisor+3,w
  5083  0E23  02F7               	subwf	___lldiv@dividend+3,f
  5084  0E24  1479               	bsf	___lldiv@quotient,0
  5085  0E25                     l3219:	
  5086  0E25  3001               	movlw	1
  5087  0E26                     u2895:	
  5088  0E26  1003               	clrc
  5089  0E27  0CF3               	rrf	___lldiv@divisor+3,f
  5090  0E28  0CF2               	rrf	___lldiv@divisor+2,f
  5091  0E29  0CF1               	rrf	___lldiv@divisor+1,f
  5092  0E2A  0CF0               	rrf	___lldiv@divisor,f
  5093  0E2B  3EFF               	addlw	-1
  5094  0E2C  1D03               	skipz
  5095  0E2D  2E26               	goto	u2895
  5096  0E2E  3001               	movlw	1
  5097  0E2F  02FD               	subwf	___lldiv@counter,f
  5098  0E30  1D03               	btfss	3,2
  5099  0E31  2DFD               	goto	l3211
  5100  0E32                     l3223:	
  5101  0E32  087C               	movf	___lldiv@quotient+3,w
  5102  0E33  00F3               	movwf	?___lldiv+3
  5103  0E34  087B               	movf	___lldiv@quotient+2,w
  5104  0E35  00F2               	movwf	?___lldiv+2
  5105  0E36  087A               	movf	___lldiv@quotient+1,w
  5106  0E37  00F1               	movwf	?___lldiv+1
  5107  0E38  0879               	movf	___lldiv@quotient,w
  5108  0E39  00F0               	movwf	?___lldiv
  5109  0E3A  0008               	return
  5110  0E3B                     __end_of___lldiv:	
  5111                           
  5112                           	psect	text14
  5113  0B87                     __ptext14:	
  5114 ;; *************** function _FMTX *****************
  5115 ;; Defined at:
  5116 ;;		line 275 in file "FMCW.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  Nref            2   45[BANK0 ] int 
  5119 ;;  Nprg            2   47[BANK0 ] int 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  fmtx            2   49[BANK0 ] int 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5131 ;;      Params:         0       4       0       0       0
  5132 ;;      Locals:         0       2       0       0       0
  5133 ;;      Temps:          0       0       0       0       0
  5134 ;;      Totals:         0       6       0       0       0
  5135 ;;Total ram usage:        6 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    3
  5138 ;; This function calls:
  5139 ;;		_OPINIT
  5140 ;;		_OUTFQ
  5141 ;;		_RFDOUT
  5142 ;; This function is called by:
  5143 ;;		_main
  5144 ;;		_SetPLL
  5145 ;; This function uses a non-reentrant model
  5146 ;;
  5147                           
  5148                           
  5149                           ;psect for function _FMTX
  5150  0B87                     _FMTX:	
  5151                           
  5152                           ;FMCW.c: 276: int fmtx = 1;
  5153                           
  5154                           ;incstack = 0
  5155                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5156  0B87  3001               	movlw	1
  5157  0B88  1283               	bcf	3,5	;RP0=0, select bank0
  5158  0B89  1303               	bcf	3,6	;RP1=0, select bank0
  5159  0B8A  00D1               	movwf	FMTX@fmtx
  5160  0B8B  3000               	movlw	0
  5161  0B8C  00D2               	movwf	FMTX@fmtx+1
  5162                           
  5163                           ;FMCW.c: 277: OPINIT(fmtx);
  5164  0B8D  0852               	movf	FMTX@fmtx+1,w
  5165  0B8E  00F5               	movwf	OPINIT@fmcwtxrx+1
  5166  0B8F  0851               	movf	FMTX@fmtx,w
  5167  0B90  00F4               	movwf	OPINIT@fmcwtxrx
  5168  0B91  120A  158A  2701  120A  158A  	fcall	_OPINIT
  5169                           
  5170                           ;FMCW.c: 278: RFDOUT(fmtx, Nref);
  5171  0B96  1283               	bcf	3,5	;RP0=0, select bank0
  5172  0B97  1303               	bcf	3,6	;RP1=0, select bank0
  5173  0B98  0852               	movf	FMTX@fmtx+1,w
  5174  0B99  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5175  0B9A  0851               	movf	FMTX@fmtx,w
  5176  0B9B  00F9               	movwf	RFDOUT@fmcwtxrx
  5177  0B9C  084E               	movf	FMTX@Nref+1,w
  5178  0B9D  00FC               	movwf	RFDOUT@Nref+1
  5179  0B9E  084D               	movf	FMTX@Nref,w
  5180  0B9F  00FB               	movwf	RFDOUT@Nref
  5181  0BA0  120A  118A  200C  120A  158A  	fcall	_RFDOUT
  5182                           
  5183                           ;FMCW.c: 279: OUTFQ(fmtx, Nprg);
  5184  0BA5  1283               	bcf	3,5	;RP0=0, select bank0
  5185  0BA6  1303               	bcf	3,6	;RP1=0, select bank0
  5186  0BA7  0852               	movf	FMTX@fmtx+1,w
  5187  0BA8  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5188  0BA9  0851               	movf	FMTX@fmtx,w
  5189  0BAA  00F9               	movwf	OUTFQ@fmcwtxrx
  5190  0BAB  0850               	movf	FMTX@Nprg+1,w
  5191  0BAC  00FC               	movwf	OUTFQ@Nprg+1
  5192  0BAD  084F               	movf	FMTX@Nprg,w
  5193  0BAE  00FB               	movwf	OUTFQ@Nprg
  5194  0BAF  120A  118A  20ED   	fcall	_OUTFQ
  5195  0BB2  0008               	return
  5196  0BB3                     __end_of_FMTX:	
  5197                           
  5198                           	psect	text15
  5199  0B5B                     __ptext15:	
  5200 ;; *************** function _FMRX *****************
  5201 ;; Defined at:
  5202 ;;		line 303 in file "FMCW.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;  Nref            2   45[BANK0 ] int 
  5205 ;;  Nprg            2   47[BANK0 ] int 
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;  fmrx            2   49[BANK0 ] int 
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  1    wreg      void 
  5210 ;; Registers used:
  5211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5217 ;;      Params:         0       4       0       0       0
  5218 ;;      Locals:         0       2       0       0       0
  5219 ;;      Temps:          0       0       0       0       0
  5220 ;;      Totals:         0       6       0       0       0
  5221 ;;Total ram usage:        6 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:    3
  5224 ;; This function calls:
  5225 ;;		_OPINIT
  5226 ;;		_OUTFQ
  5227 ;;		_RFDOUT
  5228 ;; This function is called by:
  5229 ;;		_main
  5230 ;;		_SetPLL
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           
  5235                           ;psect for function _FMRX
  5236  0B5B                     _FMRX:	
  5237                           
  5238                           ;FMCW.c: 304: int fmrx = 3;
  5239                           
  5240                           ;incstack = 0
  5241                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5242  0B5B  3003               	movlw	3
  5243  0B5C  1283               	bcf	3,5	;RP0=0, select bank0
  5244  0B5D  1303               	bcf	3,6	;RP1=0, select bank0
  5245  0B5E  00D1               	movwf	FMRX@fmrx
  5246  0B5F  3000               	movlw	0
  5247  0B60  00D2               	movwf	FMRX@fmrx+1
  5248                           
  5249                           ;FMCW.c: 305: OPINIT(fmrx);
  5250  0B61  0852               	movf	FMRX@fmrx+1,w
  5251  0B62  00F5               	movwf	OPINIT@fmcwtxrx+1
  5252  0B63  0851               	movf	FMRX@fmrx,w
  5253  0B64  00F4               	movwf	OPINIT@fmcwtxrx
  5254  0B65  120A  158A  2701  120A  158A  	fcall	_OPINIT
  5255                           
  5256                           ;FMCW.c: 306: RFDOUT(fmrx, Nref);
  5257  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  5258  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
  5259  0B6C  0852               	movf	FMRX@fmrx+1,w
  5260  0B6D  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5261  0B6E  0851               	movf	FMRX@fmrx,w
  5262  0B6F  00F9               	movwf	RFDOUT@fmcwtxrx
  5263  0B70  084E               	movf	FMRX@Nref+1,w
  5264  0B71  00FC               	movwf	RFDOUT@Nref+1
  5265  0B72  084D               	movf	FMRX@Nref,w
  5266  0B73  00FB               	movwf	RFDOUT@Nref
  5267  0B74  120A  118A  200C  120A  158A  	fcall	_RFDOUT
  5268                           
  5269                           ;FMCW.c: 307: OUTFQ(fmrx, Nprg);
  5270  0B79  1283               	bcf	3,5	;RP0=0, select bank0
  5271  0B7A  1303               	bcf	3,6	;RP1=0, select bank0
  5272  0B7B  0852               	movf	FMRX@fmrx+1,w
  5273  0B7C  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5274  0B7D  0851               	movf	FMRX@fmrx,w
  5275  0B7E  00F9               	movwf	OUTFQ@fmcwtxrx
  5276  0B7F  0850               	movf	FMRX@Nprg+1,w
  5277  0B80  00FC               	movwf	OUTFQ@Nprg+1
  5278  0B81  084F               	movf	FMRX@Nprg,w
  5279  0B82  00FB               	movwf	OUTFQ@Nprg
  5280  0B83  120A  118A  20ED   	fcall	_OUTFQ
  5281  0B86  0008               	return
  5282  0B87                     __end_of_FMRX:	
  5283                           
  5284                           	psect	text16
  5285  0D80                     __ptext16:	
  5286 ;; *************** function _EEPROM_Write *****************
  5287 ;; Defined at:
  5288 ;;		line 51 in file "I2C.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  EEPROM_addre    1    wreg     unsigned char 
  5291 ;;  high_address    1    2[COMMON] unsigned char 
  5292 ;;  low_address     1    3[COMMON] unsigned char 
  5293 ;;  data            1    4[COMMON] PTR unsigned char 
  5294 ;;		 -> NULL(0), dData(16), 
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5297 ;;  Address         1    9[COMMON] unsigned char 
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  1    wreg      void 
  5300 ;; Registers used:
  5301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5307 ;;      Params:         3       0       0       0       0
  5308 ;;      Locals:         2       0       0       0       0
  5309 ;;      Temps:          3       0       0       0       0
  5310 ;;      Totals:         8       0       0       0       0
  5311 ;;Total ram usage:        8 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    2
  5314 ;; This function calls:
  5315 ;;		_I2C_Master_Start
  5316 ;;		_I2C_Master_Stop
  5317 ;;		_I2C_Master_Write
  5318 ;; This function is called by:
  5319 ;;		_main
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322                           
  5323                           
  5324                           ;psect for function _EEPROM_Write
  5325  0D80                     _EEPROM_Write:	
  5326                           
  5327                           ;incstack = 0
  5328                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5329                           ;EEPROM_Write@EEPROM_address stored from wreg
  5330  0D80  00F8               	movwf	EEPROM_Write@EEPROM_address
  5331                           
  5332                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5333  0D81  0878               	movf	EEPROM_Write@EEPROM_address,w
  5334  0D82  00F5               	movwf	??_EEPROM_Write
  5335  0D83  0775               	addwf	??_EEPROM_Write,w
  5336  0D84  00F6               	movwf	??_EEPROM_Write+1
  5337  0D85  0876               	movf	??_EEPROM_Write+1,w
  5338  0D86  00F9               	movwf	EEPROM_Write@Address
  5339                           
  5340                           ;I2C.c: 55: I2C_Master_Start();
  5341  0D87  120A  158A  2253  120A  158A  	fcall	_I2C_Master_Start
  5342                           
  5343                           ;I2C.c: 56: I2C_Master_Write(Address);
  5344  0D8C  0879               	movf	EEPROM_Write@Address,w
  5345  0D8D  00F5               	movwf	??_EEPROM_Write
  5346  0D8E  01F6               	clrf	??_EEPROM_Write+1
  5347  0D8F  0875               	movf	??_EEPROM_Write,w
  5348  0D90  00F0               	movwf	I2C_Master_Write@d
  5349  0D91  0876               	movf	??_EEPROM_Write+1,w
  5350  0D92  00F1               	movwf	I2C_Master_Write@d+1
  5351  0D93  120A  158A  2261  120A  158A  	fcall	_I2C_Master_Write
  5352                           
  5353                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5354  0D98  0872               	movf	EEPROM_Write@high_address,w
  5355  0D99  00F5               	movwf	??_EEPROM_Write
  5356  0D9A  01F6               	clrf	??_EEPROM_Write+1
  5357  0D9B  0875               	movf	??_EEPROM_Write,w
  5358  0D9C  00F0               	movwf	I2C_Master_Write@d
  5359  0D9D  0876               	movf	??_EEPROM_Write+1,w
  5360  0D9E  00F1               	movwf	I2C_Master_Write@d+1
  5361  0D9F  120A  158A  2261  120A  158A  	fcall	_I2C_Master_Write
  5362                           
  5363                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5364  0DA4  0873               	movf	EEPROM_Write@low_address,w
  5365  0DA5  00F5               	movwf	??_EEPROM_Write
  5366  0DA6  01F6               	clrf	??_EEPROM_Write+1
  5367  0DA7  0875               	movf	??_EEPROM_Write,w
  5368  0DA8  00F0               	movwf	I2C_Master_Write@d
  5369  0DA9  0876               	movf	??_EEPROM_Write+1,w
  5370  0DAA  00F1               	movwf	I2C_Master_Write@d+1
  5371  0DAB  120A  158A  2261  120A  158A  	fcall	_I2C_Master_Write
  5372  0DB0                     l3415:	
  5373                           ;I2C.c: 59: while(*data){
  5374                           
  5375  0DB0  0874               	movf	EEPROM_Write@data,w
  5376  0DB1  0084               	movwf	4
  5377  0DB2  1383               	bcf	3,7	;select IRP bank0
  5378  0DB3  0800               	movf	0,w
  5379  0DB4  1903               	btfsc	3,2
  5380  0DB5  2DCA               	goto	l3417
  5381                           
  5382                           ;I2C.c: 60: I2C_Master_Write(*data);
  5383  0DB6  0874               	movf	EEPROM_Write@data,w
  5384  0DB7  0084               	movwf	4
  5385  0DB8  1383               	bcf	3,7	;select IRP bank0
  5386  0DB9  0800               	movf	0,w
  5387  0DBA  00F5               	movwf	??_EEPROM_Write
  5388  0DBB  01F6               	clrf	??_EEPROM_Write+1
  5389  0DBC  0875               	movf	??_EEPROM_Write,w
  5390  0DBD  00F0               	movwf	I2C_Master_Write@d
  5391  0DBE  0876               	movf	??_EEPROM_Write+1,w
  5392  0DBF  00F1               	movwf	I2C_Master_Write@d+1
  5393  0DC0  120A  158A  2261  120A  158A  	fcall	_I2C_Master_Write
  5394                           
  5395                           ;I2C.c: 61: ++data;
  5396  0DC5  3001               	movlw	1
  5397  0DC6  00F5               	movwf	??_EEPROM_Write
  5398  0DC7  0875               	movf	??_EEPROM_Write,w
  5399  0DC8  07F4               	addwf	EEPROM_Write@data,f
  5400  0DC9  2DB0               	goto	l3415
  5401  0DCA                     l3417:	
  5402                           
  5403                           ;I2C.c: 62: }
  5404                           ;I2C.c: 63: I2C_Master_Stop();
  5405  0DCA  120A  158A  225A  120A  158A  	fcall	_I2C_Master_Stop
  5406                           
  5407                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5408  0DCF  3003               	movlw	3
  5409  0DD0  00F7               	movwf	??_EEPROM_Write+2
  5410  0DD1  308A               	movlw	138
  5411  0DD2  00F6               	movwf	??_EEPROM_Write+1
  5412  0DD3  3055               	movlw	85
  5413  0DD4  00F5               	movwf	??_EEPROM_Write
  5414  0DD5                     u3527:	
  5415  0DD5  0BF5               	decfsz	??_EEPROM_Write,f
  5416  0DD6  2DD5               	goto	u3527
  5417  0DD7  0BF6               	decfsz	??_EEPROM_Write+1,f
  5418  0DD8  2DD5               	goto	u3527
  5419  0DD9  0BF7               	decfsz	??_EEPROM_Write+2,f
  5420  0DDA  2DD5               	goto	u3527
  5421  0DDB  2DDC               	nop2
  5422  0DDC  0008               	return
  5423  0DDD                     __end_of_EEPROM_Write:	
  5424                           
  5425                           	psect	text17
  5426  0A61                     __ptext17:	
  5427 ;; *************** function _I2C_Master_Write *****************
  5428 ;; Defined at:
  5429 ;;		line 34 in file "I2C.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;  d               2    0[COMMON] unsigned int 
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;		None
  5434 ;; Return value:  Size  Location     Type
  5435 ;;                  1    wreg      void 
  5436 ;; Registers used:
  5437 ;;		wreg, status,2, status,0, pclath, cstack
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5443 ;;      Params:         2       0       0       0       0
  5444 ;;      Locals:         0       0       0       0       0
  5445 ;;      Temps:          0       0       0       0       0
  5446 ;;      Totals:         2       0       0       0       0
  5447 ;;Total ram usage:        2 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    1
  5450 ;; This function calls:
  5451 ;;		_I2C_Master_Wait
  5452 ;; This function is called by:
  5453 ;;		_EEPROM_Write
  5454 ;;		_EEPROM_Read
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           
  5459                           ;psect for function _I2C_Master_Write
  5460  0A61                     _I2C_Master_Write:	
  5461                           
  5462                           ;I2C.c: 35: I2C_Master_Wait();
  5463                           
  5464                           ;incstack = 0
  5465                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5466  0A61  120A  118A  2003   	fcall	_I2C_Master_Wait
  5467                           
  5468                           ;I2C.c: 36: SSPBUF = d;
  5469  0A64  0870               	movf	I2C_Master_Write@d,w
  5470  0A65  1283               	bcf	3,5	;RP0=0, select bank0
  5471  0A66  1303               	bcf	3,6	;RP1=0, select bank0
  5472  0A67  0093               	movwf	19	;volatile
  5473  0A68  0008               	return
  5474  0A69                     __end_of_I2C_Master_Write:	
  5475                           
  5476                           	psect	text18
  5477  0A5A                     __ptext18:	
  5478 ;; *************** function _I2C_Master_Stop *****************
  5479 ;; Defined at:
  5480 ;;		line 29 in file "I2C.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;		None
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;		None
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  1    wreg      void 
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, status,0, pclath, cstack
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5494 ;;      Params:         0       0       0       0       0
  5495 ;;      Locals:         0       0       0       0       0
  5496 ;;      Temps:          0       0       0       0       0
  5497 ;;      Totals:         0       0       0       0       0
  5498 ;;Total ram usage:        0 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    1
  5501 ;; This function calls:
  5502 ;;		_I2C_Master_Wait
  5503 ;; This function is called by:
  5504 ;;		_EEPROM_Write
  5505 ;;		_EEPROM_Read
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           
  5510                           ;psect for function _I2C_Master_Stop
  5511  0A5A                     _I2C_Master_Stop:	
  5512                           
  5513                           ;I2C.c: 30: I2C_Master_Wait();
  5514                           
  5515                           ;incstack = 0
  5516                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5517  0A5A  120A  118A  2003   	fcall	_I2C_Master_Wait
  5518                           
  5519                           ;I2C.c: 31: PEN = 1;
  5520  0A5D  1683               	bsf	3,5	;RP0=1, select bank1
  5521  0A5E  1303               	bcf	3,6	;RP1=0, select bank1
  5522  0A5F  1511               	bsf	17,2	;volatile
  5523  0A60  0008               	return
  5524  0A61                     __end_of_I2C_Master_Stop:	
  5525                           
  5526                           	psect	text19
  5527  0A53                     __ptext19:	
  5528 ;; *************** function _I2C_Master_Start *****************
  5529 ;; Defined at:
  5530 ;;		line 19 in file "I2C.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		wreg, status,2, status,0, pclath, cstack
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5544 ;;      Params:         0       0       0       0       0
  5545 ;;      Locals:         0       0       0       0       0
  5546 ;;      Temps:          0       0       0       0       0
  5547 ;;      Totals:         0       0       0       0       0
  5548 ;;Total ram usage:        0 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; Hardware stack levels required when called:    1
  5551 ;; This function calls:
  5552 ;;		_I2C_Master_Wait
  5553 ;; This function is called by:
  5554 ;;		_EEPROM_Write
  5555 ;;		_EEPROM_Read
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function _I2C_Master_Start
  5561  0A53                     _I2C_Master_Start:	
  5562                           
  5563                           ;I2C.c: 20: I2C_Master_Wait();
  5564                           
  5565                           ;incstack = 0
  5566                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5567  0A53  120A  118A  2003   	fcall	_I2C_Master_Wait
  5568                           
  5569                           ;I2C.c: 21: SEN = 1;
  5570  0A56  1683               	bsf	3,5	;RP0=1, select bank1
  5571  0A57  1303               	bcf	3,6	;RP1=0, select bank1
  5572  0A58  1411               	bsf	17,0	;volatile
  5573  0A59  0008               	return
  5574  0A5A                     __end_of_I2C_Master_Start:	
  5575                           
  5576                           	psect	text20
  5577  0003                     __ptext20:	
  5578 ;; *************** function _I2C_Master_Wait *****************
  5579 ;; Defined at:
  5580 ;;		line 15 in file "I2C.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;		None
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;		None
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  1    wreg      void 
  5587 ;; Registers used:
  5588 ;;		wreg, status,2
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5594 ;;      Params:         0       0       0       0       0
  5595 ;;      Locals:         0       0       0       0       0
  5596 ;;      Temps:          0       0       0       0       0
  5597 ;;      Totals:         0       0       0       0       0
  5598 ;;Total ram usage:        0 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; This function calls:
  5601 ;;		Nothing
  5602 ;; This function is called by:
  5603 ;;		_I2C_Master_Start
  5604 ;;		_I2C_Master_Stop
  5605 ;;		_I2C_Master_Write
  5606 ;;		_I2C_Master_RepeatedStart
  5607 ;;		_I2C_Master_Read
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           
  5612                           ;psect for function _I2C_Master_Wait
  5613  0003                     _I2C_Master_Wait:	
  5614  0003                     l492:	
  5615                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5616                           
  5617                           ;incstack = 0
  5618                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5619                           
  5620  0003  1683               	bsf	3,5	;RP0=1, select bank1
  5621  0004  1303               	bcf	3,6	;RP1=0, select bank1
  5622  0005  1914               	btfsc	20,2	;volatile
  5623  0006  2803               	goto	l492
  5624  0007  0811               	movf	17,w	;volatile
  5625  0008  391F               	andlw	31
  5626  0009  1903               	btfsc	3,2
  5627  000A  0008               	return
  5628  000B  2803               	goto	l492
  5629  000C                     __end_of_I2C_Master_Wait:	
  5630                           
  5631                           	psect	text21
  5632  0B2F                     __ptext21:	
  5633 ;; *************** function _CWTX *****************
  5634 ;; Defined at:
  5635 ;;		line 289 in file "FMCW.c"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;  Nref            2   45[BANK0 ] int 
  5638 ;;  Nprg            2   47[BANK0 ] int 
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;  cwtx            2   49[BANK0 ] int 
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  1    wreg      void 
  5643 ;; Registers used:
  5644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5650 ;;      Params:         0       4       0       0       0
  5651 ;;      Locals:         0       2       0       0       0
  5652 ;;      Temps:          0       0       0       0       0
  5653 ;;      Totals:         0       6       0       0       0
  5654 ;;Total ram usage:        6 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    3
  5657 ;; This function calls:
  5658 ;;		_OPINIT
  5659 ;;		_OUTFQ
  5660 ;;		_RFDOUT
  5661 ;; This function is called by:
  5662 ;;		_main
  5663 ;;		_SetPLL
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           
  5668                           ;psect for function _CWTX
  5669  0B2F                     _CWTX:	
  5670                           
  5671                           ;FMCW.c: 290: int cwtx = 2;
  5672                           
  5673                           ;incstack = 0
  5674                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5675  0B2F  3002               	movlw	2
  5676  0B30  1283               	bcf	3,5	;RP0=0, select bank0
  5677  0B31  1303               	bcf	3,6	;RP1=0, select bank0
  5678  0B32  00D1               	movwf	CWTX@cwtx
  5679  0B33  3000               	movlw	0
  5680  0B34  00D2               	movwf	CWTX@cwtx+1
  5681                           
  5682                           ;FMCW.c: 291: OPINIT(cwtx);
  5683  0B35  0852               	movf	CWTX@cwtx+1,w
  5684  0B36  00F5               	movwf	OPINIT@fmcwtxrx+1
  5685  0B37  0851               	movf	CWTX@cwtx,w
  5686  0B38  00F4               	movwf	OPINIT@fmcwtxrx
  5687  0B39  120A  158A  2701  120A  158A  	fcall	_OPINIT
  5688                           
  5689                           ;FMCW.c: 292: RFDOUT(cwtx, Nref);
  5690  0B3E  1283               	bcf	3,5	;RP0=0, select bank0
  5691  0B3F  1303               	bcf	3,6	;RP1=0, select bank0
  5692  0B40  0852               	movf	CWTX@cwtx+1,w
  5693  0B41  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5694  0B42  0851               	movf	CWTX@cwtx,w
  5695  0B43  00F9               	movwf	RFDOUT@fmcwtxrx
  5696  0B44  084E               	movf	CWTX@Nref+1,w
  5697  0B45  00FC               	movwf	RFDOUT@Nref+1
  5698  0B46  084D               	movf	CWTX@Nref,w
  5699  0B47  00FB               	movwf	RFDOUT@Nref
  5700  0B48  120A  118A  200C  120A  158A  	fcall	_RFDOUT
  5701                           
  5702                           ;FMCW.c: 293: OUTFQ(cwtx, Nprg);
  5703  0B4D  1283               	bcf	3,5	;RP0=0, select bank0
  5704  0B4E  1303               	bcf	3,6	;RP1=0, select bank0
  5705  0B4F  0852               	movf	CWTX@cwtx+1,w
  5706  0B50  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5707  0B51  0851               	movf	CWTX@cwtx,w
  5708  0B52  00F9               	movwf	OUTFQ@fmcwtxrx
  5709  0B53  0850               	movf	CWTX@Nprg+1,w
  5710  0B54  00FC               	movwf	OUTFQ@Nprg+1
  5711  0B55  084F               	movf	CWTX@Nprg,w
  5712  0B56  00FB               	movwf	OUTFQ@Nprg
  5713  0B57  120A  118A  20ED   	fcall	_OUTFQ
  5714  0B5A  0008               	return
  5715  0B5B                     __end_of_CWTX:	
  5716                           
  5717                           	psect	text22
  5718  000C                     __ptext22:	
  5719 ;; *************** function _RFDOUT *****************
  5720 ;; Defined at:
  5721 ;;		line 205 in file "FMCW.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;  fmcwtxrx        2    9[COMMON] int 
  5724 ;;  Nref            2   11[COMMON] int 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;  i               2   31[BANK0 ] int 
  5727 ;;  i               2   27[BANK0 ] int 
  5728 ;;  i               2   29[BANK0 ] int 
  5729 ;;  Nref_b         24    3[BANK0 ] int [12]
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  1    wreg      void 
  5732 ;; Registers used:
  5733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5739 ;;      Params:         4       0       0       0       0
  5740 ;;      Locals:         0      30       0       0       0
  5741 ;;      Temps:          0       3       0       0       0
  5742 ;;      Totals:         4      33       0       0       0
  5743 ;;Total ram usage:       37 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; Hardware stack levels required when called:    2
  5746 ;; This function calls:
  5747 ;;		_H_OUT
  5748 ;;		_L_OUT
  5749 ;;		_STBOUT
  5750 ;;		___awdiv
  5751 ;; This function is called by:
  5752 ;;		_FMTX
  5753 ;;		_CWTX
  5754 ;;		_FMRX
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           
  5759                           ;psect for function _RFDOUT
  5760  000C                     _RFDOUT:	
  5761                           
  5762                           ;FMCW.c: 206: int Nref_b[12];
  5763                           ;FMCW.c: 208: for(int i=0; i<12; i++){
  5764                           
  5765                           ;incstack = 0
  5766                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5767  000C  1283               	bcf	3,5	;RP0=0, select bank0
  5768  000D  1303               	bcf	3,6	;RP1=0, select bank0
  5769  000E  01BD               	clrf	RFDOUT@i
  5770  000F  01BE               	clrf	RFDOUT@i+1
  5771  0010  083E               	movf	RFDOUT@i+1,w
  5772  0011  3A80               	xorlw	128
  5773  0012  00FF               	movwf	127
  5774  0013  3080               	movlw	128
  5775  0014  027F               	subwf	127,w
  5776  0015  1D03               	skipz
  5777  0016  2819               	goto	u2765
  5778  0017  300C               	movlw	12
  5779  0018  023D               	subwf	RFDOUT@i,w
  5780  0019                     u2765:	
  5781  0019  1803               	btfsc	3,0
  5782  001A  2837               	goto	l3167
  5783  001B                     l3161:	
  5784                           
  5785                           ;FMCW.c: 209: Nref_b[i] = 0;
  5786  001B  1283               	bcf	3,5	;RP0=0, select bank0
  5787  001C  1303               	bcf	3,6	;RP1=0, select bank0
  5788  001D  083D               	movf	RFDOUT@i,w
  5789  001E  00A0               	movwf	??_RFDOUT
  5790  001F  0720               	addwf	??_RFDOUT,w
  5791  0020  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5792  0021  0084               	movwf	4
  5793  0022  1383               	bcf	3,7	;select IRP bank0
  5794  0023  0180               	clrf	0
  5795  0024  0A84               	incf	4,f
  5796  0025  0180               	clrf	0
  5797  0026  3001               	movlw	1
  5798  0027  07BD               	addwf	RFDOUT@i,f
  5799  0028  1803               	skipnc
  5800  0029  0ABE               	incf	RFDOUT@i+1,f
  5801  002A  3000               	movlw	0
  5802  002B  07BE               	addwf	RFDOUT@i+1,f
  5803  002C  083E               	movf	RFDOUT@i+1,w
  5804  002D  3A80               	xorlw	128
  5805  002E  00FF               	movwf	127
  5806  002F  3080               	movlw	128
  5807  0030  027F               	subwf	127,w
  5808  0031  1D03               	skipz
  5809  0032  2835               	goto	u2775
  5810  0033  300C               	movlw	12
  5811  0034  023D               	subwf	RFDOUT@i,w
  5812  0035                     u2775:	
  5813  0035  1C03               	skipc
  5814  0036  281B               	goto	l3161
  5815  0037                     l3167:	
  5816                           
  5817                           ;FMCW.c: 210: }
  5818                           ;FMCW.c: 213: for(int i=0; Nref>0; i++){
  5819  0037  1283               	bcf	3,5	;RP0=0, select bank0
  5820  0038  1303               	bcf	3,6	;RP1=0, select bank0
  5821  0039  01BB               	clrf	RFDOUT@i_476
  5822  003A  01BC               	clrf	RFDOUT@i_476+1
  5823  003B  087C               	movf	RFDOUT@Nref+1,w
  5824  003C  3A80               	xorlw	128
  5825  003D  00FF               	movwf	127
  5826  003E  3080               	movlw	128
  5827  003F  027F               	subwf	127,w
  5828  0040  1D03               	skipz
  5829  0041  2844               	goto	u2785
  5830  0042  3001               	movlw	1
  5831  0043  027B               	subwf	RFDOUT@Nref,w
  5832  0044                     u2785:	
  5833  0044  1C03               	btfss	3,0
  5834  0045  287D               	goto	l3181
  5835  0046                     l3173:	
  5836                           
  5837                           ;FMCW.c: 214: Nref_b[i] = Nref % 2;
  5838  0046  3001               	movlw	1
  5839  0047  057B               	andwf	RFDOUT@Nref,w
  5840  0048  1283               	bcf	3,5	;RP0=0, select bank0
  5841  0049  1303               	bcf	3,6	;RP1=0, select bank0
  5842  004A  00A0               	movwf	??_RFDOUT
  5843  004B  3000               	movlw	0
  5844  004C  057C               	andwf	RFDOUT@Nref+1,w
  5845  004D  00A1               	movwf	??_RFDOUT+1
  5846  004E  083B               	movf	RFDOUT@i_476,w
  5847  004F  00A2               	movwf	??_RFDOUT+2
  5848  0050  0722               	addwf	??_RFDOUT+2,w
  5849  0051  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5850  0052  0084               	movwf	4
  5851  0053  0820               	movf	??_RFDOUT,w
  5852  0054  1383               	bcf	3,7	;select IRP bank0
  5853  0055  0080               	movwf	0
  5854  0056  0A84               	incf	4,f
  5855  0057  0821               	movf	??_RFDOUT+1,w
  5856  0058  0080               	movwf	0
  5857                           
  5858                           ;FMCW.c: 215: Nref = Nref / 2;
  5859  0059  3002               	movlw	2
  5860  005A  00F0               	movwf	___awdiv@divisor
  5861  005B  3000               	movlw	0
  5862  005C  00F1               	movwf	___awdiv@divisor+1
  5863  005D  087C               	movf	RFDOUT@Nref+1,w
  5864  005E  00F3               	movwf	___awdiv@dividend+1
  5865  005F  087B               	movf	RFDOUT@Nref,w
  5866  0060  00F2               	movwf	___awdiv@dividend
  5867  0061  120A  158A  2527  120A  118A  	fcall	___awdiv
  5868  0066  0871               	movf	?___awdiv+1,w
  5869  0067  00FC               	movwf	RFDOUT@Nref+1
  5870  0068  0870               	movf	?___awdiv,w
  5871  0069  00FB               	movwf	RFDOUT@Nref
  5872  006A  3001               	movlw	1
  5873  006B  1283               	bcf	3,5	;RP0=0, select bank0
  5874  006C  1303               	bcf	3,6	;RP1=0, select bank0
  5875  006D  07BB               	addwf	RFDOUT@i_476,f
  5876  006E  1803               	skipnc
  5877  006F  0ABC               	incf	RFDOUT@i_476+1,f
  5878  0070  3000               	movlw	0
  5879  0071  07BC               	addwf	RFDOUT@i_476+1,f
  5880  0072  087C               	movf	RFDOUT@Nref+1,w
  5881  0073  3A80               	xorlw	128
  5882  0074  00FF               	movwf	127
  5883  0075  3080               	movlw	128
  5884  0076  027F               	subwf	127,w
  5885  0077  1D03               	skipz
  5886  0078  287B               	goto	u2795
  5887  0079  3001               	movlw	1
  5888  007A  027B               	subwf	RFDOUT@Nref,w
  5889  007B                     u2795:	
  5890  007B  1803               	skipnc
  5891  007C  2846               	goto	l3173
  5892  007D                     l3181:	
  5893                           
  5894                           ;FMCW.c: 216: }
  5895                           ;FMCW.c: 219: for (int i=0; i<12; i++)
  5896  007D  1283               	bcf	3,5	;RP0=0, select bank0
  5897  007E  1303               	bcf	3,6	;RP1=0, select bank0
  5898  007F  01BF               	clrf	RFDOUT@i_477
  5899  0080  01C0               	clrf	RFDOUT@i_477+1
  5900  0081  0840               	movf	RFDOUT@i_477+1,w
  5901  0082  3A80               	xorlw	128
  5902  0083  00FF               	movwf	127
  5903  0084  3080               	movlw	128
  5904  0085  027F               	subwf	127,w
  5905  0086  1D03               	skipz
  5906  0087  288A               	goto	u2805
  5907  0088  300C               	movlw	12
  5908  0089  023F               	subwf	RFDOUT@i_477,w
  5909  008A                     u2805:	
  5910  008A  1803               	btfsc	3,0
  5911  008B  28D3               	goto	l3199
  5912  008C                     l3187:	
  5913                           
  5914                           ;FMCW.c: 220: {
  5915                           ;FMCW.c: 221: if(Nref_b[i] == 0)
  5916  008C  1283               	bcf	3,5	;RP0=0, select bank0
  5917  008D  1303               	bcf	3,6	;RP1=0, select bank0
  5918  008E  083F               	movf	RFDOUT@i_477,w
  5919  008F  00A0               	movwf	??_RFDOUT
  5920  0090  0720               	addwf	??_RFDOUT,w
  5921  0091  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5922  0092  0084               	movwf	4
  5923  0093  1383               	bcf	3,7	;select IRP bank0
  5924  0094  0800               	movf	0,w
  5925  0095  00A1               	movwf	??_RFDOUT+1
  5926  0096  0A84               	incf	4,f
  5927  0097  0800               	movf	0,w
  5928  0098  00A2               	movwf	??_RFDOUT+2
  5929  0099  0821               	movf	??_RFDOUT+1,w
  5930  009A  0422               	iorwf	??_RFDOUT+2,w
  5931  009B  1D03               	btfss	3,2
  5932  009C  28A6               	goto	l3191
  5933                           
  5934                           ;FMCW.c: 222: {
  5935                           ;FMCW.c: 223: L_OUT(fmcwtxrx);
  5936  009D  087A               	movf	RFDOUT@fmcwtxrx+1,w
  5937  009E  00F3               	movwf	L_OUT@fmcwtxrx+1
  5938  009F  0879               	movf	RFDOUT@fmcwtxrx,w
  5939  00A0  00F2               	movwf	L_OUT@fmcwtxrx
  5940  00A1  120A  158A  2495  120A  118A  	fcall	_L_OUT
  5941  00A6                     l3191:	
  5942                           
  5943                           ;FMCW.c: 224: }
  5944                           ;FMCW.c: 225: if(Nref_b[i] == 1)
  5945  00A6  1283               	bcf	3,5	;RP0=0, select bank0
  5946  00A7  1303               	bcf	3,6	;RP1=0, select bank0
  5947  00A8  083F               	movf	RFDOUT@i_477,w
  5948  00A9  00A0               	movwf	??_RFDOUT
  5949  00AA  0720               	addwf	??_RFDOUT,w
  5950  00AB  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5951  00AC  0084               	movwf	4
  5952  00AD  1383               	bcf	3,7	;select IRP bank0
  5953  00AE  0800               	movf	0,w
  5954  00AF  00A1               	movwf	??_RFDOUT+1
  5955  00B0  0A84               	incf	4,f
  5956  00B1  0800               	movf	0,w
  5957  00B2  00A2               	movwf	??_RFDOUT+2
  5958  00B3  0321               	decf	??_RFDOUT+1,w
  5959  00B4  0422               	iorwf	??_RFDOUT+2,w
  5960  00B5  1D03               	btfss	3,2
  5961  00B6  28C0               	goto	l3195
  5962                           
  5963                           ;FMCW.c: 226: {
  5964                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  5965  00B7  087A               	movf	RFDOUT@fmcwtxrx+1,w
  5966  00B8  00F3               	movwf	H_OUT@fmcwtxrx+1
  5967  00B9  0879               	movf	RFDOUT@fmcwtxrx,w
  5968  00BA  00F2               	movwf	H_OUT@fmcwtxrx
  5969  00BB  120A  158A  244F  120A  118A  	fcall	_H_OUT
  5970  00C0                     l3195:	
  5971  00C0  3001               	movlw	1
  5972  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  5973  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  5974  00C3  07BF               	addwf	RFDOUT@i_477,f
  5975  00C4  1803               	skipnc
  5976  00C5  0AC0               	incf	RFDOUT@i_477+1,f
  5977  00C6  3000               	movlw	0
  5978  00C7  07C0               	addwf	RFDOUT@i_477+1,f
  5979  00C8  0840               	movf	RFDOUT@i_477+1,w
  5980  00C9  3A80               	xorlw	128
  5981  00CA  00FF               	movwf	127
  5982  00CB  3080               	movlw	128
  5983  00CC  027F               	subwf	127,w
  5984  00CD  1D03               	skipz
  5985  00CE  28D1               	goto	u2835
  5986  00CF  300C               	movlw	12
  5987  00D0  023F               	subwf	RFDOUT@i_477,w
  5988  00D1                     u2835:	
  5989  00D1  1C03               	skipc
  5990  00D2  288C               	goto	l3187
  5991  00D3                     l3199:	
  5992                           
  5993                           ;FMCW.c: 228: }
  5994                           ;FMCW.c: 229: }
  5995                           ;FMCW.c: 232: H_OUT(fmcwtxrx);
  5996  00D3  087A               	movf	RFDOUT@fmcwtxrx+1,w
  5997  00D4  00F3               	movwf	H_OUT@fmcwtxrx+1
  5998  00D5  0879               	movf	RFDOUT@fmcwtxrx,w
  5999  00D6  00F2               	movwf	H_OUT@fmcwtxrx
  6000  00D7  120A  158A  244F  120A  118A  	fcall	_H_OUT
  6001                           
  6002                           ;FMCW.c: 233: H_OUT(fmcwtxrx);
  6003  00DC  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6004  00DD  00F3               	movwf	H_OUT@fmcwtxrx+1
  6005  00DE  0879               	movf	RFDOUT@fmcwtxrx,w
  6006  00DF  00F2               	movwf	H_OUT@fmcwtxrx
  6007  00E0  120A  158A  244F  120A  118A  	fcall	_H_OUT
  6008                           
  6009                           ;FMCW.c: 236: STBOUT(fmcwtxrx);
  6010  00E5  087A               	movf	RFDOUT@fmcwtxrx+1,w
  6011  00E6  00F3               	movwf	STBOUT@fmcwtxrx+1
  6012  00E7  0879               	movf	RFDOUT@fmcwtxrx,w
  6013  00E8  00F2               	movwf	STBOUT@fmcwtxrx
  6014  00E9  120A  158A  23B3   	fcall	_STBOUT
  6015  00EC  0008               	return
  6016  00ED                     __end_of_RFDOUT:	
  6017                           
  6018                           	psect	text23
  6019  00ED                     __ptext23:	
  6020 ;; *************** function _OUTFQ *****************
  6021 ;; Defined at:
  6022 ;;		line 136 in file "FMCW.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  fmcwtxrx        2    9[COMMON] int 
  6025 ;;  Nprg            2   11[COMMON] int 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  i               2   43[BANK0 ] int 
  6028 ;;  i               2   41[BANK0 ] int 
  6029 ;;  i               2   39[BANK0 ] int 
  6030 ;;  Nprg_b         34    3[BANK0 ] int [17]
  6031 ;;  count           2   37[BANK0 ] int 
  6032 ;; Return value:  Size  Location     Type
  6033 ;;                  1    wreg      void 
  6034 ;; Registers used:
  6035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6036 ;; Tracked objects:
  6037 ;;		On entry : 0/0
  6038 ;;		On exit  : 0/0
  6039 ;;		Unchanged: 0/0
  6040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6041 ;;      Params:         4       0       0       0       0
  6042 ;;      Locals:         0      42       0       0       0
  6043 ;;      Temps:          0       3       0       0       0
  6044 ;;      Totals:         4      45       0       0       0
  6045 ;;Total ram usage:       49 bytes
  6046 ;; Hardware stack levels used:    1
  6047 ;; Hardware stack levels required when called:    2
  6048 ;; This function calls:
  6049 ;;		_H_OUT
  6050 ;;		_L_OUT
  6051 ;;		_STBOUT
  6052 ;;		___awdiv
  6053 ;; This function is called by:
  6054 ;;		_FMTX
  6055 ;;		_CWTX
  6056 ;;		_FMRX
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           
  6061                           ;psect for function _OUTFQ
  6062  00ED                     _OUTFQ:	
  6063                           
  6064                           ;FMCW.c: 137: int count = 0;
  6065                           
  6066                           ;incstack = 0
  6067                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6068  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  6069  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  6070  00EF  01C5               	clrf	OUTFQ@count
  6071  00F0  01C6               	clrf	OUTFQ@count+1
  6072                           
  6073                           ;FMCW.c: 138: int Nprg_b[17];
  6074                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  6075  00F1  01C7               	clrf	OUTFQ@i
  6076  00F2  01C8               	clrf	OUTFQ@i+1
  6077  00F3  0848               	movf	OUTFQ@i+1,w
  6078  00F4  3A80               	xorlw	128
  6079  00F5  00FF               	movwf	127
  6080  00F6  3080               	movlw	128
  6081  00F7  027F               	subwf	127,w
  6082  00F8  1D03               	skipz
  6083  00F9  28FC               	goto	u2685
  6084  00FA  3011               	movlw	17
  6085  00FB  0247               	subwf	OUTFQ@i,w
  6086  00FC                     u2685:	
  6087  00FC  1803               	btfsc	3,0
  6088  00FD  291A               	goto	l3121
  6089  00FE                     l3115:	
  6090                           
  6091                           ;FMCW.c: 141: Nprg_b[i] = 0;
  6092  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  6093  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  6094  0100  0847               	movf	OUTFQ@i,w
  6095  0101  00A0               	movwf	??_OUTFQ
  6096  0102  0720               	addwf	??_OUTFQ,w
  6097  0103  3E23               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6098  0104  0084               	movwf	4
  6099  0105  1383               	bcf	3,7	;select IRP bank0
  6100  0106  0180               	clrf	0
  6101  0107  0A84               	incf	4,f
  6102  0108  0180               	clrf	0
  6103  0109  3001               	movlw	1
  6104  010A  07C7               	addwf	OUTFQ@i,f
  6105  010B  1803               	skipnc
  6106  010C  0AC8               	incf	OUTFQ@i+1,f
  6107  010D  3000               	movlw	0
  6108  010E  07C8               	addwf	OUTFQ@i+1,f
  6109  010F  0848               	movf	OUTFQ@i+1,w
  6110  0110  3A80               	xorlw	128
  6111  0111  00FF               	movwf	127
  6112  0112  3080               	movlw	128
  6113  0113  027F               	subwf	127,w
  6114  0114  1D03               	skipz
  6115  0115  2918               	goto	u2695
  6116  0116  3011               	movlw	17
  6117  0117  0247               	subwf	OUTFQ@i,w
  6118  0118                     u2695:	
  6119  0118  1C03               	skipc
  6120  0119  28FE               	goto	l3115
  6121  011A                     l3121:	
  6122                           
  6123                           ;FMCW.c: 142: }
  6124                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  6125  011A  1283               	bcf	3,5	;RP0=0, select bank0
  6126  011B  1303               	bcf	3,6	;RP1=0, select bank0
  6127  011C  01C9               	clrf	OUTFQ@i_466
  6128  011D  01CA               	clrf	OUTFQ@i_466+1
  6129  011E  084A               	movf	OUTFQ@i_466+1,w
  6130  011F  3A80               	xorlw	128
  6131  0120  00FF               	movwf	127
  6132  0121  3080               	movlw	128
  6133  0122  027F               	subwf	127,w
  6134  0123  1D03               	skipz
  6135  0124  2927               	goto	u2705
  6136  0125  3011               	movlw	17
  6137  0126  0249               	subwf	OUTFQ@i_466,w
  6138  0127                     u2705:	
  6139  0127  1803               	btfsc	3,0
  6140  0128  2960               	goto	l3135
  6141  0129                     l3127:	
  6142                           
  6143                           ;FMCW.c: 146: Nprg_b[i] = Nprg % 2;
  6144  0129  3001               	movlw	1
  6145  012A  057B               	andwf	OUTFQ@Nprg,w
  6146  012B  1283               	bcf	3,5	;RP0=0, select bank0
  6147  012C  1303               	bcf	3,6	;RP1=0, select bank0
  6148  012D  00A0               	movwf	??_OUTFQ
  6149  012E  3000               	movlw	0
  6150  012F  057C               	andwf	OUTFQ@Nprg+1,w
  6151  0130  00A1               	movwf	??_OUTFQ+1
  6152  0131  0849               	movf	OUTFQ@i_466,w
  6153  0132  00A2               	movwf	??_OUTFQ+2
  6154  0133  0722               	addwf	??_OUTFQ+2,w
  6155  0134  3E23               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6156  0135  0084               	movwf	4
  6157  0136  0820               	movf	??_OUTFQ,w
  6158  0137  1383               	bcf	3,7	;select IRP bank0
  6159  0138  0080               	movwf	0
  6160  0139  0A84               	incf	4,f
  6161  013A  0821               	movf	??_OUTFQ+1,w
  6162  013B  0080               	movwf	0
  6163                           
  6164                           ;FMCW.c: 147: Nprg = Nprg / 2;
  6165  013C  3002               	movlw	2
  6166  013D  00F0               	movwf	___awdiv@divisor
  6167  013E  3000               	movlw	0
  6168  013F  00F1               	movwf	___awdiv@divisor+1
  6169  0140  087C               	movf	OUTFQ@Nprg+1,w
  6170  0141  00F3               	movwf	___awdiv@dividend+1
  6171  0142  087B               	movf	OUTFQ@Nprg,w
  6172  0143  00F2               	movwf	___awdiv@dividend
  6173  0144  120A  158A  2527  120A  118A  	fcall	___awdiv
  6174  0149  0871               	movf	?___awdiv+1,w
  6175  014A  00FC               	movwf	OUTFQ@Nprg+1
  6176  014B  0870               	movf	?___awdiv,w
  6177  014C  00FB               	movwf	OUTFQ@Nprg
  6178  014D  3001               	movlw	1
  6179  014E  1283               	bcf	3,5	;RP0=0, select bank0
  6180  014F  1303               	bcf	3,6	;RP1=0, select bank0
  6181  0150  07C9               	addwf	OUTFQ@i_466,f
  6182  0151  1803               	skipnc
  6183  0152  0ACA               	incf	OUTFQ@i_466+1,f
  6184  0153  3000               	movlw	0
  6185  0154  07CA               	addwf	OUTFQ@i_466+1,f
  6186  0155  084A               	movf	OUTFQ@i_466+1,w
  6187  0156  3A80               	xorlw	128
  6188  0157  00FF               	movwf	127
  6189  0158  3080               	movlw	128
  6190  0159  027F               	subwf	127,w
  6191  015A  1D03               	skipz
  6192  015B  295E               	goto	u2715
  6193  015C  3011               	movlw	17
  6194  015D  0249               	subwf	OUTFQ@i_466,w
  6195  015E                     u2715:	
  6196  015E  1C03               	skipc
  6197  015F  2929               	goto	l3127
  6198  0160                     l3135:	
  6199                           
  6200                           ;FMCW.c: 148: }
  6201                           ;FMCW.c: 177: for (int i=0; i<17; i++)
  6202  0160  1283               	bcf	3,5	;RP0=0, select bank0
  6203  0161  1303               	bcf	3,6	;RP1=0, select bank0
  6204  0162  01CB               	clrf	OUTFQ@i_467
  6205  0163  01CC               	clrf	OUTFQ@i_467+1
  6206  0164  084C               	movf	OUTFQ@i_467+1,w
  6207  0165  3A80               	xorlw	128
  6208  0166  00FF               	movwf	127
  6209  0167  3080               	movlw	128
  6210  0168  027F               	subwf	127,w
  6211  0169  1D03               	skipz
  6212  016A  296D               	goto	u2725
  6213  016B  3011               	movlw	17
  6214  016C  024B               	subwf	OUTFQ@i_467,w
  6215  016D                     u2725:	
  6216  016D  1803               	btfsc	3,0
  6217  016E  29B6               	goto	l3153
  6218  016F                     l3141:	
  6219                           
  6220                           ;FMCW.c: 178: {
  6221                           ;FMCW.c: 179: if(Nprg_b[i] == 0)
  6222  016F  1283               	bcf	3,5	;RP0=0, select bank0
  6223  0170  1303               	bcf	3,6	;RP1=0, select bank0
  6224  0171  084B               	movf	OUTFQ@i_467,w
  6225  0172  00A0               	movwf	??_OUTFQ
  6226  0173  0720               	addwf	??_OUTFQ,w
  6227  0174  3E23               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6228  0175  0084               	movwf	4
  6229  0176  1383               	bcf	3,7	;select IRP bank0
  6230  0177  0800               	movf	0,w
  6231  0178  00A1               	movwf	??_OUTFQ+1
  6232  0179  0A84               	incf	4,f
  6233  017A  0800               	movf	0,w
  6234  017B  00A2               	movwf	??_OUTFQ+2
  6235  017C  0821               	movf	??_OUTFQ+1,w
  6236  017D  0422               	iorwf	??_OUTFQ+2,w
  6237  017E  1D03               	btfss	3,2
  6238  017F  2989               	goto	l3145
  6239                           
  6240                           ;FMCW.c: 180: {
  6241                           ;FMCW.c: 181: L_OUT(fmcwtxrx);
  6242  0180  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6243  0181  00F3               	movwf	L_OUT@fmcwtxrx+1
  6244  0182  0879               	movf	OUTFQ@fmcwtxrx,w
  6245  0183  00F2               	movwf	L_OUT@fmcwtxrx
  6246  0184  120A  158A  2495  120A  118A  	fcall	_L_OUT
  6247  0189                     l3145:	
  6248                           
  6249                           ;FMCW.c: 182: }
  6250                           ;FMCW.c: 183: if(Nprg_b[i] == 1)
  6251  0189  1283               	bcf	3,5	;RP0=0, select bank0
  6252  018A  1303               	bcf	3,6	;RP1=0, select bank0
  6253  018B  084B               	movf	OUTFQ@i_467,w
  6254  018C  00A0               	movwf	??_OUTFQ
  6255  018D  0720               	addwf	??_OUTFQ,w
  6256  018E  3E23               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6257  018F  0084               	movwf	4
  6258  0190  1383               	bcf	3,7	;select IRP bank0
  6259  0191  0800               	movf	0,w
  6260  0192  00A1               	movwf	??_OUTFQ+1
  6261  0193  0A84               	incf	4,f
  6262  0194  0800               	movf	0,w
  6263  0195  00A2               	movwf	??_OUTFQ+2
  6264  0196  0321               	decf	??_OUTFQ+1,w
  6265  0197  0422               	iorwf	??_OUTFQ+2,w
  6266  0198  1D03               	btfss	3,2
  6267  0199  29A3               	goto	l3149
  6268                           
  6269                           ;FMCW.c: 184: {
  6270                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6271  019A  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6272  019B  00F3               	movwf	H_OUT@fmcwtxrx+1
  6273  019C  0879               	movf	OUTFQ@fmcwtxrx,w
  6274  019D  00F2               	movwf	H_OUT@fmcwtxrx
  6275  019E  120A  158A  244F  120A  118A  	fcall	_H_OUT
  6276  01A3                     l3149:	
  6277  01A3  3001               	movlw	1
  6278  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  6279  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  6280  01A6  07CB               	addwf	OUTFQ@i_467,f
  6281  01A7  1803               	skipnc
  6282  01A8  0ACC               	incf	OUTFQ@i_467+1,f
  6283  01A9  3000               	movlw	0
  6284  01AA  07CC               	addwf	OUTFQ@i_467+1,f
  6285  01AB  084C               	movf	OUTFQ@i_467+1,w
  6286  01AC  3A80               	xorlw	128
  6287  01AD  00FF               	movwf	127
  6288  01AE  3080               	movlw	128
  6289  01AF  027F               	subwf	127,w
  6290  01B0  1D03               	skipz
  6291  01B1  29B4               	goto	u2755
  6292  01B2  3011               	movlw	17
  6293  01B3  024B               	subwf	OUTFQ@i_467,w
  6294  01B4                     u2755:	
  6295  01B4  1C03               	skipc
  6296  01B5  296F               	goto	l3141
  6297  01B6                     l3153:	
  6298                           
  6299                           ;FMCW.c: 186: }
  6300                           ;FMCW.c: 187: }
  6301                           ;FMCW.c: 190: H_OUT(fmcwtxrx);
  6302  01B6  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6303  01B7  00F3               	movwf	H_OUT@fmcwtxrx+1
  6304  01B8  0879               	movf	OUTFQ@fmcwtxrx,w
  6305  01B9  00F2               	movwf	H_OUT@fmcwtxrx
  6306  01BA  120A  158A  244F  120A  118A  	fcall	_H_OUT
  6307                           
  6308                           ;FMCW.c: 191: L_OUT(fmcwtxrx);
  6309  01BF  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6310  01C0  00F3               	movwf	L_OUT@fmcwtxrx+1
  6311  01C1  0879               	movf	OUTFQ@fmcwtxrx,w
  6312  01C2  00F2               	movwf	L_OUT@fmcwtxrx
  6313  01C3  120A  158A  2495  120A  118A  	fcall	_L_OUT
  6314                           
  6315                           ;FMCW.c: 194: STBOUT(fmcwtxrx);
  6316  01C8  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6317  01C9  00F3               	movwf	STBOUT@fmcwtxrx+1
  6318  01CA  0879               	movf	OUTFQ@fmcwtxrx,w
  6319  01CB  00F2               	movwf	STBOUT@fmcwtxrx
  6320  01CC  120A  158A  23B3   	fcall	_STBOUT
  6321  01CF  0008               	return
  6322  01D0                     __end_of_OUTFQ:	
  6323                           
  6324                           	psect	text24
  6325  0D27                     __ptext24:	
  6326 ;; *************** function ___awdiv *****************
  6327 ;; Defined at:
  6328 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;  divisor         2    0[COMMON] int 
  6331 ;;  dividend        2    2[COMMON] int 
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  quotient        2    7[COMMON] int 
  6334 ;;  sign            1    6[COMMON] unsigned char 
  6335 ;;  counter         1    5[COMMON] unsigned char 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  2    0[COMMON] int 
  6338 ;; Registers used:
  6339 ;;		wreg, status,2, status,0
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6345 ;;      Params:         4       0       0       0       0
  6346 ;;      Locals:         4       0       0       0       0
  6347 ;;      Temps:          1       0       0       0       0
  6348 ;;      Totals:         9       0       0       0       0
  6349 ;;Total ram usage:        9 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; This function calls:
  6352 ;;		Nothing
  6353 ;; This function is called by:
  6354 ;;		_OUTFQ
  6355 ;;		_RFDOUT
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           
  6360                           ;psect for function ___awdiv
  6361  0D27                     ___awdiv:	
  6362                           
  6363                           ;incstack = 0
  6364                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6365  0D27  01F6               	clrf	___awdiv@sign
  6366  0D28  1FF1               	btfss	___awdiv@divisor+1,7
  6367  0D29  2D31               	goto	l2597
  6368  0D2A  09F0               	comf	___awdiv@divisor,f
  6369  0D2B  09F1               	comf	___awdiv@divisor+1,f
  6370  0D2C  0AF0               	incf	___awdiv@divisor,f
  6371  0D2D  1903               	skipnz
  6372  0D2E  0AF1               	incf	___awdiv@divisor+1,f
  6373  0D2F  01F6               	clrf	___awdiv@sign
  6374  0D30  0AF6               	incf	___awdiv@sign,f
  6375  0D31                     l2597:	
  6376  0D31  1FF3               	btfss	___awdiv@dividend+1,7
  6377  0D32  2D3C               	goto	l2603
  6378  0D33  09F2               	comf	___awdiv@dividend,f
  6379  0D34  09F3               	comf	___awdiv@dividend+1,f
  6380  0D35  0AF2               	incf	___awdiv@dividend,f
  6381  0D36  1903               	skipnz
  6382  0D37  0AF3               	incf	___awdiv@dividend+1,f
  6383  0D38  3001               	movlw	1
  6384  0D39  00F4               	movwf	??___awdiv
  6385  0D3A  0874               	movf	??___awdiv,w
  6386  0D3B  06F6               	xorwf	___awdiv@sign,f
  6387  0D3C                     l2603:	
  6388  0D3C  01F7               	clrf	___awdiv@quotient
  6389  0D3D  01F8               	clrf	___awdiv@quotient+1
  6390  0D3E  0870               	movf	___awdiv@divisor,w
  6391  0D3F  0471               	iorwf	___awdiv@divisor+1,w
  6392  0D40  1903               	btfsc	3,2
  6393  0D41  2D73               	goto	l2625
  6394  0D42  01F5               	clrf	___awdiv@counter
  6395  0D43  0AF5               	incf	___awdiv@counter,f
  6396  0D44                     l2613:	
  6397  0D44  1BF1               	btfsc	___awdiv@divisor+1,7
  6398  0D45  2D52               	goto	l2615
  6399  0D46  3001               	movlw	1
  6400  0D47                     u1935:	
  6401  0D47  1003               	clrc
  6402  0D48  0DF0               	rlf	___awdiv@divisor,f
  6403  0D49  0DF1               	rlf	___awdiv@divisor+1,f
  6404  0D4A  3EFF               	addlw	-1
  6405  0D4B  1D03               	skipz
  6406  0D4C  2D47               	goto	u1935
  6407  0D4D  3001               	movlw	1
  6408  0D4E  00F4               	movwf	??___awdiv
  6409  0D4F  0874               	movf	??___awdiv,w
  6410  0D50  07F5               	addwf	___awdiv@counter,f
  6411  0D51  2D44               	goto	l2613
  6412  0D52                     l2615:	
  6413  0D52  3001               	movlw	1
  6414  0D53                     u1955:	
  6415  0D53  1003               	clrc
  6416  0D54  0DF7               	rlf	___awdiv@quotient,f
  6417  0D55  0DF8               	rlf	___awdiv@quotient+1,f
  6418  0D56  3EFF               	addlw	-1
  6419  0D57  1D03               	skipz
  6420  0D58  2D53               	goto	u1955
  6421  0D59  0871               	movf	___awdiv@divisor+1,w
  6422  0D5A  0273               	subwf	___awdiv@dividend+1,w
  6423  0D5B  1D03               	skipz
  6424  0D5C  2D5F               	goto	u1965
  6425  0D5D  0870               	movf	___awdiv@divisor,w
  6426  0D5E  0272               	subwf	___awdiv@dividend,w
  6427  0D5F                     u1965:	
  6428  0D5F  1C03               	skipc
  6429  0D60  2D68               	goto	l2621
  6430  0D61  0870               	movf	___awdiv@divisor,w
  6431  0D62  02F2               	subwf	___awdiv@dividend,f
  6432  0D63  0871               	movf	___awdiv@divisor+1,w
  6433  0D64  1C03               	skipc
  6434  0D65  03F3               	decf	___awdiv@dividend+1,f
  6435  0D66  02F3               	subwf	___awdiv@dividend+1,f
  6436  0D67  1477               	bsf	___awdiv@quotient,0
  6437  0D68                     l2621:	
  6438  0D68  3001               	movlw	1
  6439  0D69                     u1975:	
  6440  0D69  1003               	clrc
  6441  0D6A  0CF1               	rrf	___awdiv@divisor+1,f
  6442  0D6B  0CF0               	rrf	___awdiv@divisor,f
  6443  0D6C  3EFF               	addlw	-1
  6444  0D6D  1D03               	skipz
  6445  0D6E  2D69               	goto	u1975
  6446  0D6F  3001               	movlw	1
  6447  0D70  02F5               	subwf	___awdiv@counter,f
  6448  0D71  1D03               	btfss	3,2
  6449  0D72  2D52               	goto	l2615
  6450  0D73                     l2625:	
  6451  0D73  0876               	movf	___awdiv@sign,w
  6452  0D74  1903               	btfsc	3,2
  6453  0D75  2D7B               	goto	l2629
  6454  0D76  09F7               	comf	___awdiv@quotient,f
  6455  0D77  09F8               	comf	___awdiv@quotient+1,f
  6456  0D78  0AF7               	incf	___awdiv@quotient,f
  6457  0D79  1903               	skipnz
  6458  0D7A  0AF8               	incf	___awdiv@quotient+1,f
  6459  0D7B                     l2629:	
  6460  0D7B  0878               	movf	___awdiv@quotient+1,w
  6461  0D7C  00F1               	movwf	?___awdiv+1
  6462  0D7D  0877               	movf	___awdiv@quotient,w
  6463  0D7E  00F0               	movwf	?___awdiv
  6464  0D7F  0008               	return
  6465  0D80                     __end_of___awdiv:	
  6466                           
  6467                           	psect	text25
  6468  0F01                     __ptext25:	
  6469 ;; *************** function _OPINIT *****************
  6470 ;; Defined at:
  6471 ;;		line 246 in file "FMCW.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  fmcwtxrx        2    4[COMMON] int 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;		None
  6476 ;; Return value:  Size  Location     Type
  6477 ;;                  1    wreg      void 
  6478 ;; Registers used:
  6479 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6485 ;;      Params:         2       0       0       0       0
  6486 ;;      Locals:         0       0       0       0       0
  6487 ;;      Temps:          0       0       0       0       0
  6488 ;;      Totals:         2       0       0       0       0
  6489 ;;Total ram usage:        2 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; Hardware stack levels required when called:    2
  6492 ;; This function calls:
  6493 ;;		_H_OUT
  6494 ;;		_L_OUT
  6495 ;;		_STBOUT
  6496 ;; This function is called by:
  6497 ;;		_FMTX
  6498 ;;		_CWTX
  6499 ;;		_FMRX
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           
  6504                           ;psect for function _OPINIT
  6505  0F01                     _OPINIT:	
  6506                           
  6507                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  6508                           
  6509                           ;incstack = 0
  6510                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6511  0F01  0875               	movf	OPINIT@fmcwtxrx+1,w
  6512  0F02  00F3               	movwf	L_OUT@fmcwtxrx+1
  6513  0F03  0874               	movf	OPINIT@fmcwtxrx,w
  6514  0F04  00F2               	movwf	L_OUT@fmcwtxrx
  6515  0F05  120A  158A  2495  120A  158A  	fcall	_L_OUT
  6516                           
  6517                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  6518  0F0A  0875               	movf	OPINIT@fmcwtxrx+1,w
  6519  0F0B  00F3               	movwf	L_OUT@fmcwtxrx+1
  6520  0F0C  0874               	movf	OPINIT@fmcwtxrx,w
  6521  0F0D  00F2               	movwf	L_OUT@fmcwtxrx
  6522  0F0E  120A  158A  2495  120A  158A  	fcall	_L_OUT
  6523                           
  6524                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  6525  0F13  0875               	movf	OPINIT@fmcwtxrx+1,w
  6526  0F14  00F3               	movwf	L_OUT@fmcwtxrx+1
  6527  0F15  0874               	movf	OPINIT@fmcwtxrx,w
  6528  0F16  00F2               	movwf	L_OUT@fmcwtxrx
  6529  0F17  120A  158A  2495  120A  158A  	fcall	_L_OUT
  6530                           
  6531                           ;FMCW.c: 251: H_OUT(fmcwtxrx);
  6532  0F1C  0875               	movf	OPINIT@fmcwtxrx+1,w
  6533  0F1D  00F3               	movwf	H_OUT@fmcwtxrx+1
  6534  0F1E  0874               	movf	OPINIT@fmcwtxrx,w
  6535  0F1F  00F2               	movwf	H_OUT@fmcwtxrx
  6536  0F20  120A  158A  244F  120A  158A  	fcall	_H_OUT
  6537                           
  6538                           ;FMCW.c: 252: H_OUT(fmcwtxrx);
  6539  0F25  0875               	movf	OPINIT@fmcwtxrx+1,w
  6540  0F26  00F3               	movwf	H_OUT@fmcwtxrx+1
  6541  0F27  0874               	movf	OPINIT@fmcwtxrx,w
  6542  0F28  00F2               	movwf	H_OUT@fmcwtxrx
  6543  0F29  120A  158A  244F  120A  158A  	fcall	_H_OUT
  6544                           
  6545                           ;FMCW.c: 253: L_OUT(fmcwtxrx);
  6546  0F2E  0875               	movf	OPINIT@fmcwtxrx+1,w
  6547  0F2F  00F3               	movwf	L_OUT@fmcwtxrx+1
  6548  0F30  0874               	movf	OPINIT@fmcwtxrx,w
  6549  0F31  00F2               	movwf	L_OUT@fmcwtxrx
  6550  0F32  120A  158A  2495  120A  158A  	fcall	_L_OUT
  6551                           
  6552                           ;FMCW.c: 254: L_OUT(fmcwtxrx);
  6553  0F37  0875               	movf	OPINIT@fmcwtxrx+1,w
  6554  0F38  00F3               	movwf	L_OUT@fmcwtxrx+1
  6555  0F39  0874               	movf	OPINIT@fmcwtxrx,w
  6556  0F3A  00F2               	movwf	L_OUT@fmcwtxrx
  6557  0F3B  120A  158A  2495  120A  158A  	fcall	_L_OUT
  6558                           
  6559                           ;FMCW.c: 255: L_OUT(fmcwtxrx);
  6560  0F40  0875               	movf	OPINIT@fmcwtxrx+1,w
  6561  0F41  00F3               	movwf	L_OUT@fmcwtxrx+1
  6562  0F42  0874               	movf	OPINIT@fmcwtxrx,w
  6563  0F43  00F2               	movwf	L_OUT@fmcwtxrx
  6564  0F44  120A  158A  2495  120A  158A  	fcall	_L_OUT
  6565                           
  6566                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  6567  0F49  0875               	movf	OPINIT@fmcwtxrx+1,w
  6568  0F4A  00F3               	movwf	L_OUT@fmcwtxrx+1
  6569  0F4B  0874               	movf	OPINIT@fmcwtxrx,w
  6570  0F4C  00F2               	movwf	L_OUT@fmcwtxrx
  6571  0F4D  120A  158A  2495  120A  158A  	fcall	_L_OUT
  6572                           
  6573                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  6574  0F52  0875               	movf	OPINIT@fmcwtxrx+1,w
  6575  0F53  00F3               	movwf	L_OUT@fmcwtxrx+1
  6576  0F54  0874               	movf	OPINIT@fmcwtxrx,w
  6577  0F55  00F2               	movwf	L_OUT@fmcwtxrx
  6578  0F56  120A  158A  2495  120A  158A  	fcall	_L_OUT
  6579                           
  6580                           ;FMCW.c: 258: H_OUT(fmcwtxrx);
  6581  0F5B  0875               	movf	OPINIT@fmcwtxrx+1,w
  6582  0F5C  00F3               	movwf	H_OUT@fmcwtxrx+1
  6583  0F5D  0874               	movf	OPINIT@fmcwtxrx,w
  6584  0F5E  00F2               	movwf	H_OUT@fmcwtxrx
  6585  0F5F  120A  158A  244F  120A  158A  	fcall	_H_OUT
  6586                           
  6587                           ;FMCW.c: 261: L_OUT(fmcwtxrx);
  6588  0F64  0875               	movf	OPINIT@fmcwtxrx+1,w
  6589  0F65  00F3               	movwf	L_OUT@fmcwtxrx+1
  6590  0F66  0874               	movf	OPINIT@fmcwtxrx,w
  6591  0F67  00F2               	movwf	L_OUT@fmcwtxrx
  6592  0F68  120A  158A  2495  120A  158A  	fcall	_L_OUT
  6593                           
  6594                           ;FMCW.c: 262: L_OUT(fmcwtxrx);
  6595  0F6D  0875               	movf	OPINIT@fmcwtxrx+1,w
  6596  0F6E  00F3               	movwf	L_OUT@fmcwtxrx+1
  6597  0F6F  0874               	movf	OPINIT@fmcwtxrx,w
  6598  0F70  00F2               	movwf	L_OUT@fmcwtxrx
  6599  0F71  120A  158A  2495  120A  158A  	fcall	_L_OUT
  6600                           
  6601                           ;FMCW.c: 265: STBOUT(fmcwtxrx);
  6602  0F76  0875               	movf	OPINIT@fmcwtxrx+1,w
  6603  0F77  00F3               	movwf	STBOUT@fmcwtxrx+1
  6604  0F78  0874               	movf	OPINIT@fmcwtxrx,w
  6605  0F79  00F2               	movwf	STBOUT@fmcwtxrx
  6606  0F7A  120A  158A  23B3   	fcall	_STBOUT
  6607  0F7D  0008               	return
  6608  0F7E                     __end_of_OPINIT:	
  6609                           
  6610                           	psect	text26
  6611  0BB3                     __ptext26:	
  6612 ;; *************** function _STBOUT *****************
  6613 ;; Defined at:
  6614 ;;		line 107 in file "FMCW.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  fmcwtxrx        2    2[COMMON] int 
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;		None
  6619 ;; Return value:  Size  Location     Type
  6620 ;;                  1    wreg      void 
  6621 ;; Registers used:
  6622 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6628 ;;      Params:         2       0       0       0       0
  6629 ;;      Locals:         0       0       0       0       0
  6630 ;;      Temps:          0       0       0       0       0
  6631 ;;      Totals:         2       0       0       0       0
  6632 ;;Total ram usage:        2 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    1
  6635 ;; This function calls:
  6636 ;;		__NOP
  6637 ;; This function is called by:
  6638 ;;		_OUTFQ
  6639 ;;		_RFDOUT
  6640 ;;		_OPINIT
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _STBOUT
  6646  0BB3                     _STBOUT:	
  6647                           
  6648                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  6649                           
  6650                           ;incstack = 0
  6651                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6652  0BB3  0372               	decf	STBOUT@fmcwtxrx,w
  6653  0BB4  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  6654  0BB5  1D03               	btfss	3,2
  6655  0BB6  2BC2               	goto	l2573
  6656                           
  6657                           ;FMCW.c: 109: {
  6658                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  6659  0BB7  1283               	bcf	3,5	;RP0=0, select bank0
  6660  0BB8  1303               	bcf	3,6	;RP1=0, select bank0
  6661  0BB9  1685               	bsf	5,5	;volatile
  6662                           
  6663                           ;FMCW.c: 111: _NOP();
  6664  0BBA  120A  158A  22A8  120A  158A  	fcall	__NOP
  6665                           
  6666                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  6667  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  6668  0BC0  1303               	bcf	3,6	;RP1=0, select bank0
  6669  0BC1  1285               	bcf	5,5	;volatile
  6670  0BC2                     l2573:	
  6671                           
  6672                           ;FMCW.c: 113: }
  6673                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  6674  0BC2  3002               	movlw	2
  6675  0BC3  0672               	xorwf	STBOUT@fmcwtxrx,w
  6676  0BC4  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  6677  0BC5  1D03               	btfss	3,2
  6678  0BC6  2BD2               	goto	l2581
  6679                           
  6680                           ;FMCW.c: 115: {
  6681                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  6682  0BC7  1283               	bcf	3,5	;RP0=0, select bank0
  6683  0BC8  1303               	bcf	3,6	;RP1=0, select bank0
  6684  0BC9  1408               	bsf	8,0	;volatile
  6685                           
  6686                           ;FMCW.c: 117: _NOP();
  6687  0BCA  120A  158A  22A8  120A  158A  	fcall	__NOP
  6688                           
  6689                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  6690  0BCF  1283               	bcf	3,5	;RP0=0, select bank0
  6691  0BD0  1303               	bcf	3,6	;RP1=0, select bank0
  6692  0BD1  1008               	bcf	8,0	;volatile
  6693  0BD2                     l2581:	
  6694                           
  6695                           ;FMCW.c: 119: }
  6696                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  6697  0BD2  3003               	movlw	3
  6698  0BD3  0672               	xorwf	STBOUT@fmcwtxrx,w
  6699  0BD4  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  6700  0BD5  1D03               	btfss	3,2
  6701  0BD6  0008               	return
  6702                           
  6703                           ;FMCW.c: 121: {
  6704                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  6705  0BD7  1283               	bcf	3,5	;RP0=0, select bank0
  6706  0BD8  1303               	bcf	3,6	;RP1=0, select bank0
  6707  0BD9  1605               	bsf	5,4	;volatile
  6708                           
  6709                           ;FMCW.c: 123: _NOP();
  6710  0BDA  120A  158A  22A8   	fcall	__NOP
  6711                           
  6712                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  6713  0BDD  1283               	bcf	3,5	;RP0=0, select bank0
  6714  0BDE  1303               	bcf	3,6	;RP1=0, select bank0
  6715  0BDF  1205               	bcf	5,4	;volatile
  6716  0BE0  0008               	return
  6717  0BE1                     __end_of_STBOUT:	
  6718                           
  6719                           	psect	text27
  6720  0C95                     __ptext27:	
  6721 ;; *************** function _L_OUT *****************
  6722 ;; Defined at:
  6723 ;;		line 40 in file "FMCW.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;  fmcwtxrx        2    2[COMMON] int 
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      void 
  6730 ;; Registers used:
  6731 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6737 ;;      Params:         2       0       0       0       0
  6738 ;;      Locals:         0       0       0       0       0
  6739 ;;      Temps:          0       0       0       0       0
  6740 ;;      Totals:         2       0       0       0       0
  6741 ;;Total ram usage:        2 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    1
  6744 ;; This function calls:
  6745 ;;		__NOP
  6746 ;; This function is called by:
  6747 ;;		_OUTFQ
  6748 ;;		_RFDOUT
  6749 ;;		_OPINIT
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           
  6754                           ;psect for function _L_OUT
  6755  0C95                     _L_OUT:	
  6756                           
  6757                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  6758                           
  6759                           ;incstack = 0
  6760                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6761  0C95  0372               	decf	L_OUT@fmcwtxrx,w
  6762  0C96  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  6763  0C97  1D03               	btfss	3,2
  6764  0C98  2CAC               	goto	l2515
  6765                           
  6766                           ;FMCW.c: 42: {
  6767                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  6768  0C99  1283               	bcf	3,5	;RP0=0, select bank0
  6769  0C9A  1303               	bcf	3,6	;RP1=0, select bank0
  6770  0C9B  1009               	bcf	9,0	;volatile
  6771                           
  6772                           ;FMCW.c: 44: _NOP();
  6773  0C9C  120A  158A  22A8  120A  158A  	fcall	__NOP
  6774                           
  6775                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  6776  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  6777  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  6778  0CA3  1489               	bsf	9,1	;volatile
  6779                           
  6780                           ;FMCW.c: 46: _NOP();
  6781  0CA4  120A  158A  22A8  120A  158A  	fcall	__NOP
  6782                           
  6783                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  6784  0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  6785  0CAA  1303               	bcf	3,6	;RP1=0, select bank0
  6786  0CAB  1089               	bcf	9,1	;volatile
  6787  0CAC                     l2515:	
  6788                           
  6789                           ;FMCW.c: 48: }
  6790                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  6791  0CAC  3002               	movlw	2
  6792  0CAD  0672               	xorwf	L_OUT@fmcwtxrx,w
  6793  0CAE  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  6794  0CAF  1D03               	btfss	3,2
  6795  0CB0  2CC4               	goto	l2525
  6796                           
  6797                           ;FMCW.c: 50: {
  6798                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  6799  0CB1  1283               	bcf	3,5	;RP0=0, select bank0
  6800  0CB2  1303               	bcf	3,6	;RP1=0, select bank0
  6801  0CB3  1088               	bcf	8,1	;volatile
  6802                           
  6803                           ;FMCW.c: 52: _NOP();
  6804  0CB4  120A  158A  22A8  120A  158A  	fcall	__NOP
  6805                           
  6806                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  6807  0CB9  1283               	bcf	3,5	;RP0=0, select bank0
  6808  0CBA  1303               	bcf	3,6	;RP1=0, select bank0
  6809  0CBB  1508               	bsf	8,2	;volatile
  6810                           
  6811                           ;FMCW.c: 54: _NOP();
  6812  0CBC  120A  158A  22A8  120A  158A  	fcall	__NOP
  6813                           
  6814                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  6815  0CC1  1283               	bcf	3,5	;RP0=0, select bank0
  6816  0CC2  1303               	bcf	3,6	;RP1=0, select bank0
  6817  0CC3  1108               	bcf	8,2	;volatile
  6818  0CC4                     l2525:	
  6819                           
  6820                           ;FMCW.c: 56: }
  6821                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  6822  0CC4  3003               	movlw	3
  6823  0CC5  0672               	xorwf	L_OUT@fmcwtxrx,w
  6824  0CC6  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  6825  0CC7  1D03               	btfss	3,2
  6826  0CC8  0008               	return
  6827                           
  6828                           ;FMCW.c: 58: {
  6829                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  6830  0CC9  1283               	bcf	3,5	;RP0=0, select bank0
  6831  0CCA  1303               	bcf	3,6	;RP1=0, select bank0
  6832  0CCB  1185               	bcf	5,3	;volatile
  6833                           
  6834                           ;FMCW.c: 60: _NOP();
  6835  0CCC  120A  158A  22A8  120A  158A  	fcall	__NOP
  6836                           
  6837                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  6838  0CD1  1283               	bcf	3,5	;RP0=0, select bank0
  6839  0CD2  1303               	bcf	3,6	;RP1=0, select bank0
  6840  0CD3  1505               	bsf	5,2	;volatile
  6841                           
  6842                           ;FMCW.c: 62: _NOP();
  6843  0CD4  120A  158A  22A8   	fcall	__NOP
  6844                           
  6845                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  6846  0CD7  1283               	bcf	3,5	;RP0=0, select bank0
  6847  0CD8  1303               	bcf	3,6	;RP1=0, select bank0
  6848  0CD9  1105               	bcf	5,2	;volatile
  6849  0CDA  0008               	return
  6850  0CDB                     __end_of_L_OUT:	
  6851                           
  6852                           	psect	text28
  6853  0C4F                     __ptext28:	
  6854 ;; *************** function _H_OUT *****************
  6855 ;; Defined at:
  6856 ;;		line 74 in file "FMCW.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;  fmcwtxrx        2    2[COMMON] int 
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;		None
  6861 ;; Return value:  Size  Location     Type
  6862 ;;                  1    wreg      void 
  6863 ;; Registers used:
  6864 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6870 ;;      Params:         2       0       0       0       0
  6871 ;;      Locals:         0       0       0       0       0
  6872 ;;      Temps:          0       0       0       0       0
  6873 ;;      Totals:         2       0       0       0       0
  6874 ;;Total ram usage:        2 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:    1
  6877 ;; This function calls:
  6878 ;;		__NOP
  6879 ;; This function is called by:
  6880 ;;		_OUTFQ
  6881 ;;		_RFDOUT
  6882 ;;		_OPINIT
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           
  6887                           ;psect for function _H_OUT
  6888  0C4F                     _H_OUT:	
  6889                           
  6890                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  6891                           
  6892                           ;incstack = 0
  6893                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6894  0C4F  0372               	decf	H_OUT@fmcwtxrx,w
  6895  0C50  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  6896  0C51  1D03               	btfss	3,2
  6897  0C52  2C66               	goto	l2545
  6898                           
  6899                           ;FMCW.c: 76: {
  6900                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  6901  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  6902  0C54  1303               	bcf	3,6	;RP1=0, select bank0
  6903  0C55  1409               	bsf	9,0	;volatile
  6904                           
  6905                           ;FMCW.c: 78: _NOP();
  6906  0C56  120A  158A  22A8  120A  158A  	fcall	__NOP
  6907                           
  6908                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  6909  0C5B  1283               	bcf	3,5	;RP0=0, select bank0
  6910  0C5C  1303               	bcf	3,6	;RP1=0, select bank0
  6911  0C5D  1489               	bsf	9,1	;volatile
  6912                           
  6913                           ;FMCW.c: 80: _NOP();
  6914  0C5E  120A  158A  22A8  120A  158A  	fcall	__NOP
  6915                           
  6916                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  6917  0C63  1283               	bcf	3,5	;RP0=0, select bank0
  6918  0C64  1303               	bcf	3,6	;RP1=0, select bank0
  6919  0C65  1089               	bcf	9,1	;volatile
  6920  0C66                     l2545:	
  6921                           
  6922                           ;FMCW.c: 82: }
  6923                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  6924  0C66  3002               	movlw	2
  6925  0C67  0672               	xorwf	H_OUT@fmcwtxrx,w
  6926  0C68  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  6927  0C69  1D03               	btfss	3,2
  6928  0C6A  2C7E               	goto	l2555
  6929                           
  6930                           ;FMCW.c: 84: {
  6931                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  6932  0C6B  1283               	bcf	3,5	;RP0=0, select bank0
  6933  0C6C  1303               	bcf	3,6	;RP1=0, select bank0
  6934  0C6D  1488               	bsf	8,1	;volatile
  6935                           
  6936                           ;FMCW.c: 86: _NOP();
  6937  0C6E  120A  158A  22A8  120A  158A  	fcall	__NOP
  6938                           
  6939                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  6940  0C73  1283               	bcf	3,5	;RP0=0, select bank0
  6941  0C74  1303               	bcf	3,6	;RP1=0, select bank0
  6942  0C75  1508               	bsf	8,2	;volatile
  6943                           
  6944                           ;FMCW.c: 88: _NOP();
  6945  0C76  120A  158A  22A8  120A  158A  	fcall	__NOP
  6946                           
  6947                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  6948  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  6949  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  6950  0C7D  1108               	bcf	8,2	;volatile
  6951  0C7E                     l2555:	
  6952                           
  6953                           ;FMCW.c: 90: }
  6954                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  6955  0C7E  3003               	movlw	3
  6956  0C7F  0672               	xorwf	H_OUT@fmcwtxrx,w
  6957  0C80  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  6958  0C81  1D03               	btfss	3,2
  6959  0C82  0008               	return
  6960                           
  6961                           ;FMCW.c: 92: {
  6962                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  6963  0C83  1283               	bcf	3,5	;RP0=0, select bank0
  6964  0C84  1303               	bcf	3,6	;RP1=0, select bank0
  6965  0C85  1585               	bsf	5,3	;volatile
  6966                           
  6967                           ;FMCW.c: 94: _NOP();
  6968  0C86  120A  158A  22A8  120A  158A  	fcall	__NOP
  6969                           
  6970                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  6971  0C8B  1283               	bcf	3,5	;RP0=0, select bank0
  6972  0C8C  1303               	bcf	3,6	;RP1=0, select bank0
  6973  0C8D  1505               	bsf	5,2	;volatile
  6974                           
  6975                           ;FMCW.c: 96: _NOP();
  6976  0C8E  120A  158A  22A8   	fcall	__NOP
  6977                           
  6978                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  6979  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  6980  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  6981  0C93  1105               	bcf	5,2	;volatile
  6982  0C94  0008               	return
  6983  0C95                     __end_of_H_OUT:	
  6984                           
  6985                           	psect	text29
  6986  0AA8                     __ptext29:	
  6987 ;; *************** function __NOP *****************
  6988 ;; Defined at:
  6989 ;;		line 354 in file "FMCW.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;		None
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;  i               2    0[COMMON] int 
  6994 ;; Return value:  Size  Location     Type
  6995 ;;                  1    wreg      void 
  6996 ;; Registers used:
  6997 ;;		wreg, status,2, btemp+1
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7003 ;;      Params:         0       0       0       0       0
  7004 ;;      Locals:         2       0       0       0       0
  7005 ;;      Temps:          0       0       0       0       0
  7006 ;;      Totals:         2       0       0       0       0
  7007 ;;Total ram usage:        2 bytes
  7008 ;; Hardware stack levels used:    1
  7009 ;; This function calls:
  7010 ;;		Nothing
  7011 ;; This function is called by:
  7012 ;;		_L_OUT
  7013 ;;		_H_OUT
  7014 ;;		_STBOUT
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           
  7019                           ;psect for function __NOP
  7020  0AA8                     __NOP:	
  7021                           
  7022                           ;FMCW.c: 355: for(int i=0; i<5; i++){
  7023                           
  7024                           ;incstack = 0
  7025                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  7026  0AA8  01F0               	clrf	__NOP@i
  7027  0AA9  01F1               	clrf	__NOP@i+1
  7028  0AAA                     L8:	
  7029  0AAA  0871               	movf	__NOP@i+1,w
  7030  0AAB  3A80               	xorlw	128
  7031  0AAC  00FF               	movwf	127
  7032  0AAD  3080               	movlw	128
  7033  0AAE  027F               	subwf	127,w
  7034  0AAF  1D03               	skipz
  7035  0AB0  2AB3               	goto	u1745
  7036  0AB1  3005               	movlw	5
  7037  0AB2  0270               	subwf	__NOP@i,w
  7038  0AB3                     u1745:	
  7039  0AB3  1803               	btfsc	3,0
  7040  0AB4  0008               	return
  7041                           
  7042                           ;FMCW.c: 356: __nop();
  7043  0AB5  0000               	nop
  7044  0AB6  3001               	movlw	1
  7045  0AB7  07F0               	addwf	__NOP@i,f
  7046  0AB8  1803               	skipnc
  7047  0AB9  0AF1               	incf	__NOP@i+1,f
  7048  0ABA  3000               	movlw	0
  7049  0ABB  07F1               	addwf	__NOP@i+1,f
  7050  0ABC  2AAA               	goto	L8
  7051  0ABD                     __end_of__NOP:	
  7052  007E                     btemp	set	126	;btemp
  7053  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    2
    Data        37
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      79
    BANK1            80      0      79
    BANK3            96      0      57
    BANK2            96      0       0

Pointer List with Targets:

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK3[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK1[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK1[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK1[16]), 


Critical Paths under _main in COMMON

    _TXOBC_waddress->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   29333
                                             51 BANK0      6     6      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                     _TXOBC_waddress
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     194
                                              1 COMMON     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    8331
                                             45 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    8331
                                             45 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    8331
                                             45 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    2913
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               49    45      4    2914
                                              9 COMMON     4     0      4
                                              0 BANK0     45    45      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     512
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _TXOBC_waddress
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      39       9       59.4%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     39      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      E5      12        0.0%
ABS                  0      0      E5       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 28 01:08:16 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l69 0A6A  
                  ___awdiv@sign 0076                              fsr 0004                             l214 057B  
                           l442 032D                             l443 031A                             l279 0FE5  
                           l492 0003                             _RA1 0029                             _RB2 0032  
                           _RC2 003A                             _RB4 0034                             _RB5 0035  
                           _RC5 003D                             _PEN 048A                    __CFG_CPD$OFF 0000  
                           _SEN 0488                             _RX9 00C6                             _TX9 04C6  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                  __CFG_LVP$OFF 0000                            l3031 0E64                            l3015 07C5  
                          l3121 011A                            l3041 0E80                            l3033 0E67  
                          l3017 0344                            l3115 00FE                            l3211 0DFD  
                          l3051 0E44                            l3141 016F                            l3037 0E75  
                          l3301 0ECD                            l3135 0160                            l3127 0129  
                          l3223 0E32                            l3071 0FCA                            l3145 0189  
                          l3153 01B6                            l3161 001B                            l3209 0DED  
                          l3065 0FAD                            l2515 0CAC                            l2603 0D3C  
                          l3219 0E25                            l3091 0FFD                            l3307 0EF5  
                          l3315 0EFB                            l2525 0CC4                            l2621 0D68  
                          l2613 0D44                            l3149 01A3                            l3181 007D  
                          l3173 0046                            l3077 0FDE                            l2701 03F5  
                          l2615 0D52                            l3191 00A6                            l3167 0037  
                          l3415 0DB0                            l3079 0F8C                            l2545 0C66  
                          l2625 0D73                            l3417 0DCA                            l2801 0540  
                          l2713 0423                            l2555 0C7E                            l3195 00C0  
                          l3187 008C                            l2723 043E                            l2651 034B  
                          l2581 0BD2                            l2573 0BC2                            l2629 0D7B  
                          l2805 054D                            l2653 036A                            l3199 00D3  
                          l2495 0D15                            l2727 044B                            l2823 0579  
                          l3711 02B3                            l2497 0D22                            l2905 066F  
                          l2753 04A1                            l2673 039B                            l3705 02A2  
                          l2931 06C5                            l2915 068A                            l2843 05AC  
                          l2739 0479                            l2659 0373                            l2597 0D31  
                          l2941 06E0                            l2853 05C3                            l2829 0584  
                          l2765 04CF                            l2749 0494                            l2669 038E  
                          l3725 0302                            l2919 0697                            l2863 05DE  
                          l2839 059F                            l2791 0525                            l2775 04EA  
                          l2687 03CD                            l2945 06ED                            l2697 03E8  
                          l3681 0239                            l2971 0743                            l2867 05EB  
                          l2779 04F7                            l2957 071B                            l2893 0641  
                          l2983 0771                            l2967 0736                            l2879 0619  
                          l2993 078C                            l2889 0634                            l2997 0799  
                          STR_1 080F                            STR_2 080F                            STR_3 080F  
                          STR_4 080F                            STR_5 080F                            STR_6 080F  
                          STR_7 0808                            STR_8 0808                            STR_9 0808  
                          _BRGH 04C2                            _CREN 00C4                            _FERR 00C2  
                          u2115 040A                            u3005 0BF3                            u2235 050C  
                          u2155 0460                            u2075 03B4                            u2505 0758  
                          u2425 06AC                            u2345 0600                            u2275 0562  
                          u2195 04B6                            u3407 0285                            _FMRX 0B5B  
                          u1745 0AB3                            u2705 0127                            u2545 07AE  
                          u2465 0702                            u2385 0656                            u3417 02C0  
                          u2715 015E                            u3507 0B27                            u3427 02FB  
                          _FMTX 0B87                            u2725 016D                            u2805 008A  
                          u2645 0F9A                            u3517 0D09                            u3437 0323  
                          u1935 0D47                            u3527 0DD5                            u1775 0D05  
                          u3447 0335                            u3367 01D8                            u3457 0C1D  
                          u3377 0202                            u1955 0D53                            u2755 01B4  
                          u2835 00D1                            u3467 0C2B                            u3387 024C  
                          u1965 0D5F                            u2685 00FC                            u2765 0019  
                          u2925 0ECB                            u3477 0C39                            u3397 0269  
                          u1975 0D69                            u2695 0118                            u2775 0035  
                          u2855 0DF1                            u2935 0EF3                            u3487 0C47  
                          u2785 0044                            u3497 0B16                            u2795 007B  
                          u2875 0DFF                            _RCIE 0465                            _RCEN 048B  
                          _RCIF 0065                            _CWTX 0B2F                            u2885 0E14  
                          u2895 0E26                            _OERR 00C1                            _TMR1 000E  
                          _SPEN 00C7                            _RSEN 0489                            _SREN 00C5  
                          _TXIE 0464                            _TXEN 04C5                            _TXIF 0064  
                          _SYNC 04C4                            __NOP 0AA8  TXOBC_waddress@TXOBC_wad_header 0075  
                  __CFG_WRT$OFF 0000                            _main 01D0                     _NM_waddress 0A96  
                 ??_Init_SERIAL 0070                            btemp 007E                   __CFG_BOREN$ON 0000  
                  getbit@oldbit 00DD                     Init_I2C_M@c 0020                            start 0000  
  ReceivePacket_data@fcschecker 003D                   __CFG_IESO$OFF 0000                   __CFG_MCLRE$ON 0000  
          __end_of_EEPROM_Write 0DDD                           ?_FMRX 004D                           ?_FMTX 004D  
                         ?_CWTX 004D                ?_I2C_Master_Wait 0070                ?_I2C_Master_Stop 0070  
                         ?__NOP 0070                           ?_main 0070                           _ACKEN 048C  
                         _ACKDT 048D                 __end_of___awdiv 0D80                           STR_10 0808  
                         STR_11 0808                           STR_12 0808                   __CFG_WDTE$OFF 0000  
                         _ANSEL 0188                 __end_of___lldiv 0E3B                 ___awdiv@divisor 0070  
       __size_of_TXOBC_waddress 003A                 ___awdiv@counter 0075                           _RCREG 001A  
                         _SPBRG 0099                           _PORTA 0005                           _PORTB 0006  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _H_OUT 0C4F                           _OUTFQ 00ED                           _TRISA 0085  
                         _TRISB 0086                           _TRISC 0087                           _TRISD 0088  
                         _TRISE 0089                           _L_OUT 0C95                           _TXREG 0019  
                 __CFG_PWRTE$ON 0000                  __CFG_FCMEN$OFF 0000                           _dData 00DF  
               __end_of_getdata 0E9C                           _eflag 0065                   getdata@dstuff 0022  
                         _putch 0A69                           pclath 000A                           status 0003  
                         wtemp0 007E                      _Init_I2C_M 0BE1                EEPROM_Write@data 0074  
    __end_of_ReceivePacket_data 0F01                    __end_of_FMRX 0B87                    __end_of_FMTX 0BB3  
                  __end_of_CWTX 0B5B                    __end_of__NOP 0ABD                 __initialization 07C8  
                  __end_of_main 033C             __end_of_Init_SERIAL 0AD6                __end_of_Init_MPU 0B0C  
                        ??_FMRX 007D                          ??_FMTX 007D                          ??_CWTX 007D  
                        ??__NOP 0070                          ??_main 0053                          ?_H_OUT 0072  
      EEPROM_Write@high_address 0072                          ?_OUTFQ 0079                          ?_L_OUT 0072  
             ?_I2C_Master_Start 0070               ?_I2C_Master_Write 0070                          OUTFQ@i 0047  
            ??_I2C_Master_Start 0070              ??_I2C_Master_Write 0072                ___awdiv@dividend 0072  
                    _eDataField 01B0                          ?_putch 0070                          _ANSELH 0189  
                        _RFDOUT 000C                          _OPINIT 0F01                          _SSPADD 0093  
                        _STBOUT 0BB3                          _STATUS 0003                          _SSPCON 0014  
                        _SSPBUF 0013                          __NOP@i 0070                __end_of_fcscheck 1000  
                     ??___awdiv 0074                          _dfcshi 006E                       ??___lldiv 0078  
                        _dfcslo 006D                          _efcshi 006B                          _efcslo 006C  
                        _getbit 0CDB              __size_of_Reset_EPS 0023                          _estuff 00D9  
              ___awdiv@quotient 0077                      _dPacketnum 0067                       ??_getdata 0076  
                   RFDOUT@i_476 003B                     RFDOUT@i_477 003F                __end_of_waitFlag 07C8  
    EEPROM_Write@EEPROM_address 0078         __end_of__initialization 07FC         EEPROM_Write@low_address 0073  
                   ?_Init_I2C_M 0020                     _Init_SERIAL 0ABD           __size_of_EEPROM_Write 005D  
                 __end_of_H_OUT 0C95                   __end_of_OUTFQ 01D0                   __end_of_L_OUT 0CDB  
                 L_OUT@fmcwtxrx 0072                  __pcstackCOMMON 0070                    __pidataBANK0 0A79  
                  __pidataBANK3 0AD6                   __end_of_putch 0A71                  _TXOBC_waddress 0C15  
                       ??_H_OUT 0074                         ??_OUTFQ 0020                         ??_L_OUT 0074  
                       ??_putch 0070                    _EEPROM_Write 0D80                      __pbssBANK0 0065  
                    __pbssBANK1 00A0                      __pbssBANK3 0190               __end_of_Reset_EPS 0B2F  
                     ?_Init_MPU 0070                         ?_RFDOUT 0079                         ?_OPINIT 0074  
                  ?_NM_waddress 0071                         ?_STBOUT 0072                         RFDOUT@i 003D  
                    __pmaintext 01D0                      _ebitstatus 00D7                         ?_getbit 0070  
        __end_of_TXOBC_waddress 0C4F     TXOBC_waddress@whigh_address 0071             __size_of_Init_I2C_M 0034  
                     OUTFQ@Nprg 007B                       ?_fcscheck 0070                         _SSPCON2 0091  
                       _SSPSTAT 0094                      __stringtab 0800                      ??_Init_MPU 0070  
               __size_of_RFDOUT 00E1                 __size_of_OPINIT 007D                 __size_of_STBOUT 002E  
                     ?_waitFlag 0070                         _dPacket 00A0                         _ePacket 00D2  
                       ___awdiv 0D27                         ___lldiv 0DDD                 __size_of_getbit 004C  
                   waitFlag@buf 003C                 ?_TXOBC_waddress 0071                         __ptext1 0C15  
                       __ptext2 0B0C                         __ptext3 0E9C                         __ptext4 033C  
                       __ptext5 0E3B                         __ptext6 0CDB                         __ptext7 0F7E  
                       __ptext8 0A96                         __ptext9 0A69                         _getdata 0E3B  
            _ReceivePacket_data 0E9C                       _T1CONbits 0010        __size_of_I2C_Master_Wait 0009  
      __size_of_I2C_Master_Stop 0007                      ??_fcscheck 0072             ?_ReceivePacket_data 0070  
                       getbit@i 0074                         clrloop0 0A72            end_of_initialization 07FC  
                  RFDOUT@Nref_b 0023                       _FMRX_Nref 005B                       _FMRX_Nprg 0059  
                     _FMTX_Nref 0063                       _FMTX_Nprg 0061                       _CWTX_Nref 005F  
                     _CWTX_Nprg 005D                     OUTFQ@Nprg_b 0023       __size_of_I2C_Master_Start 0007  
     __size_of_I2C_Master_Write 0008                 ___lldiv@divisor 0070                 ___lldiv@counter 007D  
                    ??_waitFlag 0076            ??_ReceivePacket_data 007A                      fcscheck@bt 0074  
                OPINIT@fmcwtxrx 0074                       _PORTAbits 0005                       _PORTCbits 0007  
                     _PORTDbits 0008                       _PORTEbits 0009                      getdata@buf 0026  
                  ??_Init_I2C_M 0024                    ?_Init_SERIAL 0070                  __end_of_RFDOUT 00ED  
                __end_of_OPINIT 0F7E                  __end_of_STBOUT 0BE1            __size_of_NM_waddress 0012  
                __end_of_getbit 0D27      TXOBC_waddress@wlow_address 0072             start_initialization 07C8  
            __end_of_Init_I2C_M 0C15                        ??_RFDOUT 0020                        ??_OPINIT 0076  
             ??_I2C_Master_Wait 0070               ??_I2C_Master_Stop 0070                        ??_STBOUT 0074  
             __size_of_Init_MPU 001D                       _Reset_EPS 0B0C               getdata@dbitstatus 0024  
                    init_fetch0 0A85                        ??_getbit 0072                     __pdataBANK0 0059  
                   __pdataBANK3 01B0                      RFDOUT@Nref 007B             __end_of_commandSize 0808  
      NM_waddress@whigh_address 0071                       ___latbits 0002                   __pcstackBANK0 0020  
                      FMRX@Nref 004D                        FMRX@Nprg 004F                        FMTX@Nref 004D  
                      FMTX@Nprg 004F                        FMRX@fmrx 0051                        FMTX@fmtx 0051  
                      CWTX@Nref 004D                        CWTX@Nprg 004F               __size_of_fcscheck 0082  
                 waitFlag@j_120 0026                   waitFlag@j_122 0028                   waitFlag@j_131 0032  
                 waitFlag@j_124 002A                   waitFlag@j_133 0034                   waitFlag@j_126 002C  
                 waitFlag@j_118 0024                   waitFlag@j_135 0036                   waitFlag@j_127 002E  
                 waitFlag@j_137 0038                   waitFlag@j_129 0030                        CWTX@cwtx 0051  
              _I2C_Master_Start 0A53                      ?_Reset_EPS 0070                _I2C_Master_Write 0A61  
              ??_TXOBC_waddress 0073         getdata@bufstore_counter 0020                        ?___awdiv 0070  
                      ?___lldiv 0070               __size_of_waitFlag 048C                       __pstrings 0800  
                      ?_getdata 0070                  __size_of_H_OUT 0046                  __size_of_OUTFQ 00E3  
                __size_of_L_OUT 0046                  __size_of_putch 0008                   H_OUT@fmcwtxrx 0072  
                     clear_ram0 0A71                        _PIE1bits 008C                      OUTFQ@i_466 0049  
                    OUTFQ@i_467 004B                       _rcv_state 0069            __size_of_Init_SERIAL 0019  
                      _PIR1bits 000C                      OUTFQ@count 0045                     _commandSize 0806  
                     fcscheck@i 0075                     __stringbase 0805                       main@dData 0058  
                      _Init_MPU 0AEF                     ??_Reset_EPS 0070                   fcscheck@i_149 0077  
   __size_of_ReceivePacket_data 0065                __size_of___awdiv 0059                __size_of___lldiv 005E  
            __end_of__stringtab 0806                      _EEPROMData 0190                __size_of_getdata 0061  
               _I2C_Master_Wait 0003                 _I2C_Master_Stop 0A5A                  RFDOUT@fmcwtxrx 0079  
                      _efcsflag 00DB                        _fcscheck 0F7E                        __ptext10 0ABD  
                      __ptext11 0AEF                        __ptext20 0003                        __ptext12 0BE1  
                      __ptext21 0B2F                        __ptext13 0DDD                        __ptext22 000C  
                      __ptext14 0B87                        __ptext23 00ED                        __ptext15 0B5B  
                      __ptext24 0D27                        __ptext16 0D80                        __ptext25 0F01  
                      __ptext17 0A61                        __ptext26 0BB3                        __ptext18 0A5A  
                      __ptext27 0C95                        __ptext19 0A53                        __ptext28 0C4F  
                      __ptext29 0AA8               __CFG_BOR4V$BOR21V 0000                   ?_EEPROM_Write 0072  
                 __size_of_FMRX 002C                   __size_of_FMTX 002C                   __size_of_CWTX 002C  
                 __size_of__NOP 0015                   ??_NM_waddress 0073                       waitFlag@i 0020  
                     waitFlag@j 0022                   __size_of_main 016C                  STBOUT@fmcwtxrx 0072  
                      _waitFlag 033C        NM_waddress@NM_wad_header 0073                   OUTFQ@fmcwtxrx 0079  
      __end_of_I2C_Master_Start 0A5A                       putch@byte 0070        __end_of_I2C_Master_Write 0A69  
                    _INTCONbits 000B                        init_ram0 0A89                    fcscheck@byte 0079  
                ??_EEPROM_Write 0075              waitFlag@flag_judge 003A                ___lldiv@dividend 0074  
                     stringcode 0800               main@NM_wad_header 0057             __end_of_NM_waddress 0AA8  
       __end_of_I2C_Master_Wait 000C         __end_of_I2C_Master_Stop 0A61                ___lldiv@quotient 0079  
             I2C_Master_Write@d 0070             EEPROM_Write@Address 0079                        stringdir 0800  
                      stringtab 0800             ReceivePacket_data@i 003F         NM_waddress@wlow_address 0072  
          main@TXOBC_wad_header 0056  
