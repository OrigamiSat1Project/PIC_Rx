

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 28 10:40:19 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 1.45
    48                           ; Generated 16/11/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F887 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0014                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  001D                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0087                     	;# 
   120  0088                     	;# 
   121  0089                     	;# 
   122  008C                     	;# 
   123  008D                     	;# 
   124  008E                     	;# 
   125  008F                     	;# 
   126  0090                     	;# 
   127  0091                     	;# 
   128  0092                     	;# 
   129  0093                     	;# 
   130  0093                     	;# 
   131  0093                     	;# 
   132  0094                     	;# 
   133  0095                     	;# 
   134  0096                     	;# 
   135  0097                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009A                     	;# 
   139  009B                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  0105                     	;# 
   145  0107                     	;# 
   146  0108                     	;# 
   147  0109                     	;# 
   148  010C                     	;# 
   149  010C                     	;# 
   150  010D                     	;# 
   151  010E                     	;# 
   152  010F                     	;# 
   153  0185                     	;# 
   154  0187                     	;# 
   155  0188                     	;# 
   156  0189                     	;# 
   157  018C                     	;# 
   158  018D                     	;# 
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  0087                     	;# 
   198  0088                     	;# 
   199  0089                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  008F                     	;# 
   204  0090                     	;# 
   205  0091                     	;# 
   206  0092                     	;# 
   207  0093                     	;# 
   208  0093                     	;# 
   209  0093                     	;# 
   210  0094                     	;# 
   211  0095                     	;# 
   212  0096                     	;# 
   213  0097                     	;# 
   214  0098                     	;# 
   215  0099                     	;# 
   216  009A                     	;# 
   217  009B                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  0105                     	;# 
   223  0107                     	;# 
   224  0108                     	;# 
   225  0109                     	;# 
   226  010C                     	;# 
   227  010C                     	;# 
   228  010D                     	;# 
   229  010E                     	;# 
   230  010F                     	;# 
   231  0185                     	;# 
   232  0187                     	;# 
   233  0188                     	;# 
   234  0189                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  0000                     	;# 
   238  0001                     	;# 
   239  0002                     	;# 
   240  0003                     	;# 
   241  0004                     	;# 
   242  0005                     	;# 
   243  0006                     	;# 
   244  0007                     	;# 
   245  0008                     	;# 
   246  0009                     	;# 
   247  000A                     	;# 
   248  000B                     	;# 
   249  000C                     	;# 
   250  000D                     	;# 
   251  000E                     	;# 
   252  000E                     	;# 
   253  000F                     	;# 
   254  0010                     	;# 
   255  0011                     	;# 
   256  0012                     	;# 
   257  0013                     	;# 
   258  0014                     	;# 
   259  0015                     	;# 
   260  0015                     	;# 
   261  0016                     	;# 
   262  0017                     	;# 
   263  0018                     	;# 
   264  0019                     	;# 
   265  001A                     	;# 
   266  001B                     	;# 
   267  001B                     	;# 
   268  001C                     	;# 
   269  001D                     	;# 
   270  001E                     	;# 
   271  001F                     	;# 
   272  0081                     	;# 
   273  0085                     	;# 
   274  0086                     	;# 
   275  0087                     	;# 
   276  0088                     	;# 
   277  0089                     	;# 
   278  008C                     	;# 
   279  008D                     	;# 
   280  008E                     	;# 
   281  008F                     	;# 
   282  0090                     	;# 
   283  0091                     	;# 
   284  0092                     	;# 
   285  0093                     	;# 
   286  0093                     	;# 
   287  0093                     	;# 
   288  0094                     	;# 
   289  0095                     	;# 
   290  0096                     	;# 
   291  0097                     	;# 
   292  0098                     	;# 
   293  0099                     	;# 
   294  009A                     	;# 
   295  009B                     	;# 
   296  009C                     	;# 
   297  009D                     	;# 
   298  009E                     	;# 
   299  009F                     	;# 
   300  0105                     	;# 
   301  0107                     	;# 
   302  0108                     	;# 
   303  0109                     	;# 
   304  010C                     	;# 
   305  010C                     	;# 
   306  010D                     	;# 
   307  010E                     	;# 
   308  010F                     	;# 
   309  0185                     	;# 
   310  0187                     	;# 
   311  0188                     	;# 
   312  0189                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000D                     	;# 
   329  000E                     	;# 
   330  000E                     	;# 
   331  000F                     	;# 
   332  0010                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0013                     	;# 
   336  0014                     	;# 
   337  0015                     	;# 
   338  0015                     	;# 
   339  0016                     	;# 
   340  0017                     	;# 
   341  0018                     	;# 
   342  0019                     	;# 
   343  001A                     	;# 
   344  001B                     	;# 
   345  001B                     	;# 
   346  001C                     	;# 
   347  001D                     	;# 
   348  001E                     	;# 
   349  001F                     	;# 
   350  0081                     	;# 
   351  0085                     	;# 
   352  0086                     	;# 
   353  0087                     	;# 
   354  0088                     	;# 
   355  0089                     	;# 
   356  008C                     	;# 
   357  008D                     	;# 
   358  008E                     	;# 
   359  008F                     	;# 
   360  0090                     	;# 
   361  0091                     	;# 
   362  0092                     	;# 
   363  0093                     	;# 
   364  0093                     	;# 
   365  0093                     	;# 
   366  0094                     	;# 
   367  0095                     	;# 
   368  0096                     	;# 
   369  0097                     	;# 
   370  0098                     	;# 
   371  0099                     	;# 
   372  009A                     	;# 
   373  009B                     	;# 
   374  009C                     	;# 
   375  009D                     	;# 
   376  009E                     	;# 
   377  009F                     	;# 
   378  0105                     	;# 
   379  0107                     	;# 
   380  0108                     	;# 
   381  0109                     	;# 
   382  010C                     	;# 
   383  010C                     	;# 
   384  010D                     	;# 
   385  010E                     	;# 
   386  010F                     	;# 
   387  0185                     	;# 
   388  0187                     	;# 
   389  0188                     	;# 
   390  0189                     	;# 
   391  018C                     	;# 
   392  018D                     	;# 
   393  0000                     	;# 
   394  0001                     	;# 
   395  0002                     	;# 
   396  0003                     	;# 
   397  0004                     	;# 
   398  0005                     	;# 
   399  0006                     	;# 
   400  0007                     	;# 
   401  0008                     	;# 
   402  0009                     	;# 
   403  000A                     	;# 
   404  000B                     	;# 
   405  000C                     	;# 
   406  000D                     	;# 
   407  000E                     	;# 
   408  000E                     	;# 
   409  000F                     	;# 
   410  0010                     	;# 
   411  0011                     	;# 
   412  0012                     	;# 
   413  0013                     	;# 
   414  0014                     	;# 
   415  0015                     	;# 
   416  0015                     	;# 
   417  0016                     	;# 
   418  0017                     	;# 
   419  0018                     	;# 
   420  0019                     	;# 
   421  001A                     	;# 
   422  001B                     	;# 
   423  001B                     	;# 
   424  001C                     	;# 
   425  001D                     	;# 
   426  001E                     	;# 
   427  001F                     	;# 
   428  0081                     	;# 
   429  0085                     	;# 
   430  0086                     	;# 
   431  0087                     	;# 
   432  0088                     	;# 
   433  0089                     	;# 
   434  008C                     	;# 
   435  008D                     	;# 
   436  008E                     	;# 
   437  008F                     	;# 
   438  0090                     	;# 
   439  0091                     	;# 
   440  0092                     	;# 
   441  0093                     	;# 
   442  0093                     	;# 
   443  0093                     	;# 
   444  0094                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009C                     	;# 
   453  009D                     	;# 
   454  009E                     	;# 
   455  009F                     	;# 
   456  0105                     	;# 
   457  0107                     	;# 
   458  0108                     	;# 
   459  0109                     	;# 
   460  010C                     	;# 
   461  010C                     	;# 
   462  010D                     	;# 
   463  010E                     	;# 
   464  010F                     	;# 
   465  0185                     	;# 
   466  0187                     	;# 
   467  0188                     	;# 
   468  0189                     	;# 
   469  018C                     	;# 
   470  018D                     	;# 
   471  0000                     	;# 
   472  0001                     	;# 
   473  0002                     	;# 
   474  0003                     	;# 
   475  0004                     	;# 
   476  0005                     	;# 
   477  0006                     	;# 
   478  0007                     	;# 
   479  0008                     	;# 
   480  0009                     	;# 
   481  000A                     	;# 
   482  000B                     	;# 
   483  000C                     	;# 
   484  000D                     	;# 
   485  000E                     	;# 
   486  000E                     	;# 
   487  000F                     	;# 
   488  0010                     	;# 
   489  0011                     	;# 
   490  0012                     	;# 
   491  0013                     	;# 
   492  0014                     	;# 
   493  0015                     	;# 
   494  0015                     	;# 
   495  0016                     	;# 
   496  0017                     	;# 
   497  0018                     	;# 
   498  0019                     	;# 
   499  001A                     	;# 
   500  001B                     	;# 
   501  001B                     	;# 
   502  001C                     	;# 
   503  001D                     	;# 
   504  001E                     	;# 
   505  001F                     	;# 
   506  0081                     	;# 
   507  0085                     	;# 
   508  0086                     	;# 
   509  0087                     	;# 
   510  0088                     	;# 
   511  0089                     	;# 
   512  008C                     	;# 
   513  008D                     	;# 
   514  008E                     	;# 
   515  008F                     	;# 
   516  0090                     	;# 
   517  0091                     	;# 
   518  0092                     	;# 
   519  0093                     	;# 
   520  0093                     	;# 
   521  0093                     	;# 
   522  0094                     	;# 
   523  0095                     	;# 
   524  0096                     	;# 
   525  0097                     	;# 
   526  0098                     	;# 
   527  0099                     	;# 
   528  009A                     	;# 
   529  009B                     	;# 
   530  009C                     	;# 
   531  009D                     	;# 
   532  009E                     	;# 
   533  009F                     	;# 
   534  0105                     	;# 
   535  0107                     	;# 
   536  0108                     	;# 
   537  0109                     	;# 
   538  010C                     	;# 
   539  010C                     	;# 
   540  010D                     	;# 
   541  010E                     	;# 
   542  010F                     	;# 
   543  0185                     	;# 
   544  0187                     	;# 
   545  0188                     	;# 
   546  0189                     	;# 
   547  018C                     	;# 
   548  018D                     	;# 
   549  0000                     	;# 
   550  0001                     	;# 
   551  0002                     	;# 
   552  0003                     	;# 
   553  0004                     	;# 
   554  0005                     	;# 
   555  0006                     	;# 
   556  0007                     	;# 
   557  0008                     	;# 
   558  0009                     	;# 
   559  000A                     	;# 
   560  000B                     	;# 
   561  000C                     	;# 
   562  000D                     	;# 
   563  000E                     	;# 
   564  000E                     	;# 
   565  000F                     	;# 
   566  0010                     	;# 
   567  0011                     	;# 
   568  0012                     	;# 
   569  0013                     	;# 
   570  0014                     	;# 
   571  0015                     	;# 
   572  0015                     	;# 
   573  0016                     	;# 
   574  0017                     	;# 
   575  0018                     	;# 
   576  0019                     	;# 
   577  001A                     	;# 
   578  001B                     	;# 
   579  001B                     	;# 
   580  001C                     	;# 
   581  001D                     	;# 
   582  001E                     	;# 
   583  001F                     	;# 
   584  0081                     	;# 
   585  0085                     	;# 
   586  0086                     	;# 
   587  0087                     	;# 
   588  0088                     	;# 
   589  0089                     	;# 
   590  008C                     	;# 
   591  008D                     	;# 
   592  008E                     	;# 
   593  008F                     	;# 
   594  0090                     	;# 
   595  0091                     	;# 
   596  0092                     	;# 
   597  0093                     	;# 
   598  0093                     	;# 
   599  0093                     	;# 
   600  0094                     	;# 
   601  0095                     	;# 
   602  0096                     	;# 
   603  0097                     	;# 
   604  0098                     	;# 
   605  0099                     	;# 
   606  009A                     	;# 
   607  009B                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009E                     	;# 
   611  009F                     	;# 
   612  0105                     	;# 
   613  0107                     	;# 
   614  0108                     	;# 
   615  0109                     	;# 
   616  010C                     	;# 
   617  010C                     	;# 
   618  010D                     	;# 
   619  010E                     	;# 
   620  010F                     	;# 
   621  0185                     	;# 
   622  0187                     	;# 
   623  0188                     	;# 
   624  0189                     	;# 
   625  018C                     	;# 
   626  018D                     	;# 
   627  0000                     	;# 
   628  0001                     	;# 
   629  0002                     	;# 
   630  0003                     	;# 
   631  0004                     	;# 
   632  0005                     	;# 
   633  0006                     	;# 
   634  0007                     	;# 
   635  0008                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  000D                     	;# 
   641  000E                     	;# 
   642  000E                     	;# 
   643  000F                     	;# 
   644  0010                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0014                     	;# 
   649  0015                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0017                     	;# 
   653  0018                     	;# 
   654  0019                     	;# 
   655  001A                     	;# 
   656  001B                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  001D                     	;# 
   660  001E                     	;# 
   661  001F                     	;# 
   662  0081                     	;# 
   663  0085                     	;# 
   664  0086                     	;# 
   665  0087                     	;# 
   666  0088                     	;# 
   667  0089                     	;# 
   668  008C                     	;# 
   669  008D                     	;# 
   670  008E                     	;# 
   671  008F                     	;# 
   672  0090                     	;# 
   673  0091                     	;# 
   674  0092                     	;# 
   675  0093                     	;# 
   676  0093                     	;# 
   677  0093                     	;# 
   678  0094                     	;# 
   679  0095                     	;# 
   680  0096                     	;# 
   681  0097                     	;# 
   682  0098                     	;# 
   683  0099                     	;# 
   684  009A                     	;# 
   685  009B                     	;# 
   686  009C                     	;# 
   687  009D                     	;# 
   688  009E                     	;# 
   689  009F                     	;# 
   690  0105                     	;# 
   691  0107                     	;# 
   692  0108                     	;# 
   693  0109                     	;# 
   694  010C                     	;# 
   695  010C                     	;# 
   696  010D                     	;# 
   697  010E                     	;# 
   698  010F                     	;# 
   699  0185                     	;# 
   700  0187                     	;# 
   701  0188                     	;# 
   702  0189                     	;# 
   703  018C                     	;# 
   704  018D                     	;# 
   705  0000                     	;# 
   706  0001                     	;# 
   707  0002                     	;# 
   708  0003                     	;# 
   709  0004                     	;# 
   710  0005                     	;# 
   711  0006                     	;# 
   712  0007                     	;# 
   713  0008                     	;# 
   714  0009                     	;# 
   715  000A                     	;# 
   716  000B                     	;# 
   717  000C                     	;# 
   718  000D                     	;# 
   719  000E                     	;# 
   720  000E                     	;# 
   721  000F                     	;# 
   722  0010                     	;# 
   723  0011                     	;# 
   724  0012                     	;# 
   725  0013                     	;# 
   726  0014                     	;# 
   727  0015                     	;# 
   728  0015                     	;# 
   729  0016                     	;# 
   730  0017                     	;# 
   731  0018                     	;# 
   732  0019                     	;# 
   733  001A                     	;# 
   734  001B                     	;# 
   735  001B                     	;# 
   736  001C                     	;# 
   737  001D                     	;# 
   738  001E                     	;# 
   739  001F                     	;# 
   740  0081                     	;# 
   741  0085                     	;# 
   742  0086                     	;# 
   743  0087                     	;# 
   744  0088                     	;# 
   745  0089                     	;# 
   746  008C                     	;# 
   747  008D                     	;# 
   748  008E                     	;# 
   749  008F                     	;# 
   750  0090                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0093                     	;# 
   754  0093                     	;# 
   755  0093                     	;# 
   756  0094                     	;# 
   757  0095                     	;# 
   758  0096                     	;# 
   759  0097                     	;# 
   760  0098                     	;# 
   761  0099                     	;# 
   762  009A                     	;# 
   763  009B                     	;# 
   764  009C                     	;# 
   765  009D                     	;# 
   766  009E                     	;# 
   767  009F                     	;# 
   768  0105                     	;# 
   769  0107                     	;# 
   770  0108                     	;# 
   771  0109                     	;# 
   772  010C                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010E                     	;# 
   776  010F                     	;# 
   777  0185                     	;# 
   778  0187                     	;# 
   779  0188                     	;# 
   780  0189                     	;# 
   781  018C                     	;# 
   782  018D                     	;# 
   783                           
   784                           	psect	idataBANK0
   785  0A97                     __pidataBANK0:	
   786                           
   787                           ;initializer for _FMRX_Nprg
   788  0A97  3437               	retlw	55
   789  0A98  3461               	retlw	97
   790                           
   791                           ;initializer for _FMRX_Nref
   792  0A99  3400               	retlw	0
   793  0A9A  340A               	retlw	10
   794                           
   795                           ;initializer for _CWTX_Nprg
   796  0A9B  34D3               	retlw	211
   797  0A9C  3406               	retlw	6
   798                           
   799                           ;initializer for _CWTX_Nref
   800  0A9D  34A0               	retlw	160
   801  0A9E  3400               	retlw	0
   802                           
   803                           ;initializer for _FMTX_Nprg
   804  0A9F  3404               	retlw	4
   805  0AA0  3455               	retlw	85
   806                           
   807                           ;initializer for _FMTX_Nref
   808  0AA1  3400               	retlw	0
   809  0AA2  340A               	retlw	10
   810                           
   811                           	psect	strings
   812  0003                     __pstrings:	
   813  0003                     stringtab:	
   814  0003                     __stringtab:	
   815  0003                     stringcode:	
   816                           ;	String table - string pointers are 1 byte each
   817                           
   818  0003                     stringdir:	
   819  0003  3000               	movlw	high stringdir
   820  0004  008A               	movwf	10
   821  0005  0804               	movf	4,w
   822  0006  0A84               	incf	4,f
   823  0007  0782               	addwf	2,f
   824  0008                     __stringbase:	
   825  0008  3400               	retlw	0
   826  0009                     __end_of__stringtab:	
   827  0009                     _commandSize:	
   828  0009  3420               	retlw	32
   829  000A  3400               	retlw	0
   830  000B                     __end_of_commandSize:	
   831  000E                     _TMR1	set	14
   832  0010                     _T1CONbits	set	16
   833  000C                     _PIR1bits	set	12
   834  000B                     _INTCONbits	set	11
   835  0008                     _PORTDbits	set	8
   836  0007                     _PORTCbits	set	7
   837  0009                     _PORTEbits	set	9
   838  0005                     _PORTAbits	set	5
   839  0013                     _SSPBUF	set	19
   840  0014                     _SSPCON	set	20
   841  0003                     _STATUS	set	3
   842  0009                     _PORTE	set	9
   843  0008                     _PORTD	set	8
   844  0007                     _PORTC	set	7
   845  0006                     _PORTB	set	6
   846  0005                     _PORTA	set	5
   847  0019                     _TXREG	set	25
   848  001A                     _RCREG	set	26
   849  0029                     _RA1	set	41
   850  0034                     _RB4	set	52
   851  0032                     _RB2	set	50
   852  003A                     _RC2	set	58
   853  0035                     _RB5	set	53
   854  003D                     _RC5	set	61
   855  0064                     _TXIF	set	100
   856  00C1                     _OERR	set	193
   857  00C2                     _FERR	set	194
   858  00C6                     _RX9	set	198
   859  0065                     _RCIF	set	101
   860  00C5                     _SREN	set	197
   861  00C4                     _CREN	set	196
   862  00C7                     _SPEN	set	199
   863  008C                     _PIE1bits	set	140
   864  0094                     _SSPSTAT	set	148
   865  0093                     _SSPADD	set	147
   866  0091                     _SSPCON2	set	145
   867  0089                     _TRISE	set	137
   868  0088                     _TRISD	set	136
   869  0087                     _TRISC	set	135
   870  0086                     _TRISB	set	134
   871  0085                     _TRISA	set	133
   872  0099                     _SPBRG	set	153
   873  048C                     _ACKEN	set	1164
   874  048D                     _ACKDT	set	1165
   875  048B                     _RCEN	set	1163
   876  048A                     _PEN	set	1162
   877  0489                     _RSEN	set	1161
   878  0488                     _SEN	set	1160
   879  04C5                     _TXEN	set	1221
   880  04C6                     _TX9	set	1222
   881  0465                     _RCIE	set	1125
   882  0464                     _TXIE	set	1124
   883  04C4                     _SYNC	set	1220
   884  04C2                     _BRGH	set	1218
   885  0189                     _ANSELH	set	393
   886  0188                     _ANSEL	set	392
   887  000B                     STR_7:	
   888  000B  344A               	retlw	74	;'J'
   889  000C  3451               	retlw	81	;'Q'
   890  000D  3431               	retlw	49	;'1'
   891  000E  345A               	retlw	90	;'Z'
   892  000F  3448               	retlw	72	;'H'
   893  0010  3458               	retlw	88	;'X'
   894  0011  3400               	retlw	0
   895  0012                     STR_1:	
   896  0012  344A               	retlw	74	;'J'
   897  0013  3451               	retlw	81	;'Q'
   898  0014  3431               	retlw	49	;'1'
   899  0015  3459               	retlw	89	;'Y'
   900  0016  3443               	retlw	67	;'C'
   901  0017  345A               	retlw	90	;'Z'
   902  0018  3400               	retlw	0
   903  000B                     
   904                           ; #config settings
   905  0000                     
   906                           	psect	cinit
   907  07D6                     start_initialization:	
   908  07D6                     __initialization:	
   909                           
   910                           ; Initialize objects allocated to BANK0
   911  07D6  1383               	bcf	3,7	;select IRP bank0
   912  07D7  3065               	movlw	low (__pdataBANK0+12)
   913  07D8  00FD               	movwf	btemp+-1
   914  07D9  300A               	movlw	high __pidataBANK0
   915  07DA  00FE               	movwf	btemp
   916  07DB  3097               	movlw	low __pidataBANK0
   917  07DC  00FF               	movwf	btemp+1
   918  07DD  3059               	movlw	low __pdataBANK0
   919  07DE  0084               	movwf	4
   920  07DF  120A  158A  22A7  120A  118A  	fcall	init_ram0
   921                           
   922                           ; Clear objects allocated to BANK3
   923  07E4  1783               	bsf	3,7	;select IRP bank2
   924  07E5  3090               	movlw	low __pbssBANK3
   925  07E6  0084               	movwf	4
   926  07E7  30B0               	movlw	low (__pbssBANK3+32)
   927  07E8  120A  158A  2286  120A  118A  	fcall	clear_ram0
   928                           
   929                           ; Clear objects allocated to BANK1
   930  07ED  1383               	bcf	3,7	;select IRP bank0
   931  07EE  30A0               	movlw	low __pbssBANK1
   932  07EF  0084               	movwf	4
   933  07F0  30E2               	movlw	low (__pbssBANK1+66)
   934  07F1  120A  158A  2286  120A  118A  	fcall	clear_ram0
   935                           
   936                           ; Clear objects allocated to BANK0
   937  07F6  3065               	movlw	low __pbssBANK0
   938  07F7  0084               	movwf	4
   939  07F8  306D               	movlw	low (__pbssBANK0+8)
   940  07F9  120A  158A  2286   	fcall	clear_ram0
   941  07FC                     end_of_initialization:	
   942                           ;End of C runtime variable initialization code
   943                           
   944  07FC                     __end_of__initialization:	
   945  07FC  0183               	clrf	3
   946  07FD  120A  118A  29DE   	ljmp	_main	;jump to C main() function
   947                           
   948                           	psect	bssBANK0
   949  0065                     __pbssBANK0:	
   950  0065                     getbit@oldbit:	
   951  0065                     	ds	2
   952  0067                     _dPacketnum:	
   953  0067                     	ds	2
   954  0069                     _rcv_state:	
   955  0069                     	ds	2
   956  006B                     _dfcslo:	
   957  006B                     	ds	1
   958  006C                     _dfcshi:	
   959  006C                     	ds	1
   960                           
   961                           	psect	dataBANK0
   962  0059                     __pdataBANK0:	
   963  0059                     _FMRX_Nprg:	
   964  0059                     	ds	2
   965  005B                     _FMRX_Nref:	
   966  005B                     	ds	2
   967  005D                     _CWTX_Nprg:	
   968  005D                     	ds	2
   969  005F                     _CWTX_Nref:	
   970  005F                     	ds	2
   971  0061                     _FMTX_Nprg:	
   972  0061                     	ds	2
   973  0063                     _FMTX_Nref:	
   974  0063                     	ds	2
   975                           
   976                           	psect	bssBANK1
   977  00A0                     __pbssBANK1:	
   978  00A0                     _dPacket:	
   979  00A0                     	ds	50
   980  00D2                     _dData:	
   981  00D2                     	ds	16
   982                           
   983                           	psect	bssBANK3
   984  0190                     __pbssBANK3:	
   985  0190                     _EEPROMData:	
   986  0190                     	ds	32
   987                           
   988                           	psect	inittext
   989  0AA3                     init_fetch0:	
   990                           ;	Called with low address in FSR and high address in W
   991                           
   992  0AA3  087E               	movf	126,w
   993  0AA4  008A               	movwf	10
   994  0AA5  087F               	movf	127,w
   995  0AA6  0082               	movwf	2
   996  0AA7                     init_ram0:	
   997                           ;Called with:
   998                           ;	high address of idata address in btemp 
   999                           ;	low address of idata address in btemp+1 
  1000                           ;	low address of data in FSR
  1001                           ;	high address + 1 of data in btemp-1
  1002                           
  1003  0AA7  22A3  120A  158A   	fcall	init_fetch0
  1004  0AAA  0080               	movwf	0
  1005  0AAB  0A84               	incf	4,f
  1006  0AAC  0804               	movf	4,w
  1007  0AAD  067D               	xorwf	125,w
  1008  0AAE  1903               	btfsc	3,2
  1009  0AAF  3400               	retlw	0
  1010  0AB0  0AFF               	incf	127,f
  1011  0AB1  1903               	btfsc	3,2
  1012  0AB2  0AFE               	incf	126,f
  1013  0AB3  2AA7               	goto	init_ram0
  1014                           
  1015                           	psect	clrtext
  1016  0A86                     clear_ram0:	
  1017                           ;	Called with FSR containing the base address, and
  1018                           ;	W with the last address+1
  1019                           
  1020  0A86  0064               	clrwdt	;clear the watchdog before getting into this loop
  1021  0A87                     clrloop0:	
  1022  0A87  0180               	clrf	0	;clear RAM location pointed to by FSR
  1023  0A88  0A84               	incf	4,f	;increment pointer
  1024  0A89  0604               	xorwf	4,w	;XOR with final address
  1025  0A8A  1903               	btfsc	3,2	;have we reached the end yet?
  1026  0A8B  3400               	retlw	0	;all done for this memory range, return
  1027  0A8C  0604               	xorwf	4,w	;XOR again to restore value
  1028  0A8D  2A87               	goto	clrloop0	;do the next byte
  1029                           
  1030                           	psect	cstackCOMMON
  1031  0070                     __pcstackCOMMON:	
  1032  0070                     ?_ReceivePacket_data:	
  1033  0070                     ?_Reset_EPS:	
  1034                           ; 1 bytes @ 0x0
  1035                           
  1036  0070                     ??_Reset_EPS:	
  1037                           ; 1 bytes @ 0x0
  1038                           
  1039  0070                     ?__NOP:	
  1040                           ; 1 bytes @ 0x0
  1041                           
  1042  0070                     ??__NOP:	
  1043                           ; 1 bytes @ 0x0
  1044                           
  1045  0070                     ?_Init_SERIAL:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0070                     ??_Init_SERIAL:	
  1049                           ; 1 bytes @ 0x0
  1050                           
  1051  0070                     ?_putch:	
  1052                           ; 1 bytes @ 0x0
  1053                           
  1054  0070                     ??_putch:	
  1055                           ; 1 bytes @ 0x0
  1056                           
  1057  0070                     ?_Init_MPU:	
  1058                           ; 1 bytes @ 0x0
  1059                           
  1060  0070                     ??_Init_MPU:	
  1061                           ; 1 bytes @ 0x0
  1062                           
  1063  0070                     ?_waitFlag:	
  1064                           ; 1 bytes @ 0x0
  1065                           
  1066  0070                     ?_getdata:	
  1067                           ; 1 bytes @ 0x0
  1068                           
  1069  0070                     ?_main:	
  1070                           ; 1 bytes @ 0x0
  1071                           
  1072  0070                     ?_I2C_Master_Wait:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0070                     ??_I2C_Master_Wait:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0070                     ?_I2C_Master_Start:	
  1079                           ; 1 bytes @ 0x0
  1080                           
  1081  0070                     ??_I2C_Master_Start:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0070                     ?_I2C_Master_Stop:	
  1085                           ; 1 bytes @ 0x0
  1086                           
  1087  0070                     ??_I2C_Master_Stop:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090  0070                     ?_I2C_Master_Write:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0070                     ?_getbit:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0070                     ?_fcscheck:	
  1097                           ; 2 bytes @ 0x0
  1098                           
  1099  0070                     ?___awdiv:	
  1100                           ; 2 bytes @ 0x0
  1101                           
  1102  0070                     ?___lldiv:	
  1103                           ; 2 bytes @ 0x0
  1104                           
  1105  0070                     putch@byte:	
  1106                           ; 4 bytes @ 0x0
  1107                           
  1108  0070                     I2C_Master_Write@d:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0070                     __NOP@i:	
  1112                           ; 2 bytes @ 0x0
  1113                           
  1114  0070                     ___awdiv@divisor:	
  1115                           ; 2 bytes @ 0x0
  1116                           
  1117  0070                     ___lldiv@divisor:	
  1118                           ; 2 bytes @ 0x0
  1119                           
  1120                           
  1121                           ; 4 bytes @ 0x0
  1122  0070                     	ds	1
  1123  0071                     ?_NM_waddress:	
  1124  0071                     ?_TXOBC_waddress:	
  1125                           ; 1 bytes @ 0x1
  1126                           
  1127  0071                     NM_waddress@whigh_address:	
  1128                           ; 1 bytes @ 0x1
  1129                           
  1130  0071                     TXOBC_waddress@whigh_address:	
  1131                           ; 1 bytes @ 0x1
  1132                           
  1133                           
  1134                           ; 1 bytes @ 0x1
  1135  0071                     	ds	1
  1136  0072                     ?_EEPROM_Write:	
  1137  0072                     ??_getbit:	
  1138                           ; 1 bytes @ 0x2
  1139                           
  1140  0072                     ??_fcscheck:	
  1141                           ; 1 bytes @ 0x2
  1142                           
  1143  0072                     ??_I2C_Master_Write:	
  1144                           ; 1 bytes @ 0x2
  1145                           
  1146  0072                     ?_L_OUT:	
  1147                           ; 1 bytes @ 0x2
  1148                           
  1149  0072                     ?_H_OUT:	
  1150                           ; 1 bytes @ 0x2
  1151                           
  1152  0072                     ?_STBOUT:	
  1153                           ; 1 bytes @ 0x2
  1154                           
  1155  0072                     NM_waddress@wlow_address:	
  1156                           ; 1 bytes @ 0x2
  1157                           
  1158  0072                     TXOBC_waddress@wlow_address:	
  1159                           ; 1 bytes @ 0x2
  1160                           
  1161  0072                     EEPROM_Write@high_address:	
  1162                           ; 1 bytes @ 0x2
  1163                           
  1164  0072                     L_OUT@fmcwtxrx:	
  1165                           ; 1 bytes @ 0x2
  1166                           
  1167  0072                     H_OUT@fmcwtxrx:	
  1168                           ; 2 bytes @ 0x2
  1169                           
  1170  0072                     STBOUT@fmcwtxrx:	
  1171                           ; 2 bytes @ 0x2
  1172                           
  1173  0072                     ___awdiv@dividend:	
  1174                           ; 2 bytes @ 0x2
  1175                           
  1176                           
  1177                           ; 2 bytes @ 0x2
  1178  0072                     	ds	1
  1179  0073                     ??_NM_waddress:	
  1180  0073                     ??_TXOBC_waddress:	
  1181                           ; 1 bytes @ 0x3
  1182                           
  1183  0073                     NM_waddress@NM_wad_header:	
  1184                           ; 1 bytes @ 0x3
  1185                           
  1186  0073                     EEPROM_Write@low_address:	
  1187                           ; 1 bytes @ 0x3
  1188                           
  1189                           
  1190                           ; 1 bytes @ 0x3
  1191  0073                     	ds	1
  1192  0074                     ??_L_OUT:	
  1193  0074                     ??_H_OUT:	
  1194                           ; 1 bytes @ 0x4
  1195                           
  1196  0074                     ??_STBOUT:	
  1197                           ; 1 bytes @ 0x4
  1198                           
  1199  0074                     ?_OPINIT:	
  1200                           ; 1 bytes @ 0x4
  1201                           
  1202  0074                     ??___awdiv:	
  1203                           ; 1 bytes @ 0x4
  1204                           
  1205  0074                     fcscheck@bt:	
  1206                           ; 1 bytes @ 0x4
  1207                           
  1208  0074                     EEPROM_Write@data:	
  1209                           ; 1 bytes @ 0x4
  1210                           
  1211  0074                     getbit@i:	
  1212                           ; 1 bytes @ 0x4
  1213                           
  1214  0074                     OPINIT@fmcwtxrx:	
  1215                           ; 2 bytes @ 0x4
  1216                           
  1217  0074                     ___lldiv@dividend:	
  1218                           ; 2 bytes @ 0x4
  1219                           
  1220                           
  1221                           ; 4 bytes @ 0x4
  1222  0074                     	ds	1
  1223  0075                     ??_EEPROM_Write:	
  1224  0075                     TXOBC_waddress@TXOBC_wad_header:	
  1225                           ; 1 bytes @ 0x5
  1226                           
  1227  0075                     ___awdiv@counter:	
  1228                           ; 1 bytes @ 0x5
  1229                           
  1230  0075                     fcscheck@i:	
  1231                           ; 1 bytes @ 0x5
  1232                           
  1233                           
  1234                           ; 2 bytes @ 0x5
  1235  0075                     	ds	1
  1236  0076                     ??_waitFlag:	
  1237  0076                     ??_getdata:	
  1238                           ; 1 bytes @ 0x6
  1239                           
  1240  0076                     ??_OPINIT:	
  1241                           ; 1 bytes @ 0x6
  1242                           
  1243  0076                     ___awdiv@sign:	
  1244                           ; 1 bytes @ 0x6
  1245                           
  1246                           
  1247                           ; 1 bytes @ 0x6
  1248  0076                     	ds	1
  1249  0077                     fcscheck@i_133:	
  1250  0077                     ___awdiv@quotient:	
  1251                           ; 2 bytes @ 0x7
  1252                           
  1253                           
  1254                           ; 2 bytes @ 0x7
  1255  0077                     	ds	1
  1256  0078                     ??___lldiv:	
  1257  0078                     EEPROM_Write@EEPROM_address:	
  1258                           ; 1 bytes @ 0x8
  1259                           
  1260                           
  1261                           ; 1 bytes @ 0x8
  1262  0078                     	ds	1
  1263  0079                     ?_OUTFQ:	
  1264  0079                     ?_RFDOUT:	
  1265                           ; 1 bytes @ 0x9
  1266                           
  1267  0079                     fcscheck@byte:	
  1268                           ; 1 bytes @ 0x9
  1269                           
  1270  0079                     EEPROM_Write@Address:	
  1271                           ; 1 bytes @ 0x9
  1272                           
  1273  0079                     OUTFQ@fmcwtxrx:	
  1274                           ; 1 bytes @ 0x9
  1275                           
  1276  0079                     RFDOUT@fmcwtxrx:	
  1277                           ; 2 bytes @ 0x9
  1278                           
  1279  0079                     ___lldiv@quotient:	
  1280                           ; 2 bytes @ 0x9
  1281                           
  1282                           
  1283                           ; 4 bytes @ 0x9
  1284  0079                     	ds	1
  1285  007A                     ??_ReceivePacket_data:	
  1286                           
  1287                           ; 1 bytes @ 0xA
  1288  007A                     	ds	1
  1289  007B                     OUTFQ@Nprg:	
  1290  007B                     RFDOUT@Nref:	
  1291                           ; 2 bytes @ 0xB
  1292                           
  1293                           
  1294                           ; 2 bytes @ 0xB
  1295  007B                     	ds	2
  1296  007D                     ??_FMTX:	
  1297  007D                     ??_CWTX:	
  1298                           ; 1 bytes @ 0xD
  1299                           
  1300  007D                     ??_FMRX:	
  1301                           ; 1 bytes @ 0xD
  1302                           
  1303  007D                     ___lldiv@counter:	
  1304                           ; 1 bytes @ 0xD
  1305                           
  1306                           
  1307                           ; 1 bytes @ 0xD
  1308  007D                     	ds	1
  1309                           
  1310                           	psect	cstackBANK0
  1311  0020                     __pcstackBANK0:	
  1312  0020                     ?_Init_I2C_M:	
  1313  0020                     ??_OUTFQ:	
  1314                           ; 1 bytes @ 0x0
  1315                           
  1316  0020                     ??_RFDOUT:	
  1317                           ; 1 bytes @ 0x0
  1318                           
  1319  0020                     waitFlag@i:	
  1320                           ; 1 bytes @ 0x0
  1321                           
  1322  0020                     getdata@bufstore_counter:	
  1323                           ; 2 bytes @ 0x0
  1324                           
  1325  0020                     Init_I2C_M@c:	
  1326                           ; 2 bytes @ 0x0
  1327                           
  1328                           
  1329                           ; 4 bytes @ 0x0
  1330  0020                     	ds	2
  1331  0022                     waitFlag@j:	
  1332  0022                     getdata@dstuff:	
  1333                           ; 2 bytes @ 0x2
  1334                           
  1335                           
  1336                           ; 2 bytes @ 0x2
  1337  0022                     	ds	1
  1338  0023                     RFDOUT@Nref_b:	
  1339  0023                     OUTFQ@Nprg_b:	
  1340                           ; 24 bytes @ 0x3
  1341                           
  1342                           
  1343                           ; 34 bytes @ 0x3
  1344  0023                     	ds	1
  1345  0024                     ??_Init_I2C_M:	
  1346  0024                     waitFlag@j_102:	
  1347                           ; 1 bytes @ 0x4
  1348                           
  1349  0024                     getdata@dbitstatus:	
  1350                           ; 2 bytes @ 0x4
  1351                           
  1352                           
  1353                           ; 2 bytes @ 0x4
  1354  0024                     	ds	2
  1355  0026                     getdata@buf:	
  1356  0026                     waitFlag@j_104:	
  1357                           ; 1 bytes @ 0x6
  1358                           
  1359                           
  1360                           ; 2 bytes @ 0x6
  1361  0026                     	ds	2
  1362  0028                     waitFlag@j_106:	
  1363                           
  1364                           ; 2 bytes @ 0x8
  1365  0028                     	ds	2
  1366  002A                     waitFlag@j_108:	
  1367                           
  1368                           ; 2 bytes @ 0xA
  1369  002A                     	ds	2
  1370  002C                     waitFlag@j_110:	
  1371                           
  1372                           ; 2 bytes @ 0xC
  1373  002C                     	ds	2
  1374  002E                     waitFlag@j_111:	
  1375                           
  1376                           ; 2 bytes @ 0xE
  1377  002E                     	ds	2
  1378  0030                     waitFlag@j_113:	
  1379                           
  1380                           ; 2 bytes @ 0x10
  1381  0030                     	ds	2
  1382  0032                     waitFlag@j_115:	
  1383                           
  1384                           ; 2 bytes @ 0x12
  1385  0032                     	ds	2
  1386  0034                     waitFlag@j_117:	
  1387                           
  1388                           ; 2 bytes @ 0x14
  1389  0034                     	ds	2
  1390  0036                     waitFlag@j_119:	
  1391                           
  1392                           ; 2 bytes @ 0x16
  1393  0036                     	ds	2
  1394  0038                     waitFlag@j_121:	
  1395                           
  1396                           ; 2 bytes @ 0x18
  1397  0038                     	ds	2
  1398  003A                     waitFlag@flag_judge:	
  1399                           
  1400                           ; 2 bytes @ 0x1A
  1401  003A                     	ds	1
  1402  003B                     RFDOUT@i_407:	
  1403                           
  1404                           ; 2 bytes @ 0x1B
  1405  003B                     	ds	1
  1406  003C                     waitFlag@buf:	
  1407                           
  1408                           ; 1 bytes @ 0x1C
  1409  003C                     	ds	1
  1410  003D                     ReceivePacket_data@fcschecker:	
  1411  003D                     RFDOUT@i:	
  1412                           ; 2 bytes @ 0x1D
  1413                           
  1414                           
  1415                           ; 2 bytes @ 0x1D
  1416  003D                     	ds	2
  1417  003F                     ReceivePacket_data@i:	
  1418  003F                     RFDOUT@i_408:	
  1419                           ; 2 bytes @ 0x1F
  1420                           
  1421                           
  1422                           ; 2 bytes @ 0x1F
  1423  003F                     	ds	6
  1424  0045                     OUTFQ@count:	
  1425                           
  1426                           ; 2 bytes @ 0x25
  1427  0045                     	ds	2
  1428  0047                     OUTFQ@i:	
  1429                           
  1430                           ; 2 bytes @ 0x27
  1431  0047                     	ds	2
  1432  0049                     OUTFQ@i_397:	
  1433                           
  1434                           ; 2 bytes @ 0x29
  1435  0049                     	ds	2
  1436  004B                     OUTFQ@i_398:	
  1437                           
  1438                           ; 2 bytes @ 0x2B
  1439  004B                     	ds	2
  1440  004D                     ?_FMTX:	
  1441  004D                     ?_CWTX:	
  1442                           ; 1 bytes @ 0x2D
  1443                           
  1444  004D                     ?_FMRX:	
  1445                           ; 1 bytes @ 0x2D
  1446                           
  1447  004D                     FMTX@Nref:	
  1448                           ; 1 bytes @ 0x2D
  1449                           
  1450  004D                     CWTX@Nref:	
  1451                           ; 2 bytes @ 0x2D
  1452                           
  1453  004D                     FMRX@Nref:	
  1454                           ; 2 bytes @ 0x2D
  1455                           
  1456                           
  1457                           ; 2 bytes @ 0x2D
  1458  004D                     	ds	2
  1459  004F                     FMTX@Nprg:	
  1460  004F                     CWTX@Nprg:	
  1461                           ; 2 bytes @ 0x2F
  1462                           
  1463  004F                     FMRX@Nprg:	
  1464                           ; 2 bytes @ 0x2F
  1465                           
  1466                           
  1467                           ; 2 bytes @ 0x2F
  1468  004F                     	ds	2
  1469  0051                     FMTX@fmtx:	
  1470  0051                     CWTX@cwtx:	
  1471                           ; 2 bytes @ 0x31
  1472                           
  1473  0051                     FMRX@fmrx:	
  1474                           ; 2 bytes @ 0x31
  1475                           
  1476                           
  1477                           ; 2 bytes @ 0x31
  1478  0051                     	ds	2
  1479  0053                     ??_main:	
  1480                           
  1481                           ; 1 bytes @ 0x33
  1482  0053                     	ds	3
  1483  0056                     main@TXOBC_wad_header:	
  1484                           
  1485                           ; 1 bytes @ 0x36
  1486  0056                     	ds	1
  1487  0057                     main@NM_wad_header:	
  1488                           
  1489                           ; 1 bytes @ 0x37
  1490  0057                     	ds	1
  1491  0058                     main@dData:	
  1492                           
  1493                           ; 1 bytes @ 0x38
  1494  0058                     	ds	1
  1495                           
  1496                           	psect	maintext
  1497  01DE                     __pmaintext:	
  1498 ;;
  1499 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1500 ;;
  1501 ;; *************** function _main *****************
  1502 ;; Defined at:
  1503 ;;		line 38 in file "main.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;		None
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;  NM_wad_heade    1   55[BANK0 ] unsigned char 
  1508 ;;  dData           1   56[BANK0 ] PTR unsigned char 
  1509 ;;		 -> NULL(0), dData(16), 
  1510 ;;  TXOBC_wad_he    1   54[BANK0 ] unsigned char 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : B00/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1520 ;;      Params:         0       0       0       0       0
  1521 ;;      Locals:         0       3       0       0       0
  1522 ;;      Temps:          0       3       0       0       0
  1523 ;;      Totals:         0       6       0       0       0
  1524 ;;Total ram usage:        6 bytes
  1525 ;; Hardware stack levels required when called:    4
  1526 ;; This function calls:
  1527 ;;		_CWTX
  1528 ;;		_EEPROM_Write
  1529 ;;		_FMRX
  1530 ;;		_FMTX
  1531 ;;		_Init_I2C_M
  1532 ;;		_Init_MPU
  1533 ;;		_Init_SERIAL
  1534 ;;		_NM_waddress
  1535 ;;		_ReceivePacket_data
  1536 ;;		_Reset_EPS
  1537 ;;		_TXOBC_waddress
  1538 ;; This function is called by:
  1539 ;;		Startup code after reset
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           
  1544                           ;psect for function _main
  1545  01DE                     _main:	
  1546                           
  1547                           ;main.c: 43: _delay((unsigned long)((200)*(10000000/4000.0)));
  1548                           
  1549                           ;incstack = 0
  1550                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1551  01DE  3003               	movlw	3
  1552  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1553  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  1554  01E1  00D5               	movwf	??_main+2
  1555  01E2  308A               	movlw	138
  1556  01E3  00D4               	movwf	??_main+1
  1557  01E4  3055               	movlw	85
  1558  01E5  00D3               	movwf	??_main
  1559  01E6                     u2897:	
  1560  01E6  0BD3               	decfsz	??_main,f
  1561  01E7  29E6               	goto	u2897
  1562  01E8  0BD4               	decfsz	??_main+1,f
  1563  01E9  29E6               	goto	u2897
  1564  01EA  0BD5               	decfsz	??_main+2,f
  1565  01EB  29E6               	goto	u2897
  1566                           
  1567                           ;main.c: 45: Init_SERIAL();
  1568  01EC  120A  158A  22DB  120A  118A  	fcall	_Init_SERIAL
  1569                           
  1570                           ;main.c: 46: Init_MPU();
  1571  01F1  120A  158A  22F4  120A  118A  	fcall	_Init_MPU
  1572                           
  1573                           ;main.c: 47: Init_I2C_M(400000);
  1574  01F6  3000               	movlw	0
  1575  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  1576  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  1577  01F9  00A3               	movwf	Init_I2C_M@c+3
  1578  01FA  3006               	movlw	6
  1579  01FB  00A2               	movwf	Init_I2C_M@c+2
  1580  01FC  301A               	movlw	26
  1581  01FD  00A1               	movwf	Init_I2C_M@c+1
  1582  01FE  3080               	movlw	128
  1583  01FF  00A0               	movwf	Init_I2C_M@c
  1584  0200  120A  158A  23E6  120A  118A  	fcall	_Init_I2C_M
  1585                           
  1586                           ;main.c: 54: RB2 = 1;
  1587  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1588  0206  1303               	bcf	3,6	;RP1=0, select bank0
  1589  0207  1506               	bsf	6,2	;volatile
  1590                           
  1591                           ;main.c: 55: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1592  0208  300D               	movlw	13
  1593  0209  1283               	bcf	3,5	;RP0=0, select bank0
  1594  020A  1303               	bcf	3,6	;RP1=0, select bank0
  1595  020B  00D5               	movwf	??_main+2
  1596  020C  30AF               	movlw	175
  1597  020D  00D4               	movwf	??_main+1
  1598  020E  30B5               	movlw	181
  1599  020F  00D3               	movwf	??_main
  1600  0210                     u2907:	
  1601  0210  0BD3               	decfsz	??_main,f
  1602  0211  2A10               	goto	u2907
  1603  0212  0BD4               	decfsz	??_main+1,f
  1604  0213  2A10               	goto	u2907
  1605  0214  0BD5               	decfsz	??_main+2,f
  1606  0215  2A10               	goto	u2907
  1607  0216  2A17               	nop2
  1608                           
  1609                           ;main.c: 57: FMTX(FMTX_Nref, FMTX_Nprg);
  1610  0217  1283               	bcf	3,5	;RP0=0, select bank0
  1611  0218  1303               	bcf	3,6	;RP1=0, select bank0
  1612  0219  0864               	movf	_FMTX_Nref+1,w
  1613  021A  00CE               	movwf	FMTX@Nref+1
  1614  021B  0863               	movf	_FMTX_Nref,w
  1615  021C  00CD               	movwf	FMTX@Nref
  1616  021D  0862               	movf	_FMTX_Nprg+1,w
  1617  021E  00D0               	movwf	FMTX@Nprg+1
  1618  021F  0861               	movf	_FMTX_Nprg,w
  1619  0220  00CF               	movwf	FMTX@Nprg
  1620  0221  120A  158A  238C  120A  118A  	fcall	_FMTX
  1621                           
  1622                           ;main.c: 58: CWTX(CWTX_Nref, CWTX_Nprg);
  1623  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1624  0227  1303               	bcf	3,6	;RP1=0, select bank0
  1625  0228  0860               	movf	_CWTX_Nref+1,w
  1626  0229  00CE               	movwf	CWTX@Nref+1
  1627  022A  085F               	movf	_CWTX_Nref,w
  1628  022B  00CD               	movwf	CWTX@Nref
  1629  022C  085E               	movf	_CWTX_Nprg+1,w
  1630  022D  00D0               	movwf	CWTX@Nprg+1
  1631  022E  085D               	movf	_CWTX_Nprg,w
  1632  022F  00CF               	movwf	CWTX@Nprg
  1633  0230  120A  158A  2334  120A  118A  	fcall	_CWTX
  1634                           
  1635                           ;main.c: 59: FMRX(FMRX_Nref, FMRX_Nprg);
  1636  0235  1283               	bcf	3,5	;RP0=0, select bank0
  1637  0236  1303               	bcf	3,6	;RP1=0, select bank0
  1638  0237  085C               	movf	_FMRX_Nref+1,w
  1639  0238  00CE               	movwf	FMRX@Nref+1
  1640  0239  085B               	movf	_FMRX_Nref,w
  1641  023A  00CD               	movwf	FMRX@Nref
  1642  023B  085A               	movf	_FMRX_Nprg+1,w
  1643  023C  00D0               	movwf	FMRX@Nprg+1
  1644  023D  0859               	movf	_FMRX_Nprg,w
  1645  023E  00CF               	movwf	FMRX@Nprg
  1646  023F  120A  158A  2360  120A  118A  	fcall	_FMRX
  1647                           
  1648                           ;main.c: 60: RB2 = 0;
  1649  0244  1283               	bcf	3,5	;RP0=0, select bank0
  1650  0245  1303               	bcf	3,6	;RP1=0, select bank0
  1651  0246  1106               	bcf	6,2	;volatile
  1652  0247                     l3175:	
  1653                           ;main.c: 63: while(1){
  1654                           
  1655                           
  1656                           ;main.c: 78: UBYTE *dData;
  1657                           ;main.c: 79: dData = ReceivePacket_data();
  1658  0247  120A  158A  269C  120A  118A  	fcall	_ReceivePacket_data
  1659  024C  1283               	bcf	3,5	;RP0=0, select bank0
  1660  024D  1303               	bcf	3,6	;RP1=0, select bank0
  1661  024E  00D3               	movwf	??_main
  1662  024F  0853               	movf	??_main,w
  1663  0250  00D8               	movwf	main@dData
  1664                           
  1665                           ;main.c: 80: RB2 = 1;
  1666  0251  1506               	bsf	6,2	;volatile
  1667                           
  1668                           ;main.c: 81: _delay((unsigned long)((500)*(10000000/4000.0)));
  1669  0252  3007               	movlw	7
  1670  0253  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0254  1303               	bcf	3,6	;RP1=0, select bank0
  1672  0255  00D5               	movwf	??_main+2
  1673  0256  3058               	movlw	88
  1674  0257  00D4               	movwf	??_main+1
  1675  0258  3059               	movlw	89
  1676  0259  00D3               	movwf	??_main
  1677  025A                     u2917:	
  1678  025A  0BD3               	decfsz	??_main,f
  1679  025B  2A5A               	goto	u2917
  1680  025C  0BD4               	decfsz	??_main+1,f
  1681  025D  2A5A               	goto	u2917
  1682  025E  0BD5               	decfsz	??_main+2,f
  1683  025F  2A5A               	goto	u2917
  1684                           
  1685                           ;main.c: 82: RB2 = 0;
  1686  0260  1283               	bcf	3,5	;RP0=0, select bank0
  1687  0261  1303               	bcf	3,6	;RP1=0, select bank0
  1688  0262  1106               	bcf	6,2	;volatile
  1689                           
  1690                           ;main.c: 84: EEPROM_Write(0x50,0x00,0x00,dData);
  1691  0263  01F2               	clrf	EEPROM_Write@high_address
  1692  0264  01F3               	clrf	EEPROM_Write@low_address
  1693  0265  0858               	movf	main@dData,w
  1694  0266  00D3               	movwf	??_main
  1695  0267  0853               	movf	??_main,w
  1696  0268  00F4               	movwf	EEPROM_Write@data
  1697  0269  3050               	movlw	80
  1698  026A  120A  158A  2580  120A  118A  	fcall	_EEPROM_Write
  1699                           
  1700                           ;main.c: 85: _delay((unsigned long)((100)*(10000000/4000.0)));
  1701  026F  3002               	movlw	2
  1702  0270  1283               	bcf	3,5	;RP0=0, select bank0
  1703  0271  1303               	bcf	3,6	;RP1=0, select bank0
  1704  0272  00D5               	movwf	??_main+2
  1705  0273  3045               	movlw	69
  1706  0274  00D4               	movwf	??_main+1
  1707  0275  30A9               	movlw	169
  1708  0276  00D3               	movwf	??_main
  1709  0277                     u2927:	
  1710  0277  0BD3               	decfsz	??_main,f
  1711  0278  2A77               	goto	u2927
  1712  0279  0BD4               	decfsz	??_main+1,f
  1713  027A  2A77               	goto	u2927
  1714  027B  0BD5               	decfsz	??_main+2,f
  1715  027C  2A77               	goto	u2927
  1716                           
  1717                           ;main.c: 89: UBYTE TXOBC_wad_header = 0x74;
  1718  027D  3074               	movlw	116
  1719  027E  1283               	bcf	3,5	;RP0=0, select bank0
  1720  027F  1303               	bcf	3,6	;RP1=0, select bank0
  1721  0280  00D3               	movwf	??_main
  1722  0281  0853               	movf	??_main,w
  1723  0282  00D6               	movwf	main@TXOBC_wad_header
  1724                           
  1725                           ;main.c: 90: TXOBC_waddress(TXOBC_wad_header, 0x00, 0x00);
  1726  0283  01F1               	clrf	TXOBC_waddress@whigh_address
  1727  0284  01F2               	clrf	TXOBC_waddress@wlow_address
  1728  0285  0856               	movf	main@TXOBC_wad_header,w
  1729  0286  120A  158A  241A  120A  118A  	fcall	_TXOBC_waddress
  1730                           
  1731                           ;main.c: 98: _delay((unsigned long)((7000)*(10000000/4000.0)));
  1732  028B  3059               	movlw	89
  1733  028C  1283               	bcf	3,5	;RP0=0, select bank0
  1734  028D  1303               	bcf	3,6	;RP1=0, select bank0
  1735  028E  00D5               	movwf	??_main+2
  1736  028F  30C8               	movlw	200
  1737  0290  00D4               	movwf	??_main+1
  1738  0291  3007               	movlw	7
  1739  0292  00D3               	movwf	??_main
  1740  0293                     u2937:	
  1741  0293  0BD3               	decfsz	??_main,f
  1742  0294  2A93               	goto	u2937
  1743  0295  0BD4               	decfsz	??_main+1,f
  1744  0296  2A93               	goto	u2937
  1745  0297  0BD5               	decfsz	??_main+2,f
  1746  0298  2A93               	goto	u2937
  1747  0299  2A9A               	nop2
  1748                           
  1749                           ;main.c: 103: if(dData[0]=='n'){
  1750  029A  1283               	bcf	3,5	;RP0=0, select bank0
  1751  029B  1303               	bcf	3,6	;RP1=0, select bank0
  1752  029C  0858               	movf	main@dData,w
  1753  029D  0084               	movwf	4
  1754  029E  306E               	movlw	110
  1755  029F  1383               	bcf	3,7	;select IRP bank0
  1756  02A0  0600               	xorwf	0,w
  1757  02A1  1D03               	btfss	3,2
  1758  02A2  2AB0               	goto	l3199
  1759                           
  1760                           ;main.c: 105: UBYTE NM_wad_header = 0x72;
  1761  02A3  3072               	movlw	114
  1762  02A4  00D3               	movwf	??_main
  1763  02A5  0853               	movf	??_main,w
  1764  02A6  00D7               	movwf	main@NM_wad_header
  1765                           
  1766                           ;main.c: 106: NM_waddress(NM_wad_header, 0x00, 0x00);
  1767  02A7  01F1               	clrf	NM_waddress@whigh_address
  1768  02A8  01F2               	clrf	NM_waddress@wlow_address
  1769  02A9  0857               	movf	main@NM_wad_header,w
  1770  02AA  120A  158A  22B4  120A  118A  	fcall	_NM_waddress
  1771                           
  1772                           ;main.c: 108: }else if(dData[0]=='p'){
  1773  02AF  2B3B               	goto	l322
  1774  02B0                     l3199:	
  1775  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  1776  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  1777  02B2  0858               	movf	main@dData,w
  1778  02B3  0084               	movwf	4
  1779  02B4  3070               	movlw	112
  1780  02B5  1383               	bcf	3,7	;select IRP bank0
  1781  02B6  0600               	xorwf	0,w
  1782  02B7  1D03               	btfss	3,2
  1783  02B8  2B28               	goto	l323
  1784                           
  1785                           ;main.c: 113: if(dData[2] == 'r'){
  1786  02B9  0858               	movf	main@dData,w
  1787  02BA  3E02               	addlw	2
  1788  02BB  0084               	movwf	4
  1789  02BC  3072               	movlw	114
  1790  02BD  0600               	xorwf	0,w
  1791  02BE  1903               	btfsc	3,2
  1792  02BF  2B10               	goto	l3219
  1793  02C0  2B3B               	goto	l322
  1794  02C1                     l3205:	
  1795                           ;main.c: 119: case 'E':
  1796                           
  1797                           ;main.c: 118: switch(dData[3]){
  1798                           
  1799                           
  1800                           ;main.c: 126: Reset_EPS();
  1801  02C1  120A  158A  2311  120A  118A  	fcall	_Reset_EPS
  1802                           
  1803                           ;main.c: 127: _delay((unsigned long)((5000)*(10000000/4000.0)));
  1804  02C6  3040               	movlw	64
  1805  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1806  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1807  02C9  00D5               	movwf	??_main+2
  1808  02CA  306A               	movlw	106
  1809  02CB  00D4               	movwf	??_main+1
  1810  02CC  3097               	movlw	151
  1811  02CD  00D3               	movwf	??_main
  1812  02CE                     u2947:	
  1813  02CE  0BD3               	decfsz	??_main,f
  1814  02CF  2ACE               	goto	u2947
  1815  02D0  0BD4               	decfsz	??_main+1,f
  1816  02D1  2ACE               	goto	u2947
  1817  02D2  0BD5               	decfsz	??_main+2,f
  1818  02D3  2ACE               	goto	u2947
  1819                           
  1820                           ;main.c: 134: FMTX(FMTX_Nref, FMTX_Nprg);
  1821  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  1822  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  1823  02D6  0864               	movf	_FMTX_Nref+1,w
  1824  02D7  00CE               	movwf	FMTX@Nref+1
  1825  02D8  0863               	movf	_FMTX_Nref,w
  1826  02D9  00CD               	movwf	FMTX@Nref
  1827  02DA  0862               	movf	_FMTX_Nprg+1,w
  1828  02DB  00D0               	movwf	FMTX@Nprg+1
  1829  02DC  0861               	movf	_FMTX_Nprg,w
  1830  02DD  00CF               	movwf	FMTX@Nprg
  1831  02DE  120A  158A  238C  120A  118A  	fcall	_FMTX
  1832                           
  1833                           ;main.c: 135: CWTX(CWTX_Nref, CWTX_Nprg);
  1834  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  1835  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  1836  02E5  0860               	movf	_CWTX_Nref+1,w
  1837  02E6  00CE               	movwf	CWTX@Nref+1
  1838  02E7  085F               	movf	_CWTX_Nref,w
  1839  02E8  00CD               	movwf	CWTX@Nref
  1840  02E9  085E               	movf	_CWTX_Nprg+1,w
  1841  02EA  00D0               	movwf	CWTX@Nprg+1
  1842  02EB  085D               	movf	_CWTX_Nprg,w
  1843  02EC  00CF               	movwf	CWTX@Nprg
  1844  02ED  120A  158A  2334  120A  118A  	fcall	_CWTX
  1845                           
  1846                           ;main.c: 136: FMRX(FMRX_Nref, FMRX_Nprg);
  1847  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  1848  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  1849  02F4  085C               	movf	_FMRX_Nref+1,w
  1850  02F5  00CE               	movwf	FMRX@Nref+1
  1851  02F6  085B               	movf	_FMRX_Nref,w
  1852  02F7  00CD               	movwf	FMRX@Nref
  1853  02F8  085A               	movf	_FMRX_Nprg+1,w
  1854  02F9  00D0               	movwf	FMRX@Nprg+1
  1855  02FA  0859               	movf	_FMRX_Nprg,w
  1856  02FB  00CF               	movwf	FMRX@Nprg
  1857  02FC  120A  158A  2360  120A  118A  	fcall	_FMRX
  1858                           
  1859                           ;main.c: 137: _delay((unsigned long)((500)*(10000000/4000.0)));
  1860  0301  3007               	movlw	7
  1861  0302  1283               	bcf	3,5	;RP0=0, select bank0
  1862  0303  1303               	bcf	3,6	;RP1=0, select bank0
  1863  0304  00D5               	movwf	??_main+2
  1864  0305  3058               	movlw	88
  1865  0306  00D4               	movwf	??_main+1
  1866  0307  3059               	movlw	89
  1867  0308  00D3               	movwf	??_main
  1868  0309                     u2957:	
  1869  0309  0BD3               	decfsz	??_main,f
  1870  030A  2B09               	goto	u2957
  1871  030B  0BD4               	decfsz	??_main+1,f
  1872  030C  2B09               	goto	u2957
  1873  030D  0BD5               	decfsz	??_main+2,f
  1874  030E  2B09               	goto	u2957
  1875                           
  1876                           ;main.c: 154: }
  1877                           
  1878                           ;main.c: 153: break;
  1879                           
  1880                           ;main.c: 151: default:
  1881                           
  1882                           ;main.c: 150: break;
  1883                           
  1884                           ;main.c: 148: case 'T':
  1885                           
  1886                           ;main.c: 147: break;
  1887                           
  1888                           ;main.c: 145: case 'N':
  1889                           
  1890                           ;main.c: 144: break;
  1891                           
  1892                           ;main.c: 142: case '3':
  1893                           
  1894                           ;main.c: 141: break;
  1895                           
  1896                           ;main.c: 139: case 'I':
  1897                           
  1898                           ;main.c: 138: break;
  1899  030F  2B3B               	goto	l322
  1900  0310                     l3219:	
  1901  0310  1283               	bcf	3,5	;RP0=0, select bank0
  1902  0311  1303               	bcf	3,6	;RP1=0, select bank0
  1903  0312  0858               	movf	main@dData,w
  1904  0313  3E03               	addlw	3
  1905  0314  0084               	movwf	4
  1906  0315  1383               	bcf	3,7	;select IRP bank0
  1907  0316  0800               	movf	0,w
  1908                           
  1909                           ; Switch size 1, requested type "space"
  1910                           ; Number of cases is 5, Range of values is 51 to 84
  1911                           ; switch strategies available:
  1912                           ; Name         Instructions Cycles
  1913                           ; simple_byte           16     9 (average)
  1914                           ; direct_byte          113    11 (fixed)
  1915                           ; jumptable            263     9 (fixed)
  1916                           ;	Chosen strategy is simple_byte
  1917  0317  3A33               	xorlw	51	; case 51
  1918  0318  1903               	skipnz
  1919  0319  2B3B               	goto	l322
  1920  031A  3A76               	xorlw	118	; case 69
  1921  031B  1903               	skipnz
  1922  031C  2AC1               	goto	l3205
  1923  031D  3A0C               	xorlw	12	; case 73
  1924  031E  1903               	skipnz
  1925  031F  2B3B               	goto	l322
  1926  0320  3A07               	xorlw	7	; case 78
  1927  0321  1903               	skipnz
  1928  0322  2B3B               	goto	l322
  1929  0323  3A1A               	xorlw	26	; case 84
  1930  0324  1903               	skipnz
  1931  0325  2B3B               	goto	l322
  1932  0326  2B3B               	goto	l322
  1933                           
  1934                           ;main.c: 158: }
  1935                           ;main.c: 159: }else{
  1936                           
  1937                           ;main.c: 156: }else if(dData[2] == 't'){
  1938  0327  2B3B               	goto	l322
  1939  0328                     l323:	
  1940                           
  1941                           ;main.c: 160: RB2 = 1;
  1942  0328  1506               	bsf	6,2	;volatile
  1943                           
  1944                           ;main.c: 161: _delay((unsigned long)((1000)*(10000000/4000.0)));
  1945  0329  300D               	movlw	13
  1946  032A  1283               	bcf	3,5	;RP0=0, select bank0
  1947  032B  1303               	bcf	3,6	;RP1=0, select bank0
  1948  032C  00D5               	movwf	??_main+2
  1949  032D  30AF               	movlw	175
  1950  032E  00D4               	movwf	??_main+1
  1951  032F  30B5               	movlw	181
  1952  0330  00D3               	movwf	??_main
  1953  0331                     u2967:	
  1954  0331  0BD3               	decfsz	??_main,f
  1955  0332  2B31               	goto	u2967
  1956  0333  0BD4               	decfsz	??_main+1,f
  1957  0334  2B31               	goto	u2967
  1958  0335  0BD5               	decfsz	??_main+2,f
  1959  0336  2B31               	goto	u2967
  1960  0337  2B38               	nop2
  1961                           
  1962                           ;main.c: 162: RB2 = 0;
  1963  0338  1283               	bcf	3,5	;RP0=0, select bank0
  1964  0339  1303               	bcf	3,6	;RP1=0, select bank0
  1965  033A  1106               	bcf	6,2	;volatile
  1966  033B                     l322:	
  1967                           
  1968                           ;main.c: 163: }
  1969                           ;main.c: 207: _delay((unsigned long)((500)*(10000000/4000.0)));
  1970  033B  3007               	movlw	7
  1971  033C  1283               	bcf	3,5	;RP0=0, select bank0
  1972  033D  1303               	bcf	3,6	;RP1=0, select bank0
  1973  033E  00D5               	movwf	??_main+2
  1974  033F  3058               	movlw	88
  1975  0340  00D4               	movwf	??_main+1
  1976  0341  3059               	movlw	89
  1977  0342  00D3               	movwf	??_main
  1978  0343                     u2977:	
  1979  0343  0BD3               	decfsz	??_main,f
  1980  0344  2B43               	goto	u2977
  1981  0345  0BD4               	decfsz	??_main+1,f
  1982  0346  2B43               	goto	u2977
  1983  0347  0BD5               	decfsz	??_main+2,f
  1984  0348  2B43               	goto	u2977
  1985  0349  2A47               	goto	l3175
  1986  034A                     __end_of_main:	
  1987                           ;main.c: 208: }
  1988                           ;main.c: 209: return;
  1989                           
  1990                           
  1991                           	psect	text1
  1992  0C1A                     __ptext1:	
  1993 ;; *************** function _TXOBC_waddress *****************
  1994 ;; Defined at:
  1995 ;;		line 78 in file "UART.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  TXOBC_wad_he    1    wreg     unsigned char 
  1998 ;;  whigh_addres    1    1[COMMON] unsigned char 
  1999 ;;  wlow_address    1    2[COMMON] unsigned char 
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;  TXOBC_wad_he    1    5[COMMON] unsigned char 
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, status,2, status,0, pclath, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2011 ;;      Params:         2       0       0       0       0
  2012 ;;      Locals:         1       0       0       0       0
  2013 ;;      Temps:          2       0       0       0       0
  2014 ;;      Totals:         5       0       0       0       0
  2015 ;;Total ram usage:        5 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    1
  2018 ;; This function calls:
  2019 ;;		_putch
  2020 ;; This function is called by:
  2021 ;;		_main
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           
  2026                           ;psect for function _TXOBC_waddress
  2027  0C1A                     _TXOBC_waddress:	
  2028                           
  2029                           ;incstack = 0
  2030                           ; Regs used in _TXOBC_waddress: [wreg+status,2+status,0+pclath+cstack]
  2031                           ;TXOBC_waddress@TXOBC_wad_header stored from wreg
  2032  0C1A  00F5               	movwf	TXOBC_waddress@TXOBC_wad_header
  2033                           
  2034                           ;UART.c: 79: RC5 = 1;
  2035  0C1B  1283               	bcf	3,5	;RP0=0, select bank0
  2036  0C1C  1303               	bcf	3,6	;RP1=0, select bank0
  2037  0C1D  1687               	bsf	7,5	;volatile
  2038                           
  2039                           ;UART.c: 80: _delay((unsigned long)((50)*(10000000/4000.0)));
  2040  0C1E  30A3               	movlw	163
  2041  0C1F  00F4               	movwf	??_TXOBC_waddress+1
  2042  0C20  3055               	movlw	85
  2043  0C21  00F3               	movwf	??_TXOBC_waddress
  2044  0C22                     u2987:	
  2045  0C22  0BF3               	decfsz	??_TXOBC_waddress,f
  2046  0C23  2C22               	goto	u2987
  2047  0C24  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2048  0C25  2C22               	goto	u2987
  2049                           
  2050                           ;UART.c: 81: putch(TXOBC_wad_header);
  2051  0C26  0875               	movf	TXOBC_waddress@TXOBC_wad_header,w
  2052  0C27  120A  158A  227E  120A  158A  	fcall	_putch
  2053                           
  2054                           ;UART.c: 82: _delay((unsigned long)((50)*(10000000/4000.0)));
  2055  0C2C  30A3               	movlw	163
  2056  0C2D  00F4               	movwf	??_TXOBC_waddress+1
  2057  0C2E  3055               	movlw	85
  2058  0C2F  00F3               	movwf	??_TXOBC_waddress
  2059  0C30                     u2997:	
  2060  0C30  0BF3               	decfsz	??_TXOBC_waddress,f
  2061  0C31  2C30               	goto	u2997
  2062  0C32  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2063  0C33  2C30               	goto	u2997
  2064                           
  2065                           ;UART.c: 83: putch(whigh_address);
  2066  0C34  0871               	movf	TXOBC_waddress@whigh_address,w
  2067  0C35  120A  158A  227E  120A  158A  	fcall	_putch
  2068                           
  2069                           ;UART.c: 84: _delay((unsigned long)((50)*(10000000/4000.0)));
  2070  0C3A  30A3               	movlw	163
  2071  0C3B  00F4               	movwf	??_TXOBC_waddress+1
  2072  0C3C  3055               	movlw	85
  2073  0C3D  00F3               	movwf	??_TXOBC_waddress
  2074  0C3E                     u3007:	
  2075  0C3E  0BF3               	decfsz	??_TXOBC_waddress,f
  2076  0C3F  2C3E               	goto	u3007
  2077  0C40  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2078  0C41  2C3E               	goto	u3007
  2079                           
  2080                           ;UART.c: 85: putch(wlow_address);
  2081  0C42  0872               	movf	TXOBC_waddress@wlow_address,w
  2082  0C43  120A  158A  227E  120A  158A  	fcall	_putch
  2083                           
  2084                           ;UART.c: 86: _delay((unsigned long)((50)*(10000000/4000.0)));
  2085  0C48  30A3               	movlw	163
  2086  0C49  00F4               	movwf	??_TXOBC_waddress+1
  2087  0C4A  3055               	movlw	85
  2088  0C4B  00F3               	movwf	??_TXOBC_waddress
  2089  0C4C                     u3017:	
  2090  0C4C  0BF3               	decfsz	??_TXOBC_waddress,f
  2091  0C4D  2C4C               	goto	u3017
  2092  0C4E  0BF4               	decfsz	??_TXOBC_waddress+1,f
  2093  0C4F  2C4C               	goto	u3017
  2094                           
  2095                           ;UART.c: 87: RC5 = 0;
  2096  0C50  1283               	bcf	3,5	;RP0=0, select bank0
  2097  0C51  1303               	bcf	3,6	;RP1=0, select bank0
  2098  0C52  1287               	bcf	7,5	;volatile
  2099  0C53  0008               	return
  2100  0C54                     __end_of_TXOBC_waddress:	
  2101                           
  2102                           	psect	text2
  2103  0B11                     __ptext2:	
  2104 ;; *************** function _Reset_EPS *****************
  2105 ;; Defined at:
  2106 ;;		line 19 in file "EPS.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;		None
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;		None
  2111 ;; Return value:  Size  Location     Type
  2112 ;;                  1    wreg      void 
  2113 ;; Registers used:
  2114 ;;		wreg
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2120 ;;      Params:         0       0       0       0       0
  2121 ;;      Locals:         0       0       0       0       0
  2122 ;;      Temps:          3       0       0       0       0
  2123 ;;      Totals:         3       0       0       0       0
  2124 ;;Total ram usage:        3 bytes
  2125 ;; Hardware stack levels used:    1
  2126 ;; This function calls:
  2127 ;;		Nothing
  2128 ;; This function is called by:
  2129 ;;		_main
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           
  2134                           ;psect for function _Reset_EPS
  2135  0B11                     _Reset_EPS:	
  2136                           
  2137                           ;EPS.c: 20: RB4 = 1;
  2138                           
  2139                           ;incstack = 0
  2140                           ; Regs used in _Reset_EPS: [wreg]
  2141  0B11  1283               	bcf	3,5	;RP0=0, select bank0
  2142  0B12  1303               	bcf	3,6	;RP1=0, select bank0
  2143  0B13  1606               	bsf	6,4	;volatile
  2144                           
  2145                           ;EPS.c: 21: RA1 = 1;
  2146  0B14  1485               	bsf	5,1	;volatile
  2147                           
  2148                           ;EPS.c: 22: _delay((unsigned long)((5000)*(10000000/4000.0)));
  2149  0B15  3040               	movlw	64
  2150  0B16  00F2               	movwf	??_Reset_EPS+2
  2151  0B17  306A               	movlw	106
  2152  0B18  00F1               	movwf	??_Reset_EPS+1
  2153  0B19  3097               	movlw	151
  2154  0B1A  00F0               	movwf	??_Reset_EPS
  2155  0B1B                     u3027:	
  2156  0B1B  0BF0               	decfsz	??_Reset_EPS,f
  2157  0B1C  2B1B               	goto	u3027
  2158  0B1D  0BF1               	decfsz	??_Reset_EPS+1,f
  2159  0B1E  2B1B               	goto	u3027
  2160  0B1F  0BF2               	decfsz	??_Reset_EPS+2,f
  2161  0B20  2B1B               	goto	u3027
  2162  0B21  2B22               	nop2
  2163                           
  2164                           ;EPS.c: 23: RB4 = 0;
  2165  0B22  1283               	bcf	3,5	;RP0=0, select bank0
  2166  0B23  1303               	bcf	3,6	;RP1=0, select bank0
  2167  0B24  1206               	bcf	6,4	;volatile
  2168                           
  2169                           ;EPS.c: 24: RA1 = 0;
  2170  0B25  1085               	bcf	5,1	;volatile
  2171                           
  2172                           ;EPS.c: 25: _delay((unsigned long)((500)*(10000000/4000.0)));
  2173  0B26  3007               	movlw	7
  2174  0B27  00F2               	movwf	??_Reset_EPS+2
  2175  0B28  3058               	movlw	88
  2176  0B29  00F1               	movwf	??_Reset_EPS+1
  2177  0B2A  3059               	movlw	89
  2178  0B2B  00F0               	movwf	??_Reset_EPS
  2179  0B2C                     u3037:	
  2180  0B2C  0BF0               	decfsz	??_Reset_EPS,f
  2181  0B2D  2B2C               	goto	u3037
  2182  0B2E  0BF1               	decfsz	??_Reset_EPS+1,f
  2183  0B2F  2B2C               	goto	u3037
  2184  0B30  0BF2               	decfsz	??_Reset_EPS+2,f
  2185  0B31  2B2C               	goto	u3037
  2186  0B32  2B33               	nop2
  2187  0B33  0008               	return
  2188  0B34                     __end_of_Reset_EPS:	
  2189                           
  2190                           	psect	text3
  2191  0E9C                     __ptext3:	
  2192 ;; *************** function _ReceivePacket_data *****************
  2193 ;; Defined at:
  2194 ;;		line 359 in file "decode_AX25.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;		None
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  i               2   31[BANK0 ] unsigned int 
  2199 ;;  fcschecker      2   29[BANK0 ] unsigned int 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      PTR unsigned char 
  2202 ;; Registers used:
  2203 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2209 ;;      Params:         0       0       0       0       0
  2210 ;;      Locals:         0       4       0       0       0
  2211 ;;      Temps:          2       0       0       0       0
  2212 ;;      Totals:         2       4       0       0       0
  2213 ;;Total ram usage:        6 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    2
  2216 ;; This function calls:
  2217 ;;		_fcscheck
  2218 ;;		_getdata
  2219 ;;		_waitFlag
  2220 ;; This function is called by:
  2221 ;;		_main
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           
  2226                           ;psect for function _ReceivePacket_data
  2227  0E9C                     _ReceivePacket_data:	
  2228                           
  2229                           ;decode_AX25.c: 360: UINT fcschecker;
  2230                           ;decode_AX25.c: 363: waitFlag();
  2231                           
  2232                           ;incstack = 0
  2233                           ; Regs used in _ReceivePacket_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2234  0E9C  120A  118A  234A  120A  158A  	fcall	_waitFlag
  2235                           
  2236                           ;decode_AX25.c: 365: getdata();
  2237  0EA1  120A  158A  263B  120A  158A  	fcall	_getdata
  2238                           
  2239                           ;decode_AX25.c: 367: fcschecker = fcscheck();
  2240  0EA6  120A  158A  277E  120A  158A  	fcall	_fcscheck
  2241  0EAB  0871               	movf	?_fcscheck+1,w
  2242  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  2243  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  2244  0EAE  00BE               	movwf	ReceivePacket_data@fcschecker+1
  2245  0EAF  0870               	movf	?_fcscheck,w
  2246  0EB0  00BD               	movwf	ReceivePacket_data@fcschecker
  2247                           
  2248                           ;decode_AX25.c: 369: if(fcschecker == 1){
  2249  0EB1  033D               	decf	ReceivePacket_data@fcschecker,w
  2250  0EB2  043E               	iorwf	ReceivePacket_data@fcschecker+1,w
  2251  0EB3  1D03               	btfss	3,2
  2252  0EB4  2EFB               	goto	l2991
  2253                           
  2254                           ;decode_AX25.c: 370: for(UINT i=0; i<commandSize; i++){
  2255  0EB5  01BF               	clrf	ReceivePacket_data@i
  2256  0EB6  01C0               	clrf	ReceivePacket_data@i+1
  2257  0EB7  3001               	movlw	low (_commandSize-__stringbase)
  2258  0EB8  0084               	movwf	4
  2259  0EB9  120A  118A  2003  120A  158A  	fcall	stringdir
  2260  0EBE  00FA               	movwf	??_ReceivePacket_data
  2261  0EBF  120A  118A  2003  120A  158A  	fcall	stringdir
  2262  0EC4  00FB               	movwf	??_ReceivePacket_data+1
  2263  0EC5  087B               	movf	??_ReceivePacket_data+1,w
  2264  0EC6  0240               	subwf	ReceivePacket_data@i+1,w
  2265  0EC7  1D03               	skipz
  2266  0EC8  2ECB               	goto	u2675
  2267  0EC9  087A               	movf	??_ReceivePacket_data,w
  2268  0ECA  023F               	subwf	ReceivePacket_data@i,w
  2269  0ECB                     u2675:	
  2270  0ECB  1803               	btfsc	3,0
  2271  0ECC  2EF5               	goto	l2983
  2272  0ECD                     l2977:	
  2273                           
  2274                           ;decode_AX25.c: 371: dData[i] = dPacket[i+20];
  2275  0ECD  083F               	movf	ReceivePacket_data@i,w
  2276  0ECE  3E14               	addlw	20
  2277  0ECF  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  2278  0ED0  0084               	movwf	4
  2279  0ED1  1383               	bcf	3,7	;select IRP bank1
  2280  0ED2  0800               	movf	0,w
  2281  0ED3  00FA               	movwf	??_ReceivePacket_data
  2282  0ED4  083F               	movf	ReceivePacket_data@i,w
  2283  0ED5  3ED2               	addlw	(low (_dData| 0))& (0+255)
  2284  0ED6  0084               	movwf	4
  2285  0ED7  087A               	movf	??_ReceivePacket_data,w
  2286  0ED8  0080               	movwf	0
  2287  0ED9  3001               	movlw	1
  2288  0EDA  07BF               	addwf	ReceivePacket_data@i,f
  2289  0EDB  1803               	skipnc
  2290  0EDC  0AC0               	incf	ReceivePacket_data@i+1,f
  2291  0EDD  3000               	movlw	0
  2292  0EDE  07C0               	addwf	ReceivePacket_data@i+1,f
  2293  0EDF  3001               	movlw	low (_commandSize-__stringbase)
  2294  0EE0  0084               	movwf	4
  2295  0EE1  120A  118A  2003  120A  158A  	fcall	stringdir
  2296  0EE6  00FA               	movwf	??_ReceivePacket_data
  2297  0EE7  120A  118A  2003  120A  158A  	fcall	stringdir
  2298  0EEC  00FB               	movwf	??_ReceivePacket_data+1
  2299  0EED  087B               	movf	??_ReceivePacket_data+1,w
  2300  0EEE  0240               	subwf	ReceivePacket_data@i+1,w
  2301  0EEF  1D03               	skipz
  2302  0EF0  2EF3               	goto	u2685
  2303  0EF1  087A               	movf	??_ReceivePacket_data,w
  2304  0EF2  023F               	subwf	ReceivePacket_data@i,w
  2305  0EF3                     u2685:	
  2306  0EF3  1C03               	skipc
  2307  0EF4  2ECD               	goto	l2977
  2308  0EF5                     l2983:	
  2309                           
  2310                           ;decode_AX25.c: 372: }
  2311                           ;decode_AX25.c: 373: dPacketnum = 0;
  2312  0EF5  01E7               	clrf	_dPacketnum
  2313  0EF6  01E8               	clrf	_dPacketnum+1
  2314                           
  2315                           ;decode_AX25.c: 374: rcv_state = 0;
  2316  0EF7  01E9               	clrf	_rcv_state
  2317  0EF8  01EA               	clrf	_rcv_state+1
  2318                           
  2319                           ;decode_AX25.c: 375: return dData;
  2320  0EF9  30D2               	movlw	(low (_dData| 0))& (0+255)
  2321                           
  2322                           ;decode_AX25.c: 376: }else{
  2323  0EFA  0008               	return
  2324  0EFB                     l2991:	
  2325                           
  2326                           ;decode_AX25.c: 377: dPacketnum = 0;
  2327  0EFB  01E7               	clrf	_dPacketnum
  2328  0EFC  01E8               	clrf	_dPacketnum+1
  2329                           
  2330                           ;decode_AX25.c: 378: rcv_state = 0;
  2331  0EFD  01E9               	clrf	_rcv_state
  2332  0EFE  01EA               	clrf	_rcv_state+1
  2333                           
  2334                           ;decode_AX25.c: 379: return 0x00;
  2335  0EFF  3000               	movlw	0
  2336  0F00  0008               	return
  2337  0F01                     __end_of_ReceivePacket_data:	
  2338                           
  2339                           	psect	text4
  2340  034A                     __ptext4:	
  2341 ;; *************** function _waitFlag *****************
  2342 ;; Defined at:
  2343 ;;		line 54 in file "decode_AX25.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;		None
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  j               2   24[BANK0 ] unsigned int 
  2348 ;;  j               2   10[BANK0 ] unsigned int 
  2349 ;;  j               2   22[BANK0 ] unsigned int 
  2350 ;;  j               2    8[BANK0 ] unsigned int 
  2351 ;;  j               2   20[BANK0 ] unsigned int 
  2352 ;;  j               2    6[BANK0 ] unsigned int 
  2353 ;;  j               2   18[BANK0 ] unsigned int 
  2354 ;;  j               2    4[BANK0 ] unsigned int 
  2355 ;;  j               2   16[BANK0 ] unsigned int 
  2356 ;;  j               2    2[BANK0 ] unsigned int 
  2357 ;;  i               2    0[BANK0 ] unsigned int 
  2358 ;;  j               2   14[BANK0 ] unsigned int 
  2359 ;;  j               2   12[BANK0 ] unsigned int 
  2360 ;;  flag_judge      2   26[BANK0 ] unsigned int 
  2361 ;;  buf             1   28[BANK0 ] unsigned char 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  1    wreg      void 
  2364 ;; Registers used:
  2365 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2371 ;;      Params:         0       0       0       0       0
  2372 ;;      Locals:         0      29       0       0       0
  2373 ;;      Temps:          4       0       0       0       0
  2374 ;;      Totals:         4      29       0       0       0
  2375 ;;Total ram usage:       33 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    1
  2378 ;; This function calls:
  2379 ;;		_getbit
  2380 ;; This function is called by:
  2381 ;;		_ReceivePacket_data
  2382 ;;		_ReceivePacket
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           
  2387                           ;psect for function _waitFlag
  2388  034A                     _waitFlag:	
  2389                           
  2390                           ;decode_AX25.c: 55: UINT flag_judge;
  2391                           ;decode_AX25.c: 56: UBYTE buf = 0xff;
  2392                           
  2393                           ;incstack = 0
  2394                           ; Regs used in _waitFlag: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2395  034A  30FF               	movlw	255
  2396  034B  00F6               	movwf	??_waitFlag
  2397  034C  0876               	movf	??_waitFlag,w
  2398  034D  1283               	bcf	3,5	;RP0=0, select bank0
  2399  034E  1303               	bcf	3,6	;RP1=0, select bank0
  2400  034F  00BC               	movwf	waitFlag@buf
  2401  0350                     L6:	
  2402                           
  2403                           ;decode_AX25.c: 271: rcv_state = 0;
  2404  0350  01E9               	clrf	_rcv_state
  2405  0351  01EA               	clrf	_rcv_state+1
  2406  0352                     l2693:	
  2407  0352  3000               	movlw	0
  2408  0353  026A               	subwf	_rcv_state+1,w
  2409  0354  3002               	movlw	2
  2410  0355  1903               	skipnz
  2411  0356  0269               	subwf	_rcv_state,w
  2412  0357  1803               	btfsc	3,0
  2413  0358  0008               	return
  2414  0359                     l2327:	
  2415                           ;decode_AX25.c: 59: while(buf != 0x7e){
  2416                           
  2417                           ;decode_AX25.c: 58: while(rcv_state < 2){
  2418                           
  2419                           ;decode_AX25.c: 57: rcv_state = 0;
  2420                           
  2421  0359  307E               	movlw	126
  2422  035A  063C               	xorwf	waitFlag@buf,w
  2423  035B  1903               	btfsc	3,2
  2424  035C  2BA9               	goto	l2349
  2425                           
  2426                           ;decode_AX25.c: 60: flag_judge = getbit();
  2427  035D  120A  158A  24E0  120A  118A  	fcall	_getbit
  2428  0362  0871               	movf	?_getbit+1,w
  2429  0363  1283               	bcf	3,5	;RP0=0, select bank0
  2430  0364  1303               	bcf	3,6	;RP1=0, select bank0
  2431  0365  00BB               	movwf	waitFlag@flag_judge+1
  2432  0366  0870               	movf	?_getbit,w
  2433  0367  00BA               	movwf	waitFlag@flag_judge
  2434                           
  2435                           ;decode_AX25.c: 61: buf = buf << 1;
  2436  0368  083C               	movf	waitFlag@buf,w
  2437  0369  00F6               	movwf	??_waitFlag
  2438  036A  0776               	addwf	??_waitFlag,w
  2439  036B  00F7               	movwf	??_waitFlag+1
  2440  036C  0877               	movf	??_waitFlag+1,w
  2441  036D  00BC               	movwf	waitFlag@buf
  2442                           
  2443                           ;decode_AX25.c: 63: buf = buf | 0x00;
  2444  036E  083A               	movf	waitFlag@flag_judge,w
  2445  036F  043B               	iorwf	waitFlag@flag_judge+1,w
  2446  0370  1903               	btfsc	3,2
  2447  0371  2B59               	goto	l2327
  2448                           
  2449                           ;decode_AX25.c: 65: buf = buf | 0x01;
  2450                           
  2451                           ;decode_AX25.c: 64: }else{
  2452  0372  083C               	movf	waitFlag@buf,w
  2453  0373  3801               	iorlw	1
  2454  0374  00F6               	movwf	??_waitFlag
  2455  0375  0876               	movf	??_waitFlag,w
  2456  0376  00BC               	movwf	waitFlag@buf
  2457  0377  2B59               	goto	l2327
  2458  0378                     l2329:	
  2459                           ;decode_AX25.c: 66: }
  2460                           ;decode_AX25.c: 67: }
  2461                           ;decode_AX25.c: 71: while(buf == 0x7e){
  2462                           
  2463                           
  2464                           ;decode_AX25.c: 72: for(UINT i=0;i<8;i++){
  2465  0378  01A0               	clrf	waitFlag@i
  2466  0379  01A1               	clrf	waitFlag@i+1
  2467  037A  3000               	movlw	0
  2468  037B  0221               	subwf	waitFlag@i+1,w
  2469  037C  3008               	movlw	8
  2470  037D  1903               	skipnz
  2471  037E  0220               	subwf	waitFlag@i,w
  2472  037F  1803               	btfsc	3,0
  2473  0380  2BA9               	goto	l2349
  2474  0381                     l2335:	
  2475                           
  2476                           ;decode_AX25.c: 73: flag_judge = getbit();
  2477  0381  120A  158A  24E0  120A  118A  	fcall	_getbit
  2478  0386  0871               	movf	?_getbit+1,w
  2479  0387  1283               	bcf	3,5	;RP0=0, select bank0
  2480  0388  1303               	bcf	3,6	;RP1=0, select bank0
  2481  0389  00BB               	movwf	waitFlag@flag_judge+1
  2482  038A  0870               	movf	?_getbit,w
  2483  038B  00BA               	movwf	waitFlag@flag_judge
  2484                           
  2485                           ;decode_AX25.c: 74: buf = buf >> 1;
  2486  038C  083C               	movf	waitFlag@buf,w
  2487  038D  00F6               	movwf	??_waitFlag
  2488  038E  1003               	clrc
  2489  038F  0C76               	rrf	??_waitFlag,w
  2490  0390  00F7               	movwf	??_waitFlag+1
  2491  0391  0877               	movf	??_waitFlag+1,w
  2492  0392  00BC               	movwf	waitFlag@buf
  2493                           
  2494                           ;decode_AX25.c: 76: buf = buf | 0x00;
  2495  0393  083A               	movf	waitFlag@flag_judge,w
  2496  0394  043B               	iorwf	waitFlag@flag_judge+1,w
  2497  0395  1903               	btfsc	3,2
  2498  0396  2B9C               	goto	l2345
  2499                           
  2500                           ;decode_AX25.c: 78: buf = buf | 0x80;
  2501                           
  2502                           ;decode_AX25.c: 77: }else{
  2503  0397  083C               	movf	waitFlag@buf,w
  2504  0398  3880               	iorlw	128
  2505  0399  00F6               	movwf	??_waitFlag
  2506  039A  0876               	movf	??_waitFlag,w
  2507  039B  00BC               	movwf	waitFlag@buf
  2508  039C                     l2345:	
  2509  039C  3001               	movlw	1
  2510  039D  07A0               	addwf	waitFlag@i,f
  2511  039E  1803               	skipnc
  2512  039F  0AA1               	incf	waitFlag@i+1,f
  2513  03A0  3000               	movlw	0
  2514  03A1  07A1               	addwf	waitFlag@i+1,f
  2515  03A2  3000               	movlw	0
  2516  03A3  0221               	subwf	waitFlag@i+1,w
  2517  03A4  3008               	movlw	8
  2518  03A5  1903               	skipnz
  2519  03A6  0220               	subwf	waitFlag@i,w
  2520  03A7  1C03               	skipc
  2521  03A8  2B81               	goto	l2335
  2522  03A9                     l2349:	
  2523  03A9  307E               	movlw	126
  2524  03AA  063C               	xorwf	waitFlag@buf,w
  2525  03AB  1903               	btfsc	3,2
  2526  03AC  2B78               	goto	l2329
  2527                           
  2528                           ;decode_AX25.c: 79: }
  2529                           ;decode_AX25.c: 80: }
  2530                           ;decode_AX25.c: 81: }
  2531                           ;decode_AX25.c: 82: if(buf == ("JQ1YCZ"[0] << 1)){
  2532  03AD  300A               	movlw	low (STR_1-__stringbase)
  2533  03AE  0084               	movwf	4
  2534  03AF  120A  118A  2003  120A  118A  	fcall	stringdir
  2535  03B4  00F6               	movwf	??_waitFlag
  2536  03B5  01F7               	clrf	??_waitFlag+1
  2537  03B6  1003               	clrc
  2538  03B7  0DF6               	rlf	??_waitFlag,f
  2539  03B8  0DF7               	rlf	??_waitFlag+1,f
  2540  03B9  083C               	movf	waitFlag@buf,w
  2541  03BA  00F8               	movwf	??_waitFlag+2
  2542  03BB  01F9               	clrf	??_waitFlag+3
  2543  03BC  0877               	movf	??_waitFlag+1,w
  2544  03BD  0679               	xorwf	??_waitFlag+3,w
  2545  03BE  1D03               	skipz
  2546  03BF  2BC2               	goto	u1825
  2547  03C0  0876               	movf	??_waitFlag,w
  2548  03C1  0678               	xorwf	??_waitFlag+2,w
  2549  03C2                     u1825:	
  2550  03C2  1D03               	skipz
  2551  03C3  2D87               	goto	l2499
  2552                           
  2553                           ;decode_AX25.c: 83: dPacket[dPacketnum] = buf;
  2554  03C4  083C               	movf	waitFlag@buf,w
  2555  03C5  00F6               	movwf	??_waitFlag
  2556  03C6  0867               	movf	_dPacketnum,w
  2557  03C7  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  2558  03C8  0084               	movwf	4
  2559  03C9  0876               	movf	??_waitFlag,w
  2560  03CA  1383               	bcf	3,7	;select IRP bank1
  2561  03CB  0080               	movwf	0
  2562                           
  2563                           ;decode_AX25.c: 84: dPacketnum ++;
  2564  03CC  3001               	movlw	1
  2565  03CD  07E7               	addwf	_dPacketnum,f
  2566  03CE  1803               	skipnc
  2567  03CF  0AE8               	incf	_dPacketnum+1,f
  2568  03D0  3000               	movlw	0
  2569  03D1  07E8               	addwf	_dPacketnum+1,f
  2570                           
  2571                           ;decode_AX25.c: 85: for(UINT j=0;j<8;j++){
  2572  03D2  01A2               	clrf	waitFlag@j
  2573  03D3  01A3               	clrf	waitFlag@j+1
  2574  03D4  3000               	movlw	0
  2575  03D5  0223               	subwf	waitFlag@j+1,w
  2576  03D6  3008               	movlw	8
  2577  03D7  1903               	skipnz
  2578  03D8  0222               	subwf	waitFlag@j,w
  2579  03D9  1803               	btfsc	3,0
  2580  03DA  2C03               	goto	l2377
  2581  03DB                     l2363:	
  2582                           
  2583                           ;decode_AX25.c: 86: flag_judge = getbit();
  2584  03DB  120A  158A  24E0  120A  118A  	fcall	_getbit
  2585  03E0  0871               	movf	?_getbit+1,w
  2586  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  2587  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  2588  03E3  00BB               	movwf	waitFlag@flag_judge+1
  2589  03E4  0870               	movf	?_getbit,w
  2590  03E5  00BA               	movwf	waitFlag@flag_judge
  2591                           
  2592                           ;decode_AX25.c: 87: buf = buf >> 1;
  2593  03E6  083C               	movf	waitFlag@buf,w
  2594  03E7  00F6               	movwf	??_waitFlag
  2595  03E8  1003               	clrc
  2596  03E9  0C76               	rrf	??_waitFlag,w
  2597  03EA  00F7               	movwf	??_waitFlag+1
  2598  03EB  0877               	movf	??_waitFlag+1,w
  2599  03EC  00BC               	movwf	waitFlag@buf
  2600                           
  2601                           ;decode_AX25.c: 89: buf = buf | 0x00;
  2602  03ED  083A               	movf	waitFlag@flag_judge,w
  2603  03EE  043B               	iorwf	waitFlag@flag_judge+1,w
  2604  03EF  1903               	btfsc	3,2
  2605  03F0  2BF6               	goto	l2373
  2606                           
  2607                           ;decode_AX25.c: 91: buf = buf | 0x80;
  2608                           
  2609                           ;decode_AX25.c: 90: }else{
  2610  03F1  083C               	movf	waitFlag@buf,w
  2611  03F2  3880               	iorlw	128
  2612  03F3  00F6               	movwf	??_waitFlag
  2613  03F4  0876               	movf	??_waitFlag,w
  2614  03F5  00BC               	movwf	waitFlag@buf
  2615  03F6                     l2373:	
  2616  03F6  3001               	movlw	1
  2617  03F7  07A2               	addwf	waitFlag@j,f
  2618  03F8  1803               	skipnc
  2619  03F9  0AA3               	incf	waitFlag@j+1,f
  2620  03FA  3000               	movlw	0
  2621  03FB  07A3               	addwf	waitFlag@j+1,f
  2622  03FC  3000               	movlw	0
  2623  03FD  0223               	subwf	waitFlag@j+1,w
  2624  03FE  3008               	movlw	8
  2625  03FF  1903               	skipnz
  2626  0400  0222               	subwf	waitFlag@j,w
  2627  0401  1C03               	skipc
  2628  0402  2BDB               	goto	l2363
  2629  0403                     l2377:	
  2630                           
  2631                           ;decode_AX25.c: 92: }
  2632                           ;decode_AX25.c: 93: }
  2633                           ;decode_AX25.c: 94: if(buf == ("JQ1YCZ"[1] << 1)){
  2634  0403  300B               	movlw	low (((STR_1+1)-__stringbase)| (0+32768))
  2635  0404  0084               	movwf	4
  2636  0405  120A  118A  2003  120A  118A  	fcall	stringdir
  2637  040A  00F6               	movwf	??_waitFlag
  2638  040B  01F7               	clrf	??_waitFlag+1
  2639  040C  1003               	clrc
  2640  040D  0DF6               	rlf	??_waitFlag,f
  2641  040E  0DF7               	rlf	??_waitFlag+1,f
  2642  040F  083C               	movf	waitFlag@buf,w
  2643  0410  00F8               	movwf	??_waitFlag+2
  2644  0411  01F9               	clrf	??_waitFlag+3
  2645  0412  0877               	movf	??_waitFlag+1,w
  2646  0413  0679               	xorwf	??_waitFlag+3,w
  2647  0414  1D03               	skipz
  2648  0415  2C18               	goto	u1865
  2649  0416  0876               	movf	??_waitFlag,w
  2650  0417  0678               	xorwf	??_waitFlag+2,w
  2651  0418                     u1865:	
  2652  0418  1D03               	skipz
  2653  0419  2D87               	goto	l2499
  2654                           
  2655                           ;decode_AX25.c: 95: dPacket[dPacketnum] = buf;
  2656  041A  083C               	movf	waitFlag@buf,w
  2657  041B  00F6               	movwf	??_waitFlag
  2658  041C  0867               	movf	_dPacketnum,w
  2659  041D  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  2660  041E  0084               	movwf	4
  2661  041F  0876               	movf	??_waitFlag,w
  2662  0420  1383               	bcf	3,7	;select IRP bank1
  2663  0421  0080               	movwf	0
  2664                           
  2665                           ;decode_AX25.c: 96: dPacketnum ++;
  2666  0422  3001               	movlw	1
  2667  0423  07E7               	addwf	_dPacketnum,f
  2668  0424  1803               	skipnc
  2669  0425  0AE8               	incf	_dPacketnum+1,f
  2670  0426  3000               	movlw	0
  2671  0427  07E8               	addwf	_dPacketnum+1,f
  2672                           
  2673                           ;decode_AX25.c: 97: for(UINT j=0;j<8;j++){
  2674  0428  01A4               	clrf	waitFlag@j_102
  2675  0429  01A5               	clrf	waitFlag@j_102+1
  2676  042A  3000               	movlw	0
  2677  042B  0225               	subwf	waitFlag@j_102+1,w
  2678  042C  3008               	movlw	8
  2679  042D  1903               	skipnz
  2680  042E  0224               	subwf	waitFlag@j_102,w
  2681  042F  1803               	btfsc	3,0
  2682  0430  2C59               	goto	l2403
  2683  0431                     l2389:	
  2684                           
  2685                           ;decode_AX25.c: 98: flag_judge = getbit();
  2686  0431  120A  158A  24E0  120A  118A  	fcall	_getbit
  2687  0436  0871               	movf	?_getbit+1,w
  2688  0437  1283               	bcf	3,5	;RP0=0, select bank0
  2689  0438  1303               	bcf	3,6	;RP1=0, select bank0
  2690  0439  00BB               	movwf	waitFlag@flag_judge+1
  2691  043A  0870               	movf	?_getbit,w
  2692  043B  00BA               	movwf	waitFlag@flag_judge
  2693                           
  2694                           ;decode_AX25.c: 99: buf = buf >> 1;
  2695  043C  083C               	movf	waitFlag@buf,w
  2696  043D  00F6               	movwf	??_waitFlag
  2697  043E  1003               	clrc
  2698  043F  0C76               	rrf	??_waitFlag,w
  2699  0440  00F7               	movwf	??_waitFlag+1
  2700  0441  0877               	movf	??_waitFlag+1,w
  2701  0442  00BC               	movwf	waitFlag@buf
  2702                           
  2703                           ;decode_AX25.c: 101: buf = buf | 0x00;
  2704  0443  083A               	movf	waitFlag@flag_judge,w
  2705  0444  043B               	iorwf	waitFlag@flag_judge+1,w
  2706  0445  1903               	btfsc	3,2
  2707  0446  2C4C               	goto	l2399
  2708                           
  2709                           ;decode_AX25.c: 103: buf = buf | 0x80;
  2710                           
  2711                           ;decode_AX25.c: 102: }else{
  2712  0447  083C               	movf	waitFlag@buf,w
  2713  0448  3880               	iorlw	128
  2714  0449  00F6               	movwf	??_waitFlag
  2715  044A  0876               	movf	??_waitFlag,w
  2716  044B  00BC               	movwf	waitFlag@buf
  2717  044C                     l2399:	
  2718  044C  3001               	movlw	1
  2719  044D  07A4               	addwf	waitFlag@j_102,f
  2720  044E  1803               	skipnc
  2721  044F  0AA5               	incf	waitFlag@j_102+1,f
  2722  0450  3000               	movlw	0
  2723  0451  07A5               	addwf	waitFlag@j_102+1,f
  2724  0452  3000               	movlw	0
  2725  0453  0225               	subwf	waitFlag@j_102+1,w
  2726  0454  3008               	movlw	8
  2727  0455  1903               	skipnz
  2728  0456  0224               	subwf	waitFlag@j_102,w
  2729  0457  1C03               	skipc
  2730  0458  2C31               	goto	l2389
  2731  0459                     l2403:	
  2732                           
  2733                           ;decode_AX25.c: 104: }
  2734                           ;decode_AX25.c: 105: }
  2735                           ;decode_AX25.c: 106: if(buf == ("JQ1YCZ"[2] << 1)){
  2736  0459  300C               	movlw	low (((STR_1+2)-__stringbase)| (0+32768))
  2737  045A  0084               	movwf	4
  2738  045B  120A  118A  2003  120A  118A  	fcall	stringdir
  2739  0460  00F6               	movwf	??_waitFlag
  2740  0461  01F7               	clrf	??_waitFlag+1
  2741  0462  1003               	clrc
  2742  0463  0DF6               	rlf	??_waitFlag,f
  2743  0464  0DF7               	rlf	??_waitFlag+1,f
  2744  0465  083C               	movf	waitFlag@buf,w
  2745  0466  00F8               	movwf	??_waitFlag+2
  2746  0467  01F9               	clrf	??_waitFlag+3
  2747  0468  0877               	movf	??_waitFlag+1,w
  2748  0469  0679               	xorwf	??_waitFlag+3,w
  2749  046A  1D03               	skipz
  2750  046B  2C6E               	goto	u1905
  2751  046C  0876               	movf	??_waitFlag,w
  2752  046D  0678               	xorwf	??_waitFlag+2,w
  2753  046E                     u1905:	
  2754  046E  1D03               	skipz
  2755  046F  2D87               	goto	l2499
  2756                           
  2757                           ;decode_AX25.c: 107: dPacket[dPacketnum] = buf;
  2758  0470  083C               	movf	waitFlag@buf,w
  2759  0471  00F6               	movwf	??_waitFlag
  2760  0472  0867               	movf	_dPacketnum,w
  2761  0473  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  2762  0474  0084               	movwf	4
  2763  0475  0876               	movf	??_waitFlag,w
  2764  0476  1383               	bcf	3,7	;select IRP bank1
  2765  0477  0080               	movwf	0
  2766                           
  2767                           ;decode_AX25.c: 108: dPacketnum ++;
  2768  0478  3001               	movlw	1
  2769  0479  07E7               	addwf	_dPacketnum,f
  2770  047A  1803               	skipnc
  2771  047B  0AE8               	incf	_dPacketnum+1,f
  2772  047C  3000               	movlw	0
  2773  047D  07E8               	addwf	_dPacketnum+1,f
  2774                           
  2775                           ;decode_AX25.c: 109: for(UINT j=0;j<8;j++){
  2776  047E  01A6               	clrf	waitFlag@j_104
  2777  047F  01A7               	clrf	waitFlag@j_104+1
  2778  0480  3000               	movlw	0
  2779  0481  0227               	subwf	waitFlag@j_104+1,w
  2780  0482  3008               	movlw	8
  2781  0483  1903               	skipnz
  2782  0484  0226               	subwf	waitFlag@j_104,w
  2783  0485  1803               	btfsc	3,0
  2784  0486  2CAF               	goto	l2429
  2785  0487                     l2415:	
  2786                           
  2787                           ;decode_AX25.c: 110: flag_judge = getbit();
  2788  0487  120A  158A  24E0  120A  118A  	fcall	_getbit
  2789  048C  0871               	movf	?_getbit+1,w
  2790  048D  1283               	bcf	3,5	;RP0=0, select bank0
  2791  048E  1303               	bcf	3,6	;RP1=0, select bank0
  2792  048F  00BB               	movwf	waitFlag@flag_judge+1
  2793  0490  0870               	movf	?_getbit,w
  2794  0491  00BA               	movwf	waitFlag@flag_judge
  2795                           
  2796                           ;decode_AX25.c: 111: buf = buf >> 1;
  2797  0492  083C               	movf	waitFlag@buf,w
  2798  0493  00F6               	movwf	??_waitFlag
  2799  0494  1003               	clrc
  2800  0495  0C76               	rrf	??_waitFlag,w
  2801  0496  00F7               	movwf	??_waitFlag+1
  2802  0497  0877               	movf	??_waitFlag+1,w
  2803  0498  00BC               	movwf	waitFlag@buf
  2804                           
  2805                           ;decode_AX25.c: 113: buf = buf | 0x00;
  2806  0499  083A               	movf	waitFlag@flag_judge,w
  2807  049A  043B               	iorwf	waitFlag@flag_judge+1,w
  2808  049B  1903               	btfsc	3,2
  2809  049C  2CA2               	goto	l2425
  2810                           
  2811                           ;decode_AX25.c: 115: buf = buf | 0x80;
  2812                           
  2813                           ;decode_AX25.c: 114: }else{
  2814  049D  083C               	movf	waitFlag@buf,w
  2815  049E  3880               	iorlw	128
  2816  049F  00F6               	movwf	??_waitFlag
  2817  04A0  0876               	movf	??_waitFlag,w
  2818  04A1  00BC               	movwf	waitFlag@buf
  2819  04A2                     l2425:	
  2820  04A2  3001               	movlw	1
  2821  04A3  07A6               	addwf	waitFlag@j_104,f
  2822  04A4  1803               	skipnc
  2823  04A5  0AA7               	incf	waitFlag@j_104+1,f
  2824  04A6  3000               	movlw	0
  2825  04A7  07A7               	addwf	waitFlag@j_104+1,f
  2826  04A8  3000               	movlw	0
  2827  04A9  0227               	subwf	waitFlag@j_104+1,w
  2828  04AA  3008               	movlw	8
  2829  04AB  1903               	skipnz
  2830  04AC  0226               	subwf	waitFlag@j_104,w
  2831  04AD  1C03               	skipc
  2832  04AE  2C87               	goto	l2415
  2833  04AF                     l2429:	
  2834                           
  2835                           ;decode_AX25.c: 116: }
  2836                           ;decode_AX25.c: 117: }
  2837                           ;decode_AX25.c: 118: if(buf == ("JQ1YCZ"[3] << 1)){
  2838  04AF  300D               	movlw	low (((STR_1+3)-__stringbase)| (0+32768))
  2839  04B0  0084               	movwf	4
  2840  04B1  120A  118A  2003  120A  118A  	fcall	stringdir
  2841  04B6  00F6               	movwf	??_waitFlag
  2842  04B7  01F7               	clrf	??_waitFlag+1
  2843  04B8  1003               	clrc
  2844  04B9  0DF6               	rlf	??_waitFlag,f
  2845  04BA  0DF7               	rlf	??_waitFlag+1,f
  2846  04BB  083C               	movf	waitFlag@buf,w
  2847  04BC  00F8               	movwf	??_waitFlag+2
  2848  04BD  01F9               	clrf	??_waitFlag+3
  2849  04BE  0877               	movf	??_waitFlag+1,w
  2850  04BF  0679               	xorwf	??_waitFlag+3,w
  2851  04C0  1D03               	skipz
  2852  04C1  2CC4               	goto	u1945
  2853  04C2  0876               	movf	??_waitFlag,w
  2854  04C3  0678               	xorwf	??_waitFlag+2,w
  2855  04C4                     u1945:	
  2856  04C4  1D03               	skipz
  2857  04C5  2D87               	goto	l2499
  2858                           
  2859                           ;decode_AX25.c: 119: dPacket[dPacketnum] = buf;
  2860  04C6  083C               	movf	waitFlag@buf,w
  2861  04C7  00F6               	movwf	??_waitFlag
  2862  04C8  0867               	movf	_dPacketnum,w
  2863  04C9  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  2864  04CA  0084               	movwf	4
  2865  04CB  0876               	movf	??_waitFlag,w
  2866  04CC  1383               	bcf	3,7	;select IRP bank1
  2867  04CD  0080               	movwf	0
  2868                           
  2869                           ;decode_AX25.c: 120: dPacketnum ++;
  2870  04CE  3001               	movlw	1
  2871  04CF  07E7               	addwf	_dPacketnum,f
  2872  04D0  1803               	skipnc
  2873  04D1  0AE8               	incf	_dPacketnum+1,f
  2874  04D2  3000               	movlw	0
  2875  04D3  07E8               	addwf	_dPacketnum+1,f
  2876                           
  2877                           ;decode_AX25.c: 121: for(UINT j=0;j<8;j++){
  2878  04D4  01A8               	clrf	waitFlag@j_106
  2879  04D5  01A9               	clrf	waitFlag@j_106+1
  2880  04D6  3000               	movlw	0
  2881  04D7  0229               	subwf	waitFlag@j_106+1,w
  2882  04D8  3008               	movlw	8
  2883  04D9  1903               	skipnz
  2884  04DA  0228               	subwf	waitFlag@j_106,w
  2885  04DB  1803               	btfsc	3,0
  2886  04DC  2D05               	goto	l2455
  2887  04DD                     l2441:	
  2888                           
  2889                           ;decode_AX25.c: 122: flag_judge = getbit();
  2890  04DD  120A  158A  24E0  120A  118A  	fcall	_getbit
  2891  04E2  0871               	movf	?_getbit+1,w
  2892  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  2893  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  2894  04E5  00BB               	movwf	waitFlag@flag_judge+1
  2895  04E6  0870               	movf	?_getbit,w
  2896  04E7  00BA               	movwf	waitFlag@flag_judge
  2897                           
  2898                           ;decode_AX25.c: 123: buf = buf >> 1;
  2899  04E8  083C               	movf	waitFlag@buf,w
  2900  04E9  00F6               	movwf	??_waitFlag
  2901  04EA  1003               	clrc
  2902  04EB  0C76               	rrf	??_waitFlag,w
  2903  04EC  00F7               	movwf	??_waitFlag+1
  2904  04ED  0877               	movf	??_waitFlag+1,w
  2905  04EE  00BC               	movwf	waitFlag@buf
  2906                           
  2907                           ;decode_AX25.c: 125: buf = buf | 0x00;
  2908  04EF  083A               	movf	waitFlag@flag_judge,w
  2909  04F0  043B               	iorwf	waitFlag@flag_judge+1,w
  2910  04F1  1903               	btfsc	3,2
  2911  04F2  2CF8               	goto	l2451
  2912                           
  2913                           ;decode_AX25.c: 127: buf = buf | 0x80;
  2914                           
  2915                           ;decode_AX25.c: 126: }else{
  2916  04F3  083C               	movf	waitFlag@buf,w
  2917  04F4  3880               	iorlw	128
  2918  04F5  00F6               	movwf	??_waitFlag
  2919  04F6  0876               	movf	??_waitFlag,w
  2920  04F7  00BC               	movwf	waitFlag@buf
  2921  04F8                     l2451:	
  2922  04F8  3001               	movlw	1
  2923  04F9  07A8               	addwf	waitFlag@j_106,f
  2924  04FA  1803               	skipnc
  2925  04FB  0AA9               	incf	waitFlag@j_106+1,f
  2926  04FC  3000               	movlw	0
  2927  04FD  07A9               	addwf	waitFlag@j_106+1,f
  2928  04FE  3000               	movlw	0
  2929  04FF  0229               	subwf	waitFlag@j_106+1,w
  2930  0500  3008               	movlw	8
  2931  0501  1903               	skipnz
  2932  0502  0228               	subwf	waitFlag@j_106,w
  2933  0503  1C03               	skipc
  2934  0504  2CDD               	goto	l2441
  2935  0505                     l2455:	
  2936                           
  2937                           ;decode_AX25.c: 128: }
  2938                           ;decode_AX25.c: 129: }
  2939                           ;decode_AX25.c: 130: if(buf == ("JQ1YCZ"[4] << 1)){
  2940  0505  300E               	movlw	low (((STR_1+4)-__stringbase)| (0+32768))
  2941  0506  0084               	movwf	4
  2942  0507  120A  118A  2003  120A  118A  	fcall	stringdir
  2943  050C  00F6               	movwf	??_waitFlag
  2944  050D  01F7               	clrf	??_waitFlag+1
  2945  050E  1003               	clrc
  2946  050F  0DF6               	rlf	??_waitFlag,f
  2947  0510  0DF7               	rlf	??_waitFlag+1,f
  2948  0511  083C               	movf	waitFlag@buf,w
  2949  0512  00F8               	movwf	??_waitFlag+2
  2950  0513  01F9               	clrf	??_waitFlag+3
  2951  0514  0877               	movf	??_waitFlag+1,w
  2952  0515  0679               	xorwf	??_waitFlag+3,w
  2953  0516  1D03               	skipz
  2954  0517  2D1A               	goto	u1985
  2955  0518  0876               	movf	??_waitFlag,w
  2956  0519  0678               	xorwf	??_waitFlag+2,w
  2957  051A                     u1985:	
  2958  051A  1D03               	skipz
  2959  051B  2D87               	goto	l2499
  2960                           
  2961                           ;decode_AX25.c: 131: dPacket[dPacketnum] = buf;
  2962  051C  083C               	movf	waitFlag@buf,w
  2963  051D  00F6               	movwf	??_waitFlag
  2964  051E  0867               	movf	_dPacketnum,w
  2965  051F  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  2966  0520  0084               	movwf	4
  2967  0521  0876               	movf	??_waitFlag,w
  2968  0522  1383               	bcf	3,7	;select IRP bank1
  2969  0523  0080               	movwf	0
  2970                           
  2971                           ;decode_AX25.c: 132: dPacketnum ++;
  2972  0524  3001               	movlw	1
  2973  0525  07E7               	addwf	_dPacketnum,f
  2974  0526  1803               	skipnc
  2975  0527  0AE8               	incf	_dPacketnum+1,f
  2976  0528  3000               	movlw	0
  2977  0529  07E8               	addwf	_dPacketnum+1,f
  2978                           
  2979                           ;decode_AX25.c: 133: for(UINT j=0;j<8;j++){
  2980  052A  01AA               	clrf	waitFlag@j_108
  2981  052B  01AB               	clrf	waitFlag@j_108+1
  2982  052C  3000               	movlw	0
  2983  052D  022B               	subwf	waitFlag@j_108+1,w
  2984  052E  3008               	movlw	8
  2985  052F  1903               	skipnz
  2986  0530  022A               	subwf	waitFlag@j_108,w
  2987  0531  1803               	btfsc	3,0
  2988  0532  2D5B               	goto	l2481
  2989  0533                     l2467:	
  2990                           
  2991                           ;decode_AX25.c: 134: flag_judge = getbit();
  2992  0533  120A  158A  24E0  120A  118A  	fcall	_getbit
  2993  0538  0871               	movf	?_getbit+1,w
  2994  0539  1283               	bcf	3,5	;RP0=0, select bank0
  2995  053A  1303               	bcf	3,6	;RP1=0, select bank0
  2996  053B  00BB               	movwf	waitFlag@flag_judge+1
  2997  053C  0870               	movf	?_getbit,w
  2998  053D  00BA               	movwf	waitFlag@flag_judge
  2999                           
  3000                           ;decode_AX25.c: 135: buf = buf >> 1;
  3001  053E  083C               	movf	waitFlag@buf,w
  3002  053F  00F6               	movwf	??_waitFlag
  3003  0540  1003               	clrc
  3004  0541  0C76               	rrf	??_waitFlag,w
  3005  0542  00F7               	movwf	??_waitFlag+1
  3006  0543  0877               	movf	??_waitFlag+1,w
  3007  0544  00BC               	movwf	waitFlag@buf
  3008                           
  3009                           ;decode_AX25.c: 137: buf = buf | 0x00;
  3010  0545  083A               	movf	waitFlag@flag_judge,w
  3011  0546  043B               	iorwf	waitFlag@flag_judge+1,w
  3012  0547  1903               	btfsc	3,2
  3013  0548  2D4E               	goto	l2477
  3014                           
  3015                           ;decode_AX25.c: 139: buf = buf | 0x80;
  3016                           
  3017                           ;decode_AX25.c: 138: }else{
  3018  0549  083C               	movf	waitFlag@buf,w
  3019  054A  3880               	iorlw	128
  3020  054B  00F6               	movwf	??_waitFlag
  3021  054C  0876               	movf	??_waitFlag,w
  3022  054D  00BC               	movwf	waitFlag@buf
  3023  054E                     l2477:	
  3024  054E  3001               	movlw	1
  3025  054F  07AA               	addwf	waitFlag@j_108,f
  3026  0550  1803               	skipnc
  3027  0551  0AAB               	incf	waitFlag@j_108+1,f
  3028  0552  3000               	movlw	0
  3029  0553  07AB               	addwf	waitFlag@j_108+1,f
  3030  0554  3000               	movlw	0
  3031  0555  022B               	subwf	waitFlag@j_108+1,w
  3032  0556  3008               	movlw	8
  3033  0557  1903               	skipnz
  3034  0558  022A               	subwf	waitFlag@j_108,w
  3035  0559  1C03               	skipc
  3036  055A  2D33               	goto	l2467
  3037  055B                     l2481:	
  3038                           
  3039                           ;decode_AX25.c: 140: }
  3040                           ;decode_AX25.c: 141: }
  3041                           ;decode_AX25.c: 142: if(buf == ("JQ1YCZ"[5] << 1)){
  3042  055B  300F               	movlw	low (((STR_1+5)-__stringbase)| (0+32768))
  3043  055C  0084               	movwf	4
  3044  055D  120A  118A  2003  120A  118A  	fcall	stringdir
  3045  0562  00F6               	movwf	??_waitFlag
  3046  0563  01F7               	clrf	??_waitFlag+1
  3047  0564  1003               	clrc
  3048  0565  0DF6               	rlf	??_waitFlag,f
  3049  0566  0DF7               	rlf	??_waitFlag+1,f
  3050  0567  083C               	movf	waitFlag@buf,w
  3051  0568  00F8               	movwf	??_waitFlag+2
  3052  0569  01F9               	clrf	??_waitFlag+3
  3053  056A  0877               	movf	??_waitFlag+1,w
  3054  056B  0679               	xorwf	??_waitFlag+3,w
  3055  056C  1D03               	skipz
  3056  056D  2D70               	goto	u2025
  3057  056E  0876               	movf	??_waitFlag,w
  3058  056F  0678               	xorwf	??_waitFlag+2,w
  3059  0570                     u2025:	
  3060  0570  1D03               	skipz
  3061  0571  2D87               	goto	l2499
  3062                           
  3063                           ;decode_AX25.c: 143: dPacket[dPacketnum] = buf;
  3064  0572  083C               	movf	waitFlag@buf,w
  3065  0573  00F6               	movwf	??_waitFlag
  3066  0574  0867               	movf	_dPacketnum,w
  3067  0575  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3068  0576  0084               	movwf	4
  3069  0577  0876               	movf	??_waitFlag,w
  3070  0578  1383               	bcf	3,7	;select IRP bank1
  3071  0579  0080               	movwf	0
  3072                           
  3073                           ;decode_AX25.c: 144: dPacketnum ++;
  3074  057A  3001               	movlw	1
  3075  057B  07E7               	addwf	_dPacketnum,f
  3076  057C  1803               	skipnc
  3077  057D  0AE8               	incf	_dPacketnum+1,f
  3078  057E  3000               	movlw	0
  3079  057F  07E8               	addwf	_dPacketnum+1,f
  3080                           
  3081                           ;decode_AX25.c: 145: rcv_state ++;
  3082  0580  3001               	movlw	1
  3083  0581  07E9               	addwf	_rcv_state,f
  3084  0582  1803               	skipnc
  3085  0583  0AEA               	incf	_rcv_state+1,f
  3086  0584  3000               	movlw	0
  3087  0585  07EA               	addwf	_rcv_state+1,f
  3088                           
  3089                           ;decode_AX25.c: 146: }else{
  3090  0586  2D89               	goto	l173
  3091  0587                     l2499:	
  3092                           ;decode_AX25.c: 160: }
  3093                           ;decode_AX25.c: 161: }else{
  3094                           
  3095                           ;decode_AX25.c: 159: dPacketnum = 0;
  3096                           
  3097                           ;decode_AX25.c: 157: }
  3098                           ;decode_AX25.c: 158: }else{
  3099                           
  3100                           ;decode_AX25.c: 156: dPacketnum = 0;
  3101                           
  3102                           ;decode_AX25.c: 154: }
  3103                           ;decode_AX25.c: 155: }else{
  3104                           
  3105                           ;decode_AX25.c: 153: dPacketnum = 0;
  3106                           
  3107                           ;decode_AX25.c: 151: }
  3108                           ;decode_AX25.c: 152: }else{
  3109                           
  3110                           ;decode_AX25.c: 150: dPacketnum = 0;
  3111                           
  3112                           ;decode_AX25.c: 148: }
  3113                           ;decode_AX25.c: 149: }else{
  3114                           
  3115                           ;decode_AX25.c: 147: dPacketnum = 0;
  3116                           
  3117                           
  3118                           ;decode_AX25.c: 162: dPacketnum = 0;
  3119  0587  01E7               	clrf	_dPacketnum
  3120  0588  01E8               	clrf	_dPacketnum+1
  3121  0589                     l173:	
  3122                           
  3123                           ;decode_AX25.c: 163: }
  3124                           ;decode_AX25.c: 165: for(UINT j=0;j<8;j++){
  3125  0589  01AC               	clrf	waitFlag@j_110
  3126  058A  01AD               	clrf	waitFlag@j_110+1
  3127  058B  3000               	movlw	0
  3128  058C  022D               	subwf	waitFlag@j_110+1,w
  3129  058D  3008               	movlw	8
  3130  058E  1903               	skipnz
  3131  058F  022C               	subwf	waitFlag@j_110,w
  3132  0590  1803               	btfsc	3,0
  3133  0591  2DBA               	goto	l2519
  3134  0592                     l2505:	
  3135                           
  3136                           ;decode_AX25.c: 166: flag_judge = getbit();
  3137  0592  120A  158A  24E0  120A  118A  	fcall	_getbit
  3138  0597  0871               	movf	?_getbit+1,w
  3139  0598  1283               	bcf	3,5	;RP0=0, select bank0
  3140  0599  1303               	bcf	3,6	;RP1=0, select bank0
  3141  059A  00BB               	movwf	waitFlag@flag_judge+1
  3142  059B  0870               	movf	?_getbit,w
  3143  059C  00BA               	movwf	waitFlag@flag_judge
  3144                           
  3145                           ;decode_AX25.c: 167: buf = buf >> 1;
  3146  059D  083C               	movf	waitFlag@buf,w
  3147  059E  00F6               	movwf	??_waitFlag
  3148  059F  1003               	clrc
  3149  05A0  0C76               	rrf	??_waitFlag,w
  3150  05A1  00F7               	movwf	??_waitFlag+1
  3151  05A2  0877               	movf	??_waitFlag+1,w
  3152  05A3  00BC               	movwf	waitFlag@buf
  3153                           
  3154                           ;decode_AX25.c: 169: buf = buf | 0x00;
  3155  05A4  083A               	movf	waitFlag@flag_judge,w
  3156  05A5  043B               	iorwf	waitFlag@flag_judge+1,w
  3157  05A6  1903               	btfsc	3,2
  3158  05A7  2DAD               	goto	l2515
  3159                           
  3160                           ;decode_AX25.c: 171: buf = buf | 0x80;
  3161                           
  3162                           ;decode_AX25.c: 170: }else{
  3163  05A8  083C               	movf	waitFlag@buf,w
  3164  05A9  3880               	iorlw	128
  3165  05AA  00F6               	movwf	??_waitFlag
  3166  05AB  0876               	movf	??_waitFlag,w
  3167  05AC  00BC               	movwf	waitFlag@buf
  3168  05AD                     l2515:	
  3169  05AD  3001               	movlw	1
  3170  05AE  07AC               	addwf	waitFlag@j_110,f
  3171  05AF  1803               	skipnc
  3172  05B0  0AAD               	incf	waitFlag@j_110+1,f
  3173  05B1  3000               	movlw	0
  3174  05B2  07AD               	addwf	waitFlag@j_110+1,f
  3175  05B3  3000               	movlw	0
  3176  05B4  022D               	subwf	waitFlag@j_110+1,w
  3177  05B5  3008               	movlw	8
  3178  05B6  1903               	skipnz
  3179  05B7  022C               	subwf	waitFlag@j_110,w
  3180  05B8  1C03               	skipc
  3181  05B9  2D92               	goto	l2505
  3182  05BA                     l2519:	
  3183                           
  3184                           ;decode_AX25.c: 172: }
  3185                           ;decode_AX25.c: 173: }
  3186                           ;decode_AX25.c: 174: dPacket[dPacketnum] = buf;
  3187  05BA  083C               	movf	waitFlag@buf,w
  3188  05BB  00F6               	movwf	??_waitFlag
  3189  05BC  0867               	movf	_dPacketnum,w
  3190  05BD  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3191  05BE  0084               	movwf	4
  3192  05BF  0876               	movf	??_waitFlag,w
  3193  05C0  1383               	bcf	3,7	;select IRP bank1
  3194  05C1  0080               	movwf	0
  3195                           
  3196                           ;decode_AX25.c: 175: dPacketnum ++;
  3197  05C2  3001               	movlw	1
  3198  05C3  07E7               	addwf	_dPacketnum,f
  3199  05C4  1803               	skipnc
  3200  05C5  0AE8               	incf	_dPacketnum+1,f
  3201  05C6  3000               	movlw	0
  3202  05C7  07E8               	addwf	_dPacketnum+1,f
  3203                           
  3204                           ;decode_AX25.c: 176: for(UINT j=0;j<8;j++){
  3205  05C8  01AE               	clrf	waitFlag@j_111
  3206  05C9  01AF               	clrf	waitFlag@j_111+1
  3207  05CA  3000               	movlw	0
  3208  05CB  022F               	subwf	waitFlag@j_111+1,w
  3209  05CC  3008               	movlw	8
  3210  05CD  1903               	skipnz
  3211  05CE  022E               	subwf	waitFlag@j_111,w
  3212  05CF  1803               	btfsc	3,0
  3213  05D0  2DF9               	goto	l2543
  3214  05D1                     l2529:	
  3215                           
  3216                           ;decode_AX25.c: 177: flag_judge = getbit();
  3217  05D1  120A  158A  24E0  120A  118A  	fcall	_getbit
  3218  05D6  0871               	movf	?_getbit+1,w
  3219  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  3220  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  3221  05D9  00BB               	movwf	waitFlag@flag_judge+1
  3222  05DA  0870               	movf	?_getbit,w
  3223  05DB  00BA               	movwf	waitFlag@flag_judge
  3224                           
  3225                           ;decode_AX25.c: 178: buf = buf >> 1;
  3226  05DC  083C               	movf	waitFlag@buf,w
  3227  05DD  00F6               	movwf	??_waitFlag
  3228  05DE  1003               	clrc
  3229  05DF  0C76               	rrf	??_waitFlag,w
  3230  05E0  00F7               	movwf	??_waitFlag+1
  3231  05E1  0877               	movf	??_waitFlag+1,w
  3232  05E2  00BC               	movwf	waitFlag@buf
  3233                           
  3234                           ;decode_AX25.c: 180: buf = buf | 0x00;
  3235  05E3  083A               	movf	waitFlag@flag_judge,w
  3236  05E4  043B               	iorwf	waitFlag@flag_judge+1,w
  3237  05E5  1903               	btfsc	3,2
  3238  05E6  2DEC               	goto	l2539
  3239                           
  3240                           ;decode_AX25.c: 182: buf = buf | 0x80;
  3241                           
  3242                           ;decode_AX25.c: 181: }else{
  3243  05E7  083C               	movf	waitFlag@buf,w
  3244  05E8  3880               	iorlw	128
  3245  05E9  00F6               	movwf	??_waitFlag
  3246  05EA  0876               	movf	??_waitFlag,w
  3247  05EB  00BC               	movwf	waitFlag@buf
  3248  05EC                     l2539:	
  3249  05EC  3001               	movlw	1
  3250  05ED  07AE               	addwf	waitFlag@j_111,f
  3251  05EE  1803               	skipnc
  3252  05EF  0AAF               	incf	waitFlag@j_111+1,f
  3253  05F0  3000               	movlw	0
  3254  05F1  07AF               	addwf	waitFlag@j_111+1,f
  3255  05F2  3000               	movlw	0
  3256  05F3  022F               	subwf	waitFlag@j_111+1,w
  3257  05F4  3008               	movlw	8
  3258  05F5  1903               	skipnz
  3259  05F6  022E               	subwf	waitFlag@j_111,w
  3260  05F7  1C03               	skipc
  3261  05F8  2DD1               	goto	l2529
  3262  05F9                     l2543:	
  3263                           
  3264                           ;decode_AX25.c: 183: }
  3265                           ;decode_AX25.c: 184: }
  3266                           ;decode_AX25.c: 185: if(buf == ("JQ1ZHX"[0] << 1)){
  3267  05F9  3003               	movlw	low (STR_7-__stringbase)
  3268  05FA  0084               	movwf	4
  3269  05FB  120A  118A  2003  120A  118A  	fcall	stringdir
  3270  0600  00F6               	movwf	??_waitFlag
  3271  0601  01F7               	clrf	??_waitFlag+1
  3272  0602  1003               	clrc
  3273  0603  0DF6               	rlf	??_waitFlag,f
  3274  0604  0DF7               	rlf	??_waitFlag+1,f
  3275  0605  083C               	movf	waitFlag@buf,w
  3276  0606  00F8               	movwf	??_waitFlag+2
  3277  0607  01F9               	clrf	??_waitFlag+3
  3278  0608  0877               	movf	??_waitFlag+1,w
  3279  0609  0679               	xorwf	??_waitFlag+3,w
  3280  060A  1D03               	skipz
  3281  060B  2E0E               	goto	u2095
  3282  060C  0876               	movf	??_waitFlag,w
  3283  060D  0678               	xorwf	??_waitFlag+2,w
  3284  060E                     u2095:	
  3285  060E  1D03               	skipz
  3286  060F  2FD3               	goto	l2691
  3287                           
  3288                           ;decode_AX25.c: 186: dPacket[dPacketnum] = buf;
  3289  0610  083C               	movf	waitFlag@buf,w
  3290  0611  00F6               	movwf	??_waitFlag
  3291  0612  0867               	movf	_dPacketnum,w
  3292  0613  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3293  0614  0084               	movwf	4
  3294  0615  0876               	movf	??_waitFlag,w
  3295  0616  1383               	bcf	3,7	;select IRP bank1
  3296  0617  0080               	movwf	0
  3297                           
  3298                           ;decode_AX25.c: 187: dPacketnum ++;
  3299  0618  3001               	movlw	1
  3300  0619  07E7               	addwf	_dPacketnum,f
  3301  061A  1803               	skipnc
  3302  061B  0AE8               	incf	_dPacketnum+1,f
  3303  061C  3000               	movlw	0
  3304  061D  07E8               	addwf	_dPacketnum+1,f
  3305                           
  3306                           ;decode_AX25.c: 188: for(UINT j=0;j<8;j++){
  3307  061E  01B0               	clrf	waitFlag@j_113
  3308  061F  01B1               	clrf	waitFlag@j_113+1
  3309  0620  3000               	movlw	0
  3310  0621  0231               	subwf	waitFlag@j_113+1,w
  3311  0622  3008               	movlw	8
  3312  0623  1903               	skipnz
  3313  0624  0230               	subwf	waitFlag@j_113,w
  3314  0625  1803               	btfsc	3,0
  3315  0626  2E4F               	goto	l2569
  3316  0627                     l2555:	
  3317                           
  3318                           ;decode_AX25.c: 189: flag_judge = getbit();
  3319  0627  120A  158A  24E0  120A  118A  	fcall	_getbit
  3320  062C  0871               	movf	?_getbit+1,w
  3321  062D  1283               	bcf	3,5	;RP0=0, select bank0
  3322  062E  1303               	bcf	3,6	;RP1=0, select bank0
  3323  062F  00BB               	movwf	waitFlag@flag_judge+1
  3324  0630  0870               	movf	?_getbit,w
  3325  0631  00BA               	movwf	waitFlag@flag_judge
  3326                           
  3327                           ;decode_AX25.c: 190: buf = buf >> 1;
  3328  0632  083C               	movf	waitFlag@buf,w
  3329  0633  00F6               	movwf	??_waitFlag
  3330  0634  1003               	clrc
  3331  0635  0C76               	rrf	??_waitFlag,w
  3332  0636  00F7               	movwf	??_waitFlag+1
  3333  0637  0877               	movf	??_waitFlag+1,w
  3334  0638  00BC               	movwf	waitFlag@buf
  3335                           
  3336                           ;decode_AX25.c: 192: buf = buf | 0x00;
  3337  0639  083A               	movf	waitFlag@flag_judge,w
  3338  063A  043B               	iorwf	waitFlag@flag_judge+1,w
  3339  063B  1903               	btfsc	3,2
  3340  063C  2E42               	goto	l2565
  3341                           
  3342                           ;decode_AX25.c: 194: buf = buf | 0x80;
  3343                           
  3344                           ;decode_AX25.c: 193: }else{
  3345  063D  083C               	movf	waitFlag@buf,w
  3346  063E  3880               	iorlw	128
  3347  063F  00F6               	movwf	??_waitFlag
  3348  0640  0876               	movf	??_waitFlag,w
  3349  0641  00BC               	movwf	waitFlag@buf
  3350  0642                     l2565:	
  3351  0642  3001               	movlw	1
  3352  0643  07B0               	addwf	waitFlag@j_113,f
  3353  0644  1803               	skipnc
  3354  0645  0AB1               	incf	waitFlag@j_113+1,f
  3355  0646  3000               	movlw	0
  3356  0647  07B1               	addwf	waitFlag@j_113+1,f
  3357  0648  3000               	movlw	0
  3358  0649  0231               	subwf	waitFlag@j_113+1,w
  3359  064A  3008               	movlw	8
  3360  064B  1903               	skipnz
  3361  064C  0230               	subwf	waitFlag@j_113,w
  3362  064D  1C03               	skipc
  3363  064E  2E27               	goto	l2555
  3364  064F                     l2569:	
  3365                           
  3366                           ;decode_AX25.c: 195: }
  3367                           ;decode_AX25.c: 196: }
  3368                           ;decode_AX25.c: 197: if(buf == ("JQ1ZHX"[1] << 1)){
  3369  064F  3004               	movlw	low (((STR_7+1)-__stringbase)| (0+32768))
  3370  0650  0084               	movwf	4
  3371  0651  120A  118A  2003  120A  118A  	fcall	stringdir
  3372  0656  00F6               	movwf	??_waitFlag
  3373  0657  01F7               	clrf	??_waitFlag+1
  3374  0658  1003               	clrc
  3375  0659  0DF6               	rlf	??_waitFlag,f
  3376  065A  0DF7               	rlf	??_waitFlag+1,f
  3377  065B  083C               	movf	waitFlag@buf,w
  3378  065C  00F8               	movwf	??_waitFlag+2
  3379  065D  01F9               	clrf	??_waitFlag+3
  3380  065E  0877               	movf	??_waitFlag+1,w
  3381  065F  0679               	xorwf	??_waitFlag+3,w
  3382  0660  1D03               	skipz
  3383  0661  2E64               	goto	u2135
  3384  0662  0876               	movf	??_waitFlag,w
  3385  0663  0678               	xorwf	??_waitFlag+2,w
  3386  0664                     u2135:	
  3387  0664  1D03               	skipz
  3388  0665  2FD3               	goto	l2691
  3389                           
  3390                           ;decode_AX25.c: 198: dPacket[dPacketnum] = buf;
  3391  0666  083C               	movf	waitFlag@buf,w
  3392  0667  00F6               	movwf	??_waitFlag
  3393  0668  0867               	movf	_dPacketnum,w
  3394  0669  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3395  066A  0084               	movwf	4
  3396  066B  0876               	movf	??_waitFlag,w
  3397  066C  1383               	bcf	3,7	;select IRP bank1
  3398  066D  0080               	movwf	0
  3399                           
  3400                           ;decode_AX25.c: 199: dPacketnum ++;
  3401  066E  3001               	movlw	1
  3402  066F  07E7               	addwf	_dPacketnum,f
  3403  0670  1803               	skipnc
  3404  0671  0AE8               	incf	_dPacketnum+1,f
  3405  0672  3000               	movlw	0
  3406  0673  07E8               	addwf	_dPacketnum+1,f
  3407                           
  3408                           ;decode_AX25.c: 200: for(UINT j=0;j<8;j++){
  3409  0674  01B2               	clrf	waitFlag@j_115
  3410  0675  01B3               	clrf	waitFlag@j_115+1
  3411  0676  3000               	movlw	0
  3412  0677  0233               	subwf	waitFlag@j_115+1,w
  3413  0678  3008               	movlw	8
  3414  0679  1903               	skipnz
  3415  067A  0232               	subwf	waitFlag@j_115,w
  3416  067B  1803               	btfsc	3,0
  3417  067C  2EA5               	goto	l2595
  3418  067D                     l2581:	
  3419                           
  3420                           ;decode_AX25.c: 201: flag_judge = getbit();
  3421  067D  120A  158A  24E0  120A  118A  	fcall	_getbit
  3422  0682  0871               	movf	?_getbit+1,w
  3423  0683  1283               	bcf	3,5	;RP0=0, select bank0
  3424  0684  1303               	bcf	3,6	;RP1=0, select bank0
  3425  0685  00BB               	movwf	waitFlag@flag_judge+1
  3426  0686  0870               	movf	?_getbit,w
  3427  0687  00BA               	movwf	waitFlag@flag_judge
  3428                           
  3429                           ;decode_AX25.c: 202: buf = buf >> 1;
  3430  0688  083C               	movf	waitFlag@buf,w
  3431  0689  00F6               	movwf	??_waitFlag
  3432  068A  1003               	clrc
  3433  068B  0C76               	rrf	??_waitFlag,w
  3434  068C  00F7               	movwf	??_waitFlag+1
  3435  068D  0877               	movf	??_waitFlag+1,w
  3436  068E  00BC               	movwf	waitFlag@buf
  3437                           
  3438                           ;decode_AX25.c: 204: buf = buf | 0x00;
  3439  068F  083A               	movf	waitFlag@flag_judge,w
  3440  0690  043B               	iorwf	waitFlag@flag_judge+1,w
  3441  0691  1903               	btfsc	3,2
  3442  0692  2E98               	goto	l2591
  3443                           
  3444                           ;decode_AX25.c: 206: buf = buf | 0x80;
  3445                           
  3446                           ;decode_AX25.c: 205: }else{
  3447  0693  083C               	movf	waitFlag@buf,w
  3448  0694  3880               	iorlw	128
  3449  0695  00F6               	movwf	??_waitFlag
  3450  0696  0876               	movf	??_waitFlag,w
  3451  0697  00BC               	movwf	waitFlag@buf
  3452  0698                     l2591:	
  3453  0698  3001               	movlw	1
  3454  0699  07B2               	addwf	waitFlag@j_115,f
  3455  069A  1803               	skipnc
  3456  069B  0AB3               	incf	waitFlag@j_115+1,f
  3457  069C  3000               	movlw	0
  3458  069D  07B3               	addwf	waitFlag@j_115+1,f
  3459  069E  3000               	movlw	0
  3460  069F  0233               	subwf	waitFlag@j_115+1,w
  3461  06A0  3008               	movlw	8
  3462  06A1  1903               	skipnz
  3463  06A2  0232               	subwf	waitFlag@j_115,w
  3464  06A3  1C03               	skipc
  3465  06A4  2E7D               	goto	l2581
  3466  06A5                     l2595:	
  3467                           
  3468                           ;decode_AX25.c: 207: }
  3469                           ;decode_AX25.c: 208: }
  3470                           ;decode_AX25.c: 209: if(buf == ("JQ1ZHX"[2] << 1)){
  3471  06A5  3005               	movlw	low (((STR_7+2)-__stringbase)| (0+32768))
  3472  06A6  0084               	movwf	4
  3473  06A7  120A  118A  2003  120A  118A  	fcall	stringdir
  3474  06AC  00F6               	movwf	??_waitFlag
  3475  06AD  01F7               	clrf	??_waitFlag+1
  3476  06AE  1003               	clrc
  3477  06AF  0DF6               	rlf	??_waitFlag,f
  3478  06B0  0DF7               	rlf	??_waitFlag+1,f
  3479  06B1  083C               	movf	waitFlag@buf,w
  3480  06B2  00F8               	movwf	??_waitFlag+2
  3481  06B3  01F9               	clrf	??_waitFlag+3
  3482  06B4  0877               	movf	??_waitFlag+1,w
  3483  06B5  0679               	xorwf	??_waitFlag+3,w
  3484  06B6  1D03               	skipz
  3485  06B7  2EBA               	goto	u2175
  3486  06B8  0876               	movf	??_waitFlag,w
  3487  06B9  0678               	xorwf	??_waitFlag+2,w
  3488  06BA                     u2175:	
  3489  06BA  1D03               	skipz
  3490  06BB  2FD3               	goto	l2691
  3491                           
  3492                           ;decode_AX25.c: 210: dPacket[dPacketnum] = buf;
  3493  06BC  083C               	movf	waitFlag@buf,w
  3494  06BD  00F6               	movwf	??_waitFlag
  3495  06BE  0867               	movf	_dPacketnum,w
  3496  06BF  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3497  06C0  0084               	movwf	4
  3498  06C1  0876               	movf	??_waitFlag,w
  3499  06C2  1383               	bcf	3,7	;select IRP bank1
  3500  06C3  0080               	movwf	0
  3501                           
  3502                           ;decode_AX25.c: 211: dPacketnum ++;
  3503  06C4  3001               	movlw	1
  3504  06C5  07E7               	addwf	_dPacketnum,f
  3505  06C6  1803               	skipnc
  3506  06C7  0AE8               	incf	_dPacketnum+1,f
  3507  06C8  3000               	movlw	0
  3508  06C9  07E8               	addwf	_dPacketnum+1,f
  3509                           
  3510                           ;decode_AX25.c: 212: for(UINT j=0;j<8;j++){
  3511  06CA  01B4               	clrf	waitFlag@j_117
  3512  06CB  01B5               	clrf	waitFlag@j_117+1
  3513  06CC  3000               	movlw	0
  3514  06CD  0235               	subwf	waitFlag@j_117+1,w
  3515  06CE  3008               	movlw	8
  3516  06CF  1903               	skipnz
  3517  06D0  0234               	subwf	waitFlag@j_117,w
  3518  06D1  1803               	btfsc	3,0
  3519  06D2  2EFB               	goto	l2621
  3520  06D3                     l2607:	
  3521                           
  3522                           ;decode_AX25.c: 213: flag_judge = getbit();
  3523  06D3  120A  158A  24E0  120A  118A  	fcall	_getbit
  3524  06D8  0871               	movf	?_getbit+1,w
  3525  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  3526  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  3527  06DB  00BB               	movwf	waitFlag@flag_judge+1
  3528  06DC  0870               	movf	?_getbit,w
  3529  06DD  00BA               	movwf	waitFlag@flag_judge
  3530                           
  3531                           ;decode_AX25.c: 214: buf = buf >> 1;
  3532  06DE  083C               	movf	waitFlag@buf,w
  3533  06DF  00F6               	movwf	??_waitFlag
  3534  06E0  1003               	clrc
  3535  06E1  0C76               	rrf	??_waitFlag,w
  3536  06E2  00F7               	movwf	??_waitFlag+1
  3537  06E3  0877               	movf	??_waitFlag+1,w
  3538  06E4  00BC               	movwf	waitFlag@buf
  3539                           
  3540                           ;decode_AX25.c: 216: buf = buf | 0x00;
  3541  06E5  083A               	movf	waitFlag@flag_judge,w
  3542  06E6  043B               	iorwf	waitFlag@flag_judge+1,w
  3543  06E7  1903               	btfsc	3,2
  3544  06E8  2EEE               	goto	l2617
  3545                           
  3546                           ;decode_AX25.c: 218: buf = buf | 0x80;
  3547                           
  3548                           ;decode_AX25.c: 217: }else{
  3549  06E9  083C               	movf	waitFlag@buf,w
  3550  06EA  3880               	iorlw	128
  3551  06EB  00F6               	movwf	??_waitFlag
  3552  06EC  0876               	movf	??_waitFlag,w
  3553  06ED  00BC               	movwf	waitFlag@buf
  3554  06EE                     l2617:	
  3555  06EE  3001               	movlw	1
  3556  06EF  07B4               	addwf	waitFlag@j_117,f
  3557  06F0  1803               	skipnc
  3558  06F1  0AB5               	incf	waitFlag@j_117+1,f
  3559  06F2  3000               	movlw	0
  3560  06F3  07B5               	addwf	waitFlag@j_117+1,f
  3561  06F4  3000               	movlw	0
  3562  06F5  0235               	subwf	waitFlag@j_117+1,w
  3563  06F6  3008               	movlw	8
  3564  06F7  1903               	skipnz
  3565  06F8  0234               	subwf	waitFlag@j_117,w
  3566  06F9  1C03               	skipc
  3567  06FA  2ED3               	goto	l2607
  3568  06FB                     l2621:	
  3569                           
  3570                           ;decode_AX25.c: 219: }
  3571                           ;decode_AX25.c: 220: }
  3572                           ;decode_AX25.c: 221: if(buf == ("JQ1ZHX"[3] << 1)){
  3573  06FB  3006               	movlw	low (((STR_7+3)-__stringbase)| (0+32768))
  3574  06FC  0084               	movwf	4
  3575  06FD  120A  118A  2003  120A  118A  	fcall	stringdir
  3576  0702  00F6               	movwf	??_waitFlag
  3577  0703  01F7               	clrf	??_waitFlag+1
  3578  0704  1003               	clrc
  3579  0705  0DF6               	rlf	??_waitFlag,f
  3580  0706  0DF7               	rlf	??_waitFlag+1,f
  3581  0707  083C               	movf	waitFlag@buf,w
  3582  0708  00F8               	movwf	??_waitFlag+2
  3583  0709  01F9               	clrf	??_waitFlag+3
  3584  070A  0877               	movf	??_waitFlag+1,w
  3585  070B  0679               	xorwf	??_waitFlag+3,w
  3586  070C  1D03               	skipz
  3587  070D  2F10               	goto	u2215
  3588  070E  0876               	movf	??_waitFlag,w
  3589  070F  0678               	xorwf	??_waitFlag+2,w
  3590  0710                     u2215:	
  3591  0710  1D03               	skipz
  3592  0711  2FD3               	goto	l2691
  3593                           
  3594                           ;decode_AX25.c: 222: dPacket[dPacketnum] = buf;
  3595  0712  083C               	movf	waitFlag@buf,w
  3596  0713  00F6               	movwf	??_waitFlag
  3597  0714  0867               	movf	_dPacketnum,w
  3598  0715  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3599  0716  0084               	movwf	4
  3600  0717  0876               	movf	??_waitFlag,w
  3601  0718  1383               	bcf	3,7	;select IRP bank1
  3602  0719  0080               	movwf	0
  3603                           
  3604                           ;decode_AX25.c: 223: dPacketnum ++;
  3605  071A  3001               	movlw	1
  3606  071B  07E7               	addwf	_dPacketnum,f
  3607  071C  1803               	skipnc
  3608  071D  0AE8               	incf	_dPacketnum+1,f
  3609  071E  3000               	movlw	0
  3610  071F  07E8               	addwf	_dPacketnum+1,f
  3611                           
  3612                           ;decode_AX25.c: 224: for(UINT j=0;j<8;j++){
  3613  0720  01B6               	clrf	waitFlag@j_119
  3614  0721  01B7               	clrf	waitFlag@j_119+1
  3615  0722  3000               	movlw	0
  3616  0723  0237               	subwf	waitFlag@j_119+1,w
  3617  0724  3008               	movlw	8
  3618  0725  1903               	skipnz
  3619  0726  0236               	subwf	waitFlag@j_119,w
  3620  0727  1803               	btfsc	3,0
  3621  0728  2F51               	goto	l2647
  3622  0729                     l2633:	
  3623                           
  3624                           ;decode_AX25.c: 225: flag_judge = getbit();
  3625  0729  120A  158A  24E0  120A  118A  	fcall	_getbit
  3626  072E  0871               	movf	?_getbit+1,w
  3627  072F  1283               	bcf	3,5	;RP0=0, select bank0
  3628  0730  1303               	bcf	3,6	;RP1=0, select bank0
  3629  0731  00BB               	movwf	waitFlag@flag_judge+1
  3630  0732  0870               	movf	?_getbit,w
  3631  0733  00BA               	movwf	waitFlag@flag_judge
  3632                           
  3633                           ;decode_AX25.c: 226: buf = buf >> 1;
  3634  0734  083C               	movf	waitFlag@buf,w
  3635  0735  00F6               	movwf	??_waitFlag
  3636  0736  1003               	clrc
  3637  0737  0C76               	rrf	??_waitFlag,w
  3638  0738  00F7               	movwf	??_waitFlag+1
  3639  0739  0877               	movf	??_waitFlag+1,w
  3640  073A  00BC               	movwf	waitFlag@buf
  3641                           
  3642                           ;decode_AX25.c: 228: buf = buf | 0x00;
  3643  073B  083A               	movf	waitFlag@flag_judge,w
  3644  073C  043B               	iorwf	waitFlag@flag_judge+1,w
  3645  073D  1903               	btfsc	3,2
  3646  073E  2F44               	goto	l2643
  3647                           
  3648                           ;decode_AX25.c: 230: buf = buf | 0x80;
  3649                           
  3650                           ;decode_AX25.c: 229: }else{
  3651  073F  083C               	movf	waitFlag@buf,w
  3652  0740  3880               	iorlw	128
  3653  0741  00F6               	movwf	??_waitFlag
  3654  0742  0876               	movf	??_waitFlag,w
  3655  0743  00BC               	movwf	waitFlag@buf
  3656  0744                     l2643:	
  3657  0744  3001               	movlw	1
  3658  0745  07B6               	addwf	waitFlag@j_119,f
  3659  0746  1803               	skipnc
  3660  0747  0AB7               	incf	waitFlag@j_119+1,f
  3661  0748  3000               	movlw	0
  3662  0749  07B7               	addwf	waitFlag@j_119+1,f
  3663  074A  3000               	movlw	0
  3664  074B  0237               	subwf	waitFlag@j_119+1,w
  3665  074C  3008               	movlw	8
  3666  074D  1903               	skipnz
  3667  074E  0236               	subwf	waitFlag@j_119,w
  3668  074F  1C03               	skipc
  3669  0750  2F29               	goto	l2633
  3670  0751                     l2647:	
  3671                           
  3672                           ;decode_AX25.c: 231: }
  3673                           ;decode_AX25.c: 232: }
  3674                           ;decode_AX25.c: 233: if(buf == ("JQ1ZHX"[4] << 1)){
  3675  0751  3007               	movlw	low (((STR_7+4)-__stringbase)| (0+32768))
  3676  0752  0084               	movwf	4
  3677  0753  120A  118A  2003  120A  118A  	fcall	stringdir
  3678  0758  00F6               	movwf	??_waitFlag
  3679  0759  01F7               	clrf	??_waitFlag+1
  3680  075A  1003               	clrc
  3681  075B  0DF6               	rlf	??_waitFlag,f
  3682  075C  0DF7               	rlf	??_waitFlag+1,f
  3683  075D  083C               	movf	waitFlag@buf,w
  3684  075E  00F8               	movwf	??_waitFlag+2
  3685  075F  01F9               	clrf	??_waitFlag+3
  3686  0760  0877               	movf	??_waitFlag+1,w
  3687  0761  0679               	xorwf	??_waitFlag+3,w
  3688  0762  1D03               	skipz
  3689  0763  2F66               	goto	u2255
  3690  0764  0876               	movf	??_waitFlag,w
  3691  0765  0678               	xorwf	??_waitFlag+2,w
  3692  0766                     u2255:	
  3693  0766  1D03               	skipz
  3694  0767  2FD3               	goto	l2691
  3695                           
  3696                           ;decode_AX25.c: 234: dPacket[dPacketnum] = buf;
  3697  0768  083C               	movf	waitFlag@buf,w
  3698  0769  00F6               	movwf	??_waitFlag
  3699  076A  0867               	movf	_dPacketnum,w
  3700  076B  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3701  076C  0084               	movwf	4
  3702  076D  0876               	movf	??_waitFlag,w
  3703  076E  1383               	bcf	3,7	;select IRP bank1
  3704  076F  0080               	movwf	0
  3705                           
  3706                           ;decode_AX25.c: 235: dPacketnum ++;
  3707  0770  3001               	movlw	1
  3708  0771  07E7               	addwf	_dPacketnum,f
  3709  0772  1803               	skipnc
  3710  0773  0AE8               	incf	_dPacketnum+1,f
  3711  0774  3000               	movlw	0
  3712  0775  07E8               	addwf	_dPacketnum+1,f
  3713                           
  3714                           ;decode_AX25.c: 236: for(UINT j=0;j<8;j++){
  3715  0776  01B8               	clrf	waitFlag@j_121
  3716  0777  01B9               	clrf	waitFlag@j_121+1
  3717  0778  3000               	movlw	0
  3718  0779  0239               	subwf	waitFlag@j_121+1,w
  3719  077A  3008               	movlw	8
  3720  077B  1903               	skipnz
  3721  077C  0238               	subwf	waitFlag@j_121,w
  3722  077D  1803               	btfsc	3,0
  3723  077E  2FA7               	goto	l2673
  3724  077F                     l2659:	
  3725                           
  3726                           ;decode_AX25.c: 237: flag_judge = getbit();
  3727  077F  120A  158A  24E0  120A  118A  	fcall	_getbit
  3728  0784  0871               	movf	?_getbit+1,w
  3729  0785  1283               	bcf	3,5	;RP0=0, select bank0
  3730  0786  1303               	bcf	3,6	;RP1=0, select bank0
  3731  0787  00BB               	movwf	waitFlag@flag_judge+1
  3732  0788  0870               	movf	?_getbit,w
  3733  0789  00BA               	movwf	waitFlag@flag_judge
  3734                           
  3735                           ;decode_AX25.c: 238: buf = buf >> 1;
  3736  078A  083C               	movf	waitFlag@buf,w
  3737  078B  00F6               	movwf	??_waitFlag
  3738  078C  1003               	clrc
  3739  078D  0C76               	rrf	??_waitFlag,w
  3740  078E  00F7               	movwf	??_waitFlag+1
  3741  078F  0877               	movf	??_waitFlag+1,w
  3742  0790  00BC               	movwf	waitFlag@buf
  3743                           
  3744                           ;decode_AX25.c: 240: buf = buf | 0x00;
  3745  0791  083A               	movf	waitFlag@flag_judge,w
  3746  0792  043B               	iorwf	waitFlag@flag_judge+1,w
  3747  0793  1903               	btfsc	3,2
  3748  0794  2F9A               	goto	l2669
  3749                           
  3750                           ;decode_AX25.c: 242: buf = buf | 0x80;
  3751                           
  3752                           ;decode_AX25.c: 241: }else{
  3753  0795  083C               	movf	waitFlag@buf,w
  3754  0796  3880               	iorlw	128
  3755  0797  00F6               	movwf	??_waitFlag
  3756  0798  0876               	movf	??_waitFlag,w
  3757  0799  00BC               	movwf	waitFlag@buf
  3758  079A                     l2669:	
  3759  079A  3001               	movlw	1
  3760  079B  07B8               	addwf	waitFlag@j_121,f
  3761  079C  1803               	skipnc
  3762  079D  0AB9               	incf	waitFlag@j_121+1,f
  3763  079E  3000               	movlw	0
  3764  079F  07B9               	addwf	waitFlag@j_121+1,f
  3765  07A0  3000               	movlw	0
  3766  07A1  0239               	subwf	waitFlag@j_121+1,w
  3767  07A2  3008               	movlw	8
  3768  07A3  1903               	skipnz
  3769  07A4  0238               	subwf	waitFlag@j_121,w
  3770  07A5  1C03               	skipc
  3771  07A6  2F7F               	goto	l2659
  3772  07A7                     l2673:	
  3773                           
  3774                           ;decode_AX25.c: 243: }
  3775                           ;decode_AX25.c: 244: }
  3776                           ;decode_AX25.c: 245: if(buf == ("JQ1ZHX"[5] << 1)){
  3777  07A7  3008               	movlw	low (((STR_7+5)-__stringbase)| (0+32768))
  3778  07A8  0084               	movwf	4
  3779  07A9  120A  118A  2003  120A  118A  	fcall	stringdir
  3780  07AE  00F6               	movwf	??_waitFlag
  3781  07AF  01F7               	clrf	??_waitFlag+1
  3782  07B0  1003               	clrc
  3783  07B1  0DF6               	rlf	??_waitFlag,f
  3784  07B2  0DF7               	rlf	??_waitFlag+1,f
  3785  07B3  083C               	movf	waitFlag@buf,w
  3786  07B4  00F8               	movwf	??_waitFlag+2
  3787  07B5  01F9               	clrf	??_waitFlag+3
  3788  07B6  0877               	movf	??_waitFlag+1,w
  3789  07B7  0679               	xorwf	??_waitFlag+3,w
  3790  07B8  1D03               	skipz
  3791  07B9  2FBC               	goto	u2295
  3792  07BA  0876               	movf	??_waitFlag,w
  3793  07BB  0678               	xorwf	??_waitFlag+2,w
  3794  07BC                     u2295:	
  3795  07BC  1D03               	skipz
  3796  07BD  2FD3               	goto	l2691
  3797                           
  3798                           ;decode_AX25.c: 246: dPacket[dPacketnum] = buf;
  3799  07BE  083C               	movf	waitFlag@buf,w
  3800  07BF  00F6               	movwf	??_waitFlag
  3801  07C0  0867               	movf	_dPacketnum,w
  3802  07C1  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  3803  07C2  0084               	movwf	4
  3804  07C3  0876               	movf	??_waitFlag,w
  3805  07C4  1383               	bcf	3,7	;select IRP bank1
  3806  07C5  0080               	movwf	0
  3807                           
  3808                           ;decode_AX25.c: 247: dPacketnum ++;
  3809  07C6  3001               	movlw	1
  3810  07C7  07E7               	addwf	_dPacketnum,f
  3811  07C8  1803               	skipnc
  3812  07C9  0AE8               	incf	_dPacketnum+1,f
  3813  07CA  3000               	movlw	0
  3814  07CB  07E8               	addwf	_dPacketnum+1,f
  3815                           
  3816                           ;decode_AX25.c: 248: rcv_state ++;
  3817  07CC  3001               	movlw	1
  3818  07CD  07E9               	addwf	_rcv_state,f
  3819  07CE  1803               	skipnc
  3820  07CF  0AEA               	incf	_rcv_state+1,f
  3821  07D0  3000               	movlw	0
  3822  07D1  07EA               	addwf	_rcv_state+1,f
  3823                           
  3824                           ;decode_AX25.c: 249: }else{
  3825  07D2  2B52               	goto	l2693
  3826  07D3                     l2691:	
  3827                           ;decode_AX25.c: 268: }
  3828                           ;decode_AX25.c: 269: }else{
  3829                           
  3830                           ;decode_AX25.c: 267: rcv_state = 0;
  3831                           
  3832                           ;decode_AX25.c: 266: dPacketnum = 0;
  3833                           
  3834                           ;decode_AX25.c: 264: }
  3835                           ;decode_AX25.c: 265: }else{
  3836                           
  3837                           ;decode_AX25.c: 263: rcv_state = 0;
  3838                           
  3839                           ;decode_AX25.c: 262: dPacketnum = 0;
  3840                           
  3841                           ;decode_AX25.c: 260: }
  3842                           ;decode_AX25.c: 261: }else{
  3843                           
  3844                           ;decode_AX25.c: 259: rcv_state = 0;
  3845                           
  3846                           ;decode_AX25.c: 258: dPacketnum = 0;
  3847                           
  3848                           ;decode_AX25.c: 256: }
  3849                           ;decode_AX25.c: 257: }else{
  3850                           
  3851                           ;decode_AX25.c: 255: rcv_state = 0;
  3852                           
  3853                           ;decode_AX25.c: 254: dPacketnum = 0;
  3854                           
  3855                           ;decode_AX25.c: 252: }
  3856                           ;decode_AX25.c: 253: }else{
  3857                           
  3858                           ;decode_AX25.c: 251: rcv_state = 0;
  3859                           
  3860                           ;decode_AX25.c: 250: dPacketnum = 0;
  3861                           
  3862                           
  3863                           ;decode_AX25.c: 270: dPacketnum = 0;
  3864  07D3  01E7               	clrf	_dPacketnum
  3865  07D4  01E8               	clrf	_dPacketnum+1
  3866  07D5  2B50               	goto	L6
  3867  07D6                     __end_of_waitFlag:	
  3868                           
  3869                           	psect	text5
  3870  0E3B                     __ptext5:	
  3871 ;; *************** function _getdata *****************
  3872 ;; Defined at:
  3873 ;;		line 278 in file "decode_AX25.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;		None
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  dbitstatus      2    4[BANK0 ] unsigned int 
  3878 ;;  dstuff          2    2[BANK0 ] unsigned int 
  3879 ;;  bufstore_cou    2    0[BANK0 ] unsigned int 
  3880 ;;  buf             1    6[BANK0 ] unsigned char 
  3881 ;;  dammy_data      1    0        unsigned char 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3891 ;;      Params:         0       0       0       0       0
  3892 ;;      Locals:         0       7       0       0       0
  3893 ;;      Temps:          2       0       0       0       0
  3894 ;;      Totals:         2       7       0       0       0
  3895 ;;Total ram usage:        9 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    1
  3898 ;; This function calls:
  3899 ;;		_getbit
  3900 ;; This function is called by:
  3901 ;;		_ReceivePacket_data
  3902 ;;		_ReceivePacket
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           
  3907                           ;psect for function _getdata
  3908  0E3B                     _getdata:	
  3909                           
  3910                           ;decode_AX25.c: 279: UBYTE buf = 0x00;
  3911                           
  3912                           ;incstack = 0
  3913                           ; Regs used in _getdata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3914  0E3B  1283               	bcf	3,5	;RP0=0, select bank0
  3915  0E3C  1303               	bcf	3,6	;RP1=0, select bank0
  3916  0E3D  01A6               	clrf	getdata@buf
  3917                           
  3918                           ;decode_AX25.c: 280: UINT dstuff = 0;
  3919  0E3E  01A2               	clrf	getdata@dstuff
  3920  0E3F  01A3               	clrf	getdata@dstuff+1
  3921                           
  3922                           ;decode_AX25.c: 281: UBYTE dammy_data;
  3923                           ;decode_AX25.c: 282: UINT bufstore_counter = 0;
  3924  0E40  01A0               	clrf	getdata@bufstore_counter
  3925  0E41  01A1               	clrf	getdata@bufstore_counter+1
  3926                           
  3927                           ;decode_AX25.c: 283: UINT dbitstatus = 0;
  3928  0E42  01A4               	clrf	getdata@dbitstatus
  3929  0E43  01A5               	clrf	getdata@dbitstatus+1
  3930  0E44                     l2727:	
  3931                           ;decode_AX25.c: 285: while(rcv_state == 2){
  3932                           
  3933  0E44  3002               	movlw	2
  3934  0E45  0669               	xorwf	_rcv_state,w
  3935  0E46  046A               	iorwf	_rcv_state+1,w
  3936  0E47  1D03               	btfss	3,2
  3937  0E48  0008               	return
  3938                           
  3939                           ;decode_AX25.c: 286: dbitstatus = getbit();
  3940  0E49  120A  158A  24E0  120A  158A  	fcall	_getbit
  3941  0E4E  0871               	movf	?_getbit+1,w
  3942  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  3943  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  3944  0E51  00A5               	movwf	getdata@dbitstatus+1
  3945  0E52  0870               	movf	?_getbit,w
  3946  0E53  00A4               	movwf	getdata@dbitstatus
  3947                           
  3948                           ;decode_AX25.c: 287: if(dstuff == 5){
  3949  0E54  3005               	movlw	5
  3950  0E55  0622               	xorwf	getdata@dstuff,w
  3951  0E56  0423               	iorwf	getdata@dstuff+1,w
  3952  0E57  1D03               	btfss	3,2
  3953  0E58  2E67               	goto	l2709
  3954                           
  3955                           ;decode_AX25.c: 288: if(dbitstatus == 1){
  3956  0E59  0324               	decf	getdata@dbitstatus,w
  3957  0E5A  0425               	iorwf	getdata@dbitstatus+1,w
  3958  0E5B  1D03               	btfss	3,2
  3959  0E5C  2E64               	goto	l2707
  3960                           
  3961                           ;decode_AX25.c: 289: rcv_state ++;
  3962  0E5D  3001               	movlw	1
  3963  0E5E  07E9               	addwf	_rcv_state,f
  3964  0E5F  1803               	skipnc
  3965  0E60  0AEA               	incf	_rcv_state+1,f
  3966  0E61  3000               	movlw	0
  3967  0E62  07EA               	addwf	_rcv_state+1,f
  3968                           
  3969                           ;decode_AX25.c: 290: break;
  3970  0E63  0008               	return
  3971  0E64                     l2707:	
  3972                           ;decode_AX25.c: 291: }else{
  3973                           
  3974                           
  3975                           ;decode_AX25.c: 292: dstuff = 0;
  3976  0E64  01A2               	clrf	getdata@dstuff
  3977  0E65  01A3               	clrf	getdata@dstuff+1
  3978                           
  3979                           ;decode_AX25.c: 293: }
  3980                           ;decode_AX25.c: 294: }else{
  3981  0E66  2E44               	goto	l2727
  3982  0E67                     l2709:	
  3983                           
  3984                           ;decode_AX25.c: 295: buf = buf >> 1;
  3985  0E67  0826               	movf	getdata@buf,w
  3986  0E68  00F6               	movwf	??_getdata
  3987  0E69  1003               	clrc
  3988  0E6A  0C76               	rrf	??_getdata,w
  3989  0E6B  00F7               	movwf	??_getdata+1
  3990  0E6C  0877               	movf	??_getdata+1,w
  3991  0E6D  00A6               	movwf	getdata@buf
  3992                           
  3993                           ;decode_AX25.c: 297: buf = buf | 0x00;
  3994  0E6E  0824               	movf	getdata@dbitstatus,w
  3995  0E6F  0425               	iorwf	getdata@dbitstatus+1,w
  3996  0E70  1D03               	btfss	3,2
  3997  0E71  2E75               	goto	l2713
  3998                           
  3999                           ;decode_AX25.c: 298: dstuff = 0;
  4000  0E72  01A2               	clrf	getdata@dstuff
  4001  0E73  01A3               	clrf	getdata@dstuff+1
  4002                           
  4003                           ;decode_AX25.c: 299: }else{
  4004  0E74  2E80               	goto	l2717
  4005  0E75                     l2713:	
  4006                           
  4007                           ;decode_AX25.c: 300: buf = buf | 0x80;
  4008  0E75  0826               	movf	getdata@buf,w
  4009  0E76  3880               	iorlw	128
  4010  0E77  00F6               	movwf	??_getdata
  4011  0E78  0876               	movf	??_getdata,w
  4012  0E79  00A6               	movwf	getdata@buf
  4013                           
  4014                           ;decode_AX25.c: 301: dstuff ++;
  4015  0E7A  3001               	movlw	1
  4016  0E7B  07A2               	addwf	getdata@dstuff,f
  4017  0E7C  1803               	skipnc
  4018  0E7D  0AA3               	incf	getdata@dstuff+1,f
  4019  0E7E  3000               	movlw	0
  4020  0E7F  07A3               	addwf	getdata@dstuff+1,f
  4021  0E80                     l2717:	
  4022                           
  4023                           ;decode_AX25.c: 302: }
  4024                           ;decode_AX25.c: 303: bufstore_counter ++;
  4025  0E80  3001               	movlw	1
  4026  0E81  07A0               	addwf	getdata@bufstore_counter,f
  4027  0E82  1803               	skipnc
  4028  0E83  0AA1               	incf	getdata@bufstore_counter+1,f
  4029  0E84  3000               	movlw	0
  4030  0E85  07A1               	addwf	getdata@bufstore_counter+1,f
  4031                           
  4032                           ;decode_AX25.c: 304: if(bufstore_counter == 8){
  4033  0E86  3008               	movlw	8
  4034  0E87  0620               	xorwf	getdata@bufstore_counter,w
  4035  0E88  0421               	iorwf	getdata@bufstore_counter+1,w
  4036  0E89  1D03               	btfss	3,2
  4037  0E8A  2E44               	goto	l2727
  4038                           
  4039                           ;decode_AX25.c: 305: bufstore_counter = 0;
  4040  0E8B  01A0               	clrf	getdata@bufstore_counter
  4041  0E8C  01A1               	clrf	getdata@bufstore_counter+1
  4042                           
  4043                           ;decode_AX25.c: 306: dPacket[dPacketnum] = buf;
  4044  0E8D  0826               	movf	getdata@buf,w
  4045  0E8E  00F6               	movwf	??_getdata
  4046  0E8F  0867               	movf	_dPacketnum,w
  4047  0E90  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  4048  0E91  0084               	movwf	4
  4049  0E92  0876               	movf	??_getdata,w
  4050  0E93  1383               	bcf	3,7	;select IRP bank1
  4051  0E94  0080               	movwf	0
  4052                           
  4053                           ;decode_AX25.c: 307: dPacketnum ++;
  4054  0E95  3001               	movlw	1
  4055  0E96  07E7               	addwf	_dPacketnum,f
  4056  0E97  1803               	skipnc
  4057  0E98  0AE8               	incf	_dPacketnum+1,f
  4058  0E99  3000               	movlw	0
  4059  0E9A  07E8               	addwf	_dPacketnum+1,f
  4060  0E9B  2E44               	goto	l2727
  4061  0E9C                     __end_of_getdata:	
  4062                           
  4063                           	psect	text6
  4064  0CE0                     __ptext6:	
  4065 ;; *************** function _getbit *****************
  4066 ;; Defined at:
  4067 ;;		line 40 in file "decode_AX25.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;		None
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;  i               2    4[COMMON] unsigned int 
  4072 ;; Return value:  Size  Location     Type
  4073 ;;                  2    0[COMMON] unsigned int 
  4074 ;; Registers used:
  4075 ;;		wreg, status,2, status,0
  4076 ;; Tracked objects:
  4077 ;;		On entry : 0/0
  4078 ;;		On exit  : 0/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4081 ;;      Params:         2       0       0       0       0
  4082 ;;      Locals:         2       0       0       0       0
  4083 ;;      Temps:          2       0       0       0       0
  4084 ;;      Totals:         6       0       0       0       0
  4085 ;;Total ram usage:        6 bytes
  4086 ;; Hardware stack levels used:    1
  4087 ;; This function calls:
  4088 ;;		Nothing
  4089 ;; This function is called by:
  4090 ;;		_waitFlag
  4091 ;;		_getdata
  4092 ;;		_conv_DI_UARTRX
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096                           
  4097                           ;psect for function _getbit
  4098  0CE0                     _getbit:	
  4099                           
  4100                           ;decode_AX25.c: 41: static UINT oldbit;
  4101                           ;decode_AX25.c: 42: oldbit = RB5;
  4102                           
  4103                           ;incstack = 0
  4104                           ; Regs used in _getbit: [wreg+status,2+status,0]
  4105  0CE0  1003               	clrc
  4106  0CE1  1283               	bcf	3,5	;RP0=0, select bank0
  4107  0CE2  1303               	bcf	3,6	;RP1=0, select bank0
  4108  0CE3  1A86               	btfsc	6,5	;volatile
  4109  0CE4  1403               	setc
  4110  0CE5  3000               	movlw	0
  4111  0CE6  1803               	skipnc
  4112  0CE7  3001               	movlw	1
  4113  0CE8  00F2               	movwf	??_getbit
  4114  0CE9  01F3               	clrf	??_getbit+1
  4115  0CEA  0872               	movf	??_getbit,w
  4116  0CEB  00E5               	movwf	getbit@oldbit
  4117  0CEC  0873               	movf	??_getbit+1,w
  4118  0CED  00E6               	movwf	getbit@oldbit+1
  4119                           
  4120                           ;decode_AX25.c: 43: for(UINT i=0;i<62;i++){
  4121  0CEE  01F4               	clrf	getbit@i
  4122  0CEF  01F5               	clrf	getbit@i+1
  4123  0CF0  3000               	movlw	0
  4124  0CF1  0275               	subwf	getbit@i+1,w
  4125  0CF2  303E               	movlw	62
  4126  0CF3  1903               	skipnz
  4127  0CF4  0274               	subwf	getbit@i,w
  4128  0CF5  1803               	btfsc	3,0
  4129  0CF6  2D22               	goto	l2173
  4130                           
  4131                           ;decode_AX25.c: 44: if(RB5 != oldbit){
  4132  0CF7  1003               	clrc
  4133  0CF8                     L7:	
  4134  0CF8  1A86               	btfsc	6,5	;volatile
  4135  0CF9  1403               	setc
  4136  0CFA  3000               	movlw	0
  4137  0CFB  1803               	skipnc
  4138  0CFC  3001               	movlw	1
  4139  0CFD  00F2               	movwf	??_getbit
  4140  0CFE  01F3               	clrf	??_getbit+1
  4141  0CFF  0866               	movf	getbit@oldbit+1,w
  4142  0D00  0673               	xorwf	??_getbit+1,w
  4143  0D01  1D03               	skipz
  4144  0D02  2D05               	goto	u1525
  4145  0D03  0865               	movf	getbit@oldbit,w
  4146  0D04  0672               	xorwf	??_getbit,w
  4147  0D05                     u1525:	
  4148  0D05  1903               	skipnz
  4149  0D06  2D15               	goto	l2171
  4150                           
  4151                           ;decode_AX25.c: 45: _delay((unsigned long)((400)*(10000000/4000000.0)));
  4152  0D07  30C7               	movlw	199
  4153  0D08  00F2               	movwf	??_getbit
  4154  0D09                     u3047:	
  4155  0D09  2D0A               	nop2
  4156  0D0A  0BF2               	decfsz	??_getbit,f
  4157  0D0B  2D09               	goto	u3047
  4158  0D0C  2D0D               	nop2
  4159  0D0D  2D0E               	nop2
  4160                           
  4161                           ;decode_AX25.c: 46: RC2= 1- RC2;
  4162  0D0E  3004               	movlw	4
  4163  0D0F  1283               	bcf	3,5	;RP0=0, select bank0
  4164  0D10  1303               	bcf	3,6	;RP1=0, select bank0
  4165  0D11  0687               	xorwf	7,f
  4166                           
  4167                           ;decode_AX25.c: 47: return 0;
  4168  0D12  01F0               	clrf	?_getbit
  4169  0D13  01F1               	clrf	?_getbit+1
  4170  0D14  0008               	return
  4171  0D15                     l2171:	
  4172  0D15  3001               	movlw	1
  4173  0D16  07F4               	addwf	getbit@i,f
  4174  0D17  1803               	skipnc
  4175  0D18  0AF5               	incf	getbit@i+1,f
  4176  0D19  3000               	movlw	0
  4177  0D1A  07F5               	addwf	getbit@i+1,f
  4178  0D1B  3000               	movlw	0
  4179  0D1C  0275               	subwf	getbit@i+1,w
  4180  0D1D  303E               	movlw	62
  4181  0D1E  1903               	skipnz
  4182  0D1F  0274               	subwf	getbit@i,w
  4183  0D20  1C03               	skipc
  4184  0D21  2CF8               	goto	L7
  4185  0D22                     l2173:	
  4186                           
  4187                           ;decode_AX25.c: 48: }
  4188                           ;decode_AX25.c: 49: }
  4189                           ;decode_AX25.c: 50: return 1;
  4190  0D22  3001               	movlw	1
  4191  0D23  00F0               	movwf	?_getbit
  4192  0D24  3000               	movlw	0
  4193  0D25  00F1               	movwf	?_getbit+1
  4194  0D26  0008               	return
  4195  0D27                     __end_of_getbit:	
  4196                           
  4197                           	psect	text7
  4198  0F7E                     __ptext7:	
  4199 ;; *************** function _fcscheck *****************
  4200 ;; Defined at:
  4201 ;;		line 313 in file "decode_AX25.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;		None
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;  i               2    7[COMMON] unsigned int 
  4206 ;;  i               2    5[COMMON] unsigned int 
  4207 ;;  byte            1    9[COMMON] unsigned char 
  4208 ;;  bt              1    4[COMMON] unsigned char 
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  2    0[COMMON] unsigned int 
  4211 ;; Registers used:
  4212 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4218 ;;      Params:         2       0       0       0       0
  4219 ;;      Locals:         6       0       0       0       0
  4220 ;;      Temps:          2       0       0       0       0
  4221 ;;      Totals:        10       0       0       0       0
  4222 ;;Total ram usage:       10 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_ReceivePacket_data
  4228 ;;		_ReceivePacket
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _fcscheck
  4234  0F7E                     _fcscheck:	
  4235                           
  4236                           ;decode_AX25.c: 314: UBYTE bt,byte;
  4237                           ;decode_AX25.c: 315: dfcslo = dfcshi = 0xff;
  4238                           
  4239                           ;incstack = 0
  4240                           ; Regs used in _fcscheck: [wreg-fsr0h+status,2+status,0]
  4241  0F7E  30FF               	movlw	255
  4242  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  4243  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  4244  0F81  00EC               	movwf	_dfcshi
  4245  0F82  00F2               	movwf	??_fcscheck
  4246  0F83  0872               	movf	??_fcscheck,w
  4247  0F84  00EB               	movwf	_dfcslo
  4248                           
  4249                           ;decode_AX25.c: 316: while(rcv_state == 3){
  4250  0F85  3003               	movlw	3
  4251  0F86  0669               	xorwf	_rcv_state,w
  4252  0F87  046A               	iorwf	_rcv_state+1,w
  4253  0F88  1D03               	btfss	3,2
  4254  0F89  0008               	return
  4255                           
  4256                           ;decode_AX25.c: 317: for(UINT i=0;i<dPacketnum-2;i++){
  4257  0F8A  01F5               	clrf	fcscheck@i
  4258  0F8B  01F6               	clrf	fcscheck@i+1
  4259  0F8C                     l2755:	
  4260  0F8C  0867               	movf	_dPacketnum,w
  4261  0F8D  3EFE               	addlw	254
  4262  0F8E  00F2               	movwf	??_fcscheck
  4263  0F8F  0868               	movf	_dPacketnum+1,w
  4264  0F90  1803               	skipnc
  4265  0F91  3E01               	addlw	1
  4266  0F92  3EFF               	addlw	255
  4267  0F93  00F3               	movwf	??_fcscheck+1
  4268  0F94  0873               	movf	??_fcscheck+1,w
  4269  0F95  0276               	subwf	fcscheck@i+1,w
  4270  0F96  1D03               	skipz
  4271  0F97  2F9A               	goto	u2395
  4272  0F98  0872               	movf	??_fcscheck,w
  4273  0F99  0275               	subwf	fcscheck@i,w
  4274  0F9A                     u2395:	
  4275  0F9A  1803               	btfsc	3,0
  4276  0F9B  2FE5               	goto	l238
  4277                           
  4278                           ;decode_AX25.c: 318: byte = dPacket[i];
  4279  0F9C  0875               	movf	fcscheck@i,w
  4280  0F9D  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  4281  0F9E  0084               	movwf	4
  4282  0F9F  1383               	bcf	3,7	;select IRP bank1
  4283  0FA0  0800               	movf	0,w
  4284  0FA1  00F2               	movwf	??_fcscheck
  4285  0FA2  0872               	movf	??_fcscheck,w
  4286  0FA3  00F9               	movwf	fcscheck@byte
  4287                           
  4288                           ;decode_AX25.c: 319: for(UINT i=0;i<8;i++){
  4289  0FA4  01F7               	clrf	fcscheck@i_133
  4290  0FA5  01F8               	clrf	fcscheck@i_133+1
  4291  0FA6  3000               	movlw	0
  4292  0FA7  0278               	subwf	fcscheck@i_133+1,w
  4293  0FA8  3008               	movlw	8
  4294  0FA9  1903               	skipnz
  4295  0FAA  0277               	subwf	fcscheck@i_133,w
  4296  0FAB  1803               	btfsc	3,0
  4297  0FAC  2FDE               	goto	l2753
  4298  0FAD                     l2741:	
  4299                           
  4300                           ;decode_AX25.c: 320: bt = byte & 0x01;
  4301  0FAD  0879               	movf	fcscheck@byte,w
  4302  0FAE  3901               	andlw	1
  4303  0FAF  00F2               	movwf	??_fcscheck
  4304  0FB0  0872               	movf	??_fcscheck,w
  4305  0FB1  00F4               	movwf	fcscheck@bt
  4306  0FB2  1003               	bcf	3,0	;# 
  4307  0FB3  0CEC               	rrf	_dfcshi,f	;# 
  4308  0FB4  0CEB               	rrf	_dfcslo,f	;# 
  4309                           
  4310                           ;decode_AX25.c: 326: if(((STATUS & 0x01)^bt) == 0x01){
  4311  0FB5  3001               	movlw	1
  4312  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  4313  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  4314  0FB8  0503               	andwf	3,w	;volatile
  4315  0FB9  00F2               	movwf	??_fcscheck
  4316  0FBA  0874               	movf	fcscheck@bt,w
  4317  0FBB  0672               	xorwf	??_fcscheck,w
  4318  0FBC  00F3               	movwf	??_fcscheck+1
  4319  0FBD  0373               	decf	??_fcscheck+1,w
  4320  0FBE  1D03               	btfss	3,2
  4321  0FBF  2FCA               	goto	l2747
  4322                           
  4323                           ;decode_AX25.c: 327: dfcshi = dfcshi ^ 0x84;
  4324  0FC0  086C               	movf	_dfcshi,w
  4325  0FC1  3A84               	xorlw	132
  4326  0FC2  00F2               	movwf	??_fcscheck
  4327  0FC3  0872               	movf	??_fcscheck,w
  4328  0FC4  00EC               	movwf	_dfcshi
  4329                           
  4330                           ;decode_AX25.c: 328: dfcslo = dfcslo ^ 0x08;
  4331  0FC5  086B               	movf	_dfcslo,w
  4332  0FC6  3A08               	xorlw	8
  4333  0FC7  00F2               	movwf	??_fcscheck
  4334  0FC8  0872               	movf	??_fcscheck,w
  4335  0FC9  00EB               	movwf	_dfcslo
  4336  0FCA                     l2747:	
  4337                           
  4338                           ;decode_AX25.c: 329: }
  4339                           ;decode_AX25.c: 330: byte = byte >> 1;
  4340  0FCA  0879               	movf	fcscheck@byte,w
  4341  0FCB  00F2               	movwf	??_fcscheck
  4342  0FCC  1003               	clrc
  4343  0FCD  0C72               	rrf	??_fcscheck,w
  4344  0FCE  00F3               	movwf	??_fcscheck+1
  4345  0FCF  0873               	movf	??_fcscheck+1,w
  4346  0FD0  00F9               	movwf	fcscheck@byte
  4347  0FD1  3001               	movlw	1
  4348  0FD2  07F7               	addwf	fcscheck@i_133,f
  4349  0FD3  1803               	skipnc
  4350  0FD4  0AF8               	incf	fcscheck@i_133+1,f
  4351  0FD5  3000               	movlw	0
  4352  0FD6  07F8               	addwf	fcscheck@i_133+1,f
  4353  0FD7  3000               	movlw	0
  4354  0FD8  0278               	subwf	fcscheck@i_133+1,w
  4355  0FD9  3008               	movlw	8
  4356  0FDA  1903               	skipnz
  4357  0FDB  0277               	subwf	fcscheck@i_133,w
  4358  0FDC  1C03               	skipc
  4359  0FDD  2FAD               	goto	l2741
  4360  0FDE                     l2753:	
  4361  0FDE  3001               	movlw	1
  4362  0FDF  07F5               	addwf	fcscheck@i,f
  4363  0FE0  1803               	skipnc
  4364  0FE1  0AF6               	incf	fcscheck@i+1,f
  4365  0FE2  3000               	movlw	0
  4366  0FE3  07F6               	addwf	fcscheck@i+1,f
  4367  0FE4  2F8C               	goto	l2755
  4368  0FE5                     l238:	
  4369                           
  4370                           ;decode_AX25.c: 331: }
  4371                           ;decode_AX25.c: 332: }
  4372                           ;decode_AX25.c: 333: dfcslo = dfcslo ^ 0xff;
  4373  0FE5  09EB               	comf	_dfcslo,f
  4374                           
  4375                           ;decode_AX25.c: 334: dfcshi = dfcshi ^ 0xff;
  4376  0FE6  09EC               	comf	_dfcshi,f
  4377                           
  4378                           ;decode_AX25.c: 337: if((dPacket[dPacketnum-2] == dfcslo) && (dPacket[dPacketnum-1] == d
      +                          fcshi)){
  4379  0FE7  0867               	movf	_dPacketnum,w
  4380  0FE8  3EFE               	addlw	254
  4381  0FE9  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  4382  0FEA  0084               	movwf	4
  4383  0FEB  1383               	bcf	3,7	;select IRP bank1
  4384  0FEC  0800               	movf	0,w
  4385  0FED  066B               	xorwf	_dfcslo,w
  4386  0FEE  1D03               	skipz
  4387  0FEF  2FFD               	goto	l2767
  4388  0FF0  0867               	movf	_dPacketnum,w
  4389  0FF1  3EFF               	addlw	255
  4390  0FF2  3EA0               	addlw	(low (_dPacket| 0))& (0+255)
  4391  0FF3  0084               	movwf	4
  4392  0FF4  0800               	movf	0,w
  4393  0FF5  066C               	xorwf	_dfcshi,w
  4394  0FF6  1D03               	skipz
  4395  0FF7  2FFD               	goto	l2767
  4396                           
  4397                           ;decode_AX25.c: 342: return 1;
  4398  0FF8  3001               	movlw	1
  4399  0FF9  00F0               	movwf	?_fcscheck
  4400  0FFA  3000               	movlw	0
  4401  0FFB  00F1               	movwf	?_fcscheck+1
  4402  0FFC  0008               	return
  4403  0FFD                     l2767:	
  4404                           ;decode_AX25.c: 343: }else{
  4405                           
  4406                           
  4407                           ;decode_AX25.c: 348: return 0;
  4408  0FFD  01F0               	clrf	?_fcscheck
  4409  0FFE  01F1               	clrf	?_fcscheck+1
  4410  0FFF  0008               	return
  4411  1000                     __end_of_fcscheck:	
  4412                           
  4413                           	psect	text8
  4414  0AB4                     __ptext8:	
  4415 ;; *************** function _NM_waddress *****************
  4416 ;; Defined at:
  4417 ;;		line 72 in file "UART.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  NM_wad_heade    1    wreg     unsigned char 
  4420 ;;  whigh_addres    1    1[COMMON] unsigned char 
  4421 ;;  wlow_address    1    2[COMMON] unsigned char 
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;  NM_wad_heade    1    3[COMMON] unsigned char 
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      void 
  4426 ;; Registers used:
  4427 ;;		wreg, status,2, status,0, pclath, cstack
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4433 ;;      Params:         2       0       0       0       0
  4434 ;;      Locals:         1       0       0       0       0
  4435 ;;      Temps:          0       0       0       0       0
  4436 ;;      Totals:         3       0       0       0       0
  4437 ;;Total ram usage:        3 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    1
  4440 ;; This function calls:
  4441 ;;		_putch
  4442 ;; This function is called by:
  4443 ;;		_main
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           
  4448                           ;psect for function _NM_waddress
  4449  0AB4                     _NM_waddress:	
  4450                           
  4451                           ;incstack = 0
  4452                           ; Regs used in _NM_waddress: [wreg+status,2+status,0+pclath+cstack]
  4453                           ;NM_waddress@NM_wad_header stored from wreg
  4454  0AB4  00F3               	movwf	NM_waddress@NM_wad_header
  4455                           
  4456                           ;UART.c: 73: putch(NM_wad_header);
  4457  0AB5  0873               	movf	NM_waddress@NM_wad_header,w
  4458  0AB6  120A  158A  227E  120A  158A  	fcall	_putch
  4459                           
  4460                           ;UART.c: 74: putch(whigh_address);
  4461  0ABB  0871               	movf	NM_waddress@whigh_address,w
  4462  0ABC  120A  158A  227E  120A  158A  	fcall	_putch
  4463                           
  4464                           ;UART.c: 75: putch(wlow_address);
  4465  0AC1  0872               	movf	NM_waddress@wlow_address,w
  4466  0AC2  120A  158A  227E   	fcall	_putch
  4467  0AC5  0008               	return
  4468  0AC6                     __end_of_NM_waddress:	
  4469                           
  4470                           	psect	text9
  4471  0A7E                     __ptext9:	
  4472 ;; *************** function _putch *****************
  4473 ;; Defined at:
  4474 ;;		line 39 in file "UART.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  byte            1    wreg     unsigned char 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  byte            1    0[COMMON] unsigned char 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  1    wreg      void 
  4481 ;; Registers used:
  4482 ;;		wreg
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4488 ;;      Params:         0       0       0       0       0
  4489 ;;      Locals:         1       0       0       0       0
  4490 ;;      Temps:          0       0       0       0       0
  4491 ;;      Totals:         1       0       0       0       0
  4492 ;;Total ram usage:        1 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; This function calls:
  4495 ;;		Nothing
  4496 ;; This function is called by:
  4497 ;;		_NM_waddress
  4498 ;;		_TXOBC_waddress
  4499 ;;		_putAX25
  4500 ;;		_conv_DI_UARTRX
  4501 ;;		_EEPROM_Read
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           
  4506                           ;psect for function _putch
  4507  0A7E                     _putch:	
  4508                           
  4509                           ;incstack = 0
  4510                           ; Regs used in _putch: [wreg]
  4511                           ;putch@byte stored from wreg
  4512  0A7E  00F0               	movwf	putch@byte
  4513  0A7F                     l55:	
  4514                           ;UART.c: 40: while(!TXIF);
  4515                           
  4516  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  4517  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  4518  0A81  1E0C               	btfss	12,4	;volatile
  4519  0A82  2A7F               	goto	l55
  4520                           
  4521                           ;UART.c: 41: TXREG = byte;
  4522  0A83  0870               	movf	putch@byte,w
  4523  0A84  0099               	movwf	25	;volatile
  4524  0A85  0008               	return
  4525  0A86                     __end_of_putch:	
  4526                           
  4527                           	psect	text10
  4528  0ADB                     __ptext10:	
  4529 ;; *************** function _Init_SERIAL *****************
  4530 ;; Defined at:
  4531 ;;		line 6 in file "UART.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;		None
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4545 ;;      Params:         0       0       0       0       0
  4546 ;;      Locals:         0       0       0       0       0
  4547 ;;      Temps:          0       0       0       0       0
  4548 ;;      Totals:         0       0       0       0       0
  4549 ;;Total ram usage:        0 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; This function calls:
  4552 ;;		Nothing
  4553 ;; This function is called by:
  4554 ;;		_main
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           
  4559                           ;psect for function _Init_SERIAL
  4560  0ADB                     _Init_SERIAL:	
  4561                           
  4562                           ;UART.c: 7: SPBRG = 10;
  4563                           
  4564                           ;incstack = 0
  4565                           ; Regs used in _Init_SERIAL: [wreg]
  4566  0ADB  300A               	movlw	10
  4567  0ADC  1683               	bsf	3,5	;RP0=1, select bank1
  4568  0ADD  1303               	bcf	3,6	;RP1=0, select bank1
  4569  0ADE  0099               	movwf	25	;volatile
  4570                           
  4571                           ;UART.c: 8: BRGH = 0;
  4572  0ADF  1118               	bcf	24,2	;volatile
  4573                           
  4574                           ;UART.c: 9: SYNC = 0;
  4575  0AE0  1218               	bcf	24,4	;volatile
  4576                           
  4577                           ;UART.c: 10: SPEN = 1;
  4578  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  4579  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  4580  0AE3  1798               	bsf	24,7	;volatile
  4581                           
  4582                           ;UART.c: 11: CREN = 1;
  4583  0AE4  1618               	bsf	24,4	;volatile
  4584                           
  4585                           ;UART.c: 12: SREN = 0;
  4586  0AE5  1298               	bcf	24,5	;volatile
  4587                           
  4588                           ;UART.c: 13: RCIF = 0;
  4589  0AE6  128C               	bcf	12,5	;volatile
  4590                           
  4591                           ;UART.c: 14: TXIE = 0;
  4592  0AE7  1683               	bsf	3,5	;RP0=1, select bank1
  4593  0AE8  1303               	bcf	3,6	;RP1=0, select bank1
  4594  0AE9  120C               	bcf	12,4	;volatile
  4595                           
  4596                           ;UART.c: 15: RCIE = 1;
  4597  0AEA  168C               	bsf	12,5	;volatile
  4598                           
  4599                           ;UART.c: 16: TX9 = 0;
  4600  0AEB  1318               	bcf	24,6	;volatile
  4601                           
  4602                           ;UART.c: 17: RX9 = 0;
  4603  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  4604  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  4605  0AEE  1318               	bcf	24,6	;volatile
  4606                           
  4607                           ;UART.c: 18: TXEN = 0;
  4608  0AEF  1683               	bsf	3,5	;RP0=1, select bank1
  4609  0AF0  1303               	bcf	3,6	;RP1=0, select bank1
  4610  0AF1  1298               	bcf	24,5	;volatile
  4611                           
  4612                           ;UART.c: 19: TXEN = 1;
  4613  0AF2  1698               	bsf	24,5	;volatile
  4614  0AF3  0008               	return
  4615  0AF4                     __end_of_Init_SERIAL:	
  4616                           
  4617                           	psect	text11
  4618  0AF4                     __ptext11:	
  4619 ;; *************** function _Init_MPU *****************
  4620 ;; Defined at:
  4621 ;;		line 8 in file "Init_MPU.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;		None
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;		None
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  1    wreg      void 
  4628 ;; Registers used:
  4629 ;;		wreg, status,2
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4635 ;;      Params:         0       0       0       0       0
  4636 ;;      Locals:         0       0       0       0       0
  4637 ;;      Temps:          0       0       0       0       0
  4638 ;;      Totals:         0       0       0       0       0
  4639 ;;Total ram usage:        0 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; This function calls:
  4642 ;;		Nothing
  4643 ;; This function is called by:
  4644 ;;		_main
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           
  4649                           ;psect for function _Init_MPU
  4650  0AF4                     _Init_MPU:	
  4651                           
  4652                           ;Init_MPU.c: 11: PORTA = 0x00;
  4653                           
  4654                           ;incstack = 0
  4655                           ; Regs used in _Init_MPU: [wreg+status,2]
  4656  0AF4  1283               	bcf	3,5	;RP0=0, select bank0
  4657  0AF5  1303               	bcf	3,6	;RP1=0, select bank0
  4658  0AF6  0185               	clrf	5	;volatile
  4659                           
  4660                           ;Init_MPU.c: 12: PORTB = 0x00;
  4661  0AF7  0186               	clrf	6	;volatile
  4662                           
  4663                           ;Init_MPU.c: 13: PORTC = 0x00;
  4664  0AF8  0187               	clrf	7	;volatile
  4665                           
  4666                           ;Init_MPU.c: 14: PORTD = 0x00;
  4667  0AF9  0188               	clrf	8	;volatile
  4668                           
  4669                           ;Init_MPU.c: 15: PORTE = 0x00;
  4670  0AFA  0189               	clrf	9	;volatile
  4671                           
  4672                           ;Init_MPU.c: 18: ANSEL = 0x00;
  4673  0AFB  1683               	bsf	3,5	;RP0=1, select bank3
  4674  0AFC  1703               	bsf	3,6	;RP1=1, select bank3
  4675  0AFD  0188               	clrf	8	;volatile
  4676                           
  4677                           ;Init_MPU.c: 19: ANSELH = 0x00;
  4678  0AFE  0189               	clrf	9	;volatile
  4679                           
  4680                           ;Init_MPU.c: 23: TRISA = 0b10000000;
  4681  0AFF  3080               	movlw	128
  4682  0B00  1683               	bsf	3,5	;RP0=1, select bank1
  4683  0B01  1303               	bcf	3,6	;RP1=0, select bank1
  4684  0B02  0085               	movwf	5	;volatile
  4685                           
  4686                           ;Init_MPU.c: 24: TRISB = 0b00100000;
  4687  0B03  3020               	movlw	32
  4688  0B04  0086               	movwf	6	;volatile
  4689                           
  4690                           ;Init_MPU.c: 25: TRISC = 0b10011000;
  4691  0B05  3098               	movlw	152
  4692  0B06  0087               	movwf	7	;volatile
  4693                           
  4694                           ;Init_MPU.c: 26: TRISD = 0b00000000;
  4695  0B07  0188               	clrf	8	;volatile
  4696                           
  4697                           ;Init_MPU.c: 27: TRISE = 0b00000000;
  4698  0B08  0189               	clrf	9	;volatile
  4699                           
  4700                           ;Init_MPU.c: 30: PORTA = 0x00;
  4701  0B09  1283               	bcf	3,5	;RP0=0, select bank0
  4702  0B0A  1303               	bcf	3,6	;RP1=0, select bank0
  4703  0B0B  0185               	clrf	5	;volatile
  4704                           
  4705                           ;Init_MPU.c: 31: PORTB = 0x00;
  4706  0B0C  0186               	clrf	6	;volatile
  4707                           
  4708                           ;Init_MPU.c: 32: PORTC = 0x00;
  4709  0B0D  0187               	clrf	7	;volatile
  4710                           
  4711                           ;Init_MPU.c: 33: PORTD = 0x00;
  4712  0B0E  0188               	clrf	8	;volatile
  4713                           
  4714                           ;Init_MPU.c: 34: PORTE = 0x00;
  4715  0B0F  0189               	clrf	9	;volatile
  4716  0B10  0008               	return
  4717  0B11                     __end_of_Init_MPU:	
  4718                           
  4719                           	psect	text12
  4720  0BE6                     __ptext12:	
  4721 ;; *************** function _Init_I2C_M *****************
  4722 ;; Defined at:
  4723 ;;		line 8 in file "I2C.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;  c               4    0[BANK0 ] const unsigned long 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      void 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0, pclath, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4737 ;;      Params:         0       4       0       0       0
  4738 ;;      Locals:         0       0       0       0       0
  4739 ;;      Temps:          0       4       0       0       0
  4740 ;;      Totals:         0       8       0       0       0
  4741 ;;Total ram usage:        8 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    1
  4744 ;; This function calls:
  4745 ;;		___lldiv
  4746 ;; This function is called by:
  4747 ;;		_main
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           
  4752                           ;psect for function _Init_I2C_M
  4753  0BE6                     _Init_I2C_M:	
  4754                           
  4755                           ;I2C.c: 9: SSPCON = 0b00101000;
  4756                           
  4757                           ;incstack = 0
  4758                           ; Regs used in _Init_I2C_M: [wreg+status,2+status,0+pclath+cstack]
  4759  0BE6  3028               	movlw	40
  4760  0BE7  1283               	bcf	3,5	;RP0=0, select bank0
  4761  0BE8  1303               	bcf	3,6	;RP1=0, select bank0
  4762  0BE9  0094               	movwf	20	;volatile
  4763                           
  4764                           ;I2C.c: 10: SSPCON2 = 0;
  4765  0BEA  1683               	bsf	3,5	;RP0=1, select bank1
  4766  0BEB  1303               	bcf	3,6	;RP1=0, select bank1
  4767  0BEC  0191               	clrf	17	;volatile
  4768                           
  4769                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  4770  0BED  1283               	bcf	3,5	;RP0=0, select bank0
  4771  0BEE  1303               	bcf	3,6	;RP1=0, select bank0
  4772  0BEF  0820               	movf	Init_I2C_M@c,w
  4773  0BF0  00A4               	movwf	??_Init_I2C_M
  4774  0BF1  0821               	movf	Init_I2C_M@c+1,w
  4775  0BF2  00A5               	movwf	??_Init_I2C_M+1
  4776  0BF3  0822               	movf	Init_I2C_M@c+2,w
  4777  0BF4  00A6               	movwf	??_Init_I2C_M+2
  4778  0BF5  0823               	movf	Init_I2C_M@c+3,w
  4779  0BF6  00A7               	movwf	??_Init_I2C_M+3
  4780  0BF7  3002               	movlw	2
  4781  0BF8                     u2695:	
  4782  0BF8  1003               	clrc
  4783  0BF9  0DA4               	rlf	??_Init_I2C_M,f
  4784  0BFA  0DA5               	rlf	??_Init_I2C_M+1,f
  4785  0BFB  0DA6               	rlf	??_Init_I2C_M+2,f
  4786  0BFC  0DA7               	rlf	??_Init_I2C_M+3,f
  4787  0BFD  3EFF               	addlw	-1
  4788  0BFE  1D03               	skipz
  4789  0BFF  2BF8               	goto	u2695
  4790  0C00  0827               	movf	??_Init_I2C_M+3,w
  4791  0C01  00F3               	movwf	___lldiv@divisor+3
  4792  0C02  0826               	movf	??_Init_I2C_M+2,w
  4793  0C03  00F2               	movwf	___lldiv@divisor+2
  4794  0C04  0825               	movf	??_Init_I2C_M+1,w
  4795  0C05  00F1               	movwf	___lldiv@divisor+1
  4796  0C06  0824               	movf	??_Init_I2C_M,w
  4797  0C07  00F0               	movwf	___lldiv@divisor
  4798  0C08  3000               	movlw	0
  4799  0C09  00F7               	movwf	___lldiv@dividend+3
  4800  0C0A  3098               	movlw	152
  4801  0C0B  00F6               	movwf	___lldiv@dividend+2
  4802  0C0C  3096               	movlw	150
  4803  0C0D  00F5               	movwf	___lldiv@dividend+1
  4804  0C0E  3080               	movlw	128
  4805  0C0F  00F4               	movwf	___lldiv@dividend
  4806  0C10  120A  158A  25DD   	fcall	___lldiv
  4807  0C13  0870               	movf	?___lldiv,w
  4808  0C14  3EFF               	addlw	255
  4809  0C15  1683               	bsf	3,5	;RP0=1, select bank1
  4810  0C16  1303               	bcf	3,6	;RP1=0, select bank1
  4811  0C17  0093               	movwf	19	;volatile
  4812                           
  4813                           ;I2C.c: 12: SSPSTAT = 0;
  4814  0C18  0194               	clrf	20	;volatile
  4815  0C19  0008               	return
  4816  0C1A                     __end_of_Init_I2C_M:	
  4817                           
  4818                           	psect	text13
  4819  0DDD                     __ptext13:	
  4820 ;; *************** function ___lldiv *****************
  4821 ;; Defined at:
  4822 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  divisor         4    0[COMMON] unsigned long 
  4825 ;;  dividend        4    4[COMMON] unsigned long 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;  quotient        4    9[COMMON] unsigned long 
  4828 ;;  counter         1   13[COMMON] unsigned char 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  4    0[COMMON] unsigned long 
  4831 ;; Registers used:
  4832 ;;		wreg, status,2, status,0
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4838 ;;      Params:         8       0       0       0       0
  4839 ;;      Locals:         5       0       0       0       0
  4840 ;;      Temps:          1       0       0       0       0
  4841 ;;      Totals:        14       0       0       0       0
  4842 ;;Total ram usage:       14 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; This function calls:
  4845 ;;		Nothing
  4846 ;; This function is called by:
  4847 ;;		_Init_I2C_M
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           
  4852                           ;psect for function ___lldiv
  4853  0DDD                     ___lldiv:	
  4854                           
  4855                           ;incstack = 0
  4856                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4857  0DDD  3000               	movlw	0
  4858  0DDE  00FC               	movwf	___lldiv@quotient+3
  4859  0DDF  3000               	movlw	0
  4860  0DE0  00FB               	movwf	___lldiv@quotient+2
  4861  0DE1  3000               	movlw	0
  4862  0DE2  00FA               	movwf	___lldiv@quotient+1
  4863  0DE3  3000               	movlw	0
  4864  0DE4  00F9               	movwf	___lldiv@quotient
  4865  0DE5  0873               	movf	___lldiv@divisor+3,w
  4866  0DE6  0472               	iorwf	___lldiv@divisor+2,w
  4867  0DE7  0471               	iorwf	___lldiv@divisor+1,w
  4868  0DE8  0470               	iorwf	___lldiv@divisor,w
  4869  0DE9  1903               	skipnz
  4870  0DEA  2E32               	goto	l2899
  4871  0DEB  01FD               	clrf	___lldiv@counter
  4872  0DEC  0AFD               	incf	___lldiv@counter,f
  4873  0DED                     l2885:	
  4874  0DED  1BF3               	btfsc	___lldiv@divisor+3,7
  4875  0DEE  2DFD               	goto	l2887
  4876  0DEF  3001               	movlw	1
  4877  0DF0  00F8               	movwf	??___lldiv
  4878  0DF1                     u2605:	
  4879  0DF1  1003               	clrc
  4880  0DF2  0DF0               	rlf	___lldiv@divisor,f
  4881  0DF3  0DF1               	rlf	___lldiv@divisor+1,f
  4882  0DF4  0DF2               	rlf	___lldiv@divisor+2,f
  4883  0DF5  0DF3               	rlf	___lldiv@divisor+3,f
  4884  0DF6  0BF8               	decfsz	??___lldiv,f
  4885  0DF7  2DF1               	goto	u2605
  4886  0DF8  3001               	movlw	1
  4887  0DF9  00F8               	movwf	??___lldiv
  4888  0DFA  0878               	movf	??___lldiv,w
  4889  0DFB  07FD               	addwf	___lldiv@counter,f
  4890  0DFC  2DED               	goto	l2885
  4891  0DFD                     l2887:	
  4892  0DFD  3001               	movlw	1
  4893  0DFE  00F8               	movwf	??___lldiv
  4894  0DFF                     u2625:	
  4895  0DFF  1003               	clrc
  4896  0E00  0DF9               	rlf	___lldiv@quotient,f
  4897  0E01  0DFA               	rlf	___lldiv@quotient+1,f
  4898  0E02  0DFB               	rlf	___lldiv@quotient+2,f
  4899  0E03  0DFC               	rlf	___lldiv@quotient+3,f
  4900  0E04  0BF8               	decfsz	??___lldiv,f
  4901  0E05  2DFF               	goto	u2625
  4902  0E06  0873               	movf	___lldiv@divisor+3,w
  4903  0E07  0277               	subwf	___lldiv@dividend+3,w
  4904  0E08  1D03               	skipz
  4905  0E09  2E14               	goto	u2635
  4906  0E0A  0872               	movf	___lldiv@divisor+2,w
  4907  0E0B  0276               	subwf	___lldiv@dividend+2,w
  4908  0E0C  1D03               	skipz
  4909  0E0D  2E14               	goto	u2635
  4910  0E0E  0871               	movf	___lldiv@divisor+1,w
  4911  0E0F  0275               	subwf	___lldiv@dividend+1,w
  4912  0E10  1D03               	skipz
  4913  0E11  2E14               	goto	u2635
  4914  0E12  0870               	movf	___lldiv@divisor,w
  4915  0E13  0274               	subwf	___lldiv@dividend,w
  4916  0E14                     u2635:	
  4917  0E14  1C03               	skipc
  4918  0E15  2E25               	goto	l2895
  4919  0E16  0870               	movf	___lldiv@divisor,w
  4920  0E17  02F4               	subwf	___lldiv@dividend,f
  4921  0E18  0871               	movf	___lldiv@divisor+1,w
  4922  0E19  1C03               	skipc
  4923  0E1A  0F71               	incfsz	___lldiv@divisor+1,w
  4924  0E1B  02F5               	subwf	___lldiv@dividend+1,f
  4925  0E1C  0872               	movf	___lldiv@divisor+2,w
  4926  0E1D  1C03               	skipc
  4927  0E1E  0F72               	incfsz	___lldiv@divisor+2,w
  4928  0E1F  02F6               	subwf	___lldiv@dividend+2,f
  4929  0E20  0873               	movf	___lldiv@divisor+3,w
  4930  0E21  1C03               	skipc
  4931  0E22  0F73               	incfsz	___lldiv@divisor+3,w
  4932  0E23  02F7               	subwf	___lldiv@dividend+3,f
  4933  0E24  1479               	bsf	___lldiv@quotient,0
  4934  0E25                     l2895:	
  4935  0E25  3001               	movlw	1
  4936  0E26                     u2645:	
  4937  0E26  1003               	clrc
  4938  0E27  0CF3               	rrf	___lldiv@divisor+3,f
  4939  0E28  0CF2               	rrf	___lldiv@divisor+2,f
  4940  0E29  0CF1               	rrf	___lldiv@divisor+1,f
  4941  0E2A  0CF0               	rrf	___lldiv@divisor,f
  4942  0E2B  3EFF               	addlw	-1
  4943  0E2C  1D03               	skipz
  4944  0E2D  2E26               	goto	u2645
  4945  0E2E  3001               	movlw	1
  4946  0E2F  02FD               	subwf	___lldiv@counter,f
  4947  0E30  1D03               	btfss	3,2
  4948  0E31  2DFD               	goto	l2887
  4949  0E32                     l2899:	
  4950  0E32  087C               	movf	___lldiv@quotient+3,w
  4951  0E33  00F3               	movwf	?___lldiv+3
  4952  0E34  087B               	movf	___lldiv@quotient+2,w
  4953  0E35  00F2               	movwf	?___lldiv+2
  4954  0E36  087A               	movf	___lldiv@quotient+1,w
  4955  0E37  00F1               	movwf	?___lldiv+1
  4956  0E38  0879               	movf	___lldiv@quotient,w
  4957  0E39  00F0               	movwf	?___lldiv
  4958  0E3A  0008               	return
  4959  0E3B                     __end_of___lldiv:	
  4960                           
  4961                           	psect	text14
  4962  0B8C                     __ptext14:	
  4963 ;; *************** function _FMTX *****************
  4964 ;; Defined at:
  4965 ;;		line 275 in file "FMCW.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;  Nref            2   45[BANK0 ] int 
  4968 ;;  Nprg            2   47[BANK0 ] int 
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;  fmtx            2   49[BANK0 ] int 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  1    wreg      void 
  4973 ;; Registers used:
  4974 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4980 ;;      Params:         0       4       0       0       0
  4981 ;;      Locals:         0       2       0       0       0
  4982 ;;      Temps:          0       0       0       0       0
  4983 ;;      Totals:         0       6       0       0       0
  4984 ;;Total ram usage:        6 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:    3
  4987 ;; This function calls:
  4988 ;;		_OPINIT
  4989 ;;		_OUTFQ
  4990 ;;		_RFDOUT
  4991 ;; This function is called by:
  4992 ;;		_main
  4993 ;;		_SetPLL
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           
  4998                           ;psect for function _FMTX
  4999  0B8C                     _FMTX:	
  5000                           
  5001                           ;FMCW.c: 276: int fmtx = 1;
  5002                           
  5003                           ;incstack = 0
  5004                           ; Regs used in _FMTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5005  0B8C  3001               	movlw	1
  5006  0B8D  1283               	bcf	3,5	;RP0=0, select bank0
  5007  0B8E  1303               	bcf	3,6	;RP1=0, select bank0
  5008  0B8F  00D1               	movwf	FMTX@fmtx
  5009  0B90  3000               	movlw	0
  5010  0B91  00D2               	movwf	FMTX@fmtx+1
  5011                           
  5012                           ;FMCW.c: 277: OPINIT(fmtx);
  5013  0B92  0852               	movf	FMTX@fmtx+1,w
  5014  0B93  00F5               	movwf	OPINIT@fmcwtxrx+1
  5015  0B94  0851               	movf	FMTX@fmtx,w
  5016  0B95  00F4               	movwf	OPINIT@fmcwtxrx
  5017  0B96  120A  158A  2701  120A  158A  	fcall	_OPINIT
  5018                           
  5019                           ;FMCW.c: 278: RFDOUT(fmtx, Nref);
  5020  0B9B  1283               	bcf	3,5	;RP0=0, select bank0
  5021  0B9C  1303               	bcf	3,6	;RP1=0, select bank0
  5022  0B9D  0852               	movf	FMTX@fmtx+1,w
  5023  0B9E  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5024  0B9F  0851               	movf	FMTX@fmtx,w
  5025  0BA0  00F9               	movwf	RFDOUT@fmcwtxrx
  5026  0BA1  084E               	movf	FMTX@Nref+1,w
  5027  0BA2  00FC               	movwf	RFDOUT@Nref+1
  5028  0BA3  084D               	movf	FMTX@Nref,w
  5029  0BA4  00FB               	movwf	RFDOUT@Nref
  5030  0BA5  120A  118A  201A  120A  158A  	fcall	_RFDOUT
  5031                           
  5032                           ;FMCW.c: 279: OUTFQ(fmtx, Nprg);
  5033  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  5034  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  5035  0BAC  0852               	movf	FMTX@fmtx+1,w
  5036  0BAD  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5037  0BAE  0851               	movf	FMTX@fmtx,w
  5038  0BAF  00F9               	movwf	OUTFQ@fmcwtxrx
  5039  0BB0  0850               	movf	FMTX@Nprg+1,w
  5040  0BB1  00FC               	movwf	OUTFQ@Nprg+1
  5041  0BB2  084F               	movf	FMTX@Nprg,w
  5042  0BB3  00FB               	movwf	OUTFQ@Nprg
  5043  0BB4  120A  118A  20FB   	fcall	_OUTFQ
  5044  0BB7  0008               	return
  5045  0BB8                     __end_of_FMTX:	
  5046                           
  5047                           	psect	text15
  5048  0B60                     __ptext15:	
  5049 ;; *************** function _FMRX *****************
  5050 ;; Defined at:
  5051 ;;		line 303 in file "FMCW.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;  Nref            2   45[BANK0 ] int 
  5054 ;;  Nprg            2   47[BANK0 ] int 
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  fmrx            2   49[BANK0 ] int 
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  1    wreg      void 
  5059 ;; Registers used:
  5060 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5066 ;;      Params:         0       4       0       0       0
  5067 ;;      Locals:         0       2       0       0       0
  5068 ;;      Temps:          0       0       0       0       0
  5069 ;;      Totals:         0       6       0       0       0
  5070 ;;Total ram usage:        6 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    3
  5073 ;; This function calls:
  5074 ;;		_OPINIT
  5075 ;;		_OUTFQ
  5076 ;;		_RFDOUT
  5077 ;; This function is called by:
  5078 ;;		_main
  5079 ;;		_SetPLL
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           
  5084                           ;psect for function _FMRX
  5085  0B60                     _FMRX:	
  5086                           
  5087                           ;FMCW.c: 304: int fmrx = 3;
  5088                           
  5089                           ;incstack = 0
  5090                           ; Regs used in _FMRX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5091  0B60  3003               	movlw	3
  5092  0B61  1283               	bcf	3,5	;RP0=0, select bank0
  5093  0B62  1303               	bcf	3,6	;RP1=0, select bank0
  5094  0B63  00D1               	movwf	FMRX@fmrx
  5095  0B64  3000               	movlw	0
  5096  0B65  00D2               	movwf	FMRX@fmrx+1
  5097                           
  5098                           ;FMCW.c: 305: OPINIT(fmrx);
  5099  0B66  0852               	movf	FMRX@fmrx+1,w
  5100  0B67  00F5               	movwf	OPINIT@fmcwtxrx+1
  5101  0B68  0851               	movf	FMRX@fmrx,w
  5102  0B69  00F4               	movwf	OPINIT@fmcwtxrx
  5103  0B6A  120A  158A  2701  120A  158A  	fcall	_OPINIT
  5104                           
  5105                           ;FMCW.c: 306: RFDOUT(fmrx, Nref);
  5106  0B6F  1283               	bcf	3,5	;RP0=0, select bank0
  5107  0B70  1303               	bcf	3,6	;RP1=0, select bank0
  5108  0B71  0852               	movf	FMRX@fmrx+1,w
  5109  0B72  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5110  0B73  0851               	movf	FMRX@fmrx,w
  5111  0B74  00F9               	movwf	RFDOUT@fmcwtxrx
  5112  0B75  084E               	movf	FMRX@Nref+1,w
  5113  0B76  00FC               	movwf	RFDOUT@Nref+1
  5114  0B77  084D               	movf	FMRX@Nref,w
  5115  0B78  00FB               	movwf	RFDOUT@Nref
  5116  0B79  120A  118A  201A  120A  158A  	fcall	_RFDOUT
  5117                           
  5118                           ;FMCW.c: 307: OUTFQ(fmrx, Nprg);
  5119  0B7E  1283               	bcf	3,5	;RP0=0, select bank0
  5120  0B7F  1303               	bcf	3,6	;RP1=0, select bank0
  5121  0B80  0852               	movf	FMRX@fmrx+1,w
  5122  0B81  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5123  0B82  0851               	movf	FMRX@fmrx,w
  5124  0B83  00F9               	movwf	OUTFQ@fmcwtxrx
  5125  0B84  0850               	movf	FMRX@Nprg+1,w
  5126  0B85  00FC               	movwf	OUTFQ@Nprg+1
  5127  0B86  084F               	movf	FMRX@Nprg,w
  5128  0B87  00FB               	movwf	OUTFQ@Nprg
  5129  0B88  120A  118A  20FB   	fcall	_OUTFQ
  5130  0B8B  0008               	return
  5131  0B8C                     __end_of_FMRX:	
  5132                           
  5133                           	psect	text16
  5134  0D80                     __ptext16:	
  5135 ;; *************** function _EEPROM_Write *****************
  5136 ;; Defined at:
  5137 ;;		line 51 in file "I2C.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  EEPROM_addre    1    wreg     unsigned char 
  5140 ;;  high_address    1    2[COMMON] unsigned char 
  5141 ;;  low_address     1    3[COMMON] unsigned char 
  5142 ;;  data            1    4[COMMON] PTR unsigned char 
  5143 ;;		 -> NULL(0), dData(16), 
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;  EEPROM_addre    1    8[COMMON] unsigned char 
  5146 ;;  Address         1    9[COMMON] unsigned char 
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  1    wreg      void 
  5149 ;; Registers used:
  5150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5156 ;;      Params:         3       0       0       0       0
  5157 ;;      Locals:         2       0       0       0       0
  5158 ;;      Temps:          3       0       0       0       0
  5159 ;;      Totals:         8       0       0       0       0
  5160 ;;Total ram usage:        8 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:    2
  5163 ;; This function calls:
  5164 ;;		_I2C_Master_Start
  5165 ;;		_I2C_Master_Stop
  5166 ;;		_I2C_Master_Write
  5167 ;; This function is called by:
  5168 ;;		_main
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           
  5173                           ;psect for function _EEPROM_Write
  5174  0D80                     _EEPROM_Write:	
  5175                           
  5176                           ;incstack = 0
  5177                           ; Regs used in _EEPROM_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5178                           ;EEPROM_Write@EEPROM_address stored from wreg
  5179  0D80  00F8               	movwf	EEPROM_Write@EEPROM_address
  5180                           
  5181                           ;I2C.c: 52: UBYTE Address = EEPROM_address << 1;
  5182  0D81  0878               	movf	EEPROM_Write@EEPROM_address,w
  5183  0D82  00F5               	movwf	??_EEPROM_Write
  5184  0D83  0775               	addwf	??_EEPROM_Write,w
  5185  0D84  00F6               	movwf	??_EEPROM_Write+1
  5186  0D85  0876               	movf	??_EEPROM_Write+1,w
  5187  0D86  00F9               	movwf	EEPROM_Write@Address
  5188                           
  5189                           ;I2C.c: 55: I2C_Master_Start();
  5190  0D87  120A  158A  2268  120A  158A  	fcall	_I2C_Master_Start
  5191                           
  5192                           ;I2C.c: 56: I2C_Master_Write(Address);
  5193  0D8C  0879               	movf	EEPROM_Write@Address,w
  5194  0D8D  00F5               	movwf	??_EEPROM_Write
  5195  0D8E  01F6               	clrf	??_EEPROM_Write+1
  5196  0D8F  0875               	movf	??_EEPROM_Write,w
  5197  0D90  00F0               	movwf	I2C_Master_Write@d
  5198  0D91  0876               	movf	??_EEPROM_Write+1,w
  5199  0D92  00F1               	movwf	I2C_Master_Write@d+1
  5200  0D93  120A  158A  2276  120A  158A  	fcall	_I2C_Master_Write
  5201                           
  5202                           ;I2C.c: 57: I2C_Master_Write(high_address);
  5203  0D98  0872               	movf	EEPROM_Write@high_address,w
  5204  0D99  00F5               	movwf	??_EEPROM_Write
  5205  0D9A  01F6               	clrf	??_EEPROM_Write+1
  5206  0D9B  0875               	movf	??_EEPROM_Write,w
  5207  0D9C  00F0               	movwf	I2C_Master_Write@d
  5208  0D9D  0876               	movf	??_EEPROM_Write+1,w
  5209  0D9E  00F1               	movwf	I2C_Master_Write@d+1
  5210  0D9F  120A  158A  2276  120A  158A  	fcall	_I2C_Master_Write
  5211                           
  5212                           ;I2C.c: 58: I2C_Master_Write(low_address);
  5213  0DA4  0873               	movf	EEPROM_Write@low_address,w
  5214  0DA5  00F5               	movwf	??_EEPROM_Write
  5215  0DA6  01F6               	clrf	??_EEPROM_Write+1
  5216  0DA7  0875               	movf	??_EEPROM_Write,w
  5217  0DA8  00F0               	movwf	I2C_Master_Write@d
  5218  0DA9  0876               	movf	??_EEPROM_Write+1,w
  5219  0DAA  00F1               	movwf	I2C_Master_Write@d+1
  5220  0DAB  120A  158A  2276  120A  158A  	fcall	_I2C_Master_Write
  5221  0DB0                     l3043:	
  5222                           ;I2C.c: 59: while(*data){
  5223                           
  5224  0DB0  0874               	movf	EEPROM_Write@data,w
  5225  0DB1  0084               	movwf	4
  5226  0DB2  1383               	bcf	3,7	;select IRP bank0
  5227  0DB3  0800               	movf	0,w
  5228  0DB4  1903               	btfsc	3,2
  5229  0DB5  2DCA               	goto	l3045
  5230                           
  5231                           ;I2C.c: 60: I2C_Master_Write(*data);
  5232  0DB6  0874               	movf	EEPROM_Write@data,w
  5233  0DB7  0084               	movwf	4
  5234  0DB8  1383               	bcf	3,7	;select IRP bank0
  5235  0DB9  0800               	movf	0,w
  5236  0DBA  00F5               	movwf	??_EEPROM_Write
  5237  0DBB  01F6               	clrf	??_EEPROM_Write+1
  5238  0DBC  0875               	movf	??_EEPROM_Write,w
  5239  0DBD  00F0               	movwf	I2C_Master_Write@d
  5240  0DBE  0876               	movf	??_EEPROM_Write+1,w
  5241  0DBF  00F1               	movwf	I2C_Master_Write@d+1
  5242  0DC0  120A  158A  2276  120A  158A  	fcall	_I2C_Master_Write
  5243                           
  5244                           ;I2C.c: 61: ++data;
  5245  0DC5  3001               	movlw	1
  5246  0DC6  00F5               	movwf	??_EEPROM_Write
  5247  0DC7  0875               	movf	??_EEPROM_Write,w
  5248  0DC8  07F4               	addwf	EEPROM_Write@data,f
  5249  0DC9  2DB0               	goto	l3043
  5250  0DCA                     l3045:	
  5251                           
  5252                           ;I2C.c: 62: }
  5253                           ;I2C.c: 63: I2C_Master_Stop();
  5254  0DCA  120A  158A  226F  120A  158A  	fcall	_I2C_Master_Stop
  5255                           
  5256                           ;I2C.c: 64: _delay((unsigned long)((200)*(10000000/4000.0)));
  5257  0DCF  3003               	movlw	3
  5258  0DD0  00F7               	movwf	??_EEPROM_Write+2
  5259  0DD1  308A               	movlw	138
  5260  0DD2  00F6               	movwf	??_EEPROM_Write+1
  5261  0DD3  3055               	movlw	85
  5262  0DD4  00F5               	movwf	??_EEPROM_Write
  5263  0DD5                     u3057:	
  5264  0DD5  0BF5               	decfsz	??_EEPROM_Write,f
  5265  0DD6  2DD5               	goto	u3057
  5266  0DD7  0BF6               	decfsz	??_EEPROM_Write+1,f
  5267  0DD8  2DD5               	goto	u3057
  5268  0DD9  0BF7               	decfsz	??_EEPROM_Write+2,f
  5269  0DDA  2DD5               	goto	u3057
  5270  0DDB  2DDC               	nop2
  5271  0DDC  0008               	return
  5272  0DDD                     __end_of_EEPROM_Write:	
  5273                           
  5274                           	psect	text17
  5275  0A76                     __ptext17:	
  5276 ;; *************** function _I2C_Master_Write *****************
  5277 ;; Defined at:
  5278 ;;		line 34 in file "I2C.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;  d               2    0[COMMON] unsigned int 
  5281 ;; Auto vars:     Size  Location     Type
  5282 ;;		None
  5283 ;; Return value:  Size  Location     Type
  5284 ;;                  1    wreg      void 
  5285 ;; Registers used:
  5286 ;;		wreg, status,2, status,0, pclath, cstack
  5287 ;; Tracked objects:
  5288 ;;		On entry : 0/0
  5289 ;;		On exit  : 0/0
  5290 ;;		Unchanged: 0/0
  5291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5292 ;;      Params:         2       0       0       0       0
  5293 ;;      Locals:         0       0       0       0       0
  5294 ;;      Temps:          0       0       0       0       0
  5295 ;;      Totals:         2       0       0       0       0
  5296 ;;Total ram usage:        2 bytes
  5297 ;; Hardware stack levels used:    1
  5298 ;; Hardware stack levels required when called:    1
  5299 ;; This function calls:
  5300 ;;		_I2C_Master_Wait
  5301 ;; This function is called by:
  5302 ;;		_EEPROM_Write
  5303 ;;		_EEPROM_Read
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           
  5308                           ;psect for function _I2C_Master_Write
  5309  0A76                     _I2C_Master_Write:	
  5310                           
  5311                           ;I2C.c: 35: I2C_Master_Wait();
  5312                           
  5313                           ;incstack = 0
  5314                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5315  0A76  120A  158A  228E   	fcall	_I2C_Master_Wait
  5316                           
  5317                           ;I2C.c: 36: SSPBUF = d;
  5318  0A79  0870               	movf	I2C_Master_Write@d,w
  5319  0A7A  1283               	bcf	3,5	;RP0=0, select bank0
  5320  0A7B  1303               	bcf	3,6	;RP1=0, select bank0
  5321  0A7C  0093               	movwf	19	;volatile
  5322  0A7D  0008               	return
  5323  0A7E                     __end_of_I2C_Master_Write:	
  5324                           
  5325                           	psect	text18
  5326  0A6F                     __ptext18:	
  5327 ;; *************** function _I2C_Master_Stop *****************
  5328 ;; Defined at:
  5329 ;;		line 29 in file "I2C.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;		None
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;		None
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  1    wreg      void 
  5336 ;; Registers used:
  5337 ;;		wreg, status,2, status,0, pclath, cstack
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5343 ;;      Params:         0       0       0       0       0
  5344 ;;      Locals:         0       0       0       0       0
  5345 ;;      Temps:          0       0       0       0       0
  5346 ;;      Totals:         0       0       0       0       0
  5347 ;;Total ram usage:        0 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:    1
  5350 ;; This function calls:
  5351 ;;		_I2C_Master_Wait
  5352 ;; This function is called by:
  5353 ;;		_EEPROM_Write
  5354 ;;		_EEPROM_Read
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           
  5359                           ;psect for function _I2C_Master_Stop
  5360  0A6F                     _I2C_Master_Stop:	
  5361                           
  5362                           ;I2C.c: 30: I2C_Master_Wait();
  5363                           
  5364                           ;incstack = 0
  5365                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5366  0A6F  120A  158A  228E   	fcall	_I2C_Master_Wait
  5367                           
  5368                           ;I2C.c: 31: PEN = 1;
  5369  0A72  1683               	bsf	3,5	;RP0=1, select bank1
  5370  0A73  1303               	bcf	3,6	;RP1=0, select bank1
  5371  0A74  1511               	bsf	17,2	;volatile
  5372  0A75  0008               	return
  5373  0A76                     __end_of_I2C_Master_Stop:	
  5374                           
  5375                           	psect	text19
  5376  0A68                     __ptext19:	
  5377 ;; *************** function _I2C_Master_Start *****************
  5378 ;; Defined at:
  5379 ;;		line 19 in file "I2C.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;		None
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg, status,2, status,0, pclath, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5393 ;;      Params:         0       0       0       0       0
  5394 ;;      Locals:         0       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0
  5396 ;;      Totals:         0       0       0       0       0
  5397 ;;Total ram usage:        0 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    1
  5400 ;; This function calls:
  5401 ;;		_I2C_Master_Wait
  5402 ;; This function is called by:
  5403 ;;		_EEPROM_Write
  5404 ;;		_EEPROM_Read
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           
  5409                           ;psect for function _I2C_Master_Start
  5410  0A68                     _I2C_Master_Start:	
  5411                           
  5412                           ;I2C.c: 20: I2C_Master_Wait();
  5413                           
  5414                           ;incstack = 0
  5415                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5416  0A68  120A  158A  228E   	fcall	_I2C_Master_Wait
  5417                           
  5418                           ;I2C.c: 21: SEN = 1;
  5419  0A6B  1683               	bsf	3,5	;RP0=1, select bank1
  5420  0A6C  1303               	bcf	3,6	;RP1=0, select bank1
  5421  0A6D  1411               	bsf	17,0	;volatile
  5422  0A6E  0008               	return
  5423  0A6F                     __end_of_I2C_Master_Start:	
  5424                           
  5425                           	psect	text20
  5426  0A8E                     __ptext20:	
  5427 ;; *************** function _I2C_Master_Wait *****************
  5428 ;; Defined at:
  5429 ;;		line 15 in file "I2C.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;		None
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;		None
  5434 ;; Return value:  Size  Location     Type
  5435 ;;                  1    wreg      void 
  5436 ;; Registers used:
  5437 ;;		wreg, status,2
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5443 ;;      Params:         0       0       0       0       0
  5444 ;;      Locals:         0       0       0       0       0
  5445 ;;      Temps:          0       0       0       0       0
  5446 ;;      Totals:         0       0       0       0       0
  5447 ;;Total ram usage:        0 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; This function calls:
  5450 ;;		Nothing
  5451 ;; This function is called by:
  5452 ;;		_I2C_Master_Start
  5453 ;;		_I2C_Master_Stop
  5454 ;;		_I2C_Master_Write
  5455 ;;		_I2C_Master_RepeatedStart
  5456 ;;		_I2C_Master_Read
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           
  5461                           ;psect for function _I2C_Master_Wait
  5462  0A8E                     _I2C_Master_Wait:	
  5463  0A8E                     l372:	
  5464                           ;I2C.c: 16: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5465                           
  5466                           ;incstack = 0
  5467                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5468                           
  5469  0A8E  1683               	bsf	3,5	;RP0=1, select bank1
  5470  0A8F  1303               	bcf	3,6	;RP1=0, select bank1
  5471  0A90  1914               	btfsc	20,2	;volatile
  5472  0A91  2A8E               	goto	l372
  5473  0A92  0811               	movf	17,w	;volatile
  5474  0A93  391F               	andlw	31
  5475  0A94  1903               	btfsc	3,2
  5476  0A95  0008               	return
  5477  0A96  2A8E               	goto	l372
  5478  0A97                     __end_of_I2C_Master_Wait:	
  5479                           
  5480                           	psect	text21
  5481  0B34                     __ptext21:	
  5482 ;; *************** function _CWTX *****************
  5483 ;; Defined at:
  5484 ;;		line 289 in file "FMCW.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;  Nref            2   45[BANK0 ] int 
  5487 ;;  Nprg            2   47[BANK0 ] int 
  5488 ;; Auto vars:     Size  Location     Type
  5489 ;;  cwtx            2   49[BANK0 ] int 
  5490 ;; Return value:  Size  Location     Type
  5491 ;;                  1    wreg      void 
  5492 ;; Registers used:
  5493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5499 ;;      Params:         0       4       0       0       0
  5500 ;;      Locals:         0       2       0       0       0
  5501 ;;      Temps:          0       0       0       0       0
  5502 ;;      Totals:         0       6       0       0       0
  5503 ;;Total ram usage:        6 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    3
  5506 ;; This function calls:
  5507 ;;		_OPINIT
  5508 ;;		_OUTFQ
  5509 ;;		_RFDOUT
  5510 ;; This function is called by:
  5511 ;;		_main
  5512 ;;		_SetPLL
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           
  5517                           ;psect for function _CWTX
  5518  0B34                     _CWTX:	
  5519                           
  5520                           ;FMCW.c: 290: int cwtx = 2;
  5521                           
  5522                           ;incstack = 0
  5523                           ; Regs used in _CWTX: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5524  0B34  3002               	movlw	2
  5525  0B35  1283               	bcf	3,5	;RP0=0, select bank0
  5526  0B36  1303               	bcf	3,6	;RP1=0, select bank0
  5527  0B37  00D1               	movwf	CWTX@cwtx
  5528  0B38  3000               	movlw	0
  5529  0B39  00D2               	movwf	CWTX@cwtx+1
  5530                           
  5531                           ;FMCW.c: 291: OPINIT(cwtx);
  5532  0B3A  0852               	movf	CWTX@cwtx+1,w
  5533  0B3B  00F5               	movwf	OPINIT@fmcwtxrx+1
  5534  0B3C  0851               	movf	CWTX@cwtx,w
  5535  0B3D  00F4               	movwf	OPINIT@fmcwtxrx
  5536  0B3E  120A  158A  2701  120A  158A  	fcall	_OPINIT
  5537                           
  5538                           ;FMCW.c: 292: RFDOUT(cwtx, Nref);
  5539  0B43  1283               	bcf	3,5	;RP0=0, select bank0
  5540  0B44  1303               	bcf	3,6	;RP1=0, select bank0
  5541  0B45  0852               	movf	CWTX@cwtx+1,w
  5542  0B46  00FA               	movwf	RFDOUT@fmcwtxrx+1
  5543  0B47  0851               	movf	CWTX@cwtx,w
  5544  0B48  00F9               	movwf	RFDOUT@fmcwtxrx
  5545  0B49  084E               	movf	CWTX@Nref+1,w
  5546  0B4A  00FC               	movwf	RFDOUT@Nref+1
  5547  0B4B  084D               	movf	CWTX@Nref,w
  5548  0B4C  00FB               	movwf	RFDOUT@Nref
  5549  0B4D  120A  118A  201A  120A  158A  	fcall	_RFDOUT
  5550                           
  5551                           ;FMCW.c: 293: OUTFQ(cwtx, Nprg);
  5552  0B52  1283               	bcf	3,5	;RP0=0, select bank0
  5553  0B53  1303               	bcf	3,6	;RP1=0, select bank0
  5554  0B54  0852               	movf	CWTX@cwtx+1,w
  5555  0B55  00FA               	movwf	OUTFQ@fmcwtxrx+1
  5556  0B56  0851               	movf	CWTX@cwtx,w
  5557  0B57  00F9               	movwf	OUTFQ@fmcwtxrx
  5558  0B58  0850               	movf	CWTX@Nprg+1,w
  5559  0B59  00FC               	movwf	OUTFQ@Nprg+1
  5560  0B5A  084F               	movf	CWTX@Nprg,w
  5561  0B5B  00FB               	movwf	OUTFQ@Nprg
  5562  0B5C  120A  118A  20FB   	fcall	_OUTFQ
  5563  0B5F  0008               	return
  5564  0B60                     __end_of_CWTX:	
  5565                           
  5566                           	psect	text22
  5567  001A                     __ptext22:	
  5568 ;; *************** function _RFDOUT *****************
  5569 ;; Defined at:
  5570 ;;		line 205 in file "FMCW.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;  fmcwtxrx        2    9[COMMON] int 
  5573 ;;  Nref            2   11[COMMON] int 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  i               2   31[BANK0 ] int 
  5576 ;;  i               2   27[BANK0 ] int 
  5577 ;;  i               2   29[BANK0 ] int 
  5578 ;;  Nref_b         24    3[BANK0 ] int [12]
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  1    wreg      void 
  5581 ;; Registers used:
  5582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5588 ;;      Params:         4       0       0       0       0
  5589 ;;      Locals:         0      30       0       0       0
  5590 ;;      Temps:          0       3       0       0       0
  5591 ;;      Totals:         4      33       0       0       0
  5592 ;;Total ram usage:       37 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    2
  5595 ;; This function calls:
  5596 ;;		_H_OUT
  5597 ;;		_L_OUT
  5598 ;;		_STBOUT
  5599 ;;		___awdiv
  5600 ;; This function is called by:
  5601 ;;		_FMTX
  5602 ;;		_CWTX
  5603 ;;		_FMRX
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           
  5608                           ;psect for function _RFDOUT
  5609  001A                     _RFDOUT:	
  5610                           
  5611                           ;FMCW.c: 206: int Nref_b[12];
  5612                           ;FMCW.c: 208: for(int i=0; i<12; i++){
  5613                           
  5614                           ;incstack = 0
  5615                           ; Regs used in _RFDOUT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5616  001A  1283               	bcf	3,5	;RP0=0, select bank0
  5617  001B  1303               	bcf	3,6	;RP1=0, select bank0
  5618  001C  01BD               	clrf	RFDOUT@i
  5619  001D  01BE               	clrf	RFDOUT@i+1
  5620  001E  083E               	movf	RFDOUT@i+1,w
  5621  001F  3A80               	xorlw	128
  5622  0020  00FF               	movwf	127
  5623  0021  3080               	movlw	128
  5624  0022  027F               	subwf	127,w
  5625  0023  1D03               	skipz
  5626  0024  2827               	goto	u2515
  5627  0025  300C               	movlw	12
  5628  0026  023D               	subwf	RFDOUT@i,w
  5629  0027                     u2515:	
  5630  0027  1803               	btfsc	3,0
  5631  0028  2845               	goto	l2843
  5632  0029                     l2837:	
  5633                           
  5634                           ;FMCW.c: 209: Nref_b[i] = 0;
  5635  0029  1283               	bcf	3,5	;RP0=0, select bank0
  5636  002A  1303               	bcf	3,6	;RP1=0, select bank0
  5637  002B  083D               	movf	RFDOUT@i,w
  5638  002C  00A0               	movwf	??_RFDOUT
  5639  002D  0720               	addwf	??_RFDOUT,w
  5640  002E  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5641  002F  0084               	movwf	4
  5642  0030  1383               	bcf	3,7	;select IRP bank0
  5643  0031  0180               	clrf	0
  5644  0032  0A84               	incf	4,f
  5645  0033  0180               	clrf	0
  5646  0034  3001               	movlw	1
  5647  0035  07BD               	addwf	RFDOUT@i,f
  5648  0036  1803               	skipnc
  5649  0037  0ABE               	incf	RFDOUT@i+1,f
  5650  0038  3000               	movlw	0
  5651  0039  07BE               	addwf	RFDOUT@i+1,f
  5652  003A  083E               	movf	RFDOUT@i+1,w
  5653  003B  3A80               	xorlw	128
  5654  003C  00FF               	movwf	127
  5655  003D  3080               	movlw	128
  5656  003E  027F               	subwf	127,w
  5657  003F  1D03               	skipz
  5658  0040  2843               	goto	u2525
  5659  0041  300C               	movlw	12
  5660  0042  023D               	subwf	RFDOUT@i,w
  5661  0043                     u2525:	
  5662  0043  1C03               	skipc
  5663  0044  2829               	goto	l2837
  5664  0045                     l2843:	
  5665                           
  5666                           ;FMCW.c: 210: }
  5667                           ;FMCW.c: 213: for(int i=0; Nref>0; i++){
  5668  0045  1283               	bcf	3,5	;RP0=0, select bank0
  5669  0046  1303               	bcf	3,6	;RP1=0, select bank0
  5670  0047  01BB               	clrf	RFDOUT@i_407
  5671  0048  01BC               	clrf	RFDOUT@i_407+1
  5672  0049  087C               	movf	RFDOUT@Nref+1,w
  5673  004A  3A80               	xorlw	128
  5674  004B  00FF               	movwf	127
  5675  004C  3080               	movlw	128
  5676  004D  027F               	subwf	127,w
  5677  004E  1D03               	skipz
  5678  004F  2852               	goto	u2535
  5679  0050  3001               	movlw	1
  5680  0051  027B               	subwf	RFDOUT@Nref,w
  5681  0052                     u2535:	
  5682  0052  1C03               	btfss	3,0
  5683  0053  288B               	goto	l2857
  5684  0054                     l2849:	
  5685                           
  5686                           ;FMCW.c: 214: Nref_b[i] = Nref % 2;
  5687  0054  3001               	movlw	1
  5688  0055  057B               	andwf	RFDOUT@Nref,w
  5689  0056  1283               	bcf	3,5	;RP0=0, select bank0
  5690  0057  1303               	bcf	3,6	;RP1=0, select bank0
  5691  0058  00A0               	movwf	??_RFDOUT
  5692  0059  3000               	movlw	0
  5693  005A  057C               	andwf	RFDOUT@Nref+1,w
  5694  005B  00A1               	movwf	??_RFDOUT+1
  5695  005C  083B               	movf	RFDOUT@i_407,w
  5696  005D  00A2               	movwf	??_RFDOUT+2
  5697  005E  0722               	addwf	??_RFDOUT+2,w
  5698  005F  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5699  0060  0084               	movwf	4
  5700  0061  0820               	movf	??_RFDOUT,w
  5701  0062  1383               	bcf	3,7	;select IRP bank0
  5702  0063  0080               	movwf	0
  5703  0064  0A84               	incf	4,f
  5704  0065  0821               	movf	??_RFDOUT+1,w
  5705  0066  0080               	movwf	0
  5706                           
  5707                           ;FMCW.c: 215: Nref = Nref / 2;
  5708  0067  3002               	movlw	2
  5709  0068  00F0               	movwf	___awdiv@divisor
  5710  0069  3000               	movlw	0
  5711  006A  00F1               	movwf	___awdiv@divisor+1
  5712  006B  087C               	movf	RFDOUT@Nref+1,w
  5713  006C  00F3               	movwf	___awdiv@dividend+1
  5714  006D  087B               	movf	RFDOUT@Nref,w
  5715  006E  00F2               	movwf	___awdiv@dividend
  5716  006F  120A  158A  2527  120A  118A  	fcall	___awdiv
  5717  0074  0871               	movf	?___awdiv+1,w
  5718  0075  00FC               	movwf	RFDOUT@Nref+1
  5719  0076  0870               	movf	?___awdiv,w
  5720  0077  00FB               	movwf	RFDOUT@Nref
  5721  0078  3001               	movlw	1
  5722  0079  1283               	bcf	3,5	;RP0=0, select bank0
  5723  007A  1303               	bcf	3,6	;RP1=0, select bank0
  5724  007B  07BB               	addwf	RFDOUT@i_407,f
  5725  007C  1803               	skipnc
  5726  007D  0ABC               	incf	RFDOUT@i_407+1,f
  5727  007E  3000               	movlw	0
  5728  007F  07BC               	addwf	RFDOUT@i_407+1,f
  5729  0080  087C               	movf	RFDOUT@Nref+1,w
  5730  0081  3A80               	xorlw	128
  5731  0082  00FF               	movwf	127
  5732  0083  3080               	movlw	128
  5733  0084  027F               	subwf	127,w
  5734  0085  1D03               	skipz
  5735  0086  2889               	goto	u2545
  5736  0087  3001               	movlw	1
  5737  0088  027B               	subwf	RFDOUT@Nref,w
  5738  0089                     u2545:	
  5739  0089  1803               	skipnc
  5740  008A  2854               	goto	l2849
  5741  008B                     l2857:	
  5742                           
  5743                           ;FMCW.c: 216: }
  5744                           ;FMCW.c: 219: for (int i=0; i<12; i++)
  5745  008B  1283               	bcf	3,5	;RP0=0, select bank0
  5746  008C  1303               	bcf	3,6	;RP1=0, select bank0
  5747  008D  01BF               	clrf	RFDOUT@i_408
  5748  008E  01C0               	clrf	RFDOUT@i_408+1
  5749  008F  0840               	movf	RFDOUT@i_408+1,w
  5750  0090  3A80               	xorlw	128
  5751  0091  00FF               	movwf	127
  5752  0092  3080               	movlw	128
  5753  0093  027F               	subwf	127,w
  5754  0094  1D03               	skipz
  5755  0095  2898               	goto	u2555
  5756  0096  300C               	movlw	12
  5757  0097  023F               	subwf	RFDOUT@i_408,w
  5758  0098                     u2555:	
  5759  0098  1803               	btfsc	3,0
  5760  0099  28E1               	goto	l2875
  5761  009A                     l2863:	
  5762                           
  5763                           ;FMCW.c: 220: {
  5764                           ;FMCW.c: 221: if(Nref_b[i] == 0)
  5765  009A  1283               	bcf	3,5	;RP0=0, select bank0
  5766  009B  1303               	bcf	3,6	;RP1=0, select bank0
  5767  009C  083F               	movf	RFDOUT@i_408,w
  5768  009D  00A0               	movwf	??_RFDOUT
  5769  009E  0720               	addwf	??_RFDOUT,w
  5770  009F  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5771  00A0  0084               	movwf	4
  5772  00A1  1383               	bcf	3,7	;select IRP bank0
  5773  00A2  0800               	movf	0,w
  5774  00A3  00A1               	movwf	??_RFDOUT+1
  5775  00A4  0A84               	incf	4,f
  5776  00A5  0800               	movf	0,w
  5777  00A6  00A2               	movwf	??_RFDOUT+2
  5778  00A7  0821               	movf	??_RFDOUT+1,w
  5779  00A8  0422               	iorwf	??_RFDOUT+2,w
  5780  00A9  1D03               	btfss	3,2
  5781  00AA  28B4               	goto	l2867
  5782                           
  5783                           ;FMCW.c: 222: {
  5784                           ;FMCW.c: 223: L_OUT(fmcwtxrx);
  5785  00AB  087A               	movf	RFDOUT@fmcwtxrx+1,w
  5786  00AC  00F3               	movwf	L_OUT@fmcwtxrx+1
  5787  00AD  0879               	movf	RFDOUT@fmcwtxrx,w
  5788  00AE  00F2               	movwf	L_OUT@fmcwtxrx
  5789  00AF  120A  158A  249A  120A  118A  	fcall	_L_OUT
  5790  00B4                     l2867:	
  5791                           
  5792                           ;FMCW.c: 224: }
  5793                           ;FMCW.c: 225: if(Nref_b[i] == 1)
  5794  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  5795  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  5796  00B6  083F               	movf	RFDOUT@i_408,w
  5797  00B7  00A0               	movwf	??_RFDOUT
  5798  00B8  0720               	addwf	??_RFDOUT,w
  5799  00B9  3E23               	addlw	(low (RFDOUT@Nref_b| 0))& (0+255)
  5800  00BA  0084               	movwf	4
  5801  00BB  1383               	bcf	3,7	;select IRP bank0
  5802  00BC  0800               	movf	0,w
  5803  00BD  00A1               	movwf	??_RFDOUT+1
  5804  00BE  0A84               	incf	4,f
  5805  00BF  0800               	movf	0,w
  5806  00C0  00A2               	movwf	??_RFDOUT+2
  5807  00C1  0321               	decf	??_RFDOUT+1,w
  5808  00C2  0422               	iorwf	??_RFDOUT+2,w
  5809  00C3  1D03               	btfss	3,2
  5810  00C4  28CE               	goto	l2871
  5811                           
  5812                           ;FMCW.c: 226: {
  5813                           ;FMCW.c: 227: H_OUT(fmcwtxrx);
  5814  00C5  087A               	movf	RFDOUT@fmcwtxrx+1,w
  5815  00C6  00F3               	movwf	H_OUT@fmcwtxrx+1
  5816  00C7  0879               	movf	RFDOUT@fmcwtxrx,w
  5817  00C8  00F2               	movwf	H_OUT@fmcwtxrx
  5818  00C9  120A  158A  2454  120A  118A  	fcall	_H_OUT
  5819  00CE                     l2871:	
  5820  00CE  3001               	movlw	1
  5821  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  5822  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  5823  00D1  07BF               	addwf	RFDOUT@i_408,f
  5824  00D2  1803               	skipnc
  5825  00D3  0AC0               	incf	RFDOUT@i_408+1,f
  5826  00D4  3000               	movlw	0
  5827  00D5  07C0               	addwf	RFDOUT@i_408+1,f
  5828  00D6  0840               	movf	RFDOUT@i_408+1,w
  5829  00D7  3A80               	xorlw	128
  5830  00D8  00FF               	movwf	127
  5831  00D9  3080               	movlw	128
  5832  00DA  027F               	subwf	127,w
  5833  00DB  1D03               	skipz
  5834  00DC  28DF               	goto	u2585
  5835  00DD  300C               	movlw	12
  5836  00DE  023F               	subwf	RFDOUT@i_408,w
  5837  00DF                     u2585:	
  5838  00DF  1C03               	skipc
  5839  00E0  289A               	goto	l2863
  5840  00E1                     l2875:	
  5841                           
  5842                           ;FMCW.c: 228: }
  5843                           ;FMCW.c: 229: }
  5844                           ;FMCW.c: 232: H_OUT(fmcwtxrx);
  5845  00E1  087A               	movf	RFDOUT@fmcwtxrx+1,w
  5846  00E2  00F3               	movwf	H_OUT@fmcwtxrx+1
  5847  00E3  0879               	movf	RFDOUT@fmcwtxrx,w
  5848  00E4  00F2               	movwf	H_OUT@fmcwtxrx
  5849  00E5  120A  158A  2454  120A  118A  	fcall	_H_OUT
  5850                           
  5851                           ;FMCW.c: 233: H_OUT(fmcwtxrx);
  5852  00EA  087A               	movf	RFDOUT@fmcwtxrx+1,w
  5853  00EB  00F3               	movwf	H_OUT@fmcwtxrx+1
  5854  00EC  0879               	movf	RFDOUT@fmcwtxrx,w
  5855  00ED  00F2               	movwf	H_OUT@fmcwtxrx
  5856  00EE  120A  158A  2454  120A  118A  	fcall	_H_OUT
  5857                           
  5858                           ;FMCW.c: 236: STBOUT(fmcwtxrx);
  5859  00F3  087A               	movf	RFDOUT@fmcwtxrx+1,w
  5860  00F4  00F3               	movwf	STBOUT@fmcwtxrx+1
  5861  00F5  0879               	movf	RFDOUT@fmcwtxrx,w
  5862  00F6  00F2               	movwf	STBOUT@fmcwtxrx
  5863  00F7  120A  158A  23B8   	fcall	_STBOUT
  5864  00FA  0008               	return
  5865  00FB                     __end_of_RFDOUT:	
  5866                           
  5867                           	psect	text23
  5868  00FB                     __ptext23:	
  5869 ;; *************** function _OUTFQ *****************
  5870 ;; Defined at:
  5871 ;;		line 136 in file "FMCW.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;  fmcwtxrx        2    9[COMMON] int 
  5874 ;;  Nprg            2   11[COMMON] int 
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;  i               2   43[BANK0 ] int 
  5877 ;;  i               2   41[BANK0 ] int 
  5878 ;;  i               2   39[BANK0 ] int 
  5879 ;;  Nprg_b         34    3[BANK0 ] int [17]
  5880 ;;  count           2   37[BANK0 ] int 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  1    wreg      void 
  5883 ;; Registers used:
  5884 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5890 ;;      Params:         4       0       0       0       0
  5891 ;;      Locals:         0      42       0       0       0
  5892 ;;      Temps:          0       3       0       0       0
  5893 ;;      Totals:         4      45       0       0       0
  5894 ;;Total ram usage:       49 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    2
  5897 ;; This function calls:
  5898 ;;		_H_OUT
  5899 ;;		_L_OUT
  5900 ;;		_STBOUT
  5901 ;;		___awdiv
  5902 ;; This function is called by:
  5903 ;;		_FMTX
  5904 ;;		_CWTX
  5905 ;;		_FMRX
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           
  5910                           ;psect for function _OUTFQ
  5911  00FB                     _OUTFQ:	
  5912                           
  5913                           ;FMCW.c: 137: int count = 0;
  5914                           
  5915                           ;incstack = 0
  5916                           ; Regs used in _OUTFQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5917  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  5918  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  5919  00FD  01C5               	clrf	OUTFQ@count
  5920  00FE  01C6               	clrf	OUTFQ@count+1
  5921                           
  5922                           ;FMCW.c: 138: int Nprg_b[17];
  5923                           ;FMCW.c: 140: for(int i=0; i<17; i++){
  5924  00FF  01C7               	clrf	OUTFQ@i
  5925  0100  01C8               	clrf	OUTFQ@i+1
  5926  0101  0848               	movf	OUTFQ@i+1,w
  5927  0102  3A80               	xorlw	128
  5928  0103  00FF               	movwf	127
  5929  0104  3080               	movlw	128
  5930  0105  027F               	subwf	127,w
  5931  0106  1D03               	skipz
  5932  0107  290A               	goto	u2435
  5933  0108  3011               	movlw	17
  5934  0109  0247               	subwf	OUTFQ@i,w
  5935  010A                     u2435:	
  5936  010A  1803               	btfsc	3,0
  5937  010B  2928               	goto	l2797
  5938  010C                     l2791:	
  5939                           
  5940                           ;FMCW.c: 141: Nprg_b[i] = 0;
  5941  010C  1283               	bcf	3,5	;RP0=0, select bank0
  5942  010D  1303               	bcf	3,6	;RP1=0, select bank0
  5943  010E  0847               	movf	OUTFQ@i,w
  5944  010F  00A0               	movwf	??_OUTFQ
  5945  0110  0720               	addwf	??_OUTFQ,w
  5946  0111  3E23               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  5947  0112  0084               	movwf	4
  5948  0113  1383               	bcf	3,7	;select IRP bank0
  5949  0114  0180               	clrf	0
  5950  0115  0A84               	incf	4,f
  5951  0116  0180               	clrf	0
  5952  0117  3001               	movlw	1
  5953  0118  07C7               	addwf	OUTFQ@i,f
  5954  0119  1803               	skipnc
  5955  011A  0AC8               	incf	OUTFQ@i+1,f
  5956  011B  3000               	movlw	0
  5957  011C  07C8               	addwf	OUTFQ@i+1,f
  5958  011D  0848               	movf	OUTFQ@i+1,w
  5959  011E  3A80               	xorlw	128
  5960  011F  00FF               	movwf	127
  5961  0120  3080               	movlw	128
  5962  0121  027F               	subwf	127,w
  5963  0122  1D03               	skipz
  5964  0123  2926               	goto	u2445
  5965  0124  3011               	movlw	17
  5966  0125  0247               	subwf	OUTFQ@i,w
  5967  0126                     u2445:	
  5968  0126  1C03               	skipc
  5969  0127  290C               	goto	l2791
  5970  0128                     l2797:	
  5971                           
  5972                           ;FMCW.c: 142: }
  5973                           ;FMCW.c: 145: for(int i = 0; i < 17; i++){
  5974  0128  1283               	bcf	3,5	;RP0=0, select bank0
  5975  0129  1303               	bcf	3,6	;RP1=0, select bank0
  5976  012A  01C9               	clrf	OUTFQ@i_397
  5977  012B  01CA               	clrf	OUTFQ@i_397+1
  5978  012C  084A               	movf	OUTFQ@i_397+1,w
  5979  012D  3A80               	xorlw	128
  5980  012E  00FF               	movwf	127
  5981  012F  3080               	movlw	128
  5982  0130  027F               	subwf	127,w
  5983  0131  1D03               	skipz
  5984  0132  2935               	goto	u2455
  5985  0133  3011               	movlw	17
  5986  0134  0249               	subwf	OUTFQ@i_397,w
  5987  0135                     u2455:	
  5988  0135  1803               	btfsc	3,0
  5989  0136  296E               	goto	l2811
  5990  0137                     l2803:	
  5991                           
  5992                           ;FMCW.c: 146: Nprg_b[i] = Nprg % 2;
  5993  0137  3001               	movlw	1
  5994  0138  057B               	andwf	OUTFQ@Nprg,w
  5995  0139  1283               	bcf	3,5	;RP0=0, select bank0
  5996  013A  1303               	bcf	3,6	;RP1=0, select bank0
  5997  013B  00A0               	movwf	??_OUTFQ
  5998  013C  3000               	movlw	0
  5999  013D  057C               	andwf	OUTFQ@Nprg+1,w
  6000  013E  00A1               	movwf	??_OUTFQ+1
  6001  013F  0849               	movf	OUTFQ@i_397,w
  6002  0140  00A2               	movwf	??_OUTFQ+2
  6003  0141  0722               	addwf	??_OUTFQ+2,w
  6004  0142  3E23               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6005  0143  0084               	movwf	4
  6006  0144  0820               	movf	??_OUTFQ,w
  6007  0145  1383               	bcf	3,7	;select IRP bank0
  6008  0146  0080               	movwf	0
  6009  0147  0A84               	incf	4,f
  6010  0148  0821               	movf	??_OUTFQ+1,w
  6011  0149  0080               	movwf	0
  6012                           
  6013                           ;FMCW.c: 147: Nprg = Nprg / 2;
  6014  014A  3002               	movlw	2
  6015  014B  00F0               	movwf	___awdiv@divisor
  6016  014C  3000               	movlw	0
  6017  014D  00F1               	movwf	___awdiv@divisor+1
  6018  014E  087C               	movf	OUTFQ@Nprg+1,w
  6019  014F  00F3               	movwf	___awdiv@dividend+1
  6020  0150  087B               	movf	OUTFQ@Nprg,w
  6021  0151  00F2               	movwf	___awdiv@dividend
  6022  0152  120A  158A  2527  120A  118A  	fcall	___awdiv
  6023  0157  0871               	movf	?___awdiv+1,w
  6024  0158  00FC               	movwf	OUTFQ@Nprg+1
  6025  0159  0870               	movf	?___awdiv,w
  6026  015A  00FB               	movwf	OUTFQ@Nprg
  6027  015B  3001               	movlw	1
  6028  015C  1283               	bcf	3,5	;RP0=0, select bank0
  6029  015D  1303               	bcf	3,6	;RP1=0, select bank0
  6030  015E  07C9               	addwf	OUTFQ@i_397,f
  6031  015F  1803               	skipnc
  6032  0160  0ACA               	incf	OUTFQ@i_397+1,f
  6033  0161  3000               	movlw	0
  6034  0162  07CA               	addwf	OUTFQ@i_397+1,f
  6035  0163  084A               	movf	OUTFQ@i_397+1,w
  6036  0164  3A80               	xorlw	128
  6037  0165  00FF               	movwf	127
  6038  0166  3080               	movlw	128
  6039  0167  027F               	subwf	127,w
  6040  0168  1D03               	skipz
  6041  0169  296C               	goto	u2465
  6042  016A  3011               	movlw	17
  6043  016B  0249               	subwf	OUTFQ@i_397,w
  6044  016C                     u2465:	
  6045  016C  1C03               	skipc
  6046  016D  2937               	goto	l2803
  6047  016E                     l2811:	
  6048                           
  6049                           ;FMCW.c: 148: }
  6050                           ;FMCW.c: 177: for (int i=0; i<17; i++)
  6051  016E  1283               	bcf	3,5	;RP0=0, select bank0
  6052  016F  1303               	bcf	3,6	;RP1=0, select bank0
  6053  0170  01CB               	clrf	OUTFQ@i_398
  6054  0171  01CC               	clrf	OUTFQ@i_398+1
  6055  0172  084C               	movf	OUTFQ@i_398+1,w
  6056  0173  3A80               	xorlw	128
  6057  0174  00FF               	movwf	127
  6058  0175  3080               	movlw	128
  6059  0176  027F               	subwf	127,w
  6060  0177  1D03               	skipz
  6061  0178  297B               	goto	u2475
  6062  0179  3011               	movlw	17
  6063  017A  024B               	subwf	OUTFQ@i_398,w
  6064  017B                     u2475:	
  6065  017B  1803               	btfsc	3,0
  6066  017C  29C4               	goto	l2829
  6067  017D                     l2817:	
  6068                           
  6069                           ;FMCW.c: 178: {
  6070                           ;FMCW.c: 179: if(Nprg_b[i] == 0)
  6071  017D  1283               	bcf	3,5	;RP0=0, select bank0
  6072  017E  1303               	bcf	3,6	;RP1=0, select bank0
  6073  017F  084B               	movf	OUTFQ@i_398,w
  6074  0180  00A0               	movwf	??_OUTFQ
  6075  0181  0720               	addwf	??_OUTFQ,w
  6076  0182  3E23               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6077  0183  0084               	movwf	4
  6078  0184  1383               	bcf	3,7	;select IRP bank0
  6079  0185  0800               	movf	0,w
  6080  0186  00A1               	movwf	??_OUTFQ+1
  6081  0187  0A84               	incf	4,f
  6082  0188  0800               	movf	0,w
  6083  0189  00A2               	movwf	??_OUTFQ+2
  6084  018A  0821               	movf	??_OUTFQ+1,w
  6085  018B  0422               	iorwf	??_OUTFQ+2,w
  6086  018C  1D03               	btfss	3,2
  6087  018D  2997               	goto	l2821
  6088                           
  6089                           ;FMCW.c: 180: {
  6090                           ;FMCW.c: 181: L_OUT(fmcwtxrx);
  6091  018E  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6092  018F  00F3               	movwf	L_OUT@fmcwtxrx+1
  6093  0190  0879               	movf	OUTFQ@fmcwtxrx,w
  6094  0191  00F2               	movwf	L_OUT@fmcwtxrx
  6095  0192  120A  158A  249A  120A  118A  	fcall	_L_OUT
  6096  0197                     l2821:	
  6097                           
  6098                           ;FMCW.c: 182: }
  6099                           ;FMCW.c: 183: if(Nprg_b[i] == 1)
  6100  0197  1283               	bcf	3,5	;RP0=0, select bank0
  6101  0198  1303               	bcf	3,6	;RP1=0, select bank0
  6102  0199  084B               	movf	OUTFQ@i_398,w
  6103  019A  00A0               	movwf	??_OUTFQ
  6104  019B  0720               	addwf	??_OUTFQ,w
  6105  019C  3E23               	addlw	(low (OUTFQ@Nprg_b| 0))& (0+255)
  6106  019D  0084               	movwf	4
  6107  019E  1383               	bcf	3,7	;select IRP bank0
  6108  019F  0800               	movf	0,w
  6109  01A0  00A1               	movwf	??_OUTFQ+1
  6110  01A1  0A84               	incf	4,f
  6111  01A2  0800               	movf	0,w
  6112  01A3  00A2               	movwf	??_OUTFQ+2
  6113  01A4  0321               	decf	??_OUTFQ+1,w
  6114  01A5  0422               	iorwf	??_OUTFQ+2,w
  6115  01A6  1D03               	btfss	3,2
  6116  01A7  29B1               	goto	l2825
  6117                           
  6118                           ;FMCW.c: 184: {
  6119                           ;FMCW.c: 185: H_OUT(fmcwtxrx);
  6120  01A8  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6121  01A9  00F3               	movwf	H_OUT@fmcwtxrx+1
  6122  01AA  0879               	movf	OUTFQ@fmcwtxrx,w
  6123  01AB  00F2               	movwf	H_OUT@fmcwtxrx
  6124  01AC  120A  158A  2454  120A  118A  	fcall	_H_OUT
  6125  01B1                     l2825:	
  6126  01B1  3001               	movlw	1
  6127  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  6128  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  6129  01B4  07CB               	addwf	OUTFQ@i_398,f
  6130  01B5  1803               	skipnc
  6131  01B6  0ACC               	incf	OUTFQ@i_398+1,f
  6132  01B7  3000               	movlw	0
  6133  01B8  07CC               	addwf	OUTFQ@i_398+1,f
  6134  01B9  084C               	movf	OUTFQ@i_398+1,w
  6135  01BA  3A80               	xorlw	128
  6136  01BB  00FF               	movwf	127
  6137  01BC  3080               	movlw	128
  6138  01BD  027F               	subwf	127,w
  6139  01BE  1D03               	skipz
  6140  01BF  29C2               	goto	u2505
  6141  01C0  3011               	movlw	17
  6142  01C1  024B               	subwf	OUTFQ@i_398,w
  6143  01C2                     u2505:	
  6144  01C2  1C03               	skipc
  6145  01C3  297D               	goto	l2817
  6146  01C4                     l2829:	
  6147                           
  6148                           ;FMCW.c: 186: }
  6149                           ;FMCW.c: 187: }
  6150                           ;FMCW.c: 190: H_OUT(fmcwtxrx);
  6151  01C4  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6152  01C5  00F3               	movwf	H_OUT@fmcwtxrx+1
  6153  01C6  0879               	movf	OUTFQ@fmcwtxrx,w
  6154  01C7  00F2               	movwf	H_OUT@fmcwtxrx
  6155  01C8  120A  158A  2454  120A  118A  	fcall	_H_OUT
  6156                           
  6157                           ;FMCW.c: 191: L_OUT(fmcwtxrx);
  6158  01CD  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6159  01CE  00F3               	movwf	L_OUT@fmcwtxrx+1
  6160  01CF  0879               	movf	OUTFQ@fmcwtxrx,w
  6161  01D0  00F2               	movwf	L_OUT@fmcwtxrx
  6162  01D1  120A  158A  249A  120A  118A  	fcall	_L_OUT
  6163                           
  6164                           ;FMCW.c: 194: STBOUT(fmcwtxrx);
  6165  01D6  087A               	movf	OUTFQ@fmcwtxrx+1,w
  6166  01D7  00F3               	movwf	STBOUT@fmcwtxrx+1
  6167  01D8  0879               	movf	OUTFQ@fmcwtxrx,w
  6168  01D9  00F2               	movwf	STBOUT@fmcwtxrx
  6169  01DA  120A  158A  23B8   	fcall	_STBOUT
  6170  01DD  0008               	return
  6171  01DE                     __end_of_OUTFQ:	
  6172                           
  6173                           	psect	text24
  6174  0D27                     __ptext24:	
  6175 ;; *************** function ___awdiv *****************
  6176 ;; Defined at:
  6177 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;  divisor         2    0[COMMON] int 
  6180 ;;  dividend        2    2[COMMON] int 
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;  quotient        2    7[COMMON] int 
  6183 ;;  sign            1    6[COMMON] unsigned char 
  6184 ;;  counter         1    5[COMMON] unsigned char 
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  2    0[COMMON] int 
  6187 ;; Registers used:
  6188 ;;		wreg, status,2, status,0
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6194 ;;      Params:         4       0       0       0       0
  6195 ;;      Locals:         4       0       0       0       0
  6196 ;;      Temps:          1       0       0       0       0
  6197 ;;      Totals:         9       0       0       0       0
  6198 ;;Total ram usage:        9 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; This function calls:
  6201 ;;		Nothing
  6202 ;; This function is called by:
  6203 ;;		_OUTFQ
  6204 ;;		_RFDOUT
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           
  6209                           ;psect for function ___awdiv
  6210  0D27                     ___awdiv:	
  6211                           
  6212                           ;incstack = 0
  6213                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6214  0D27  01F6               	clrf	___awdiv@sign
  6215  0D28  1FF1               	btfss	___awdiv@divisor+1,7
  6216  0D29  2D31               	goto	l2273
  6217  0D2A  09F0               	comf	___awdiv@divisor,f
  6218  0D2B  09F1               	comf	___awdiv@divisor+1,f
  6219  0D2C  0AF0               	incf	___awdiv@divisor,f
  6220  0D2D  1903               	skipnz
  6221  0D2E  0AF1               	incf	___awdiv@divisor+1,f
  6222  0D2F  01F6               	clrf	___awdiv@sign
  6223  0D30  0AF6               	incf	___awdiv@sign,f
  6224  0D31                     l2273:	
  6225  0D31  1FF3               	btfss	___awdiv@dividend+1,7
  6226  0D32  2D3C               	goto	l2279
  6227  0D33  09F2               	comf	___awdiv@dividend,f
  6228  0D34  09F3               	comf	___awdiv@dividend+1,f
  6229  0D35  0AF2               	incf	___awdiv@dividend,f
  6230  0D36  1903               	skipnz
  6231  0D37  0AF3               	incf	___awdiv@dividend+1,f
  6232  0D38  3001               	movlw	1
  6233  0D39  00F4               	movwf	??___awdiv
  6234  0D3A  0874               	movf	??___awdiv,w
  6235  0D3B  06F6               	xorwf	___awdiv@sign,f
  6236  0D3C                     l2279:	
  6237  0D3C  01F7               	clrf	___awdiv@quotient
  6238  0D3D  01F8               	clrf	___awdiv@quotient+1
  6239  0D3E  0870               	movf	___awdiv@divisor,w
  6240  0D3F  0471               	iorwf	___awdiv@divisor+1,w
  6241  0D40  1903               	btfsc	3,2
  6242  0D41  2D73               	goto	l2301
  6243  0D42  01F5               	clrf	___awdiv@counter
  6244  0D43  0AF5               	incf	___awdiv@counter,f
  6245  0D44                     l2289:	
  6246  0D44  1BF1               	btfsc	___awdiv@divisor+1,7
  6247  0D45  2D52               	goto	l2291
  6248  0D46  3001               	movlw	1
  6249  0D47                     u1685:	
  6250  0D47  1003               	clrc
  6251  0D48  0DF0               	rlf	___awdiv@divisor,f
  6252  0D49  0DF1               	rlf	___awdiv@divisor+1,f
  6253  0D4A  3EFF               	addlw	-1
  6254  0D4B  1D03               	skipz
  6255  0D4C  2D47               	goto	u1685
  6256  0D4D  3001               	movlw	1
  6257  0D4E  00F4               	movwf	??___awdiv
  6258  0D4F  0874               	movf	??___awdiv,w
  6259  0D50  07F5               	addwf	___awdiv@counter,f
  6260  0D51  2D44               	goto	l2289
  6261  0D52                     l2291:	
  6262  0D52  3001               	movlw	1
  6263  0D53                     u1705:	
  6264  0D53  1003               	clrc
  6265  0D54  0DF7               	rlf	___awdiv@quotient,f
  6266  0D55  0DF8               	rlf	___awdiv@quotient+1,f
  6267  0D56  3EFF               	addlw	-1
  6268  0D57  1D03               	skipz
  6269  0D58  2D53               	goto	u1705
  6270  0D59  0871               	movf	___awdiv@divisor+1,w
  6271  0D5A  0273               	subwf	___awdiv@dividend+1,w
  6272  0D5B  1D03               	skipz
  6273  0D5C  2D5F               	goto	u1715
  6274  0D5D  0870               	movf	___awdiv@divisor,w
  6275  0D5E  0272               	subwf	___awdiv@dividend,w
  6276  0D5F                     u1715:	
  6277  0D5F  1C03               	skipc
  6278  0D60  2D68               	goto	l2297
  6279  0D61  0870               	movf	___awdiv@divisor,w
  6280  0D62  02F2               	subwf	___awdiv@dividend,f
  6281  0D63  0871               	movf	___awdiv@divisor+1,w
  6282  0D64  1C03               	skipc
  6283  0D65  03F3               	decf	___awdiv@dividend+1,f
  6284  0D66  02F3               	subwf	___awdiv@dividend+1,f
  6285  0D67  1477               	bsf	___awdiv@quotient,0
  6286  0D68                     l2297:	
  6287  0D68  3001               	movlw	1
  6288  0D69                     u1725:	
  6289  0D69  1003               	clrc
  6290  0D6A  0CF1               	rrf	___awdiv@divisor+1,f
  6291  0D6B  0CF0               	rrf	___awdiv@divisor,f
  6292  0D6C  3EFF               	addlw	-1
  6293  0D6D  1D03               	skipz
  6294  0D6E  2D69               	goto	u1725
  6295  0D6F  3001               	movlw	1
  6296  0D70  02F5               	subwf	___awdiv@counter,f
  6297  0D71  1D03               	btfss	3,2
  6298  0D72  2D52               	goto	l2291
  6299  0D73                     l2301:	
  6300  0D73  0876               	movf	___awdiv@sign,w
  6301  0D74  1903               	btfsc	3,2
  6302  0D75  2D7B               	goto	l2305
  6303  0D76  09F7               	comf	___awdiv@quotient,f
  6304  0D77  09F8               	comf	___awdiv@quotient+1,f
  6305  0D78  0AF7               	incf	___awdiv@quotient,f
  6306  0D79  1903               	skipnz
  6307  0D7A  0AF8               	incf	___awdiv@quotient+1,f
  6308  0D7B                     l2305:	
  6309  0D7B  0878               	movf	___awdiv@quotient+1,w
  6310  0D7C  00F1               	movwf	?___awdiv+1
  6311  0D7D  0877               	movf	___awdiv@quotient,w
  6312  0D7E  00F0               	movwf	?___awdiv
  6313  0D7F  0008               	return
  6314  0D80                     __end_of___awdiv:	
  6315                           
  6316                           	psect	text25
  6317  0F01                     __ptext25:	
  6318 ;; *************** function _OPINIT *****************
  6319 ;; Defined at:
  6320 ;;		line 246 in file "FMCW.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  fmcwtxrx        2    4[COMMON] int 
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;		None
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  1    wreg      void 
  6327 ;; Registers used:
  6328 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6334 ;;      Params:         2       0       0       0       0
  6335 ;;      Locals:         0       0       0       0       0
  6336 ;;      Temps:          0       0       0       0       0
  6337 ;;      Totals:         2       0       0       0       0
  6338 ;;Total ram usage:        2 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    2
  6341 ;; This function calls:
  6342 ;;		_H_OUT
  6343 ;;		_L_OUT
  6344 ;;		_STBOUT
  6345 ;; This function is called by:
  6346 ;;		_FMTX
  6347 ;;		_CWTX
  6348 ;;		_FMRX
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           
  6353                           ;psect for function _OPINIT
  6354  0F01                     _OPINIT:	
  6355                           
  6356                           ;FMCW.c: 248: L_OUT(fmcwtxrx);
  6357                           
  6358                           ;incstack = 0
  6359                           ; Regs used in _OPINIT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6360  0F01  0875               	movf	OPINIT@fmcwtxrx+1,w
  6361  0F02  00F3               	movwf	L_OUT@fmcwtxrx+1
  6362  0F03  0874               	movf	OPINIT@fmcwtxrx,w
  6363  0F04  00F2               	movwf	L_OUT@fmcwtxrx
  6364  0F05  120A  158A  249A  120A  158A  	fcall	_L_OUT
  6365                           
  6366                           ;FMCW.c: 249: L_OUT(fmcwtxrx);
  6367  0F0A  0875               	movf	OPINIT@fmcwtxrx+1,w
  6368  0F0B  00F3               	movwf	L_OUT@fmcwtxrx+1
  6369  0F0C  0874               	movf	OPINIT@fmcwtxrx,w
  6370  0F0D  00F2               	movwf	L_OUT@fmcwtxrx
  6371  0F0E  120A  158A  249A  120A  158A  	fcall	_L_OUT
  6372                           
  6373                           ;FMCW.c: 250: L_OUT(fmcwtxrx);
  6374  0F13  0875               	movf	OPINIT@fmcwtxrx+1,w
  6375  0F14  00F3               	movwf	L_OUT@fmcwtxrx+1
  6376  0F15  0874               	movf	OPINIT@fmcwtxrx,w
  6377  0F16  00F2               	movwf	L_OUT@fmcwtxrx
  6378  0F17  120A  158A  249A  120A  158A  	fcall	_L_OUT
  6379                           
  6380                           ;FMCW.c: 251: H_OUT(fmcwtxrx);
  6381  0F1C  0875               	movf	OPINIT@fmcwtxrx+1,w
  6382  0F1D  00F3               	movwf	H_OUT@fmcwtxrx+1
  6383  0F1E  0874               	movf	OPINIT@fmcwtxrx,w
  6384  0F1F  00F2               	movwf	H_OUT@fmcwtxrx
  6385  0F20  120A  158A  2454  120A  158A  	fcall	_H_OUT
  6386                           
  6387                           ;FMCW.c: 252: H_OUT(fmcwtxrx);
  6388  0F25  0875               	movf	OPINIT@fmcwtxrx+1,w
  6389  0F26  00F3               	movwf	H_OUT@fmcwtxrx+1
  6390  0F27  0874               	movf	OPINIT@fmcwtxrx,w
  6391  0F28  00F2               	movwf	H_OUT@fmcwtxrx
  6392  0F29  120A  158A  2454  120A  158A  	fcall	_H_OUT
  6393                           
  6394                           ;FMCW.c: 253: L_OUT(fmcwtxrx);
  6395  0F2E  0875               	movf	OPINIT@fmcwtxrx+1,w
  6396  0F2F  00F3               	movwf	L_OUT@fmcwtxrx+1
  6397  0F30  0874               	movf	OPINIT@fmcwtxrx,w
  6398  0F31  00F2               	movwf	L_OUT@fmcwtxrx
  6399  0F32  120A  158A  249A  120A  158A  	fcall	_L_OUT
  6400                           
  6401                           ;FMCW.c: 254: L_OUT(fmcwtxrx);
  6402  0F37  0875               	movf	OPINIT@fmcwtxrx+1,w
  6403  0F38  00F3               	movwf	L_OUT@fmcwtxrx+1
  6404  0F39  0874               	movf	OPINIT@fmcwtxrx,w
  6405  0F3A  00F2               	movwf	L_OUT@fmcwtxrx
  6406  0F3B  120A  158A  249A  120A  158A  	fcall	_L_OUT
  6407                           
  6408                           ;FMCW.c: 255: L_OUT(fmcwtxrx);
  6409  0F40  0875               	movf	OPINIT@fmcwtxrx+1,w
  6410  0F41  00F3               	movwf	L_OUT@fmcwtxrx+1
  6411  0F42  0874               	movf	OPINIT@fmcwtxrx,w
  6412  0F43  00F2               	movwf	L_OUT@fmcwtxrx
  6413  0F44  120A  158A  249A  120A  158A  	fcall	_L_OUT
  6414                           
  6415                           ;FMCW.c: 256: L_OUT(fmcwtxrx);
  6416  0F49  0875               	movf	OPINIT@fmcwtxrx+1,w
  6417  0F4A  00F3               	movwf	L_OUT@fmcwtxrx+1
  6418  0F4B  0874               	movf	OPINIT@fmcwtxrx,w
  6419  0F4C  00F2               	movwf	L_OUT@fmcwtxrx
  6420  0F4D  120A  158A  249A  120A  158A  	fcall	_L_OUT
  6421                           
  6422                           ;FMCW.c: 257: L_OUT(fmcwtxrx);
  6423  0F52  0875               	movf	OPINIT@fmcwtxrx+1,w
  6424  0F53  00F3               	movwf	L_OUT@fmcwtxrx+1
  6425  0F54  0874               	movf	OPINIT@fmcwtxrx,w
  6426  0F55  00F2               	movwf	L_OUT@fmcwtxrx
  6427  0F56  120A  158A  249A  120A  158A  	fcall	_L_OUT
  6428                           
  6429                           ;FMCW.c: 258: H_OUT(fmcwtxrx);
  6430  0F5B  0875               	movf	OPINIT@fmcwtxrx+1,w
  6431  0F5C  00F3               	movwf	H_OUT@fmcwtxrx+1
  6432  0F5D  0874               	movf	OPINIT@fmcwtxrx,w
  6433  0F5E  00F2               	movwf	H_OUT@fmcwtxrx
  6434  0F5F  120A  158A  2454  120A  158A  	fcall	_H_OUT
  6435                           
  6436                           ;FMCW.c: 261: L_OUT(fmcwtxrx);
  6437  0F64  0875               	movf	OPINIT@fmcwtxrx+1,w
  6438  0F65  00F3               	movwf	L_OUT@fmcwtxrx+1
  6439  0F66  0874               	movf	OPINIT@fmcwtxrx,w
  6440  0F67  00F2               	movwf	L_OUT@fmcwtxrx
  6441  0F68  120A  158A  249A  120A  158A  	fcall	_L_OUT
  6442                           
  6443                           ;FMCW.c: 262: L_OUT(fmcwtxrx);
  6444  0F6D  0875               	movf	OPINIT@fmcwtxrx+1,w
  6445  0F6E  00F3               	movwf	L_OUT@fmcwtxrx+1
  6446  0F6F  0874               	movf	OPINIT@fmcwtxrx,w
  6447  0F70  00F2               	movwf	L_OUT@fmcwtxrx
  6448  0F71  120A  158A  249A  120A  158A  	fcall	_L_OUT
  6449                           
  6450                           ;FMCW.c: 265: STBOUT(fmcwtxrx);
  6451  0F76  0875               	movf	OPINIT@fmcwtxrx+1,w
  6452  0F77  00F3               	movwf	STBOUT@fmcwtxrx+1
  6453  0F78  0874               	movf	OPINIT@fmcwtxrx,w
  6454  0F79  00F2               	movwf	STBOUT@fmcwtxrx
  6455  0F7A  120A  158A  23B8   	fcall	_STBOUT
  6456  0F7D  0008               	return
  6457  0F7E                     __end_of_OPINIT:	
  6458                           
  6459                           	psect	text26
  6460  0BB8                     __ptext26:	
  6461 ;; *************** function _STBOUT *****************
  6462 ;; Defined at:
  6463 ;;		line 107 in file "FMCW.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;  fmcwtxrx        2    2[COMMON] int 
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;		None
  6468 ;; Return value:  Size  Location     Type
  6469 ;;                  1    wreg      void 
  6470 ;; Registers used:
  6471 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6472 ;; Tracked objects:
  6473 ;;		On entry : 0/0
  6474 ;;		On exit  : 0/0
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6477 ;;      Params:         2       0       0       0       0
  6478 ;;      Locals:         0       0       0       0       0
  6479 ;;      Temps:          0       0       0       0       0
  6480 ;;      Totals:         2       0       0       0       0
  6481 ;;Total ram usage:        2 bytes
  6482 ;; Hardware stack levels used:    1
  6483 ;; Hardware stack levels required when called:    1
  6484 ;; This function calls:
  6485 ;;		__NOP
  6486 ;; This function is called by:
  6487 ;;		_OUTFQ
  6488 ;;		_RFDOUT
  6489 ;;		_OPINIT
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           
  6494                           ;psect for function _STBOUT
  6495  0BB8                     _STBOUT:	
  6496                           
  6497                           ;FMCW.c: 108: if(fmcwtxrx == 1)
  6498                           
  6499                           ;incstack = 0
  6500                           ; Regs used in _STBOUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6501  0BB8  0372               	decf	STBOUT@fmcwtxrx,w
  6502  0BB9  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  6503  0BBA  1D03               	btfss	3,2
  6504  0BBB  2BC7               	goto	l2249
  6505                           
  6506                           ;FMCW.c: 109: {
  6507                           ;FMCW.c: 110: PORTAbits.RA5 = 1;
  6508  0BBC  1283               	bcf	3,5	;RP0=0, select bank0
  6509  0BBD  1303               	bcf	3,6	;RP1=0, select bank0
  6510  0BBE  1685               	bsf	5,5	;volatile
  6511                           
  6512                           ;FMCW.c: 111: _NOP();
  6513  0BBF  120A  158A  22C6  120A  158A  	fcall	__NOP
  6514                           
  6515                           ;FMCW.c: 112: PORTAbits.RA5 = 0;
  6516  0BC4  1283               	bcf	3,5	;RP0=0, select bank0
  6517  0BC5  1303               	bcf	3,6	;RP1=0, select bank0
  6518  0BC6  1285               	bcf	5,5	;volatile
  6519  0BC7                     l2249:	
  6520                           
  6521                           ;FMCW.c: 113: }
  6522                           ;FMCW.c: 114: if(fmcwtxrx == 2)
  6523  0BC7  3002               	movlw	2
  6524  0BC8  0672               	xorwf	STBOUT@fmcwtxrx,w
  6525  0BC9  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  6526  0BCA  1D03               	btfss	3,2
  6527  0BCB  2BD7               	goto	l2257
  6528                           
  6529                           ;FMCW.c: 115: {
  6530                           ;FMCW.c: 116: PORTDbits.RD0 = 1;
  6531  0BCC  1283               	bcf	3,5	;RP0=0, select bank0
  6532  0BCD  1303               	bcf	3,6	;RP1=0, select bank0
  6533  0BCE  1408               	bsf	8,0	;volatile
  6534                           
  6535                           ;FMCW.c: 117: _NOP();
  6536  0BCF  120A  158A  22C6  120A  158A  	fcall	__NOP
  6537                           
  6538                           ;FMCW.c: 118: PORTDbits.RD0 = 0;
  6539  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  6540  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  6541  0BD6  1008               	bcf	8,0	;volatile
  6542  0BD7                     l2257:	
  6543                           
  6544                           ;FMCW.c: 119: }
  6545                           ;FMCW.c: 120: if(fmcwtxrx == 3)
  6546  0BD7  3003               	movlw	3
  6547  0BD8  0672               	xorwf	STBOUT@fmcwtxrx,w
  6548  0BD9  0473               	iorwf	STBOUT@fmcwtxrx+1,w
  6549  0BDA  1D03               	btfss	3,2
  6550  0BDB  0008               	return
  6551                           
  6552                           ;FMCW.c: 121: {
  6553                           ;FMCW.c: 122: PORTAbits.RA4 = 1;
  6554  0BDC  1283               	bcf	3,5	;RP0=0, select bank0
  6555  0BDD  1303               	bcf	3,6	;RP1=0, select bank0
  6556  0BDE  1605               	bsf	5,4	;volatile
  6557                           
  6558                           ;FMCW.c: 123: _NOP();
  6559  0BDF  120A  158A  22C6   	fcall	__NOP
  6560                           
  6561                           ;FMCW.c: 124: PORTAbits.RA4 = 0;
  6562  0BE2  1283               	bcf	3,5	;RP0=0, select bank0
  6563  0BE3  1303               	bcf	3,6	;RP1=0, select bank0
  6564  0BE4  1205               	bcf	5,4	;volatile
  6565  0BE5  0008               	return
  6566  0BE6                     __end_of_STBOUT:	
  6567                           
  6568                           	psect	text27
  6569  0C9A                     __ptext27:	
  6570 ;; *************** function _L_OUT *****************
  6571 ;; Defined at:
  6572 ;;		line 40 in file "FMCW.c"
  6573 ;; Parameters:    Size  Location     Type
  6574 ;;  fmcwtxrx        2    2[COMMON] int 
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;		None
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  1    wreg      void 
  6579 ;; Registers used:
  6580 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6586 ;;      Params:         2       0       0       0       0
  6587 ;;      Locals:         0       0       0       0       0
  6588 ;;      Temps:          0       0       0       0       0
  6589 ;;      Totals:         2       0       0       0       0
  6590 ;;Total ram usage:        2 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:    1
  6593 ;; This function calls:
  6594 ;;		__NOP
  6595 ;; This function is called by:
  6596 ;;		_OUTFQ
  6597 ;;		_RFDOUT
  6598 ;;		_OPINIT
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           
  6603                           ;psect for function _L_OUT
  6604  0C9A                     _L_OUT:	
  6605                           
  6606                           ;FMCW.c: 41: if(fmcwtxrx == 1)
  6607                           
  6608                           ;incstack = 0
  6609                           ; Regs used in _L_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6610  0C9A  0372               	decf	L_OUT@fmcwtxrx,w
  6611  0C9B  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  6612  0C9C  1D03               	btfss	3,2
  6613  0C9D  2CB1               	goto	l2191
  6614                           
  6615                           ;FMCW.c: 42: {
  6616                           ;FMCW.c: 43: PORTEbits.RE0 = 0;
  6617  0C9E  1283               	bcf	3,5	;RP0=0, select bank0
  6618  0C9F  1303               	bcf	3,6	;RP1=0, select bank0
  6619  0CA0  1009               	bcf	9,0	;volatile
  6620                           
  6621                           ;FMCW.c: 44: _NOP();
  6622  0CA1  120A  158A  22C6  120A  158A  	fcall	__NOP
  6623                           
  6624                           ;FMCW.c: 45: PORTEbits.RE1 = 1;
  6625  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  6626  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  6627  0CA8  1489               	bsf	9,1	;volatile
  6628                           
  6629                           ;FMCW.c: 46: _NOP();
  6630  0CA9  120A  158A  22C6  120A  158A  	fcall	__NOP
  6631                           
  6632                           ;FMCW.c: 47: PORTEbits.RE1 = 0;
  6633  0CAE  1283               	bcf	3,5	;RP0=0, select bank0
  6634  0CAF  1303               	bcf	3,6	;RP1=0, select bank0
  6635  0CB0  1089               	bcf	9,1	;volatile
  6636  0CB1                     l2191:	
  6637                           
  6638                           ;FMCW.c: 48: }
  6639                           ;FMCW.c: 49: if(fmcwtxrx == 2)
  6640  0CB1  3002               	movlw	2
  6641  0CB2  0672               	xorwf	L_OUT@fmcwtxrx,w
  6642  0CB3  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  6643  0CB4  1D03               	btfss	3,2
  6644  0CB5  2CC9               	goto	l2201
  6645                           
  6646                           ;FMCW.c: 50: {
  6647                           ;FMCW.c: 51: PORTDbits.RD1 = 0;
  6648  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  6649  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  6650  0CB8  1088               	bcf	8,1	;volatile
  6651                           
  6652                           ;FMCW.c: 52: _NOP();
  6653  0CB9  120A  158A  22C6  120A  158A  	fcall	__NOP
  6654                           
  6655                           ;FMCW.c: 53: PORTDbits.RD2 = 1;
  6656  0CBE  1283               	bcf	3,5	;RP0=0, select bank0
  6657  0CBF  1303               	bcf	3,6	;RP1=0, select bank0
  6658  0CC0  1508               	bsf	8,2	;volatile
  6659                           
  6660                           ;FMCW.c: 54: _NOP();
  6661  0CC1  120A  158A  22C6  120A  158A  	fcall	__NOP
  6662                           
  6663                           ;FMCW.c: 55: PORTDbits.RD2 = 0;
  6664  0CC6  1283               	bcf	3,5	;RP0=0, select bank0
  6665  0CC7  1303               	bcf	3,6	;RP1=0, select bank0
  6666  0CC8  1108               	bcf	8,2	;volatile
  6667  0CC9                     l2201:	
  6668                           
  6669                           ;FMCW.c: 56: }
  6670                           ;FMCW.c: 57: if(fmcwtxrx == 3)
  6671  0CC9  3003               	movlw	3
  6672  0CCA  0672               	xorwf	L_OUT@fmcwtxrx,w
  6673  0CCB  0473               	iorwf	L_OUT@fmcwtxrx+1,w
  6674  0CCC  1D03               	btfss	3,2
  6675  0CCD  0008               	return
  6676                           
  6677                           ;FMCW.c: 58: {
  6678                           ;FMCW.c: 59: PORTAbits.RA3 = 0;
  6679  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  6680  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  6681  0CD0  1185               	bcf	5,3	;volatile
  6682                           
  6683                           ;FMCW.c: 60: _NOP();
  6684  0CD1  120A  158A  22C6  120A  158A  	fcall	__NOP
  6685                           
  6686                           ;FMCW.c: 61: PORTAbits.RA2 = 1;
  6687  0CD6  1283               	bcf	3,5	;RP0=0, select bank0
  6688  0CD7  1303               	bcf	3,6	;RP1=0, select bank0
  6689  0CD8  1505               	bsf	5,2	;volatile
  6690                           
  6691                           ;FMCW.c: 62: _NOP();
  6692  0CD9  120A  158A  22C6   	fcall	__NOP
  6693                           
  6694                           ;FMCW.c: 63: PORTAbits.RA2 = 0;
  6695  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  6696  0CDD  1303               	bcf	3,6	;RP1=0, select bank0
  6697  0CDE  1105               	bcf	5,2	;volatile
  6698  0CDF  0008               	return
  6699  0CE0                     __end_of_L_OUT:	
  6700                           
  6701                           	psect	text28
  6702  0C54                     __ptext28:	
  6703 ;; *************** function _H_OUT *****************
  6704 ;; Defined at:
  6705 ;;		line 74 in file "FMCW.c"
  6706 ;; Parameters:    Size  Location     Type
  6707 ;;  fmcwtxrx        2    2[COMMON] int 
  6708 ;; Auto vars:     Size  Location     Type
  6709 ;;		None
  6710 ;; Return value:  Size  Location     Type
  6711 ;;                  1    wreg      void 
  6712 ;; Registers used:
  6713 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6714 ;; Tracked objects:
  6715 ;;		On entry : 0/0
  6716 ;;		On exit  : 0/0
  6717 ;;		Unchanged: 0/0
  6718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6719 ;;      Params:         2       0       0       0       0
  6720 ;;      Locals:         0       0       0       0       0
  6721 ;;      Temps:          0       0       0       0       0
  6722 ;;      Totals:         2       0       0       0       0
  6723 ;;Total ram usage:        2 bytes
  6724 ;; Hardware stack levels used:    1
  6725 ;; Hardware stack levels required when called:    1
  6726 ;; This function calls:
  6727 ;;		__NOP
  6728 ;; This function is called by:
  6729 ;;		_OUTFQ
  6730 ;;		_RFDOUT
  6731 ;;		_OPINIT
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           
  6736                           ;psect for function _H_OUT
  6737  0C54                     _H_OUT:	
  6738                           
  6739                           ;FMCW.c: 75: if(fmcwtxrx == 1)
  6740                           
  6741                           ;incstack = 0
  6742                           ; Regs used in _H_OUT: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6743  0C54  0372               	decf	H_OUT@fmcwtxrx,w
  6744  0C55  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  6745  0C56  1D03               	btfss	3,2
  6746  0C57  2C6B               	goto	l2221
  6747                           
  6748                           ;FMCW.c: 76: {
  6749                           ;FMCW.c: 77: PORTEbits.RE0 = 1;
  6750  0C58  1283               	bcf	3,5	;RP0=0, select bank0
  6751  0C59  1303               	bcf	3,6	;RP1=0, select bank0
  6752  0C5A  1409               	bsf	9,0	;volatile
  6753                           
  6754                           ;FMCW.c: 78: _NOP();
  6755  0C5B  120A  158A  22C6  120A  158A  	fcall	__NOP
  6756                           
  6757                           ;FMCW.c: 79: PORTEbits.RE1 = 1;
  6758  0C60  1283               	bcf	3,5	;RP0=0, select bank0
  6759  0C61  1303               	bcf	3,6	;RP1=0, select bank0
  6760  0C62  1489               	bsf	9,1	;volatile
  6761                           
  6762                           ;FMCW.c: 80: _NOP();
  6763  0C63  120A  158A  22C6  120A  158A  	fcall	__NOP
  6764                           
  6765                           ;FMCW.c: 81: PORTEbits.RE1 = 0;
  6766  0C68  1283               	bcf	3,5	;RP0=0, select bank0
  6767  0C69  1303               	bcf	3,6	;RP1=0, select bank0
  6768  0C6A  1089               	bcf	9,1	;volatile
  6769  0C6B                     l2221:	
  6770                           
  6771                           ;FMCW.c: 82: }
  6772                           ;FMCW.c: 83: if(fmcwtxrx == 2)
  6773  0C6B  3002               	movlw	2
  6774  0C6C  0672               	xorwf	H_OUT@fmcwtxrx,w
  6775  0C6D  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  6776  0C6E  1D03               	btfss	3,2
  6777  0C6F  2C83               	goto	l2231
  6778                           
  6779                           ;FMCW.c: 84: {
  6780                           ;FMCW.c: 85: PORTDbits.RD1 = 1;
  6781  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  6782  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  6783  0C72  1488               	bsf	8,1	;volatile
  6784                           
  6785                           ;FMCW.c: 86: _NOP();
  6786  0C73  120A  158A  22C6  120A  158A  	fcall	__NOP
  6787                           
  6788                           ;FMCW.c: 87: PORTDbits.RD2 = 1;
  6789  0C78  1283               	bcf	3,5	;RP0=0, select bank0
  6790  0C79  1303               	bcf	3,6	;RP1=0, select bank0
  6791  0C7A  1508               	bsf	8,2	;volatile
  6792                           
  6793                           ;FMCW.c: 88: _NOP();
  6794  0C7B  120A  158A  22C6  120A  158A  	fcall	__NOP
  6795                           
  6796                           ;FMCW.c: 89: PORTDbits.RD2 = 0;
  6797  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  6798  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  6799  0C82  1108               	bcf	8,2	;volatile
  6800  0C83                     l2231:	
  6801                           
  6802                           ;FMCW.c: 90: }
  6803                           ;FMCW.c: 91: if(fmcwtxrx == 3)
  6804  0C83  3003               	movlw	3
  6805  0C84  0672               	xorwf	H_OUT@fmcwtxrx,w
  6806  0C85  0473               	iorwf	H_OUT@fmcwtxrx+1,w
  6807  0C86  1D03               	btfss	3,2
  6808  0C87  0008               	return
  6809                           
  6810                           ;FMCW.c: 92: {
  6811                           ;FMCW.c: 93: PORTAbits.RA3 = 1;
  6812  0C88  1283               	bcf	3,5	;RP0=0, select bank0
  6813  0C89  1303               	bcf	3,6	;RP1=0, select bank0
  6814  0C8A  1585               	bsf	5,3	;volatile
  6815                           
  6816                           ;FMCW.c: 94: _NOP();
  6817  0C8B  120A  158A  22C6  120A  158A  	fcall	__NOP
  6818                           
  6819                           ;FMCW.c: 95: PORTAbits.RA2 = 1;
  6820  0C90  1283               	bcf	3,5	;RP0=0, select bank0
  6821  0C91  1303               	bcf	3,6	;RP1=0, select bank0
  6822  0C92  1505               	bsf	5,2	;volatile
  6823                           
  6824                           ;FMCW.c: 96: _NOP();
  6825  0C93  120A  158A  22C6   	fcall	__NOP
  6826                           
  6827                           ;FMCW.c: 97: PORTAbits.RA2 = 0;
  6828  0C96  1283               	bcf	3,5	;RP0=0, select bank0
  6829  0C97  1303               	bcf	3,6	;RP1=0, select bank0
  6830  0C98  1105               	bcf	5,2	;volatile
  6831  0C99  0008               	return
  6832  0C9A                     __end_of_H_OUT:	
  6833                           
  6834                           	psect	text29
  6835  0AC6                     __ptext29:	
  6836 ;; *************** function __NOP *****************
  6837 ;; Defined at:
  6838 ;;		line 354 in file "FMCW.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;		None
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  i               2    0[COMMON] int 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  1    wreg      void 
  6845 ;; Registers used:
  6846 ;;		wreg, status,2, btemp+1
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6852 ;;      Params:         0       0       0       0       0
  6853 ;;      Locals:         2       0       0       0       0
  6854 ;;      Temps:          0       0       0       0       0
  6855 ;;      Totals:         2       0       0       0       0
  6856 ;;Total ram usage:        2 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; This function calls:
  6859 ;;		Nothing
  6860 ;; This function is called by:
  6861 ;;		_L_OUT
  6862 ;;		_H_OUT
  6863 ;;		_STBOUT
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           
  6868                           ;psect for function __NOP
  6869  0AC6                     __NOP:	
  6870                           
  6871                           ;FMCW.c: 355: for(int i=0; i<5; i++){
  6872                           
  6873                           ;incstack = 0
  6874                           ; Regs used in __NOP: [wreg+status,2+btemp+1]
  6875  0AC6  01F0               	clrf	__NOP@i
  6876  0AC7  01F1               	clrf	__NOP@i+1
  6877  0AC8                     L8:	
  6878  0AC8  0871               	movf	__NOP@i+1,w
  6879  0AC9  3A80               	xorlw	128
  6880  0ACA  00FF               	movwf	127
  6881  0ACB  3080               	movlw	128
  6882  0ACC  027F               	subwf	127,w
  6883  0ACD  1D03               	skipz
  6884  0ACE  2AD1               	goto	u1495
  6885  0ACF  3005               	movlw	5
  6886  0AD0  0270               	subwf	__NOP@i,w
  6887  0AD1                     u1495:	
  6888  0AD1  1803               	btfsc	3,0
  6889  0AD2  0008               	return
  6890                           
  6891                           ;FMCW.c: 356: __nop();
  6892  0AD3  0000               	nop
  6893  0AD4  3001               	movlw	1
  6894  0AD5  07F0               	addwf	__NOP@i,f
  6895  0AD6  1803               	skipnc
  6896  0AD7  0AF1               	incf	__NOP@i+1,f
  6897  0AD8  3000               	movlw	0
  6898  0AD9  07F1               	addwf	__NOP@i+1,f
  6899  0ADA  2AC8               	goto	L8
  6900  0ADB                     __end_of__NOP:	
  6901  007E                     btemp	set	126	;btemp
  6902  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    2
    Data        12
    BSS         106
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      77
    BANK1            80      0      66
    BANK3            96      0      32
    BANK2            96      0       0

Pointer List with Targets:

    sp__EEPROM_Read	PTR unsigned char  size(1) Largest target is 32
		 -> EEPROMData(BANK3[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK1[16]), 

    main@dData	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK1[16]), 

    sp__ReceivePacket_data	PTR unsigned char  size(1) Largest target is 16
		 -> NULL(NULL[0]), dData(BANK1[16]), 


Critical Paths under _main in COMMON

    _TXOBC_waddress->_putch
    _ReceivePacket_data->_fcscheck
    _ReceivePacket_data->_waitFlag
    _waitFlag->_getbit
    _getdata->_getbit
    _NM_waddress->_putch
    _Init_I2C_M->___lldiv
    _FMTX->_OUTFQ
    _FMTX->_RFDOUT
    _FMRX->_OUTFQ
    _FMRX->_RFDOUT
    _EEPROM_Write->_I2C_Master_Write
    _CWTX->_OUTFQ
    _CWTX->_RFDOUT
    _RFDOUT->___awdiv
    _OUTFQ->___awdiv
    _OPINIT->_H_OUT
    _OPINIT->_L_OUT
    _OPINIT->_STBOUT
    _STBOUT->__NOP
    _L_OUT->__NOP
    _H_OUT->__NOP

Critical Paths under _main in BANK0

    _main->_CWTX
    _main->_FMRX
    _main->_FMTX
    _ReceivePacket_data->_waitFlag
    _FMTX->_OUTFQ
    _FMRX->_OUTFQ
    _CWTX->_OUTFQ

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   29333
                                             51 BANK0      6     6      0
                               _CWTX
                       _EEPROM_Write
                               _FMRX
                               _FMTX
                         _Init_I2C_M
                           _Init_MPU
                        _Init_SERIAL
                        _NM_waddress
                 _ReceivePacket_data
                          _Reset_EPS
                     _TXOBC_waddress
 ---------------------------------------------------------------------------------
 (1) _TXOBC_waddress                                       5     3      2     194
                                              1 COMMON     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _Reset_EPS                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReceivePacket_data                                   6     6      0    2691
                                             10 COMMON     2     2      0
                                             29 BANK0      4     4      0
                           _fcscheck
                            _getdata
                           _waitFlag
 ---------------------------------------------------------------------------------
 (2) _waitFlag                                            33    33      0    2205
                                              6 COMMON     4     4      0
                                              0 BANK0     29    29      0
                             _getbit
 ---------------------------------------------------------------------------------
 (2) _getdata                                             10    10      0     212
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                             _getbit
 ---------------------------------------------------------------------------------
 (3) _getbit                                               6     4      2      46
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) _fcscheck                                            10     8      2     161
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _NM_waddress                                          3     1      2     194
                                              1 COMMON     3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_SERIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_MPU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_I2C_M                                           8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _FMTX                                                 6     2      4    8331
                                             45 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _FMRX                                                 6     2      4    8331
                                             45 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         8     5      3     739
                                              2 COMMON     8     5      3
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     446
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CWTX                                                 6     2      4    8331
                                             45 BANK0      6     2      4
                             _OPINIT
                              _OUTFQ
                             _RFDOUT
 ---------------------------------------------------------------------------------
 (2) _RFDOUT                                              37    33      4    2913
                                              9 COMMON     4     0      4
                                              0 BANK0     33    33      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _OUTFQ                                               49    45      4    2914
                                              9 COMMON     4     0      4
                                              0 BANK0     45    45      0
                              _H_OUT
                              _L_OUT
                             _STBOUT
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     512
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _OPINIT                                               2     0      2    2075
                                              4 COMMON     2     0      2
                              _H_OUT
                              _L_OUT
                             _STBOUT
 ---------------------------------------------------------------------------------
 (3) _STBOUT                                               2     0      2     271
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _L_OUT                                                2     0      2     801
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (3) _H_OUT                                                2     0      2     536
                                              2 COMMON     2     0      2
                               __NOP
 ---------------------------------------------------------------------------------
 (4) __NOP                                                 2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CWTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _EEPROM_Write
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _FMRX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _FMTX
     _OPINIT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
     _OUTFQ
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
     _RFDOUT
       _H_OUT
         __NOP
       _L_OUT
         __NOP
       _STBOUT
         __NOP
       ___awdiv
   _Init_I2C_M
     ___lldiv
   _Init_MPU
   _Init_SERIAL
   _NM_waddress
     _putch
   _ReceivePacket_data
     _fcscheck
     _getdata
       _getbit
     _waitFlag
       _getbit
   _Reset_EPS
   _TXOBC_waddress
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      20       9       33.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      42       7       82.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     39      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      BD      12        0.0%
ABS                  0      0      BD       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 28 10:40:19 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l55 0A7F  
                  ___awdiv@sign 0076                              fsr 0004                             l322 033B  
                           l323 0328                             l173 0589                             l238 0FE5  
                           l372 0A8E                             _RA1 0029                             _RB2 0032  
                           _RC2 003A                             _RB4 0034                             _RB5 0035  
                           _RC5 003D                             _PEN 048A                    __CFG_CPD$OFF 0000  
                           _SEN 0488                             _RX9 00C6                             _TX9 04C6  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                  __CFG_LVP$OFF 0000                            l2201 0CC9                            l2221 0C6B  
                          l2301 0D73                            l2231 0C83                            l2305 0D7B  
                          l3043 0DB0                            l2171 0D15                            l2403 0459  
                          l3045 0DCA                            l2173 0D22                            l3205 02C1  
                          l2191 0CB1                            l2415 0487                            l2335 0381  
                          l2327 0359                            l2257 0BD7                            l2249 0BC7  
                          l2273 0D31                            l2505 0592                            l2441 04DD  
                          l2425 04A2                            l2345 039C                            l2329 0378  
                          l2291 0D52                            l2515 05AD                            l2451 04F8  
                          l2363 03DB                            l3219 0310                            l2621 06FB  
                          l2429 04AF                            l2373 03F6                            l2349 03A9  
                          l2279 0D3C                            l2607 06D3                            l2543 05F9  
                          l2519 05BA                            l2455 0505                            l3175 0247  
                          l2297 0D68                            l2289 0D44                            l2713 0E75  
                          l2633 0729                            l2617 06EE                            l2529 05D1  
                          l2481 055B                            l2377 0403                            l2811 016E  
                          l2803 0137                            l2707 0E64                            l2643 0744  
                          l2555 0627                            l2539 05EC                            l2467 0533  
                          l2821 0197                            l2741 0FAD                            l2717 0E80  
                          l2709 0E67                            l2581 067D                            l2565 0642  
                          l2477 054E                            l2389 0431                            l2727 0E44  
                          l2647 0751                            l2591 0698                            l2399 044C  
                          l3199 02B0                            l2825 01B1                            l2817 017D  
                          l2753 0FDE                            l2673 07A7                            l2569 064F  
                          l2843 0045                            l2747 0FCA                            l2755 0F8C  
                          l2659 077F                            l2595 06A5                            l2691 07D3  
                          l2499 0587                            l2829 01C4                            l2837 0029  
                          l2669 079A                            l2693 0352                            l2791 010C  
                          l2871 00CE                            l2863 009A                            l2767 0FFD  
                          l2857 008B                            l2849 0054                            l2867 00B4  
                          l2875 00E1                            l2797 0128                            l2885 0DED  
                          l2895 0E25                            l2887 0DFD                            l2983 0EF5  
                          l2991 0EFB                            l2977 0ECD                            l2899 0E32  
                          STR_1 0012                            STR_2 0012                            STR_3 0012  
                          STR_4 0012                            STR_5 0012                            STR_6 0012  
                          STR_7 000B                            STR_8 000B                            STR_9 000B  
                          _BRGH 04C2                            _CREN 00C4                            _FERR 00C2  
                          u2025 0570                            u2215 0710                            u2135 0664  
                          u3007 0C3E                            u3017 0C4C                            u3027 0B1B  
                          u1525 0D05                            u3037 0B2C                            u3047 0D09  
                          u2255 0766                            u2175 06BA                            u2095 060E  
                          u1705 0D53                            u2505 01C2                            u3057 0DD5  
                          u1715 0D5F                            u2435 010A                            u2515 0027  
                          u1725 0D69                            u2445 0126                            u2525 0043  
                          u2605 0DF1                            u1495 0AD1                            u2455 0135  
                          u2535 0052                            u2295 07BC                            _FMRX 0B60  
                          u2465 016C                            u2545 0089                            u2625 0DFF  
                          u1905 046E                            u1825 03C2                            u2475 017B  
                          u2555 0098                            u2635 0E14                            u2395 0F9A  
                          _FMTX 0B8C                            u1685 0D47                            u2645 0E26  
                          u2585 00DF                            u1945 04C4                            u1865 0418  
                          u2675 0ECB                            u2907 0210                            u2685 0EF3  
                          u2917 025A                            u2695 0BF8                            u2927 0277  
                          u1985 051A                            u2937 0293                            u2947 02CE  
                          _RCIE 0465                            _RCEN 048B                            _RCIF 0065  
                          _CWTX 0B34                            u2957 0309                            u2967 0331  
                          u2977 0343                            u2897 01E6                            u2987 0C22  
                          u2997 0C30                            _OERR 00C1                            _TMR1 000E  
                          _SPEN 00C7                            _RSEN 0489                            _SREN 00C5  
                          _TXIE 0464                            _TXEN 04C5                            _TXIF 0064  
                          _SYNC 04C4                            __NOP 0AC6  TXOBC_waddress@TXOBC_wad_header 0075  
                  __CFG_WRT$OFF 0000                            _main 01DE                     _NM_waddress 0AB4  
                 ??_Init_SERIAL 0070                            btemp 007E                   __CFG_BOREN$ON 0000  
                  getbit@oldbit 0065                     Init_I2C_M@c 0020                            start 0000  
  ReceivePacket_data@fcschecker 003D                   __CFG_IESO$OFF 0000                   __CFG_MCLRE$ON 0000  
          __end_of_EEPROM_Write 0DDD                           ?_FMRX 004D                           ?_FMTX 004D  
                         ?_CWTX 004D                ?_I2C_Master_Wait 0070                ?_I2C_Master_Stop 0070  
                         ?__NOP 0070                           ?_main 0070                           _ACKEN 048C  
                         _ACKDT 048D                 __end_of___awdiv 0D80                           STR_10 000B  
                         STR_11 000B                           STR_12 000B                   __CFG_WDTE$OFF 0000  
                         _ANSEL 0188                 __end_of___lldiv 0E3B                 ___awdiv@divisor 0070  
       __size_of_TXOBC_waddress 003A                 ___awdiv@counter 0075                           _RCREG 001A  
                         _SPBRG 0099                           _PORTA 0005                           _PORTB 0006  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _H_OUT 0C54                           _OUTFQ 00FB                           _TRISA 0085  
                         _TRISB 0086                           _TRISC 0087                           _TRISD 0088  
                         _TRISE 0089                           _L_OUT 0C9A                           _TXREG 0019  
                 __CFG_PWRTE$ON 0000                  __CFG_FCMEN$OFF 0000                           _dData 00D2  
               __end_of_getdata 0E9C                   getdata@dstuff 0022                           _putch 0A7E  
                         pclath 000A                           status 0003                           wtemp0 007E  
                    _Init_I2C_M 0BE6                EEPROM_Write@data 0074      __end_of_ReceivePacket_data 0F01  
                  __end_of_FMRX 0B8C                    __end_of_FMTX 0BB8                    __end_of_CWTX 0B60  
                  __end_of__NOP 0ADB                 __initialization 07D6                    __end_of_main 034A  
           __end_of_Init_SERIAL 0AF4                __end_of_Init_MPU 0B11                          ??_FMRX 007D  
                        ??_FMTX 007D                          ??_CWTX 007D                          ??__NOP 0070  
                        ??_main 0053                          ?_H_OUT 0072        EEPROM_Write@high_address 0072  
                        ?_OUTFQ 0079                          ?_L_OUT 0072               ?_I2C_Master_Start 0070  
             ?_I2C_Master_Write 0070                          OUTFQ@i 0047              ??_I2C_Master_Start 0070  
            ??_I2C_Master_Write 0072                ___awdiv@dividend 0072                          ?_putch 0070  
                        _ANSELH 0189                          _RFDOUT 001A                          _OPINIT 0F01  
                        _SSPADD 0093                          _STBOUT 0BB8                          _STATUS 0003  
                        _SSPCON 0014                          _SSPBUF 0013                          __NOP@i 0070  
              __end_of_fcscheck 1000                       ??___awdiv 0074                          _dfcshi 006C  
                     ??___lldiv 0078                          _dfcslo 006B                          _getbit 0CE0  
            __size_of_Reset_EPS 0023                ___awdiv@quotient 0077                      _dPacketnum 0067  
                     ??_getdata 0076                     RFDOUT@i_407 003B                     RFDOUT@i_408 003F  
              __end_of_waitFlag 07D6      EEPROM_Write@EEPROM_address 0078         __end_of__initialization 07FC  
       EEPROM_Write@low_address 0073                     ?_Init_I2C_M 0020                     _Init_SERIAL 0ADB  
         __size_of_EEPROM_Write 005D                   __end_of_H_OUT 0C9A                   __end_of_OUTFQ 01DE  
                 __end_of_L_OUT 0CE0                   L_OUT@fmcwtxrx 0072                  __pcstackCOMMON 0070  
                  __pidataBANK0 0A97                   __end_of_putch 0A86                  _TXOBC_waddress 0C1A  
                       ??_H_OUT 0074                         ??_OUTFQ 0020                         ??_L_OUT 0074  
                       ??_putch 0070                    _EEPROM_Write 0D80                      __pbssBANK0 0065  
                    __pbssBANK1 00A0                      __pbssBANK3 0190               __end_of_Reset_EPS 0B34  
                     ?_Init_MPU 0070                         ?_RFDOUT 0079                         ?_OPINIT 0074  
                  ?_NM_waddress 0071                         ?_STBOUT 0072                         RFDOUT@i 003D  
                    __pmaintext 01DE                         ?_getbit 0070          __end_of_TXOBC_waddress 0C54  
   TXOBC_waddress@whigh_address 0071             __size_of_Init_I2C_M 0034                       OUTFQ@Nprg 007B  
                     ?_fcscheck 0070                         _SSPCON2 0091                         _SSPSTAT 0094  
                    __stringtab 0003                      ??_Init_MPU 0070                 __size_of_RFDOUT 00E1  
               __size_of_OPINIT 007D                 __size_of_STBOUT 002E                       ?_waitFlag 0070  
                       _dPacket 00A0                         ___awdiv 0D27                         ___lldiv 0DDD  
               __size_of_getbit 0047                     waitFlag@buf 003C                 ?_TXOBC_waddress 0071  
                       __ptext1 0C1A                         __ptext2 0B11                         __ptext3 0E9C  
                       __ptext4 034A                         __ptext5 0E3B                         __ptext6 0CE0  
                       __ptext7 0F7E                         __ptext8 0AB4                         __ptext9 0A7E  
                       _getdata 0E3B              _ReceivePacket_data 0E9C                       _T1CONbits 0010  
      __size_of_I2C_Master_Wait 0009        __size_of_I2C_Master_Stop 0007                      ??_fcscheck 0072  
           ?_ReceivePacket_data 0070                         getbit@i 0074                         clrloop0 0A87  
          end_of_initialization 07FC                    RFDOUT@Nref_b 0023                       _FMRX_Nref 005B  
                     _FMRX_Nprg 0059                       _FMTX_Nref 0063                       _FMTX_Nprg 0061  
                     _CWTX_Nref 005F                       _CWTX_Nprg 005D                     OUTFQ@Nprg_b 0023  
     __size_of_I2C_Master_Start 0007       __size_of_I2C_Master_Write 0008                 ___lldiv@divisor 0070  
               ___lldiv@counter 007D                      ??_waitFlag 0076            ??_ReceivePacket_data 007A  
                    fcscheck@bt 0074                  OPINIT@fmcwtxrx 0074                       _PORTAbits 0005  
                     _PORTCbits 0007                       _PORTDbits 0008                       _PORTEbits 0009  
                    getdata@buf 0026                    ??_Init_I2C_M 0024                    ?_Init_SERIAL 0070  
                __end_of_RFDOUT 00FB                  __end_of_OPINIT 0F7E                  __end_of_STBOUT 0BE6  
          __size_of_NM_waddress 0012                  __end_of_getbit 0D27      TXOBC_waddress@wlow_address 0072  
           start_initialization 07D6              __end_of_Init_I2C_M 0C1A                        ??_RFDOUT 0020  
                      ??_OPINIT 0076               ??_I2C_Master_Wait 0070               ??_I2C_Master_Stop 0070  
                      ??_STBOUT 0074               __size_of_Init_MPU 001D                       _Reset_EPS 0B11  
             getdata@dbitstatus 0024                      init_fetch0 0AA3                        ??_getbit 0072  
                   __pdataBANK0 0059                      RFDOUT@Nref 007B             __end_of_commandSize 000B  
      NM_waddress@whigh_address 0071                       ___latbits 0002                   __pcstackBANK0 0020  
                      FMRX@Nref 004D                        FMRX@Nprg 004F                        FMTX@Nref 004D  
                      FMTX@Nprg 004F                        FMRX@fmrx 0051                        FMTX@fmtx 0051  
                      CWTX@Nref 004D                        CWTX@Nprg 004F               __size_of_fcscheck 0082  
                 waitFlag@j_110 002C                   waitFlag@j_102 0024                   waitFlag@j_111 002E  
                 waitFlag@j_104 0026                   waitFlag@j_121 0038                   waitFlag@j_113 0030  
                 waitFlag@j_106 0028                   waitFlag@j_115 0032                   waitFlag@j_108 002A  
                 waitFlag@j_117 0034                   waitFlag@j_119 0036                        CWTX@cwtx 0051  
              _I2C_Master_Start 0A68                      ?_Reset_EPS 0070                _I2C_Master_Write 0A76  
              ??_TXOBC_waddress 0073         getdata@bufstore_counter 0020                        ?___awdiv 0070  
                      ?___lldiv 0070               __size_of_waitFlag 048C                       __pstrings 0003  
                      ?_getdata 0070                  __size_of_H_OUT 0046                  __size_of_OUTFQ 00E3  
                __size_of_L_OUT 0046                  __size_of_putch 0008                   H_OUT@fmcwtxrx 0072  
                     clear_ram0 0A86                        _PIE1bits 008C                      OUTFQ@i_397 0049  
                    OUTFQ@i_398 004B                       _rcv_state 0069            __size_of_Init_SERIAL 0019  
                      _PIR1bits 000C                      OUTFQ@count 0045                     _commandSize 0009  
                     fcscheck@i 0075                     __stringbase 0008                       main@dData 0058  
                      _Init_MPU 0AF4                     ??_Reset_EPS 0070                   fcscheck@i_133 0077  
   __size_of_ReceivePacket_data 0065                __size_of___awdiv 0059                __size_of___lldiv 005E  
            __end_of__stringtab 0009                      _EEPROMData 0190                __size_of_getdata 0061  
               _I2C_Master_Wait 0A8E                 _I2C_Master_Stop 0A6F                  RFDOUT@fmcwtxrx 0079  
                      _fcscheck 0F7E                        __ptext10 0ADB                        __ptext11 0AF4  
                      __ptext20 0A8E                        __ptext12 0BE6                        __ptext21 0B34  
                      __ptext13 0DDD                        __ptext22 001A                        __ptext14 0B8C  
                      __ptext23 00FB                        __ptext15 0B60                        __ptext24 0D27  
                      __ptext16 0D80                        __ptext25 0F01                        __ptext17 0A76  
                      __ptext26 0BB8                        __ptext18 0A6F                        __ptext27 0C9A  
                      __ptext19 0A68                        __ptext28 0C54                        __ptext29 0AC6  
             __CFG_BOR4V$BOR21V 0000                   ?_EEPROM_Write 0072                   __size_of_FMRX 002C  
                 __size_of_FMTX 002C                   __size_of_CWTX 002C                   __size_of__NOP 0015  
                 ??_NM_waddress 0073                       waitFlag@i 0020                       waitFlag@j 0022  
                 __size_of_main 016C                  STBOUT@fmcwtxrx 0072                        _waitFlag 034A  
      NM_waddress@NM_wad_header 0073                   OUTFQ@fmcwtxrx 0079        __end_of_I2C_Master_Start 0A6F  
                     putch@byte 0070        __end_of_I2C_Master_Write 0A7E                      _INTCONbits 000B  
                      init_ram0 0AA7                    fcscheck@byte 0079                  ??_EEPROM_Write 0075  
            waitFlag@flag_judge 003A                ___lldiv@dividend 0074                       stringcode 0003  
             main@NM_wad_header 0057             __end_of_NM_waddress 0AC6         __end_of_I2C_Master_Wait 0A97  
       __end_of_I2C_Master_Stop 0A76                ___lldiv@quotient 0079               I2C_Master_Write@d 0070  
           EEPROM_Write@Address 0079                        stringdir 0003                        stringtab 0003  
           ReceivePacket_data@i 003F         NM_waddress@wlow_address 0072            main@TXOBC_wad_header 0056  
